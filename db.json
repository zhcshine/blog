{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1563862916587},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1563862916587},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1563862916587},{"_id":"themes/icarus/_config.yml","hash":"bf770c2bcea6b8c785db83f970630a319d5add83","modified":1563864042757},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1563862916593},{"_id":"source/_drafts/Window常用软件，网站及其使用方法.md","hash":"e27b0ebc5dcdd6131860ea07c3255cc0686ab581","modified":1563861103850},{"_id":"source/_posts/Apache基础入门.md","hash":"049d3ce162afc0ef5c61d919560b2614f92e0ea4","modified":1563861103847},{"_id":"source/_posts/CSS兼容性汇总.md","hash":"e579b9652df425b8fa240e2a78b1abeba541aff5","modified":1563861103847},{"_id":"source/_posts/Centos安装s_h_a_d_o_w_s_o_c_k_s服务.md","hash":"151cabcbb37006d32ded67179962052111ce50d4","modified":1563861103847},{"_id":"source/_posts/Excel常用公式使用方法.md","hash":"6e1723012b7f922313514d31f5c6bd94fba83463","modified":1563861103847},{"_id":"source/_posts/Django基础入门.md","hash":"7a4b1e00cccee88f5b6fe875e94b305874206ab2","modified":1563861103847},{"_id":"source/_posts/Git基础入门.md","hash":"78079f09f856d8564ba62147d0d302a3e90248eb","modified":1563861103847},{"_id":"source/_posts/Centos7服务器基础配置.md","hash":"ff2faf4f385ebc1fbc4cf2a67d63b58d8aee6655","modified":1563861103847},{"_id":"source/_posts/Jetbrains使用配置.md","hash":"f95da5ad2579573496f334565a181dd57202ccd5","modified":1563861103847},{"_id":"source/_posts/MYSQL主从复制.md","hash":"36d572cddd955e063fb444717f9a33fabf11bc92","modified":1563861103847},{"_id":"source/_posts/Linux开发环境常用软件.md","hash":"e00ed674a16ddba9baa88b8970d6976b447867b5","modified":1563861103847},{"_id":"source/_posts/ORACLE Virtualbox使用.md","hash":"920d2bbdd1af339d91b99c7eb257cc483e119590","modified":1563861103847},{"_id":"source/_posts/MYSQL基础教程.md","hash":"cea9b9da59a8615fd18121f20a03bb4425a6fe67","modified":1563861103847},{"_id":"source/_posts/PHPUnit单元测试.md","hash":"8664f23ae44ee281e6223a20053ab549a1947b0e","modified":1563861103847},{"_id":"source/_posts/PHP将PDF转为jpg，png图片.md","hash":"0074290da2b04efccb4cd3616af75f9267e27bbb","modified":1563861103847},{"_id":"source/_posts/Python基础及内建函数学习.md","hash":"ec482b080e9f1e30ed5886a035a197cbecddf434","modified":1563861103847},{"_id":"source/_posts/Python将office word 转为html 并提取相关图片信息.md","hash":"96fbda71f6e36aafa64b23243d203ca93be875e3","modified":1563861103847},{"_id":"source/_posts/Redis基础.md","hash":"db0e6db4d2d9390fd0e99704a1ea7d4c86bcf997","modified":1563861103850},{"_id":"source/_posts/Javascript基础入门.md","hash":"ba093d9a9722ee4567b5cb14fbbfa31a7b3b9537","modified":1563861103847},{"_id":"source/_posts/Rsync同步web服务器.md","hash":"ba1a6650b065e04de561376ffcecc53441b65960","modified":1563861103847},{"_id":"source/_posts/PythonTkinter基础入门.md","hash":"48e1a4d8a4f133c5e463d587aeecc84c95eb24c1","modified":1563861103847},{"_id":"source/_posts/Sublime使用指南.md","hash":"fd76f87b5d7a176e18a8727f5e148ed4c4386516","modified":1563861103847},{"_id":"source/_posts/Selenium基础入门.md","hash":"b5b832abff6c4ca0071a75103a305359fcbe934a","modified":1563861103847},{"_id":"source/_posts/Ubuntu14.04服务器基础配置.md","hash":"596ad36dd38c0f27450884a52e305be093feb476","modified":1563861103847},{"_id":"source/_posts/WindowsServer服务器基础设置.md","hash":"52438bdb3fc31944e440da238f5b06912b5293ad","modified":1563861103847},{"_id":"source/_posts/ThinkPHP基础入门.md","hash":"d50cacb630ba8c9a1d21c3af338a002f3a679761","modified":1563861103847},{"_id":"source/_posts/Unittest单元测试.md","hash":"c32bd27dbeb9cb0c358236dc73ea8e69227b72a2","modified":1563861103847},{"_id":"source/_posts/Windows软件运行时错误429,ACTIVEX部件不能创建对象的解决方法.md","hash":"0b4b9e175600489b48bf87eb5e100f3204cb84b0","modified":1563864641037},{"_id":"source/_posts/centos7.2使用rabbitMQ.md","hash":"11e77b05e20b5a0b33f743cf36be8e0513cd5f67","modified":1563861103850},{"_id":"source/_posts/centos7.2安装使用openResty.md","hash":"6da727cbbd4ecfec94de930633ab12f0a0366816","modified":1563861103850},{"_id":"source/_posts/Wireshark抓包基础.md","hash":"60ffc5a93a1604dd4e13761adeeb211a31d04de0","modified":1563861103847},{"_id":"source/_posts/centos7.2安装使用sentry.md","hash":"85c91bbb682e1e22705c96ee61cef9c933c7cad3","modified":1563861103850},{"_id":"source/_posts/Window常用软件及其使用方法.md","hash":"f2d9e5b6ad6933280d4dcc3b0c6b58e0d8a83395","modified":1563861103847},{"_id":"source/_posts/centos7.2安装及使用docker.md","hash":"30b95071128e47c28cf050214540847edb79b92b","modified":1563861103850},{"_id":"source/_posts/centos7创建nagios监控集群服务.md","hash":"4ac9e04c45e81320694072e2388e0dc70c985975","modified":1563861103847},{"_id":"source/_posts/java基础.md","hash":"074cb54da5c7f07514b0b32043f4ab13178ff99b","modified":1563861103847},{"_id":"source/_posts/centos7配置keepalived实现高可用集群.md","hash":"15ee758e3f11d6ab548c99f6f1b3c6d29a6de0af","modified":1563861103847},{"_id":"source/_posts/linux命令记录.md","hash":"a2b209c11e32a302703119e949fef113f60b068c","modified":1563861103847},{"_id":"source/_posts/ubuntu本地配置SSL.md","hash":"02d2fb522db1aa5f210d555da19fc4a6675edc95","modified":1563861103847},{"_id":"source/_posts/postgresql使用.md","hash":"d14b2a1c9310645da8b56ee3e0ac8bcbd4ee0c22","modified":1563861103850},{"_id":"source/_posts/vuejs.md","hash":"2cd7a3110cabb2a4f5d8231f8089827a955eb946","modified":1563861103850},{"_id":"source/_posts/ubuntu配置Gitlab服务.md","hash":"1ef4164c8f43e9f1128588b485479cf08fd130ae","modified":1563861103847},{"_id":"source/_posts/zabbix安装及使用.md","hash":"8adebd3c3ed3e54b097639baac0ebdf35a0d0d3b","modified":1563861103850},{"_id":"source/_posts/关于linux环境nginx-php-fpm权限问题.md","hash":"c59c11817101e2f0870554d31436c98d9782110c","modified":1563861103850},{"_id":"source/_posts/ubuntu16.04安装及使用docker(一).md","hash":"6695f855b509a1fa7af91c31a575425f46c7f363","modified":1563861103847},{"_id":"source/_posts/利用Python从EXCEL导出数据并批量替换WORD文档内容.md","hash":"8f6f4178ae375af2661a9120bde036c8e153c7e7","modified":1563861103847},{"_id":"source/_posts/Wordpress插件开发基础入门.md","hash":"5d8125e73e02e9b1ded9dd9aef1be99e28bf133f","modified":1563861103847},{"_id":"source/_posts/在bash显示git分支信息.md","hash":"8cb0bddc60a61820874e46c1ac30a96f9f2601d8","modified":1563861103847},{"_id":"source/_posts/局域网部分电脑不能连接网络,局域网共享文件夹,打印机等情况.md","hash":"71305748d1a53a56c0f211ee335dc9295fe6d11d","modified":1563864641023},{"_id":"source/_posts/微信本地开发及线上环境搭建.md","hash":"0cb1cfbb6cba4f130204fec969bff8daa7720d54","modified":1563861103847},{"_id":"source/_posts/最新在linux-ubuntu中安装qq的办法.md","hash":"4f43e7bd8696a2b474bee2ea1462088ced55199b","modified":1563861103847},{"_id":"source/_posts/硬链接软链接方式.md","hash":"78574c882cb4e2b11af8296721ab547cbb79e5b1","modified":1563861103847},{"_id":"source/adadd/index.md","hash":"9c57d061635a0bb25a2c8750a06a7a347669d012","modified":1563861103850},{"_id":"source/_posts/ubuntu16.04安装及使用SVN.md","hash":"93e407b7ee654897f7ff14b5500bd1e9671c7b41","modified":1563861103850},{"_id":"source/sample-page/index.md","hash":"508f79919f59d5856fba8fd090289beef7cee8b6","modified":1563861103850},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1563862916580},{"_id":"themes/icarus/.git/config","hash":"d29e0b80e29cd924161a73c63bac11af41d2631c","modified":1563862916580},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1563862517587},{"_id":"themes/icarus/.git/index","hash":"4b3ac7486220162f4c2b7fd2105512a6e4e83d8c","modified":1563863166787},{"_id":"source/_posts/python爬虫scrapy框架简介.md","hash":"cf84af2f3070c0ca8967c705cfd1d23a5570f38a","modified":1563861103850},{"_id":"themes/icarus/.git/packed-refs","hash":"43f0158e6993a893bb1717d2582263439ae70527","modified":1563862916577},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1563862916587},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1563862916590},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1563862916590},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1563862916590},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1563862916590},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1563862916590},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1563862916590},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1563862916590},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1563862916590},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1563862916590},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1563862916590},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1563862916590},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1563862916590},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1563862916590},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1563862916590},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1563862916590},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1563862916593},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1563862916593},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1563862916593},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1563862916593},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1563862916593},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1563862916593},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1563862916593},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1563862517587},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1563862517587},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1563862517587},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1563862517583},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1563862517583},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1563862517583},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1563862517583},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1563862517583},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1563862517587},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1563862517587},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1563862517583},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1563862517587},{"_id":"themes/icarus/.git/logs/HEAD","hash":"3fa9944ed1af4878c38e5fed3cec56b977552804","modified":1563862916580},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1563862916587},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1563862916587},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1563862916587},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1563862916587},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1563862916590},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1563862916587},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1563862916590},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1563862916590},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1563862916590},{"_id":"themes/icarus/includes/helpers/site.js","hash":"35dd41260dce178a171f6c360fa6d3840bfb1507","modified":1563862916590},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1563862916587},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1563862916587},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1563862916590},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1563862916590},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1563862916590},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1563862916590},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1563862916590},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1563862916590},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1563862916590},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1563862916590},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1563862916587},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1563862916590},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"28863042ad8fcf9ecb86d5288ecd3ce5250a984d","modified":1563862916590},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1563862916590},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1563862916590},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1563862916590},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1563862916590},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1563862916590},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1563862916590},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1563862916590},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1563862916593},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1563862916593},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1563862916593},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1563862916593},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1563862916590},{"_id":"themes/icarus/layout/common/head.ejs","hash":"6bedbb14d9e79b88b0010436e506d763709efa26","modified":1563862916593},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"5082ea45df0f79f955143177287d92bcf3832fcf","modified":1563862916593},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1563862916593},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"dc91946bfe2c25507927cffc7f97fb445e839462","modified":1563862916593},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1563862916593},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1563862916593},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1563862916590},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1563862916590},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1563862916590},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"8a9172d7c9a8f050dc978a06e0f0998ba2e9c61a","modified":1563862916590},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"886026a36495f3c57cdef46bc9e9a94a0e390eb0","modified":1563862916590},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1563862916590},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1563862916590},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1563862916590},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1563862916593},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1563862916593},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1563862916593},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1563862916593},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1563862916593},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1563862916593},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1563862916593},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1563862916593},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1563862916593},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1563862916593},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1563862916593},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1563862916593},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"ef66b06afb0c350901c7d55e091d1b2718540706","modified":1563862916593},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1563862916593},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1563862916593},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1563862916593},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1563862916593},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1563862916593},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1563862916593},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1563862916593},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1563862916593},{"_id":"themes/icarus/source/css/style.styl","hash":"be86ca71f128feea623189349355543b64b93c50","modified":1563862916593},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1563862916593},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1563862916593},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1563862916593},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1563862916597},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1563862916597},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1563862916597},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1563862916597},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1563862916597},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1563862916597},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1563862916597},{"_id":"themes/icarus/source/js/main.js","hash":"7ff7b7fcde5f6d17e0bb5a2a6baf3633c6420c0c","modified":1563862916597},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1563862916587},{"_id":"themes/icarus/.git/refs/heads/master","hash":"8cd122e743e49c98730fb72104a380eb221e3d0c","modified":1563862916580},{"_id":"themes/icarus/.git/objects/pack/pack-5765b4dd064fd65d3e4729225d129e89a4341bfc.idx","hash":"795c4558825f9fd675cd3a5b355797666e683756","modified":1563862916550},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"3fa9944ed1af4878c38e5fed3cec56b977552804","modified":1563862916580},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1563862916580},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"3fa9944ed1af4878c38e5fed3cec56b977552804","modified":1563862916580},{"_id":"themes/icarus/.git/objects/pack/pack-5765b4dd064fd65d3e4729225d129e89a4341bfc.pack","hash":"ba125cec542cfb1f4f8b9f245773e4a8f6663d07","modified":1563862916547}],"Category":[{"name":"前端","_id":"cjyfgqwrj0004h3a4rh5m3tj9"},{"name":"运维","_id":"cjyfgqwrm0008h3a4y0atr5l7"},{"name":"办公","_id":"cjyfgqwrx000oh3a497jks9z7"},{"name":"后端","_id":"cjyfgqwrz000wh3a41scmpsjn"},{"name":"运维","parent":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqws5001kh3a4zpr0qttv"},{"name":"运维","parent":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqws9001th3a482a15rgj"},{"name":"后端","parent":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwsq003gh3a4049sno4b"},{"name":"运维","parent":"cjyfgqwsq003gh3a4049sno4b","_id":"cjyfgqwsr003oh3a450hjh782"}],"Data":[],"Page":[{"title":"adadd","url":"190.html","id":190,"comments":0,"date":"2017-10-04T13:04:56.000Z","_content":"","source":"adadd/index.md","raw":"---\ntitle: adadd\nurl: 190.html\nid: 190\ncomments: false\ndate: 2017-10-04 21:04:56\n---\n","updated":"2019-07-23T05:51:43.850Z","path":"adadd/index.html","layout":"page","_id":"cjyfgqwrg0001h3a4tywhrvwo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"示例页面","url":"2.html","id":2,"comments":0,"date":"2016-11-07T09:02:18.000Z","_content":"\n这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：\n\n> 我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。\n\n……或下面这样：\n\n> XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。\n\n作为一个新的WordPress用户，您可以前往[您的仪表盘](http://www.zhuohc.com/wp-admin/)删除这个页面，并建立属于您的全新内容。祝您使用愉快！","source":"sample-page/index.md","raw":"---\ntitle: 示例页面\nurl: 2.html\nid: 2\ncomments: false\ndate: 2016-11-07 17:02:18\n---\n\n这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：\n\n> 我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。\n\n……或下面这样：\n\n> XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。\n\n作为一个新的WordPress用户，您可以前往[您的仪表盘](http://www.zhuohc.com/wp-admin/)删除这个页面，并建立属于您的全新内容。祝您使用愉快！","updated":"2019-07-23T05:51:43.850Z","path":"sample-page/index.html","layout":"page","_id":"cjyfgqwri0003h3a48fgruagb","content":"<p>这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：</p>\n<blockquote>\n<p>我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。</p>\n</blockquote>\n<p>……或下面这样：</p>\n<blockquote>\n<p>XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。</p>\n</blockquote>\n<p>作为一个新的WordPress用户，您可以前往<a href=\"http://www.zhuohc.com/wp-admin/\">您的仪表盘</a>删除这个页面，并建立属于您的全新内容。祝您使用愉快！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：</p>\n<blockquote>\n<p>我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。</p>\n</blockquote>\n<p>……或下面这样：</p>\n<blockquote>\n<p>XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。</p>\n</blockquote>\n<p>作为一个新的WordPress用户，您可以前往<a href=\"http://www.zhuohc.com/wp-admin/\">您的仪表盘</a>删除这个页面，并建立属于您的全新内容。祝您使用愉快！</p>\n"}],"Post":[{"title":"Window常用软件，网站及其使用方法","url":"20.html","id":"20","comments":0,"_content":"","source":"_drafts/Window常用软件，网站及其使用方法.md","raw":"---\ntitle: Window常用软件，网站及其使用方法\nurl: 20.html\nid: 20\ncomments: false\ncategories:\n  - 前端\ntags:\n---\n","slug":"Window常用软件，网站及其使用方法","published":0,"date":"2019-07-23T05:51:43.850Z","updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrd0000h3a4ozmse8bi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Apache基础入门","url":"50.html","id":"50","comments":0,"date":"2016-11-09T06:46:39.000Z","_content":"\n### 查看apache加载的模块\n\n    apachectl -t -D DUMP_MODULES  \n    \n\n### 禁用和启用模块\n\n    sudo a2dismod python\n    sudo a2enmod python\n    \n\n### 查看版本号\n\n    apachectl -v\n    \n\n### 赋予权限\n\n2.2.x以下版本\n\n    Order deny,allow\n    Allow from all\n    \n\n2.4.x以上版本\n\n    Require all granted","source":"_posts/Apache基础入门.md","raw":"---\ntitle: Apache基础入门\nurl: 50.html\nid: 50\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 14:46:39\ntags:\n---\n\n### 查看apache加载的模块\n\n    apachectl -t -D DUMP_MODULES  \n    \n\n### 禁用和启用模块\n\n    sudo a2dismod python\n    sudo a2enmod python\n    \n\n### 查看版本号\n\n    apachectl -v\n    \n\n### 赋予权限\n\n2.2.x以下版本\n\n    Order deny,allow\n    Allow from all\n    \n\n2.4.x以上版本\n\n    Require all granted","slug":"Apache基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrh0002h3a4eltvpmaj","content":"<h3 id=\"查看apache加载的模块\"><a href=\"#查看apache加载的模块\" class=\"headerlink\" title=\"查看apache加载的模块\"></a>查看apache加载的模块</h3><pre><code>apachectl -t -D DUMP_MODULES  </code></pre><h3 id=\"禁用和启用模块\"><a href=\"#禁用和启用模块\" class=\"headerlink\" title=\"禁用和启用模块\"></a>禁用和启用模块</h3><pre><code>sudo a2dismod python\nsudo a2enmod python</code></pre><h3 id=\"查看版本号\"><a href=\"#查看版本号\" class=\"headerlink\" title=\"查看版本号\"></a>查看版本号</h3><pre><code>apachectl -v</code></pre><h3 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h3><p>2.2.x以下版本</p>\n<pre><code>Order deny,allow\nAllow from all</code></pre><p>2.4.x以上版本</p>\n<pre><code>Require all granted</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查看apache加载的模块\"><a href=\"#查看apache加载的模块\" class=\"headerlink\" title=\"查看apache加载的模块\"></a>查看apache加载的模块</h3><pre><code>apachectl -t -D DUMP_MODULES  </code></pre><h3 id=\"禁用和启用模块\"><a href=\"#禁用和启用模块\" class=\"headerlink\" title=\"禁用和启用模块\"></a>禁用和启用模块</h3><pre><code>sudo a2dismod python\nsudo a2enmod python</code></pre><h3 id=\"查看版本号\"><a href=\"#查看版本号\" class=\"headerlink\" title=\"查看版本号\"></a>查看版本号</h3><pre><code>apachectl -v</code></pre><h3 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h3><p>2.2.x以下版本</p>\n<pre><code>Order deny,allow\nAllow from all</code></pre><p>2.4.x以上版本</p>\n<pre><code>Require all granted</code></pre>"},{"title":"CSS兼容性汇总","url":"82.html","id":"82","comments":0,"date":"2016-11-10T02:07:27.000Z","_content":"\n### ie6,ie7中overflow:hidden失效问题\n\n在父元素中使用position:relative;可以hack iframe自适应高度\n\n### 不建议使用iframe\n\n首先在css里面设置一个min-height\n\n    min-height: 100px;\n    \n\n主页面嵌入如下js代码\n\n    <script>\n        function setIframeHeight(iframe) {\n            if (iframe) {\n                var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;\n                if (iframeWin.document.body) {\n                    iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;\n                }\n            }\n        };\n        window.onload = function () {\n            setIframeHeight(document.getElementById('external-frame'));\n        };\n    </script>\n    \n\niframe标签里\n\n    <iframe src=\"backtop.html\" frameborder=\"0\" scrolling=\"no\" id=\"external-frame\" onload=\"setIframeHeight(this)\"></iframe>\n    \n\ncss代码\n\n      ul {\n        display: block;\n        width: 100%;\n        height: 100%;\n        text-indent: 0;\n        padding: 0;\n        position: absolute;\n        top: -100%;\n        left: 0;  \n        }\n    \n\njs代码\n\n    var defaultTopPosition = $('#indexCellcate').css('top');\n    \n\n浏览器差异\n\n    ie7，ie8 返回-205.422px  \n    现代chrome，firefox -205.422px  \n    但是ie9及以上会返回0px \n    \n\n如果将css中的top设置为-205.422px，则无差异。  \n但响应式布局要求百分百设置,我的解决思路:  \n获取对应元素的高度来替代top值\n\n    var defaultTopPosition = cellcate.children('li').height();\n    defaultTopPosition = -parseInt(defaultTopPosition);","source":"_posts/CSS兼容性汇总.md","raw":"---\ntitle: CSS兼容性汇总\nurl: 82.html\nid: 82\ncomments: false\ncategories:\n  - 前端\ndate: 2016-11-10 10:07:27\ntags:\n---\n\n### ie6,ie7中overflow:hidden失效问题\n\n在父元素中使用position:relative;可以hack iframe自适应高度\n\n### 不建议使用iframe\n\n首先在css里面设置一个min-height\n\n    min-height: 100px;\n    \n\n主页面嵌入如下js代码\n\n    <script>\n        function setIframeHeight(iframe) {\n            if (iframe) {\n                var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;\n                if (iframeWin.document.body) {\n                    iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;\n                }\n            }\n        };\n        window.onload = function () {\n            setIframeHeight(document.getElementById('external-frame'));\n        };\n    </script>\n    \n\niframe标签里\n\n    <iframe src=\"backtop.html\" frameborder=\"0\" scrolling=\"no\" id=\"external-frame\" onload=\"setIframeHeight(this)\"></iframe>\n    \n\ncss代码\n\n      ul {\n        display: block;\n        width: 100%;\n        height: 100%;\n        text-indent: 0;\n        padding: 0;\n        position: absolute;\n        top: -100%;\n        left: 0;  \n        }\n    \n\njs代码\n\n    var defaultTopPosition = $('#indexCellcate').css('top');\n    \n\n浏览器差异\n\n    ie7，ie8 返回-205.422px  \n    现代chrome，firefox -205.422px  \n    但是ie9及以上会返回0px \n    \n\n如果将css中的top设置为-205.422px，则无差异。  \n但响应式布局要求百分百设置,我的解决思路:  \n获取对应元素的高度来替代top值\n\n    var defaultTopPosition = cellcate.children('li').height();\n    defaultTopPosition = -parseInt(defaultTopPosition);","slug":"CSS兼容性汇总","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrk0005h3a4piwad3gl","content":"<h3 id=\"ie6-ie7中overflow-hidden失效问题\"><a href=\"#ie6-ie7中overflow-hidden失效问题\" class=\"headerlink\" title=\"ie6,ie7中overflow:hidden失效问题\"></a>ie6,ie7中overflow:hidden失效问题</h3><p>在父元素中使用position:relative;可以hack iframe自适应高度</p>\n<h3 id=\"不建议使用iframe\"><a href=\"#不建议使用iframe\" class=\"headerlink\" title=\"不建议使用iframe\"></a>不建议使用iframe</h3><p>首先在css里面设置一个min-height</p>\n<pre><code>min-height: 100px;</code></pre><p>主页面嵌入如下js代码</p>\n<pre><code>&lt;script&gt;\n    function setIframeHeight(iframe) {\n        if (iframe) {\n            var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;\n            if (iframeWin.document.body) {\n                iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;\n            }\n        }\n    };\n    window.onload = function () {\n        setIframeHeight(document.getElementById(&apos;external-frame&apos;));\n    };\n&lt;/script&gt;</code></pre><p>iframe标签里</p>\n<pre><code>&lt;iframe src=&quot;backtop.html&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; id=&quot;external-frame&quot; onload=&quot;setIframeHeight(this)&quot;&gt;&lt;/iframe&gt;</code></pre><p>css代码</p>\n<pre><code>ul {\n  display: block;\n  width: 100%;\n  height: 100%;\n  text-indent: 0;\n  padding: 0;\n  position: absolute;\n  top: -100%;\n  left: 0;  \n  }</code></pre><p>js代码</p>\n<pre><code>var defaultTopPosition = $(&apos;#indexCellcate&apos;).css(&apos;top&apos;);</code></pre><p>浏览器差异</p>\n<pre><code>ie7，ie8 返回-205.422px  \n现代chrome，firefox -205.422px  \n但是ie9及以上会返回0px </code></pre><p>如果将css中的top设置为-205.422px，则无差异。<br>但响应式布局要求百分百设置,我的解决思路:<br>获取对应元素的高度来替代top值</p>\n<pre><code>var defaultTopPosition = cellcate.children(&apos;li&apos;).height();\ndefaultTopPosition = -parseInt(defaultTopPosition);</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ie6-ie7中overflow-hidden失效问题\"><a href=\"#ie6-ie7中overflow-hidden失效问题\" class=\"headerlink\" title=\"ie6,ie7中overflow:hidden失效问题\"></a>ie6,ie7中overflow:hidden失效问题</h3><p>在父元素中使用position:relative;可以hack iframe自适应高度</p>\n<h3 id=\"不建议使用iframe\"><a href=\"#不建议使用iframe\" class=\"headerlink\" title=\"不建议使用iframe\"></a>不建议使用iframe</h3><p>首先在css里面设置一个min-height</p>\n<pre><code>min-height: 100px;</code></pre><p>主页面嵌入如下js代码</p>\n<pre><code>&lt;script&gt;\n    function setIframeHeight(iframe) {\n        if (iframe) {\n            var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;\n            if (iframeWin.document.body) {\n                iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;\n            }\n        }\n    };\n    window.onload = function () {\n        setIframeHeight(document.getElementById(&apos;external-frame&apos;));\n    };\n&lt;/script&gt;</code></pre><p>iframe标签里</p>\n<pre><code>&lt;iframe src=&quot;backtop.html&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; id=&quot;external-frame&quot; onload=&quot;setIframeHeight(this)&quot;&gt;&lt;/iframe&gt;</code></pre><p>css代码</p>\n<pre><code>ul {\n  display: block;\n  width: 100%;\n  height: 100%;\n  text-indent: 0;\n  padding: 0;\n  position: absolute;\n  top: -100%;\n  left: 0;  \n  }</code></pre><p>js代码</p>\n<pre><code>var defaultTopPosition = $(&apos;#indexCellcate&apos;).css(&apos;top&apos;);</code></pre><p>浏览器差异</p>\n<pre><code>ie7，ie8 返回-205.422px  \n现代chrome，firefox -205.422px  \n但是ie9及以上会返回0px </code></pre><p>如果将css中的top设置为-205.422px，则无差异。<br>但响应式布局要求百分百设置,我的解决思路:<br>获取对应元素的高度来替代top值</p>\n<pre><code>var defaultTopPosition = cellcate.children(&apos;li&apos;).height();\ndefaultTopPosition = -parseInt(defaultTopPosition);</code></pre>"},{"title":"Centos安装s_h_a_d_o_w_s_o_c_k_s服务","url":"31.html","id":"31","comments":0,"date":"2016-11-09T02:22:52.000Z","_content":"\n### Python版本\n\n    python –version\n    \n\nCentOS6.5默认安装的Python版本是2.6.6，返回值为：Python 2.6.6\n\n### 安装setuptools\n\n    yum install -y python-setuptools\n    \n\n安装完毕后，easy_install命令就可以使用了。\n\n### 安装pip\n\neasy\\_install pip 通过easy\\_install安装pip是最为简单的方法。pip默认安装到/usr/bin目录下。\n\n### 安装s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s\n\n    pip install shadowsocks\n    \n\n### s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s的配置和使用\n\n至于s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s可以拿来做什么，这里就毋须赘述了。直接开始吧。\n\n### 创建s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_ss的配置文件：\n\nCentOS下通过vim创建该配置，运行命令： vi /etc/shadowsocks.json\n\n    {\n    \"server\":\"your_server_ip\",\n    \"server_port\":8989,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"yourpassword\",\n    \"timeout\":600,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n    }\n    \n\n各字段的含义： server：服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址  \nserver_port：监听的服务器端口  \nlocal_address：本地监听的 IP 地址  \nlocal_port：本地端端口  \npassword：用来加密的密码  \ntimeout：超时时间（秒）  \nmethod：加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb” fast\\_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast\\_open 以降低延迟。开启方法： echo 3 > /proc/sys/net/ipv4/tcp_fastopen  \n开启之后，将 fast_open 的配置设置为 true 即可。  \nworks：works数量，默认为 1\n\n### 安装M2Crypto\n\n默认加密方法 table 速度很快，但很不安全。推荐使用 “aes-256-cfb” 或者 “bf-cfb”。请不要使用 “rc4″，它不安全。如果选择 “table” 之外的加密，需要安装 M2Crypto。 先安装依赖包：\n\n    yum install -y openssl-devel gcc swig python-devel autoconf libtool\n    \n\n### 安装setuptools\n\n    wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\n    python ez_setup.py install\n    \n\n再通过pip安装M2Crypto：\n\n    pip install M2Crypto\n    \n\n### 安装 gevent\n\n安装 gevent可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。\n\n### 安装libevent\n\n    yum install -y libevent\n    \n\n### greenlet：\n\n    pip install greenlet\n    \n\n###安装gevent：\n\n    pip install gevent\n    \n\n### 命令行参数（服务器端启动命令）\n\n    ssserver -c /etc/shadowsocks.json\n    \n\n如果想在后台一直运行Shadowsocks，启动命令如下：\n\n    nohup ssserver -c /etc/shadowsocks.json > /dev/null 2>&1 &\n    \n\n备注：关于nohup，是可以让程序在后台运行的命令。 同时可以用命令行参数覆盖 /etc/shadowsocks.json 里的设置：\n\n    sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法\n    ssserver -p 服务器端口 -k 密码 -m 加密方法\n    \n\n备注：sslocal是客户端程序；ssserver是服务端程序。\n\n### 防火墙设置（如有）\n\n编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。  \n新增一条防火墙规则：\n\n    iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT\n    \n\n先要保存下:\n\n    service iptables save\n    \n\n重启防火墙iptables：\n\n    service iptables restart\n    \n\n至此，服务器端的 Shadowsocks 安装和配置完毕。 配置多个用户\n\n    {\n    \"timeout\": 600,\n    \"method\": \"aes-256-cfb\",\n    \"port_password\":\n    {\n    \"40001\": \"password1\",\n    \"40002\": \"password2\",\n    \"40003\": \"password3\"\n    },\n    \"_comment\":\n    {\n    \"40001\": \"xiaoming\",\n    \"40002\": \"lilei\",\n    \"40003\": \"mike\"\n    }\n    }","source":"_posts/Centos安装s_h_a_d_o_w_s_o_c_k_s服务.md","raw":"---\ntitle: Centos安装s_h_a_d_o_w_s_o_c_k_s服务\ntags:\n  - linux\nurl: 31.html\nid: 31\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 10:22:52\n---\n\n### Python版本\n\n    python –version\n    \n\nCentOS6.5默认安装的Python版本是2.6.6，返回值为：Python 2.6.6\n\n### 安装setuptools\n\n    yum install -y python-setuptools\n    \n\n安装完毕后，easy_install命令就可以使用了。\n\n### 安装pip\n\neasy\\_install pip 通过easy\\_install安装pip是最为简单的方法。pip默认安装到/usr/bin目录下。\n\n### 安装s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s\n\n    pip install shadowsocks\n    \n\n### s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s的配置和使用\n\n至于s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s可以拿来做什么，这里就毋须赘述了。直接开始吧。\n\n### 创建s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_ss的配置文件：\n\nCentOS下通过vim创建该配置，运行命令： vi /etc/shadowsocks.json\n\n    {\n    \"server\":\"your_server_ip\",\n    \"server_port\":8989,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"yourpassword\",\n    \"timeout\":600,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n    }\n    \n\n各字段的含义： server：服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址  \nserver_port：监听的服务器端口  \nlocal_address：本地监听的 IP 地址  \nlocal_port：本地端端口  \npassword：用来加密的密码  \ntimeout：超时时间（秒）  \nmethod：加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb” fast\\_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast\\_open 以降低延迟。开启方法： echo 3 > /proc/sys/net/ipv4/tcp_fastopen  \n开启之后，将 fast_open 的配置设置为 true 即可。  \nworks：works数量，默认为 1\n\n### 安装M2Crypto\n\n默认加密方法 table 速度很快，但很不安全。推荐使用 “aes-256-cfb” 或者 “bf-cfb”。请不要使用 “rc4″，它不安全。如果选择 “table” 之外的加密，需要安装 M2Crypto。 先安装依赖包：\n\n    yum install -y openssl-devel gcc swig python-devel autoconf libtool\n    \n\n### 安装setuptools\n\n    wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\n    python ez_setup.py install\n    \n\n再通过pip安装M2Crypto：\n\n    pip install M2Crypto\n    \n\n### 安装 gevent\n\n安装 gevent可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。\n\n### 安装libevent\n\n    yum install -y libevent\n    \n\n### greenlet：\n\n    pip install greenlet\n    \n\n###安装gevent：\n\n    pip install gevent\n    \n\n### 命令行参数（服务器端启动命令）\n\n    ssserver -c /etc/shadowsocks.json\n    \n\n如果想在后台一直运行Shadowsocks，启动命令如下：\n\n    nohup ssserver -c /etc/shadowsocks.json > /dev/null 2>&1 &\n    \n\n备注：关于nohup，是可以让程序在后台运行的命令。 同时可以用命令行参数覆盖 /etc/shadowsocks.json 里的设置：\n\n    sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法\n    ssserver -p 服务器端口 -k 密码 -m 加密方法\n    \n\n备注：sslocal是客户端程序；ssserver是服务端程序。\n\n### 防火墙设置（如有）\n\n编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。  \n新增一条防火墙规则：\n\n    iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT\n    \n\n先要保存下:\n\n    service iptables save\n    \n\n重启防火墙iptables：\n\n    service iptables restart\n    \n\n至此，服务器端的 Shadowsocks 安装和配置完毕。 配置多个用户\n\n    {\n    \"timeout\": 600,\n    \"method\": \"aes-256-cfb\",\n    \"port_password\":\n    {\n    \"40001\": \"password1\",\n    \"40002\": \"password2\",\n    \"40003\": \"password3\"\n    },\n    \"_comment\":\n    {\n    \"40001\": \"xiaoming\",\n    \"40002\": \"lilei\",\n    \"40003\": \"mike\"\n    }\n    }","slug":"Centos安装s_h_a_d_o_w_s_o_c_k_s服务","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrk0006h3a4did7whlz","content":"<h3 id=\"Python版本\"><a href=\"#Python版本\" class=\"headerlink\" title=\"Python版本\"></a>Python版本</h3><pre><code>python –version</code></pre><p>CentOS6.5默认安装的Python版本是2.6.6，返回值为：Python 2.6.6</p>\n<h3 id=\"安装setuptools\"><a href=\"#安装setuptools\" class=\"headerlink\" title=\"安装setuptools\"></a>安装setuptools</h3><pre><code>yum install -y python-setuptools</code></pre><p>安装完毕后，easy_install命令就可以使用了。</p>\n<h3 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h3><p>easy_install pip 通过easy_install安装pip是最为简单的方法。pip默认安装到/usr/bin目录下。</p>\n<h3 id=\"安装s-h-a-d-o-w-s-o-c-k-s\"><a href=\"#安装s-h-a-d-o-w-s-o-c-k-s\" class=\"headerlink\" title=\"安装s_h_a_d_o_w_s_o_c_k_s\"></a>安装s_h_a_d_o_w_s_o_c_k_s</h3><pre><code>pip install shadowsocks</code></pre><h3 id=\"s-h-a-d-o-w-s-o-c-k-s的配置和使用\"><a href=\"#s-h-a-d-o-w-s-o-c-k-s的配置和使用\" class=\"headerlink\" title=\"s_h_a_d_o_w_s_o_c_k_s的配置和使用\"></a>s_h_a_d_o_w_s_o_c_k_s的配置和使用</h3><p>至于s_h_a_d_o_w_s_o_c_k_s可以拿来做什么，这里就毋须赘述了。直接开始吧。</p>\n<h3 id=\"创建s-h-a-d-o-w-s-o-c-k-ss的配置文件：\"><a href=\"#创建s-h-a-d-o-w-s-o-c-k-ss的配置文件：\" class=\"headerlink\" title=\"创建s_h_a_d_o_w_s_o_c_k_ss的配置文件：\"></a>创建s_h_a_d_o_w_s_o_c_k_ss的配置文件：</h3><p>CentOS下通过vim创建该配置，运行命令： vi /etc/shadowsocks.json</p>\n<pre><code>{\n&quot;server&quot;:&quot;your_server_ip&quot;,\n&quot;server_port&quot;:8989,\n&quot;local_address&quot;: &quot;127.0.0.1&quot;,\n&quot;local_port&quot;:1080,\n&quot;password&quot;:&quot;yourpassword&quot;,\n&quot;timeout&quot;:600,\n&quot;method&quot;:&quot;aes-256-cfb&quot;,\n&quot;fast_open&quot;: false,\n&quot;workers&quot;: 1\n}</code></pre><p>各字段的含义： server：服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址<br>server_port：监听的服务器端口<br>local_address：本地监听的 IP 地址<br>local_port：本地端端口<br>password：用来加密的密码<br>timeout：超时时间（秒）<br>method：加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb” fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法： echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen<br>开启之后，将 fast_open 的配置设置为 true 即可。<br>works：works数量，默认为 1</p>\n<h3 id=\"安装M2Crypto\"><a href=\"#安装M2Crypto\" class=\"headerlink\" title=\"安装M2Crypto\"></a>安装M2Crypto</h3><p>默认加密方法 table 速度很快，但很不安全。推荐使用 “aes-256-cfb” 或者 “bf-cfb”。请不要使用 “rc4″，它不安全。如果选择 “table” 之外的加密，需要安装 M2Crypto。 先安装依赖包：</p>\n<pre><code>yum install -y openssl-devel gcc swig python-devel autoconf libtool</code></pre><h3 id=\"安装setuptools-1\"><a href=\"#安装setuptools-1\" class=\"headerlink\" title=\"安装setuptools\"></a>安装setuptools</h3><pre><code>wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\npython ez_setup.py install</code></pre><p>再通过pip安装M2Crypto：</p>\n<pre><code>pip install M2Crypto</code></pre><h3 id=\"安装-gevent\"><a href=\"#安装-gevent\" class=\"headerlink\" title=\"安装 gevent\"></a>安装 gevent</h3><p>安装 gevent可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。</p>\n<h3 id=\"安装libevent\"><a href=\"#安装libevent\" class=\"headerlink\" title=\"安装libevent\"></a>安装libevent</h3><pre><code>yum install -y libevent</code></pre><h3 id=\"greenlet：\"><a href=\"#greenlet：\" class=\"headerlink\" title=\"greenlet：\"></a>greenlet：</h3><pre><code>pip install greenlet</code></pre><p>###安装gevent：</p>\n<pre><code>pip install gevent</code></pre><h3 id=\"命令行参数（服务器端启动命令）\"><a href=\"#命令行参数（服务器端启动命令）\" class=\"headerlink\" title=\"命令行参数（服务器端启动命令）\"></a>命令行参数（服务器端启动命令）</h3><pre><code>ssserver -c /etc/shadowsocks.json</code></pre><p>如果想在后台一直运行Shadowsocks，启动命令如下：</p>\n<pre><code>nohup ssserver -c /etc/shadowsocks.json &gt; /dev/null 2&gt;&amp;1 &amp;</code></pre><p>备注：关于nohup，是可以让程序在后台运行的命令。 同时可以用命令行参数覆盖 /etc/shadowsocks.json 里的设置：</p>\n<pre><code>sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法\nssserver -p 服务器端口 -k 密码 -m 加密方法</code></pre><p>备注：sslocal是客户端程序；ssserver是服务端程序。</p>\n<h3 id=\"防火墙设置（如有）\"><a href=\"#防火墙设置（如有）\" class=\"headerlink\" title=\"防火墙设置（如有）\"></a>防火墙设置（如有）</h3><p>编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。<br>新增一条防火墙规则：</p>\n<pre><code>iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT</code></pre><p>先要保存下:</p>\n<pre><code>service iptables save</code></pre><p>重启防火墙iptables：</p>\n<pre><code>service iptables restart</code></pre><p>至此，服务器端的 Shadowsocks 安装和配置完毕。 配置多个用户</p>\n<pre><code>{\n&quot;timeout&quot;: 600,\n&quot;method&quot;: &quot;aes-256-cfb&quot;,\n&quot;port_password&quot;:\n{\n&quot;40001&quot;: &quot;password1&quot;,\n&quot;40002&quot;: &quot;password2&quot;,\n&quot;40003&quot;: &quot;password3&quot;\n},\n&quot;_comment&quot;:\n{\n&quot;40001&quot;: &quot;xiaoming&quot;,\n&quot;40002&quot;: &quot;lilei&quot;,\n&quot;40003&quot;: &quot;mike&quot;\n}\n}</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python版本\"><a href=\"#Python版本\" class=\"headerlink\" title=\"Python版本\"></a>Python版本</h3><pre><code>python –version</code></pre><p>CentOS6.5默认安装的Python版本是2.6.6，返回值为：Python 2.6.6</p>\n<h3 id=\"安装setuptools\"><a href=\"#安装setuptools\" class=\"headerlink\" title=\"安装setuptools\"></a>安装setuptools</h3><pre><code>yum install -y python-setuptools</code></pre><p>安装完毕后，easy_install命令就可以使用了。</p>\n<h3 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h3><p>easy_install pip 通过easy_install安装pip是最为简单的方法。pip默认安装到/usr/bin目录下。</p>\n<h3 id=\"安装s-h-a-d-o-w-s-o-c-k-s\"><a href=\"#安装s-h-a-d-o-w-s-o-c-k-s\" class=\"headerlink\" title=\"安装s_h_a_d_o_w_s_o_c_k_s\"></a>安装s_h_a_d_o_w_s_o_c_k_s</h3><pre><code>pip install shadowsocks</code></pre><h3 id=\"s-h-a-d-o-w-s-o-c-k-s的配置和使用\"><a href=\"#s-h-a-d-o-w-s-o-c-k-s的配置和使用\" class=\"headerlink\" title=\"s_h_a_d_o_w_s_o_c_k_s的配置和使用\"></a>s_h_a_d_o_w_s_o_c_k_s的配置和使用</h3><p>至于s_h_a_d_o_w_s_o_c_k_s可以拿来做什么，这里就毋须赘述了。直接开始吧。</p>\n<h3 id=\"创建s-h-a-d-o-w-s-o-c-k-ss的配置文件：\"><a href=\"#创建s-h-a-d-o-w-s-o-c-k-ss的配置文件：\" class=\"headerlink\" title=\"创建s_h_a_d_o_w_s_o_c_k_ss的配置文件：\"></a>创建s_h_a_d_o_w_s_o_c_k_ss的配置文件：</h3><p>CentOS下通过vim创建该配置，运行命令： vi /etc/shadowsocks.json</p>\n<pre><code>{\n&quot;server&quot;:&quot;your_server_ip&quot;,\n&quot;server_port&quot;:8989,\n&quot;local_address&quot;: &quot;127.0.0.1&quot;,\n&quot;local_port&quot;:1080,\n&quot;password&quot;:&quot;yourpassword&quot;,\n&quot;timeout&quot;:600,\n&quot;method&quot;:&quot;aes-256-cfb&quot;,\n&quot;fast_open&quot;: false,\n&quot;workers&quot;: 1\n}</code></pre><p>各字段的含义： server：服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址<br>server_port：监听的服务器端口<br>local_address：本地监听的 IP 地址<br>local_port：本地端端口<br>password：用来加密的密码<br>timeout：超时时间（秒）<br>method：加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb” fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法： echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen<br>开启之后，将 fast_open 的配置设置为 true 即可。<br>works：works数量，默认为 1</p>\n<h3 id=\"安装M2Crypto\"><a href=\"#安装M2Crypto\" class=\"headerlink\" title=\"安装M2Crypto\"></a>安装M2Crypto</h3><p>默认加密方法 table 速度很快，但很不安全。推荐使用 “aes-256-cfb” 或者 “bf-cfb”。请不要使用 “rc4″，它不安全。如果选择 “table” 之外的加密，需要安装 M2Crypto。 先安装依赖包：</p>\n<pre><code>yum install -y openssl-devel gcc swig python-devel autoconf libtool</code></pre><h3 id=\"安装setuptools-1\"><a href=\"#安装setuptools-1\" class=\"headerlink\" title=\"安装setuptools\"></a>安装setuptools</h3><pre><code>wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\npython ez_setup.py install</code></pre><p>再通过pip安装M2Crypto：</p>\n<pre><code>pip install M2Crypto</code></pre><h3 id=\"安装-gevent\"><a href=\"#安装-gevent\" class=\"headerlink\" title=\"安装 gevent\"></a>安装 gevent</h3><p>安装 gevent可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。</p>\n<h3 id=\"安装libevent\"><a href=\"#安装libevent\" class=\"headerlink\" title=\"安装libevent\"></a>安装libevent</h3><pre><code>yum install -y libevent</code></pre><h3 id=\"greenlet：\"><a href=\"#greenlet：\" class=\"headerlink\" title=\"greenlet：\"></a>greenlet：</h3><pre><code>pip install greenlet</code></pre><p>###安装gevent：</p>\n<pre><code>pip install gevent</code></pre><h3 id=\"命令行参数（服务器端启动命令）\"><a href=\"#命令行参数（服务器端启动命令）\" class=\"headerlink\" title=\"命令行参数（服务器端启动命令）\"></a>命令行参数（服务器端启动命令）</h3><pre><code>ssserver -c /etc/shadowsocks.json</code></pre><p>如果想在后台一直运行Shadowsocks，启动命令如下：</p>\n<pre><code>nohup ssserver -c /etc/shadowsocks.json &gt; /dev/null 2&gt;&amp;1 &amp;</code></pre><p>备注：关于nohup，是可以让程序在后台运行的命令。 同时可以用命令行参数覆盖 /etc/shadowsocks.json 里的设置：</p>\n<pre><code>sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法\nssserver -p 服务器端口 -k 密码 -m 加密方法</code></pre><p>备注：sslocal是客户端程序；ssserver是服务端程序。</p>\n<h3 id=\"防火墙设置（如有）\"><a href=\"#防火墙设置（如有）\" class=\"headerlink\" title=\"防火墙设置（如有）\"></a>防火墙设置（如有）</h3><p>编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。<br>新增一条防火墙规则：</p>\n<pre><code>iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT</code></pre><p>先要保存下:</p>\n<pre><code>service iptables save</code></pre><p>重启防火墙iptables：</p>\n<pre><code>service iptables restart</code></pre><p>至此，服务器端的 Shadowsocks 安装和配置完毕。 配置多个用户</p>\n<pre><code>{\n&quot;timeout&quot;: 600,\n&quot;method&quot;: &quot;aes-256-cfb&quot;,\n&quot;port_password&quot;:\n{\n&quot;40001&quot;: &quot;password1&quot;,\n&quot;40002&quot;: &quot;password2&quot;,\n&quot;40003&quot;: &quot;password3&quot;\n},\n&quot;_comment&quot;:\n{\n&quot;40001&quot;: &quot;xiaoming&quot;,\n&quot;40002&quot;: &quot;lilei&quot;,\n&quot;40003&quot;: &quot;mike&quot;\n}\n}</code></pre>"},{"title":"Excel常用公式使用方法","url":"61.html","id":"61","comments":0,"date":"2016-11-09T07:14:08.000Z","_content":"\n### 返回最后一个值、倒数第二个值\n\n    =LOOKUP(1,0/(A2:J2<>\"\"),A2:J2)\n    =LOOKUP(1,0/(B2:J2<>\"\"),A2:J2)\n    \n\n### 返回时间差\n\n    =DATEDIF(--TEXT(F2,\"00-00-00\"),TODAY(),\"D\")\n    \n\n### VLOOKUP 逆向检索\n\n> http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna\n\n    =VLOOKUP(C2,IF({1,0},Sheet2!$D$2:$D$5,Sheet2!$A$2:$A$5),2,FALSE)\n    =INDEX(Sheet2!A:A,MATCH(Sheet1!C2,Sheet2!D:D,0))\n    \n\n### 多条件统计求和 COUNTIFS\n\n统计每个部门人数\n\n    {=SUM(IFERROR(1/(COUNTIFS(Sheet2!L$2:Sheet2!L$250,B5,Sheet2!N$2:Sheet2!N$250,Sheet2!N$2:Sheet2!N$250)*(Sheet2!L$2:Sheet2!L$250=B5)),))}\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160304142206.png)","source":"_posts/Excel常用公式使用方法.md","raw":"---\ntitle: Excel常用公式使用方法\nurl: 61.html\nid: 61\ncomments: false\ncategories:\n  - 办公\ndate: 2016-11-09 15:14:08\ntags:\n---\n\n### 返回最后一个值、倒数第二个值\n\n    =LOOKUP(1,0/(A2:J2<>\"\"),A2:J2)\n    =LOOKUP(1,0/(B2:J2<>\"\"),A2:J2)\n    \n\n### 返回时间差\n\n    =DATEDIF(--TEXT(F2,\"00-00-00\"),TODAY(),\"D\")\n    \n\n### VLOOKUP 逆向检索\n\n> http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna\n\n    =VLOOKUP(C2,IF({1,0},Sheet2!$D$2:$D$5,Sheet2!$A$2:$A$5),2,FALSE)\n    =INDEX(Sheet2!A:A,MATCH(Sheet1!C2,Sheet2!D:D,0))\n    \n\n### 多条件统计求和 COUNTIFS\n\n统计每个部门人数\n\n    {=SUM(IFERROR(1/(COUNTIFS(Sheet2!L$2:Sheet2!L$250,B5,Sheet2!N$2:Sheet2!N$250,Sheet2!N$2:Sheet2!N$250)*(Sheet2!L$2:Sheet2!L$250=B5)),))}\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160304142206.png)","slug":"Excel常用公式使用方法","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrl0007h3a4bd45um26","content":"<h3 id=\"返回最后一个值、倒数第二个值\"><a href=\"#返回最后一个值、倒数第二个值\" class=\"headerlink\" title=\"返回最后一个值、倒数第二个值\"></a>返回最后一个值、倒数第二个值</h3><pre><code>=LOOKUP(1,0/(A2:J2&lt;&gt;&quot;&quot;),A2:J2)\n=LOOKUP(1,0/(B2:J2&lt;&gt;&quot;&quot;),A2:J2)</code></pre><h3 id=\"返回时间差\"><a href=\"#返回时间差\" class=\"headerlink\" title=\"返回时间差\"></a>返回时间差</h3><pre><code>=DATEDIF(--TEXT(F2,&quot;00-00-00&quot;),TODAY(),&quot;D&quot;)</code></pre><h3 id=\"VLOOKUP-逆向检索\"><a href=\"#VLOOKUP-逆向检索\" class=\"headerlink\" title=\"VLOOKUP 逆向检索\"></a>VLOOKUP 逆向检索</h3><blockquote>\n<p><a href=\"http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna\" target=\"_blank\" rel=\"noopener\">http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna</a></p>\n</blockquote>\n<pre><code>=VLOOKUP(C2,IF({1,0},Sheet2!$D$2:$D$5,Sheet2!$A$2:$A$5),2,FALSE)\n=INDEX(Sheet2!A:A,MATCH(Sheet1!C2,Sheet2!D:D,0))</code></pre><h3 id=\"多条件统计求和-COUNTIFS\"><a href=\"#多条件统计求和-COUNTIFS\" class=\"headerlink\" title=\"多条件统计求和 COUNTIFS\"></a>多条件统计求和 COUNTIFS</h3><p>统计每个部门人数</p>\n<pre><code>{=SUM(IFERROR(1/(COUNTIFS(Sheet2!L$2:Sheet2!L$250,B5,Sheet2!N$2:Sheet2!N$250,Sheet2!N$2:Sheet2!N$250)*(Sheet2!L$2:Sheet2!L$250=B5)),))}</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160304142206.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"返回最后一个值、倒数第二个值\"><a href=\"#返回最后一个值、倒数第二个值\" class=\"headerlink\" title=\"返回最后一个值、倒数第二个值\"></a>返回最后一个值、倒数第二个值</h3><pre><code>=LOOKUP(1,0/(A2:J2&lt;&gt;&quot;&quot;),A2:J2)\n=LOOKUP(1,0/(B2:J2&lt;&gt;&quot;&quot;),A2:J2)</code></pre><h3 id=\"返回时间差\"><a href=\"#返回时间差\" class=\"headerlink\" title=\"返回时间差\"></a>返回时间差</h3><pre><code>=DATEDIF(--TEXT(F2,&quot;00-00-00&quot;),TODAY(),&quot;D&quot;)</code></pre><h3 id=\"VLOOKUP-逆向检索\"><a href=\"#VLOOKUP-逆向检索\" class=\"headerlink\" title=\"VLOOKUP 逆向检索\"></a>VLOOKUP 逆向检索</h3><blockquote>\n<p><a href=\"http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna\" target=\"_blank\" rel=\"noopener\">http://zhidao.baidu.com/link?url=-1b12Kx36WQ4vf05DIDhZmxCOtvC6Zdhc62kve1QRoF-hV_Hbl3cZDuBZOYgGRjEo513fDk9-UL6gfUnMI9Jna</a></p>\n</blockquote>\n<pre><code>=VLOOKUP(C2,IF({1,0},Sheet2!$D$2:$D$5,Sheet2!$A$2:$A$5),2,FALSE)\n=INDEX(Sheet2!A:A,MATCH(Sheet1!C2,Sheet2!D:D,0))</code></pre><h3 id=\"多条件统计求和-COUNTIFS\"><a href=\"#多条件统计求和-COUNTIFS\" class=\"headerlink\" title=\"多条件统计求和 COUNTIFS\"></a>多条件统计求和 COUNTIFS</h3><p>统计每个部门人数</p>\n<pre><code>{=SUM(IFERROR(1/(COUNTIFS(Sheet2!L$2:Sheet2!L$250,B5,Sheet2!N$2:Sheet2!N$250,Sheet2!N$2:Sheet2!N$250)*(Sheet2!L$2:Sheet2!L$250=B5)),))}</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160304142206.png\" alt></p>\n"},{"title":"Django基础入门","url":"47.html","id":"47","comments":0,"date":"2016-11-09T06:41:04.000Z","_content":"\n### 2017.11.10号重新更新基本安装和线上部署\n\n环境：python3.5 django1.11\n\n    # 安装环境\n    $ sudo apt-get update\n    $ sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3\n    $ sudo pip3 install virtualenv\n    \n\n    # 安装项目目录\n    $ cd ~/www/html/\n    $ virtualenv --no-site-packages -p /usr/bin/python3.5 CCO\n    $ cd CCO\n    $ source ./bin/activate\n    (CCO) $ pip3 install ipython\n    (CCO) $ pip3 install Django==1.11.7\n    # 查看django是否安装成功\n    (CCO) $  ipython\n     > import django\n     > django.VERSION # 打印出django版本表示成功\n    # 开始创建项目\n    (CCO) $ django-admin.py startproject CCO_WEB\n    # 创建应用\n    (CCO) $ cd CCO_WEB\n    (CCO) $ django-admin.py startapp polls\n    \n\n    # 修改文件内容\n    (CCO) $ vim CCO_WEB/CCO_WEB/setting.py\n    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']  # 修改\n    STATIC_URL = '/static/' # 原始\n    STATIC_ROOT = os.path.join(BASE_DIR, 'static/') # 添加\n    \n\n    # 创建数据库和超级管理员\n    (CCO) $ ./manage.py makemigrations\n    (CCO) $ ./manage.py migrate\n    (CCO) $ ./manage.py createsuperuser # 创建超级管理员\n    (CCO) $ ./manage.py collectstatic # 收集静态文件\n    \n\n    ### 用django自带服务器运行\n    (CCO) $ sudo ufw allow 8000 # 关闭防火墙\n    (CCO) $ ./manage.py runserver 0.0.0.0:8000 # 成功表示django开发环境配置完成\n    \n\n    ### 线上部署\n    apache虚拟主机配置\n    $ sudo vim /etc/apache2/sites-available/www.cco.com.conf\n    <VirtualHost *:80>\n            ServerName www.example.com\n            ServerAdmin webmaster@localhost\n             # 这里指明静态文件存放的地方\n        Alias /static  /home/hanchang/www/html/CCO/CCO_WEB/static\n        # 给文件夹分配权限\n        <Directory /home/hanchang/www/html/CCO/CCO_WEB/static>\n                Require all granted\n        </Directory>\n        #接下来，我们将授予访问存储Django代码的二级项目目录中的wsgi.py文件的权限。\n        <Directory /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB>\n        <Files wsgi.py>\n                Require all granted\n        </Files>\n        </Directory>\n            WSGIDaemonProcess CCO_WEB python-home=/home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB python-path=/home/hanchang/www/html/CCO\n        WSGIProcessGroup CCO_WEB\n        WSGIScriptAlias / /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB/wsgi.py\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n    \n\n    ### 线上\n    sudo a2ensite www.cco.com\n    sudo service apache2 restart\n    http://127.0.0.1 查看\n    原文查看　https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04\n    \n\n### 数据库安装\n\n    $ sudo apt-get install python-setuptools\n    $ sudo apt-get install libmysqld-dev\n    $ sudo apt-get install libmysqlclient-dev\n    $ sudo apt-get install python-dev\n    $ sudo easy_install mysql-python\n    $ pip3 install mysqlclient\n    \n\n### 安装\n\n    # 需要先安装虚拟环境\n    (Novel) pip isntall django==1.8.2 # 不能加sudo\n    \n\n### 查看是否安装成功及版本号\n\n    python\n    import django\n    django.VERSION\n    \n\n### 安装MysqlDb\n\nubuntu\n\n    # ubuntu安装步骤：\n    sudo apt-get install python-setuptools\n    sudo apt-get install libmysqld-dev\n    sudo apt-get install libmysqlclient-dev\n    sudo apt-get install python-dev\n    sudo easy_install mysql-python\n    \n\nwindows下https://pypi.python.org/pypi/MySQL-python/1.2.5 下载.exe一键安装\n\n### 创建项目\n\n    django-admin.py startproject Novel\n    \n\n### 创建APP\n\n    python manage.py startapp Heros\n    \n\n/Novel/settings.py\n\n    INSTALLED_APPS = (\n        ...\n        'Heroes',  #这里填写的是app的名称\n    )\n    \n\n### 命令行调试模式\n\n    python manage.py shell\n    \n\n### 运行开发服务器\n\n    cd mysite\n    python manage.py runserver 或者\n    python manage.py runserver 0.0.0.0:8000\n    \n\n### 运行shell脚本方式\n\n    python manager.py shell # 启动脚本环境\n    from testapp.models import *  # 导入数据库\n    \n\n### 部署线上环境\n\n安装apache模块\n\n    # Python 2\n    sudo apt-get install libapache2-mod-wsgi\n    \n    # Python 3\n    sudo apt-get install libapache2-mod-wsgi-py3\n    \n\nNovel/Novel/wsgi.py\n\n    import os\n    import sys\n    sys.path.append('/var/www/html/Novel/')\n    sys.path.append('/var/www/html/Novel/Novel/')\n    sys.path.append('/var/www/html/Novel/lib/python2.7/site-packages') # 虚拟环境需要添加\n    from django.core.wsgi import get_wsgi_application\n    \n    \n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"Novel.settings\")\n    application = get_wsgi_application()\n    \n\n/etc/apache2/sites-enable/novel.conf\n\n    <VirtualHost *:1200>\n        ServerAdmin webmaster@localhost\n        DocumentRoot /var/www/html/Novel/Novel/Novel\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n    \n        # 静态文件设置\n        Alias /static/ /var/www/html/Novel/Novel/Novel/static/\n        <Directory /var/www/html/Novel/Novel/Novel/static/>\n            Require all granted\n        </Directory>\n    \n        WSGIScriptAlias / /var/www/html/Novel/Novel/Novel/wsgi.py\n        <Directory /var/www/html/Novel/Novel/Novel/>\n            Require all granted\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n    \n    </VirtualHost>\n    \n\n### 视图与路由绑定\n\n/Heroes/views.py\n\n    from django.http import HttpResponse, Http404\n    # Create your views here.\n    \n    \n    def hello(request):\n        return HttpResponse(\"Hello World\")\n    \n\n/Novel/urls.py\n\n    from django.conf.urls import include, url\n    from Heroes.views import *\n    \n    urlpatterns = [\n        url(r'^hello/$', hello),\n        url(r'^time/plus/(\\d{1,2})/$', hours_ahead)\n    ]\n    \n    \n\n### 视图与模板\n\n/Novel/settings.py设置模板路径\n\n    TEMPLATES = [\n        {\n            # .....\n            'DIRS': [\n                os.path.join(os.path.dirname(__file__), 'templates').replace('\\\\','/'),\n            ],\n            # ....\n        },\n    ]\n    \n\n/Novel/Heroes/views.py修改视图\n\n    from django.shortcuts import render_to_response\n    from django.http import HttpResponse, Http404\n    import datetime\n    # Create your views here.\n    \n    \n    \n    def current_datetime(request):\n        now = datetime.datetime.now()\n        # html = '<html><body>It is %s.</body></html>' % now\n        return render_to_response('Heroes/current_datetime.html', {'current_time': now})\n    \n\n/Novel目录下创建templates/Heroes/current_datetime.html\n\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Document</title>\n    </head>\n    <body>\n        <h1>{ { current_time }}</h1>\n    </body>\n    </html>\n    \n\n### 数据库配置\n\n/Novel/settings.py\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'Novel',\n            'USER': 'root',\n            'PASSWORD': 'password',\n            'HOST': '127.0.0.1',\n            'PORT': '3306'\n        }\n    }\n    \n\n测试是否成功\n\n    python manage.py shell\n    >>> from django.db import connection\n    >>> cursor = connection.cursor()\n    \n\n### 视图返回json数据格式\n\nviews.py\n\n    from django.http import HttpResponse, Http404\n    from json import dumps\n    \n    def login_handle(request):\n        if request.method != 'POST':\n            raise Http404()\n        inputs = request.POST\n        json_str = dumps(inputs)\n        return HttpResponse(json_str, content_type='application/json')\n    \n\n\\### 静态文件 settings.py ``` # 线上模式静态地址 STATIC_URL = os.path.join(os.path.dirname(**file**), '/static/').replace('\\\\','/')\n\n开发模式静态地址\n========\n\nSTATICFILES_DIRS = (os.path.join(os.path.dirname(**file**), 'static').replace('\\\\','/'),) ```","source":"_posts/Django基础入门.md","raw":"---\ntitle: Django基础入门\ntags:\n  - django\n  - python\nurl: 47.html\nid: 47\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-09 14:41:04\n---\n\n### 2017.11.10号重新更新基本安装和线上部署\n\n环境：python3.5 django1.11\n\n    # 安装环境\n    $ sudo apt-get update\n    $ sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3\n    $ sudo pip3 install virtualenv\n    \n\n    # 安装项目目录\n    $ cd ~/www/html/\n    $ virtualenv --no-site-packages -p /usr/bin/python3.5 CCO\n    $ cd CCO\n    $ source ./bin/activate\n    (CCO) $ pip3 install ipython\n    (CCO) $ pip3 install Django==1.11.7\n    # 查看django是否安装成功\n    (CCO) $  ipython\n     > import django\n     > django.VERSION # 打印出django版本表示成功\n    # 开始创建项目\n    (CCO) $ django-admin.py startproject CCO_WEB\n    # 创建应用\n    (CCO) $ cd CCO_WEB\n    (CCO) $ django-admin.py startapp polls\n    \n\n    # 修改文件内容\n    (CCO) $ vim CCO_WEB/CCO_WEB/setting.py\n    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']  # 修改\n    STATIC_URL = '/static/' # 原始\n    STATIC_ROOT = os.path.join(BASE_DIR, 'static/') # 添加\n    \n\n    # 创建数据库和超级管理员\n    (CCO) $ ./manage.py makemigrations\n    (CCO) $ ./manage.py migrate\n    (CCO) $ ./manage.py createsuperuser # 创建超级管理员\n    (CCO) $ ./manage.py collectstatic # 收集静态文件\n    \n\n    ### 用django自带服务器运行\n    (CCO) $ sudo ufw allow 8000 # 关闭防火墙\n    (CCO) $ ./manage.py runserver 0.0.0.0:8000 # 成功表示django开发环境配置完成\n    \n\n    ### 线上部署\n    apache虚拟主机配置\n    $ sudo vim /etc/apache2/sites-available/www.cco.com.conf\n    <VirtualHost *:80>\n            ServerName www.example.com\n            ServerAdmin webmaster@localhost\n             # 这里指明静态文件存放的地方\n        Alias /static  /home/hanchang/www/html/CCO/CCO_WEB/static\n        # 给文件夹分配权限\n        <Directory /home/hanchang/www/html/CCO/CCO_WEB/static>\n                Require all granted\n        </Directory>\n        #接下来，我们将授予访问存储Django代码的二级项目目录中的wsgi.py文件的权限。\n        <Directory /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB>\n        <Files wsgi.py>\n                Require all granted\n        </Files>\n        </Directory>\n            WSGIDaemonProcess CCO_WEB python-home=/home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB python-path=/home/hanchang/www/html/CCO\n        WSGIProcessGroup CCO_WEB\n        WSGIScriptAlias / /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB/wsgi.py\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n    \n\n    ### 线上\n    sudo a2ensite www.cco.com\n    sudo service apache2 restart\n    http://127.0.0.1 查看\n    原文查看　https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04\n    \n\n### 数据库安装\n\n    $ sudo apt-get install python-setuptools\n    $ sudo apt-get install libmysqld-dev\n    $ sudo apt-get install libmysqlclient-dev\n    $ sudo apt-get install python-dev\n    $ sudo easy_install mysql-python\n    $ pip3 install mysqlclient\n    \n\n### 安装\n\n    # 需要先安装虚拟环境\n    (Novel) pip isntall django==1.8.2 # 不能加sudo\n    \n\n### 查看是否安装成功及版本号\n\n    python\n    import django\n    django.VERSION\n    \n\n### 安装MysqlDb\n\nubuntu\n\n    # ubuntu安装步骤：\n    sudo apt-get install python-setuptools\n    sudo apt-get install libmysqld-dev\n    sudo apt-get install libmysqlclient-dev\n    sudo apt-get install python-dev\n    sudo easy_install mysql-python\n    \n\nwindows下https://pypi.python.org/pypi/MySQL-python/1.2.5 下载.exe一键安装\n\n### 创建项目\n\n    django-admin.py startproject Novel\n    \n\n### 创建APP\n\n    python manage.py startapp Heros\n    \n\n/Novel/settings.py\n\n    INSTALLED_APPS = (\n        ...\n        'Heroes',  #这里填写的是app的名称\n    )\n    \n\n### 命令行调试模式\n\n    python manage.py shell\n    \n\n### 运行开发服务器\n\n    cd mysite\n    python manage.py runserver 或者\n    python manage.py runserver 0.0.0.0:8000\n    \n\n### 运行shell脚本方式\n\n    python manager.py shell # 启动脚本环境\n    from testapp.models import *  # 导入数据库\n    \n\n### 部署线上环境\n\n安装apache模块\n\n    # Python 2\n    sudo apt-get install libapache2-mod-wsgi\n    \n    # Python 3\n    sudo apt-get install libapache2-mod-wsgi-py3\n    \n\nNovel/Novel/wsgi.py\n\n    import os\n    import sys\n    sys.path.append('/var/www/html/Novel/')\n    sys.path.append('/var/www/html/Novel/Novel/')\n    sys.path.append('/var/www/html/Novel/lib/python2.7/site-packages') # 虚拟环境需要添加\n    from django.core.wsgi import get_wsgi_application\n    \n    \n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"Novel.settings\")\n    application = get_wsgi_application()\n    \n\n/etc/apache2/sites-enable/novel.conf\n\n    <VirtualHost *:1200>\n        ServerAdmin webmaster@localhost\n        DocumentRoot /var/www/html/Novel/Novel/Novel\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n    \n        # 静态文件设置\n        Alias /static/ /var/www/html/Novel/Novel/Novel/static/\n        <Directory /var/www/html/Novel/Novel/Novel/static/>\n            Require all granted\n        </Directory>\n    \n        WSGIScriptAlias / /var/www/html/Novel/Novel/Novel/wsgi.py\n        <Directory /var/www/html/Novel/Novel/Novel/>\n            Require all granted\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n    \n    </VirtualHost>\n    \n\n### 视图与路由绑定\n\n/Heroes/views.py\n\n    from django.http import HttpResponse, Http404\n    # Create your views here.\n    \n    \n    def hello(request):\n        return HttpResponse(\"Hello World\")\n    \n\n/Novel/urls.py\n\n    from django.conf.urls import include, url\n    from Heroes.views import *\n    \n    urlpatterns = [\n        url(r'^hello/$', hello),\n        url(r'^time/plus/(\\d{1,2})/$', hours_ahead)\n    ]\n    \n    \n\n### 视图与模板\n\n/Novel/settings.py设置模板路径\n\n    TEMPLATES = [\n        {\n            # .....\n            'DIRS': [\n                os.path.join(os.path.dirname(__file__), 'templates').replace('\\\\','/'),\n            ],\n            # ....\n        },\n    ]\n    \n\n/Novel/Heroes/views.py修改视图\n\n    from django.shortcuts import render_to_response\n    from django.http import HttpResponse, Http404\n    import datetime\n    # Create your views here.\n    \n    \n    \n    def current_datetime(request):\n        now = datetime.datetime.now()\n        # html = '<html><body>It is %s.</body></html>' % now\n        return render_to_response('Heroes/current_datetime.html', {'current_time': now})\n    \n\n/Novel目录下创建templates/Heroes/current_datetime.html\n\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Document</title>\n    </head>\n    <body>\n        <h1>{ { current_time }}</h1>\n    </body>\n    </html>\n    \n\n### 数据库配置\n\n/Novel/settings.py\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'Novel',\n            'USER': 'root',\n            'PASSWORD': 'password',\n            'HOST': '127.0.0.1',\n            'PORT': '3306'\n        }\n    }\n    \n\n测试是否成功\n\n    python manage.py shell\n    >>> from django.db import connection\n    >>> cursor = connection.cursor()\n    \n\n### 视图返回json数据格式\n\nviews.py\n\n    from django.http import HttpResponse, Http404\n    from json import dumps\n    \n    def login_handle(request):\n        if request.method != 'POST':\n            raise Http404()\n        inputs = request.POST\n        json_str = dumps(inputs)\n        return HttpResponse(json_str, content_type='application/json')\n    \n\n\\### 静态文件 settings.py ``` # 线上模式静态地址 STATIC_URL = os.path.join(os.path.dirname(**file**), '/static/').replace('\\\\','/')\n\n开发模式静态地址\n========\n\nSTATICFILES_DIRS = (os.path.join(os.path.dirname(**file**), 'static').replace('\\\\','/'),) ```","slug":"Django基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrn000ah3a415fp9vwi","content":"<h3 id=\"2017-11-10号重新更新基本安装和线上部署\"><a href=\"#2017-11-10号重新更新基本安装和线上部署\" class=\"headerlink\" title=\"2017.11.10号重新更新基本安装和线上部署\"></a>2017.11.10号重新更新基本安装和线上部署</h3><p>环境：python3.5 django1.11</p>\n<pre><code># 安装环境\n$ sudo apt-get update\n$ sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3\n$ sudo pip3 install virtualenv\n\n\n# 安装项目目录\n$ cd ~/www/html/\n$ virtualenv --no-site-packages -p /usr/bin/python3.5 CCO\n$ cd CCO\n$ source ./bin/activate\n(CCO) $ pip3 install ipython\n(CCO) $ pip3 install Django==1.11.7\n# 查看django是否安装成功\n(CCO) $  ipython\n &gt; import django\n &gt; django.VERSION # 打印出django版本表示成功\n# 开始创建项目\n(CCO) $ django-admin.py startproject CCO_WEB\n# 创建应用\n(CCO) $ cd CCO_WEB\n(CCO) $ django-admin.py startapp polls\n\n\n# 修改文件内容\n(CCO) $ vim CCO_WEB/CCO_WEB/setting.py\nALLOWED_HOSTS = [&apos;127.0.0.1&apos;, &apos;localhost&apos;]  # 修改\nSTATIC_URL = &apos;/static/&apos; # 原始\nSTATIC_ROOT = os.path.join(BASE_DIR, &apos;static/&apos;) # 添加\n\n\n# 创建数据库和超级管理员\n(CCO) $ ./manage.py makemigrations\n(CCO) $ ./manage.py migrate\n(CCO) $ ./manage.py createsuperuser # 创建超级管理员\n(CCO) $ ./manage.py collectstatic # 收集静态文件\n\n\n### 用django自带服务器运行\n(CCO) $ sudo ufw allow 8000 # 关闭防火墙\n(CCO) $ ./manage.py runserver 0.0.0.0:8000 # 成功表示django开发环境配置完成\n\n\n### 线上部署\napache虚拟主机配置\n$ sudo vim /etc/apache2/sites-available/www.cco.com.conf\n&lt;VirtualHost *:80&gt;\n        ServerName www.example.com\n        ServerAdmin webmaster@localhost\n         # 这里指明静态文件存放的地方\n    Alias /static  /home/hanchang/www/html/CCO/CCO_WEB/static\n    # 给文件夹分配权限\n    &lt;Directory /home/hanchang/www/html/CCO/CCO_WEB/static&gt;\n            Require all granted\n    &lt;/Directory&gt;\n    #接下来，我们将授予访问存储Django代码的二级项目目录中的wsgi.py文件的权限。\n    &lt;Directory /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB&gt;\n    &lt;Files wsgi.py&gt;\n            Require all granted\n    &lt;/Files&gt;\n    &lt;/Directory&gt;\n        WSGIDaemonProcess CCO_WEB python-home=/home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB python-path=/home/hanchang/www/html/CCO\n    WSGIProcessGroup CCO_WEB\n    WSGIScriptAlias / /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB/wsgi.py\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n\n\n### 线上\nsudo a2ensite www.cco.com\nsudo service apache2 restart\nhttp://127.0.0.1 查看\n原文查看　https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04</code></pre><h3 id=\"数据库安装\"><a href=\"#数据库安装\" class=\"headerlink\" title=\"数据库安装\"></a>数据库安装</h3><pre><code>$ sudo apt-get install python-setuptools\n$ sudo apt-get install libmysqld-dev\n$ sudo apt-get install libmysqlclient-dev\n$ sudo apt-get install python-dev\n$ sudo easy_install mysql-python\n$ pip3 install mysqlclient</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code># 需要先安装虚拟环境\n(Novel) pip isntall django==1.8.2 # 不能加sudo</code></pre><h3 id=\"查看是否安装成功及版本号\"><a href=\"#查看是否安装成功及版本号\" class=\"headerlink\" title=\"查看是否安装成功及版本号\"></a>查看是否安装成功及版本号</h3><pre><code>python\nimport django\ndjango.VERSION</code></pre><h3 id=\"安装MysqlDb\"><a href=\"#安装MysqlDb\" class=\"headerlink\" title=\"安装MysqlDb\"></a>安装MysqlDb</h3><p>ubuntu</p>\n<pre><code># ubuntu安装步骤：\nsudo apt-get install python-setuptools\nsudo apt-get install libmysqld-dev\nsudo apt-get install libmysqlclient-dev\nsudo apt-get install python-dev\nsudo easy_install mysql-python</code></pre><p>windows下<a href=\"https://pypi.python.org/pypi/MySQL-python/1.2.5\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/MySQL-python/1.2.5</a> 下载.exe一键安装</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code>django-admin.py startproject Novel</code></pre><h3 id=\"创建APP\"><a href=\"#创建APP\" class=\"headerlink\" title=\"创建APP\"></a>创建APP</h3><pre><code>python manage.py startapp Heros</code></pre><p>/Novel/settings.py</p>\n<pre><code>INSTALLED_APPS = (\n    ...\n    &apos;Heroes&apos;,  #这里填写的是app的名称\n)</code></pre><h3 id=\"命令行调试模式\"><a href=\"#命令行调试模式\" class=\"headerlink\" title=\"命令行调试模式\"></a>命令行调试模式</h3><pre><code>python manage.py shell</code></pre><h3 id=\"运行开发服务器\"><a href=\"#运行开发服务器\" class=\"headerlink\" title=\"运行开发服务器\"></a>运行开发服务器</h3><pre><code>cd mysite\npython manage.py runserver 或者\npython manage.py runserver 0.0.0.0:8000</code></pre><h3 id=\"运行shell脚本方式\"><a href=\"#运行shell脚本方式\" class=\"headerlink\" title=\"运行shell脚本方式\"></a>运行shell脚本方式</h3><pre><code>python manager.py shell # 启动脚本环境\nfrom testapp.models import *  # 导入数据库</code></pre><h3 id=\"部署线上环境\"><a href=\"#部署线上环境\" class=\"headerlink\" title=\"部署线上环境\"></a>部署线上环境</h3><p>安装apache模块</p>\n<pre><code># Python 2\nsudo apt-get install libapache2-mod-wsgi\n\n# Python 3\nsudo apt-get install libapache2-mod-wsgi-py3</code></pre><p>Novel/Novel/wsgi.py</p>\n<pre><code>import os\nimport sys\nsys.path.append(&apos;/var/www/html/Novel/&apos;)\nsys.path.append(&apos;/var/www/html/Novel/Novel/&apos;)\nsys.path.append(&apos;/var/www/html/Novel/lib/python2.7/site-packages&apos;) # 虚拟环境需要添加\nfrom django.core.wsgi import get_wsgi_application\n\n\nos.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;Novel.settings&quot;)\napplication = get_wsgi_application()</code></pre><p>/etc/apache2/sites-enable/novel.conf</p>\n<pre><code>&lt;VirtualHost *:1200&gt;\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html/Novel/Novel/Novel\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    # 静态文件设置\n    Alias /static/ /var/www/html/Novel/Novel/Novel/static/\n    &lt;Directory /var/www/html/Novel/Novel/Novel/static/&gt;\n        Require all granted\n    &lt;/Directory&gt;\n\n    WSGIScriptAlias / /var/www/html/Novel/Novel/Novel/wsgi.py\n    &lt;Directory /var/www/html/Novel/Novel/Novel/&gt;\n        Require all granted\n        &lt;Files wsgi.py&gt;\n            Require all granted\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n\n&lt;/VirtualHost&gt;</code></pre><h3 id=\"视图与路由绑定\"><a href=\"#视图与路由绑定\" class=\"headerlink\" title=\"视图与路由绑定\"></a>视图与路由绑定</h3><p>/Heroes/views.py</p>\n<pre><code>from django.http import HttpResponse, Http404\n# Create your views here.\n\n\ndef hello(request):\n    return HttpResponse(&quot;Hello World&quot;)</code></pre><p>/Novel/urls.py</p>\n<pre><code>from django.conf.urls import include, url\nfrom Heroes.views import *\n\nurlpatterns = [\n    url(r&apos;^hello/$&apos;, hello),\n    url(r&apos;^time/plus/(\\d{1,2})/$&apos;, hours_ahead)\n]</code></pre><h3 id=\"视图与模板\"><a href=\"#视图与模板\" class=\"headerlink\" title=\"视图与模板\"></a>视图与模板</h3><p>/Novel/settings.py设置模板路径</p>\n<pre><code>TEMPLATES = [\n    {\n        # .....\n        &apos;DIRS&apos;: [\n            os.path.join(os.path.dirname(__file__), &apos;templates&apos;).replace(&apos;\\\\&apos;,&apos;/&apos;),\n        ],\n        # ....\n    },\n]</code></pre><p>/Novel/Heroes/views.py修改视图</p>\n<pre><code>from django.shortcuts import render_to_response\nfrom django.http import HttpResponse, Http404\nimport datetime\n# Create your views here.\n\n\n\ndef current_datetime(request):\n    now = datetime.datetime.now()\n    # html = &apos;&lt;html&gt;&lt;body&gt;It is %s.&lt;/body&gt;&lt;/html&gt;&apos; % now\n    return render_to_response(&apos;Heroes/current_datetime.html&apos;, {&apos;current_time&apos;: now})</code></pre><p>/Novel目录下创建templates/Heroes/current_datetime.html</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{ { current_time }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><h3 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h3><p>/Novel/settings.py</p>\n<pre><code>DATABASES = {\n    &apos;default&apos;: {\n        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,\n        &apos;NAME&apos;: &apos;Novel&apos;,\n        &apos;USER&apos;: &apos;root&apos;,\n        &apos;PASSWORD&apos;: &apos;password&apos;,\n        &apos;HOST&apos;: &apos;127.0.0.1&apos;,\n        &apos;PORT&apos;: &apos;3306&apos;\n    }\n}</code></pre><p>测试是否成功</p>\n<pre><code>python manage.py shell\n&gt;&gt;&gt; from django.db import connection\n&gt;&gt;&gt; cursor = connection.cursor()</code></pre><h3 id=\"视图返回json数据格式\"><a href=\"#视图返回json数据格式\" class=\"headerlink\" title=\"视图返回json数据格式\"></a>视图返回json数据格式</h3><p>views.py</p>\n<pre><code>from django.http import HttpResponse, Http404\nfrom json import dumps\n\ndef login_handle(request):\n    if request.method != &apos;POST&apos;:\n        raise Http404()\n    inputs = request.POST\n    json_str = dumps(inputs)\n    return HttpResponse(json_str, content_type=&apos;application/json&apos;)</code></pre><p>### 静态文件 settings.py <figure class=\"highlight plain hljs\"><figcaption><span>线上模式静态地址 STATIC_URL </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">开发模式静态地址</span><br><span class=\"line\">========</span><br><span class=\"line\"></span><br><span class=\"line\">STATICFILES_DIRS = (os.path.join(os.path.dirname(**file**), &apos;static&apos;).replace(&apos;\\\\&apos;,&apos;/&apos;),)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"2017-11-10号重新更新基本安装和线上部署\"><a href=\"#2017-11-10号重新更新基本安装和线上部署\" class=\"headerlink\" title=\"2017.11.10号重新更新基本安装和线上部署\"></a>2017.11.10号重新更新基本安装和线上部署</h3><p>环境：python3.5 django1.11</p>\n<pre><code># 安装环境\n$ sudo apt-get update\n$ sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3\n$ sudo pip3 install virtualenv\n\n\n# 安装项目目录\n$ cd ~/www/html/\n$ virtualenv --no-site-packages -p /usr/bin/python3.5 CCO\n$ cd CCO\n$ source ./bin/activate\n(CCO) $ pip3 install ipython\n(CCO) $ pip3 install Django==1.11.7\n# 查看django是否安装成功\n(CCO) $  ipython\n &gt; import django\n &gt; django.VERSION # 打印出django版本表示成功\n# 开始创建项目\n(CCO) $ django-admin.py startproject CCO_WEB\n# 创建应用\n(CCO) $ cd CCO_WEB\n(CCO) $ django-admin.py startapp polls\n\n\n# 修改文件内容\n(CCO) $ vim CCO_WEB/CCO_WEB/setting.py\nALLOWED_HOSTS = [&apos;127.0.0.1&apos;, &apos;localhost&apos;]  # 修改\nSTATIC_URL = &apos;/static/&apos; # 原始\nSTATIC_ROOT = os.path.join(BASE_DIR, &apos;static/&apos;) # 添加\n\n\n# 创建数据库和超级管理员\n(CCO) $ ./manage.py makemigrations\n(CCO) $ ./manage.py migrate\n(CCO) $ ./manage.py createsuperuser # 创建超级管理员\n(CCO) $ ./manage.py collectstatic # 收集静态文件\n\n\n### 用django自带服务器运行\n(CCO) $ sudo ufw allow 8000 # 关闭防火墙\n(CCO) $ ./manage.py runserver 0.0.0.0:8000 # 成功表示django开发环境配置完成\n\n\n### 线上部署\napache虚拟主机配置\n$ sudo vim /etc/apache2/sites-available/www.cco.com.conf\n&lt;VirtualHost *:80&gt;\n        ServerName www.example.com\n        ServerAdmin webmaster@localhost\n         # 这里指明静态文件存放的地方\n    Alias /static  /home/hanchang/www/html/CCO/CCO_WEB/static\n    # 给文件夹分配权限\n    &lt;Directory /home/hanchang/www/html/CCO/CCO_WEB/static&gt;\n            Require all granted\n    &lt;/Directory&gt;\n    #接下来，我们将授予访问存储Django代码的二级项目目录中的wsgi.py文件的权限。\n    &lt;Directory /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB&gt;\n    &lt;Files wsgi.py&gt;\n            Require all granted\n    &lt;/Files&gt;\n    &lt;/Directory&gt;\n        WSGIDaemonProcess CCO_WEB python-home=/home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB python-path=/home/hanchang/www/html/CCO\n    WSGIProcessGroup CCO_WEB\n    WSGIScriptAlias / /home/hanchang/www/html/CCO/CCO_WEB/CCO_WEB/wsgi.py\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n\n\n### 线上\nsudo a2ensite www.cco.com\nsudo service apache2 restart\nhttp://127.0.0.1 查看\n原文查看　https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04</code></pre><h3 id=\"数据库安装\"><a href=\"#数据库安装\" class=\"headerlink\" title=\"数据库安装\"></a>数据库安装</h3><pre><code>$ sudo apt-get install python-setuptools\n$ sudo apt-get install libmysqld-dev\n$ sudo apt-get install libmysqlclient-dev\n$ sudo apt-get install python-dev\n$ sudo easy_install mysql-python\n$ pip3 install mysqlclient</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code># 需要先安装虚拟环境\n(Novel) pip isntall django==1.8.2 # 不能加sudo</code></pre><h3 id=\"查看是否安装成功及版本号\"><a href=\"#查看是否安装成功及版本号\" class=\"headerlink\" title=\"查看是否安装成功及版本号\"></a>查看是否安装成功及版本号</h3><pre><code>python\nimport django\ndjango.VERSION</code></pre><h3 id=\"安装MysqlDb\"><a href=\"#安装MysqlDb\" class=\"headerlink\" title=\"安装MysqlDb\"></a>安装MysqlDb</h3><p>ubuntu</p>\n<pre><code># ubuntu安装步骤：\nsudo apt-get install python-setuptools\nsudo apt-get install libmysqld-dev\nsudo apt-get install libmysqlclient-dev\nsudo apt-get install python-dev\nsudo easy_install mysql-python</code></pre><p>windows下<a href=\"https://pypi.python.org/pypi/MySQL-python/1.2.5\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/MySQL-python/1.2.5</a> 下载.exe一键安装</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code>django-admin.py startproject Novel</code></pre><h3 id=\"创建APP\"><a href=\"#创建APP\" class=\"headerlink\" title=\"创建APP\"></a>创建APP</h3><pre><code>python manage.py startapp Heros</code></pre><p>/Novel/settings.py</p>\n<pre><code>INSTALLED_APPS = (\n    ...\n    &apos;Heroes&apos;,  #这里填写的是app的名称\n)</code></pre><h3 id=\"命令行调试模式\"><a href=\"#命令行调试模式\" class=\"headerlink\" title=\"命令行调试模式\"></a>命令行调试模式</h3><pre><code>python manage.py shell</code></pre><h3 id=\"运行开发服务器\"><a href=\"#运行开发服务器\" class=\"headerlink\" title=\"运行开发服务器\"></a>运行开发服务器</h3><pre><code>cd mysite\npython manage.py runserver 或者\npython manage.py runserver 0.0.0.0:8000</code></pre><h3 id=\"运行shell脚本方式\"><a href=\"#运行shell脚本方式\" class=\"headerlink\" title=\"运行shell脚本方式\"></a>运行shell脚本方式</h3><pre><code>python manager.py shell # 启动脚本环境\nfrom testapp.models import *  # 导入数据库</code></pre><h3 id=\"部署线上环境\"><a href=\"#部署线上环境\" class=\"headerlink\" title=\"部署线上环境\"></a>部署线上环境</h3><p>安装apache模块</p>\n<pre><code># Python 2\nsudo apt-get install libapache2-mod-wsgi\n\n# Python 3\nsudo apt-get install libapache2-mod-wsgi-py3</code></pre><p>Novel/Novel/wsgi.py</p>\n<pre><code>import os\nimport sys\nsys.path.append(&apos;/var/www/html/Novel/&apos;)\nsys.path.append(&apos;/var/www/html/Novel/Novel/&apos;)\nsys.path.append(&apos;/var/www/html/Novel/lib/python2.7/site-packages&apos;) # 虚拟环境需要添加\nfrom django.core.wsgi import get_wsgi_application\n\n\nos.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;Novel.settings&quot;)\napplication = get_wsgi_application()</code></pre><p>/etc/apache2/sites-enable/novel.conf</p>\n<pre><code>&lt;VirtualHost *:1200&gt;\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html/Novel/Novel/Novel\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    # 静态文件设置\n    Alias /static/ /var/www/html/Novel/Novel/Novel/static/\n    &lt;Directory /var/www/html/Novel/Novel/Novel/static/&gt;\n        Require all granted\n    &lt;/Directory&gt;\n\n    WSGIScriptAlias / /var/www/html/Novel/Novel/Novel/wsgi.py\n    &lt;Directory /var/www/html/Novel/Novel/Novel/&gt;\n        Require all granted\n        &lt;Files wsgi.py&gt;\n            Require all granted\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n\n&lt;/VirtualHost&gt;</code></pre><h3 id=\"视图与路由绑定\"><a href=\"#视图与路由绑定\" class=\"headerlink\" title=\"视图与路由绑定\"></a>视图与路由绑定</h3><p>/Heroes/views.py</p>\n<pre><code>from django.http import HttpResponse, Http404\n# Create your views here.\n\n\ndef hello(request):\n    return HttpResponse(&quot;Hello World&quot;)</code></pre><p>/Novel/urls.py</p>\n<pre><code>from django.conf.urls import include, url\nfrom Heroes.views import *\n\nurlpatterns = [\n    url(r&apos;^hello/$&apos;, hello),\n    url(r&apos;^time/plus/(\\d{1,2})/$&apos;, hours_ahead)\n]</code></pre><h3 id=\"视图与模板\"><a href=\"#视图与模板\" class=\"headerlink\" title=\"视图与模板\"></a>视图与模板</h3><p>/Novel/settings.py设置模板路径</p>\n<pre><code>TEMPLATES = [\n    {\n        # .....\n        &apos;DIRS&apos;: [\n            os.path.join(os.path.dirname(__file__), &apos;templates&apos;).replace(&apos;\\\\&apos;,&apos;/&apos;),\n        ],\n        # ....\n    },\n]</code></pre><p>/Novel/Heroes/views.py修改视图</p>\n<pre><code>from django.shortcuts import render_to_response\nfrom django.http import HttpResponse, Http404\nimport datetime\n# Create your views here.\n\n\n\ndef current_datetime(request):\n    now = datetime.datetime.now()\n    # html = &apos;&lt;html&gt;&lt;body&gt;It is %s.&lt;/body&gt;&lt;/html&gt;&apos; % now\n    return render_to_response(&apos;Heroes/current_datetime.html&apos;, {&apos;current_time&apos;: now})</code></pre><p>/Novel目录下创建templates/Heroes/current_datetime.html</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{ { current_time }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><h3 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h3><p>/Novel/settings.py</p>\n<pre><code>DATABASES = {\n    &apos;default&apos;: {\n        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,\n        &apos;NAME&apos;: &apos;Novel&apos;,\n        &apos;USER&apos;: &apos;root&apos;,\n        &apos;PASSWORD&apos;: &apos;password&apos;,\n        &apos;HOST&apos;: &apos;127.0.0.1&apos;,\n        &apos;PORT&apos;: &apos;3306&apos;\n    }\n}</code></pre><p>测试是否成功</p>\n<pre><code>python manage.py shell\n&gt;&gt;&gt; from django.db import connection\n&gt;&gt;&gt; cursor = connection.cursor()</code></pre><h3 id=\"视图返回json数据格式\"><a href=\"#视图返回json数据格式\" class=\"headerlink\" title=\"视图返回json数据格式\"></a>视图返回json数据格式</h3><p>views.py</p>\n<pre><code>from django.http import HttpResponse, Http404\nfrom json import dumps\n\ndef login_handle(request):\n    if request.method != &apos;POST&apos;:\n        raise Http404()\n    inputs = request.POST\n    json_str = dumps(inputs)\n    return HttpResponse(json_str, content_type=&apos;application/json&apos;)</code></pre><p>### 静态文件 settings.py <figure class=\"highlight plain\"><figcaption><span>线上模式静态地址 STATIC_URL </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">开发模式静态地址</span><br><span class=\"line\">========</span><br><span class=\"line\"></span><br><span class=\"line\">STATICFILES_DIRS = (os.path.join(os.path.dirname(**file**), &apos;static&apos;).replace(&apos;\\\\&apos;,&apos;/&apos;),)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Git基础入门","url":"64.html","id":"64","comments":0,"date":"2016-11-09T07:19:56.000Z","_content":"\n### 创建项目\n\n    git init\n    \n\n### 查看分支\n\n    E:\\HKMAIN (master)\n    λ git branch\n    * master\n      v1.1\n      v1.2\n    λ git branch -v\n    * master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n      v1.1   b48a782 试剂盒现货列表添加样本信息一栏\n      v1.2   acbf4f1 c1.2\n    \n\n### 删除分支\n\n查看未合并的分支\n\n    λ git branch --no-merged\n    \n\n删除分支\n\n    git branch -d v1.1\n    \n\n如果是未合并的分支，使用大写的-D\n\n    E:\\HKMAIN (master)\n    λ git branch -d v1.1\n    Deleted branch v1.1 (was b48a782).\n    \n    E:\\HKMAIN (master)\n    λ git branch -v\n    * master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n      v1.2   acbf4f1 c1.2\n    \n\n### 创建分支\n\n    git branch v2.0\n    \n\n    E:\\HKMAIN (master)\n    λ git branch Vmysql\n    \n    E:\\HKMAIN (master)\n    λ git branch\n      Vmysql\n    * master\n      v1.2\n    \n    E:\\HKMAIN (master)\n    λ git checkout Vmysql\n    Switched to branch 'Vmysql'\n    \n    E:\\HKMAIN (Vmysql)\n    λ\n    \n\n或者直接使用git checkout -b v3.0\n\n    E:\\HKMAIN (Vmysql)\n    λ git checkout -b Vsqlserver\n    Switched to a new branch 'Vsqlserver'\n    \n    E:\\HKMAIN (Vsqlserver)\n    λ git branch\n      Vmysql\n    * Vsqlserver\n      master\n      v1.2\n    \n\n### git查看远程仓库\n\n    # git查看远程仓库\n    git remote -v\n    # git添加远程仓库\n    git remote add xxx git@gitlab.xxx.com:xxx/xxx\n    # 删除远程分值\n    git remote rm xxx\n    \n\n### git stash\n\n使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。\n\n    # 保存当前进度\n    git stash\n    # 查看现有的存储\n    git stash list\n    # 恢复最新的进度到工作区\n    git stash pop\n    git stash save your-file-name","source":"_posts/Git基础入门.md","raw":"---\ntitle: Git基础入门\nurl: 64.html\nid: 64\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 15:19:56\ntags:\n---\n\n### 创建项目\n\n    git init\n    \n\n### 查看分支\n\n    E:\\HKMAIN (master)\n    λ git branch\n    * master\n      v1.1\n      v1.2\n    λ git branch -v\n    * master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n      v1.1   b48a782 试剂盒现货列表添加样本信息一栏\n      v1.2   acbf4f1 c1.2\n    \n\n### 删除分支\n\n查看未合并的分支\n\n    λ git branch --no-merged\n    \n\n删除分支\n\n    git branch -d v1.1\n    \n\n如果是未合并的分支，使用大写的-D\n\n    E:\\HKMAIN (master)\n    λ git branch -d v1.1\n    Deleted branch v1.1 (was b48a782).\n    \n    E:\\HKMAIN (master)\n    λ git branch -v\n    * master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n      v1.2   acbf4f1 c1.2\n    \n\n### 创建分支\n\n    git branch v2.0\n    \n\n    E:\\HKMAIN (master)\n    λ git branch Vmysql\n    \n    E:\\HKMAIN (master)\n    λ git branch\n      Vmysql\n    * master\n      v1.2\n    \n    E:\\HKMAIN (master)\n    λ git checkout Vmysql\n    Switched to branch 'Vmysql'\n    \n    E:\\HKMAIN (Vmysql)\n    λ\n    \n\n或者直接使用git checkout -b v3.0\n\n    E:\\HKMAIN (Vmysql)\n    λ git checkout -b Vsqlserver\n    Switched to a new branch 'Vsqlserver'\n    \n    E:\\HKMAIN (Vsqlserver)\n    λ git branch\n      Vmysql\n    * Vsqlserver\n      master\n      v1.2\n    \n\n### git查看远程仓库\n\n    # git查看远程仓库\n    git remote -v\n    # git添加远程仓库\n    git remote add xxx git@gitlab.xxx.com:xxx/xxx\n    # 删除远程分值\n    git remote rm xxx\n    \n\n### git stash\n\n使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。\n\n    # 保存当前进度\n    git stash\n    # 查看现有的存储\n    git stash list\n    # 恢复最新的进度到工作区\n    git stash pop\n    git stash save your-file-name","slug":"Git基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrn000bh3a41wxm6hy2","content":"<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code>git init</code></pre><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><pre><code>E:\\HKMAIN (master)\nλ git branch\n* master\n  v1.1\n  v1.2\nλ git branch -v\n* master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n  v1.1   b48a782 试剂盒现货列表添加样本信息一栏\n  v1.2   acbf4f1 c1.2</code></pre><h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><p>查看未合并的分支</p>\n<pre><code>λ git branch --no-merged</code></pre><p>删除分支</p>\n<pre><code>git branch -d v1.1</code></pre><p>如果是未合并的分支，使用大写的-D</p>\n<pre><code>E:\\HKMAIN (master)\nλ git branch -d v1.1\nDeleted branch v1.1 (was b48a782).\n\nE:\\HKMAIN (master)\nλ git branch -v\n* master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n  v1.2   acbf4f1 c1.2</code></pre><h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><pre><code>git branch v2.0\n\n\nE:\\HKMAIN (master)\nλ git branch Vmysql\n\nE:\\HKMAIN (master)\nλ git branch\n  Vmysql\n* master\n  v1.2\n\nE:\\HKMAIN (master)\nλ git checkout Vmysql\nSwitched to branch &apos;Vmysql&apos;\n\nE:\\HKMAIN (Vmysql)\nλ</code></pre><p>或者直接使用git checkout -b v3.0</p>\n<pre><code>E:\\HKMAIN (Vmysql)\nλ git checkout -b Vsqlserver\nSwitched to a new branch &apos;Vsqlserver&apos;\n\nE:\\HKMAIN (Vsqlserver)\nλ git branch\n  Vmysql\n* Vsqlserver\n  master\n  v1.2</code></pre><h3 id=\"git查看远程仓库\"><a href=\"#git查看远程仓库\" class=\"headerlink\" title=\"git查看远程仓库\"></a>git查看远程仓库</h3><pre><code># git查看远程仓库\ngit remote -v\n# git添加远程仓库\ngit remote add xxx git@gitlab.xxx.com:xxx/xxx\n# 删除远程分值\ngit remote rm xxx</code></pre><h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。</p>\n<pre><code># 保存当前进度\ngit stash\n# 查看现有的存储\ngit stash list\n# 恢复最新的进度到工作区\ngit stash pop\ngit stash save your-file-name</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code>git init</code></pre><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><pre><code>E:\\HKMAIN (master)\nλ git branch\n* master\n  v1.1\n  v1.2\nλ git branch -v\n* master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n  v1.1   b48a782 试剂盒现货列表添加样本信息一栏\n  v1.2   acbf4f1 c1.2</code></pre><h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><p>查看未合并的分支</p>\n<pre><code>λ git branch --no-merged</code></pre><p>删除分支</p>\n<pre><code>git branch -d v1.1</code></pre><p>如果是未合并的分支，使用大写的-D</p>\n<pre><code>E:\\HKMAIN (master)\nλ git branch -d v1.1\nDeleted branch v1.1 (was b48a782).\n\nE:\\HKMAIN (master)\nλ git branch -v\n* master bf0d2bf 蛋白模板修改USAGE:Reconstitute in sterile ddH2O.\n  v1.2   acbf4f1 c1.2</code></pre><h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><pre><code>git branch v2.0\n\n\nE:\\HKMAIN (master)\nλ git branch Vmysql\n\nE:\\HKMAIN (master)\nλ git branch\n  Vmysql\n* master\n  v1.2\n\nE:\\HKMAIN (master)\nλ git checkout Vmysql\nSwitched to branch &apos;Vmysql&apos;\n\nE:\\HKMAIN (Vmysql)\nλ</code></pre><p>或者直接使用git checkout -b v3.0</p>\n<pre><code>E:\\HKMAIN (Vmysql)\nλ git checkout -b Vsqlserver\nSwitched to a new branch &apos;Vsqlserver&apos;\n\nE:\\HKMAIN (Vsqlserver)\nλ git branch\n  Vmysql\n* Vsqlserver\n  master\n  v1.2</code></pre><h3 id=\"git查看远程仓库\"><a href=\"#git查看远程仓库\" class=\"headerlink\" title=\"git查看远程仓库\"></a>git查看远程仓库</h3><pre><code># git查看远程仓库\ngit remote -v\n# git添加远程仓库\ngit remote add xxx git@gitlab.xxx.com:xxx/xxx\n# 删除远程分值\ngit remote rm xxx</code></pre><h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。</p>\n<pre><code># 保存当前进度\ngit stash\n# 查看现有的存储\ngit stash list\n# 恢复最新的进度到工作区\ngit stash pop\ngit stash save your-file-name</code></pre>"},{"title":"Jetbrains使用配置","url":"53.html","id":"53","comments":0,"date":"2016-11-09T06:57:21.000Z","_content":"\n### 需要新的license\n\n选择server license  \n添加 http://idea.lanyus.com/  \n点击 \"ok\"  \n成功添加  \nphpstorm10.03开始使用http://idea.qinxi1992.cn/  \npycharm\n\n    43B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n    \n\n### 输入法问题\n\n升级到ubuntu16.04后，输入无法使用  \n去安装目录bin文件夹下找到启动idea.sh,用编辑器打开，添加\n\n    XMODIFIERS=\"@im=fcitx\"\n    export XMODIFIERS\n    \n\n在\n\n    # ---------------------------------------------------------------------\n    # Run the IDE.\n    # ---------------------------------------------------------------------\n    \n\n上面即可！\n\n### ubuntu安装\n\n下载并压缩到/opt/目录下,并在/usr/share/appliactions/下创建快捷方式的文件，命名为phpstorm.desktop,编辑如下代码，保存\n\n    [Desktop Entry]\n    Categories=Development;\n    Comment[zh_CN]=\n    Comment=\n    Exec=/opt/phpstorm/bin/phpstorm.sh\n    GenericName[zh_CN]=IDE\n    GenericName=IDE\n    Icon=/opt/phpstorm/bin/webide.png\n    Name[zh_CN]=phpStorm\n    Name=phpStorm　　　　　　　\n    Path=\n    StartupNotify=true\n    Terminal=false\n    Type=Application\n    X-DBUS-ServiceName=\n    X-DBUS-StartupType=\n    X-KDE-SubstituteUID=false\n    X-KDE-Username=Learn Programming\n    \n\n### 界面样式\n\n[theme](https://github.com/jkaving/intellij-colors-solarized)  \n[背景修改，含theme](https://github.com/ChrisRM/material-theme-jetbrains)\n\n### 界面配置\n\n显示行号  \nEditor->General->Appearance->Show line number  \n关闭自动保存  \nAppearance&Behavior->System settings->save files on frame deactivation 关闭  \nEditor->General->Editor tabs->Mark modified tabs with asterisk 勾选\n\n### theme安装\n\n安装模板下载http://phpstorm-themes.com/  \nubuntu安装地址~/.pycharm/config/colors/ ###快捷键 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/_…_/ ）  \nShift+F6 重构-重命名  \nCtrl+X 删除行  \nCtrl+D 复制行  \nCtrl+G 查找行  \nCtrl+Shift+Up/Down 代码向上/下移动。  \nF2 或Shift+F2 高亮错误或警告快速定位  \n写代码，按Tab 生成代码  \n选中文本，按Ctrl+Shift+F7 高亮显示所有该文本，按Esc高亮消失。(因为这个功能我就可以发放心的放弃sublime了)  \nCtrl+B或Ctrl+鼠标左键单击 快速打开光标处的类或方法，（NB的功能）  \nCtrl + Alt + B Go to implementation(s) 跳转方法实现处  \nCtrl + Shift + I Open quick definition lookup 打开定义快速查找  \nAlt + Up/Down Go to previous/next method 跳转到上一个/下一个方法  \nCtrl+E 最近打开的文件  \nAlt+F1 查找代码所在位置  \nCtrl+Alt+L 格式化代码  \nCtrl+R 替换文本  \nCtrl+F 查找文本  \nCtrl+P 方法参数提示  \nF3 查找下一个  \nShift+F3 查找上一个  \nalt+Shift+F 将当前文件加入收藏夹  \nctrl+alt+s 打开配置窗口  \nctrl+Shift+N 通过文件名快速查找工程内的文件（必记）  \nctrl+Shift+alt+N 通过一个字符快速查找位置（必记）  \nShift+enter 重新开始一行（无论光标在哪个位置）  \nCtrl + Alt + T with…（if, else, try, catch, for, etc）用 * 来围绕选中的代码行，（ * 包括 if 、 while 、 try catch 等）  \nCtrl + Shift + U Toggle case for word at caret or selected block 光标所在位置大小写  \nCtrl + Delete Delete to word end 删除文字结束  \nCtrl + Backspace Delete to word start 删除文字开始  \nCtrl + E Recent files popup 弹出最近打开的文件  \nF11 Toggle bookmark 切换标记，我觉得叫书签更好，就是sublime text 的F2  \nCtrl + Shift + F12 Toggle maximizing editor 切换最大化编辑器  \nAlt + Shift + F Add to Favorites 添至收藏夹","source":"_posts/Jetbrains使用配置.md","raw":"---\ntitle: Jetbrains使用配置\ntags:\n  - IDE\nurl: 53.html\nid: 53\ncomments: false\ncategories:\n  - 办公\ndate: 2016-11-09 14:57:21\n---\n\n### 需要新的license\n\n选择server license  \n添加 http://idea.lanyus.com/  \n点击 \"ok\"  \n成功添加  \nphpstorm10.03开始使用http://idea.qinxi1992.cn/  \npycharm\n\n    43B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n    \n\n### 输入法问题\n\n升级到ubuntu16.04后，输入无法使用  \n去安装目录bin文件夹下找到启动idea.sh,用编辑器打开，添加\n\n    XMODIFIERS=\"@im=fcitx\"\n    export XMODIFIERS\n    \n\n在\n\n    # ---------------------------------------------------------------------\n    # Run the IDE.\n    # ---------------------------------------------------------------------\n    \n\n上面即可！\n\n### ubuntu安装\n\n下载并压缩到/opt/目录下,并在/usr/share/appliactions/下创建快捷方式的文件，命名为phpstorm.desktop,编辑如下代码，保存\n\n    [Desktop Entry]\n    Categories=Development;\n    Comment[zh_CN]=\n    Comment=\n    Exec=/opt/phpstorm/bin/phpstorm.sh\n    GenericName[zh_CN]=IDE\n    GenericName=IDE\n    Icon=/opt/phpstorm/bin/webide.png\n    Name[zh_CN]=phpStorm\n    Name=phpStorm　　　　　　　\n    Path=\n    StartupNotify=true\n    Terminal=false\n    Type=Application\n    X-DBUS-ServiceName=\n    X-DBUS-StartupType=\n    X-KDE-SubstituteUID=false\n    X-KDE-Username=Learn Programming\n    \n\n### 界面样式\n\n[theme](https://github.com/jkaving/intellij-colors-solarized)  \n[背景修改，含theme](https://github.com/ChrisRM/material-theme-jetbrains)\n\n### 界面配置\n\n显示行号  \nEditor->General->Appearance->Show line number  \n关闭自动保存  \nAppearance&Behavior->System settings->save files on frame deactivation 关闭  \nEditor->General->Editor tabs->Mark modified tabs with asterisk 勾选\n\n### theme安装\n\n安装模板下载http://phpstorm-themes.com/  \nubuntu安装地址~/.pycharm/config/colors/ ###快捷键 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/_…_/ ）  \nShift+F6 重构-重命名  \nCtrl+X 删除行  \nCtrl+D 复制行  \nCtrl+G 查找行  \nCtrl+Shift+Up/Down 代码向上/下移动。  \nF2 或Shift+F2 高亮错误或警告快速定位  \n写代码，按Tab 生成代码  \n选中文本，按Ctrl+Shift+F7 高亮显示所有该文本，按Esc高亮消失。(因为这个功能我就可以发放心的放弃sublime了)  \nCtrl+B或Ctrl+鼠标左键单击 快速打开光标处的类或方法，（NB的功能）  \nCtrl + Alt + B Go to implementation(s) 跳转方法实现处  \nCtrl + Shift + I Open quick definition lookup 打开定义快速查找  \nAlt + Up/Down Go to previous/next method 跳转到上一个/下一个方法  \nCtrl+E 最近打开的文件  \nAlt+F1 查找代码所在位置  \nCtrl+Alt+L 格式化代码  \nCtrl+R 替换文本  \nCtrl+F 查找文本  \nCtrl+P 方法参数提示  \nF3 查找下一个  \nShift+F3 查找上一个  \nalt+Shift+F 将当前文件加入收藏夹  \nctrl+alt+s 打开配置窗口  \nctrl+Shift+N 通过文件名快速查找工程内的文件（必记）  \nctrl+Shift+alt+N 通过一个字符快速查找位置（必记）  \nShift+enter 重新开始一行（无论光标在哪个位置）  \nCtrl + Alt + T with…（if, else, try, catch, for, etc）用 * 来围绕选中的代码行，（ * 包括 if 、 while 、 try catch 等）  \nCtrl + Shift + U Toggle case for word at caret or selected block 光标所在位置大小写  \nCtrl + Delete Delete to word end 删除文字结束  \nCtrl + Backspace Delete to word start 删除文字开始  \nCtrl + E Recent files popup 弹出最近打开的文件  \nF11 Toggle bookmark 切换标记，我觉得叫书签更好，就是sublime text 的F2  \nCtrl + Shift + F12 Toggle maximizing editor 切换最大化编辑器  \nAlt + Shift + F Add to Favorites 添至收藏夹","slug":"Jetbrains使用配置","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrr000eh3a4or4onwun","content":"<h3 id=\"需要新的license\"><a href=\"#需要新的license\" class=\"headerlink\" title=\"需要新的license\"></a>需要新的license</h3><p>选择server license<br>添加 <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a><br>点击 “ok”<br>成功添加<br>phpstorm10.03开始使用<a href=\"http://idea.qinxi1992.cn/\" target=\"_blank\" rel=\"noopener\">http://idea.qinxi1992.cn/</a><br>pycharm</p>\n<pre><code>43B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</code></pre><h3 id=\"输入法问题\"><a href=\"#输入法问题\" class=\"headerlink\" title=\"输入法问题\"></a>输入法问题</h3><p>升级到ubuntu16.04后，输入无法使用<br>去安装目录bin文件夹下找到启动idea.sh,用编辑器打开，添加</p>\n<pre><code>XMODIFIERS=&quot;@im=fcitx&quot;\nexport XMODIFIERS</code></pre><p>在</p>\n<pre><code># ---------------------------------------------------------------------\n# Run the IDE.\n# ---------------------------------------------------------------------</code></pre><p>上面即可！</p>\n<h3 id=\"ubuntu安装\"><a href=\"#ubuntu安装\" class=\"headerlink\" title=\"ubuntu安装\"></a>ubuntu安装</h3><p>下载并压缩到/opt/目录下,并在/usr/share/appliactions/下创建快捷方式的文件，命名为phpstorm.desktop,编辑如下代码，保存</p>\n<pre><code>[Desktop Entry]\nCategories=Development;\nComment[zh_CN]=\nComment=\nExec=/opt/phpstorm/bin/phpstorm.sh\nGenericName[zh_CN]=IDE\nGenericName=IDE\nIcon=/opt/phpstorm/bin/webide.png\nName[zh_CN]=phpStorm\nName=phpStorm　　　　　　　\nPath=\nStartupNotify=true\nTerminal=false\nType=Application\nX-DBUS-ServiceName=\nX-DBUS-StartupType=\nX-KDE-SubstituteUID=false\nX-KDE-Username=Learn Programming</code></pre><h3 id=\"界面样式\"><a href=\"#界面样式\" class=\"headerlink\" title=\"界面样式\"></a>界面样式</h3><p><a href=\"https://github.com/jkaving/intellij-colors-solarized\" target=\"_blank\" rel=\"noopener\">theme</a><br><a href=\"https://github.com/ChrisRM/material-theme-jetbrains\" target=\"_blank\" rel=\"noopener\">背景修改，含theme</a></p>\n<h3 id=\"界面配置\"><a href=\"#界面配置\" class=\"headerlink\" title=\"界面配置\"></a>界面配置</h3><p>显示行号<br>Editor-&gt;General-&gt;Appearance-&gt;Show line number<br>关闭自动保存<br>Appearance&amp;Behavior-&gt;System settings-&gt;save files on frame deactivation 关闭<br>Editor-&gt;General-&gt;Editor tabs-&gt;Mark modified tabs with asterisk 勾选</p>\n<h3 id=\"theme安装\"><a href=\"#theme安装\" class=\"headerlink\" title=\"theme安装\"></a>theme安装</h3><p>安装模板下载<a href=\"http://phpstorm-themes.com/\" target=\"_blank\" rel=\"noopener\">http://phpstorm-themes.com/</a><br>ubuntu安装地址~/.pycharm/config/colors/ ###快捷键 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/<em>…</em>/ ）<br>Shift+F6 重构-重命名<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+G 查找行<br>Ctrl+Shift+Up/Down 代码向上/下移动。<br>F2 或Shift+F2 高亮错误或警告快速定位<br>写代码，按Tab 生成代码<br>选中文本，按Ctrl+Shift+F7 高亮显示所有该文本，按Esc高亮消失。(因为这个功能我就可以发放心的放弃sublime了)<br>Ctrl+B或Ctrl+鼠标左键单击 快速打开光标处的类或方法，（NB的功能）<br>Ctrl + Alt + B Go to implementation(s) 跳转方法实现处<br>Ctrl + Shift + I Open quick definition lookup 打开定义快速查找<br>Alt + Up/Down Go to previous/next method 跳转到上一个/下一个方法<br>Ctrl+E 最近打开的文件<br>Alt+F1 查找代码所在位置<br>Ctrl+Alt+L 格式化代码<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本<br>Ctrl+P 方法参数提示<br>F3 查找下一个<br>Shift+F3 查找上一个<br>alt+Shift+F 将当前文件加入收藏夹<br>ctrl+alt+s 打开配置窗口<br>ctrl+Shift+N 通过文件名快速查找工程内的文件（必记）<br>ctrl+Shift+alt+N 通过一个字符快速查找位置（必记）<br>Shift+enter 重新开始一行（无论光标在哪个位置）<br>Ctrl + Alt + T with…（if, else, try, catch, for, etc）用 * 来围绕选中的代码行，（ * 包括 if 、 while 、 try catch 等）<br>Ctrl + Shift + U Toggle case for word at caret or selected block 光标所在位置大小写<br>Ctrl + Delete Delete to word end 删除文字结束<br>Ctrl + Backspace Delete to word start 删除文字开始<br>Ctrl + E Recent files popup 弹出最近打开的文件<br>F11 Toggle bookmark 切换标记，我觉得叫书签更好，就是sublime text 的F2<br>Ctrl + Shift + F12 Toggle maximizing editor 切换最大化编辑器<br>Alt + Shift + F Add to Favorites 添至收藏夹</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"需要新的license\"><a href=\"#需要新的license\" class=\"headerlink\" title=\"需要新的license\"></a>需要新的license</h3><p>选择server license<br>添加 <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a><br>点击 “ok”<br>成功添加<br>phpstorm10.03开始使用<a href=\"http://idea.qinxi1992.cn/\" target=\"_blank\" rel=\"noopener\">http://idea.qinxi1992.cn/</a><br>pycharm</p>\n<pre><code>43B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</code></pre><h3 id=\"输入法问题\"><a href=\"#输入法问题\" class=\"headerlink\" title=\"输入法问题\"></a>输入法问题</h3><p>升级到ubuntu16.04后，输入无法使用<br>去安装目录bin文件夹下找到启动idea.sh,用编辑器打开，添加</p>\n<pre><code>XMODIFIERS=&quot;@im=fcitx&quot;\nexport XMODIFIERS</code></pre><p>在</p>\n<pre><code># ---------------------------------------------------------------------\n# Run the IDE.\n# ---------------------------------------------------------------------</code></pre><p>上面即可！</p>\n<h3 id=\"ubuntu安装\"><a href=\"#ubuntu安装\" class=\"headerlink\" title=\"ubuntu安装\"></a>ubuntu安装</h3><p>下载并压缩到/opt/目录下,并在/usr/share/appliactions/下创建快捷方式的文件，命名为phpstorm.desktop,编辑如下代码，保存</p>\n<pre><code>[Desktop Entry]\nCategories=Development;\nComment[zh_CN]=\nComment=\nExec=/opt/phpstorm/bin/phpstorm.sh\nGenericName[zh_CN]=IDE\nGenericName=IDE\nIcon=/opt/phpstorm/bin/webide.png\nName[zh_CN]=phpStorm\nName=phpStorm　　　　　　　\nPath=\nStartupNotify=true\nTerminal=false\nType=Application\nX-DBUS-ServiceName=\nX-DBUS-StartupType=\nX-KDE-SubstituteUID=false\nX-KDE-Username=Learn Programming</code></pre><h3 id=\"界面样式\"><a href=\"#界面样式\" class=\"headerlink\" title=\"界面样式\"></a>界面样式</h3><p><a href=\"https://github.com/jkaving/intellij-colors-solarized\" target=\"_blank\" rel=\"noopener\">theme</a><br><a href=\"https://github.com/ChrisRM/material-theme-jetbrains\" target=\"_blank\" rel=\"noopener\">背景修改，含theme</a></p>\n<h3 id=\"界面配置\"><a href=\"#界面配置\" class=\"headerlink\" title=\"界面配置\"></a>界面配置</h3><p>显示行号<br>Editor-&gt;General-&gt;Appearance-&gt;Show line number<br>关闭自动保存<br>Appearance&amp;Behavior-&gt;System settings-&gt;save files on frame deactivation 关闭<br>Editor-&gt;General-&gt;Editor tabs-&gt;Mark modified tabs with asterisk 勾选</p>\n<h3 id=\"theme安装\"><a href=\"#theme安装\" class=\"headerlink\" title=\"theme安装\"></a>theme安装</h3><p>安装模板下载<a href=\"http://phpstorm-themes.com/\" target=\"_blank\" rel=\"noopener\">http://phpstorm-themes.com/</a><br>ubuntu安装地址~/.pycharm/config/colors/ ###快捷键 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/<em>…</em>/ ）<br>Shift+F6 重构-重命名<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+G 查找行<br>Ctrl+Shift+Up/Down 代码向上/下移动。<br>F2 或Shift+F2 高亮错误或警告快速定位<br>写代码，按Tab 生成代码<br>选中文本，按Ctrl+Shift+F7 高亮显示所有该文本，按Esc高亮消失。(因为这个功能我就可以发放心的放弃sublime了)<br>Ctrl+B或Ctrl+鼠标左键单击 快速打开光标处的类或方法，（NB的功能）<br>Ctrl + Alt + B Go to implementation(s) 跳转方法实现处<br>Ctrl + Shift + I Open quick definition lookup 打开定义快速查找<br>Alt + Up/Down Go to previous/next method 跳转到上一个/下一个方法<br>Ctrl+E 最近打开的文件<br>Alt+F1 查找代码所在位置<br>Ctrl+Alt+L 格式化代码<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本<br>Ctrl+P 方法参数提示<br>F3 查找下一个<br>Shift+F3 查找上一个<br>alt+Shift+F 将当前文件加入收藏夹<br>ctrl+alt+s 打开配置窗口<br>ctrl+Shift+N 通过文件名快速查找工程内的文件（必记）<br>ctrl+Shift+alt+N 通过一个字符快速查找位置（必记）<br>Shift+enter 重新开始一行（无论光标在哪个位置）<br>Ctrl + Alt + T with…（if, else, try, catch, for, etc）用 * 来围绕选中的代码行，（ * 包括 if 、 while 、 try catch 等）<br>Ctrl + Shift + U Toggle case for word at caret or selected block 光标所在位置大小写<br>Ctrl + Delete Delete to word end 删除文字结束<br>Ctrl + Backspace Delete to word start 删除文字开始<br>Ctrl + E Recent files popup 弹出最近打开的文件<br>F11 Toggle bookmark 切换标记，我觉得叫书签更好，就是sublime text 的F2<br>Ctrl + Shift + F12 Toggle maximizing editor 切换最大化编辑器<br>Alt + Shift + F Add to Favorites 添至收藏夹</p>\n"},{"title":"MYSQL主从复制","url":"45.html","id":"45","comments":0,"date":"2016-11-09T06:34:49.000Z","_content":"\n### 测试环境\n\n主服务器  \n192.168.0.160 mysql 5.6.17 win2008R2  \n从服务器  \n192.168.0.206 mysql 5.6.12 win2003\n\n### 主服务器创建数据库test1, test2\n\n    mysql>CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \n    mysql>USE test1\n    mysql>CREATE TABLE `test1`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \n    mysql>INSERT INTO `user` (`id`, `name`) VALUES (NULL, 'user1'), (NULL, 'user2')\n    \n\n    mysql>CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;    \n    mysql>USE test2\n    mysql>CREATE TABLE `test2`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \n    mysql>INSERT INTO `user` (`id`, `name`) VALUES (NULL, 'user1'), (NULL, 'user2')\n    \n\n### 将test1,test2 复制到从服务器上\n\n    mysql>CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \n    mysql>USE test1  \n    mysql>set names utf8;  \n    mysql>source c:/test1.sql;\n    mysql>CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \n    mysql>USE test2  \n    mysql>set names utf8;  \n    mysql>source c:/test2.sql;\n    \n\n### 主服务器配置\n\n编辑配置文件my.ini\n\n    [mysqld] \n    server-id=1     # 配一个唯一的ID编号，1至32  \n    log-bin=mysql-bin  # 二进制文件存放路径  \n    binlog-do-db=test1  # 需要同步的数据库名  \n    binlog-ignore-db=test2  # 不需要同步的数据库名\n    \n\n重启mysql并重新登陆，创建授权用户\n\n    mysql>grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave@192.168.0.206 identified by '123456' ;  \n    mysql>grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave1@192.168.0.118 identified by '123456' ; # 如果是多从\n    mysql>flush privileges;     \n    mysql>show master status;  # 找到File 和 Position 的值记录下来    \n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160401152254.png)\n\n### 从服务器配置192.168.0.206\n\n编辑配置文件my.ini添加\n\n    [mysqld]\n    server-id=2     #唯一\n    replicate-do-db=test1\n    replicate-ignore-db=test2\n    \n\n重启数据库并重新登陆\n\n    mysql>mysql -uroot -p  \n    mysql>change master to master_host='192.168.0.160',master_user='slave',master_password='123456', master_log_file='mysql-bin.000001',master_log_pos=199;  \n    mysql>start slave;\n    mysql>show slave status\\G\n    \n\n结果出现一下内容表示成功\n\n    Slave_IO_Running: Yes\n    Slave_SQL_Running: Yes\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160401152538.png) 多从，另一个从服务器配置192.168.0.118  \n编辑配置文件my.ini添加\n\n    [mysqld]\n    server-id=3     #唯一，注意和其他的从服务器不一致\n    replicate-do-db=test1\n    replicate-ignore-db=test2\n    \n\n重启mysql并重新登陆，创建授权用户\n\n    mysql>change master to master_host='192.168.0.160',master_user='slave1',master_password='123456', master_log_file='mysql-bin.000001',master_log_pos=199;  \n    mysql>start slave;\n    mysql>show slave status\\G    \n    \n\n### 最后测试\n\n在主服务器添加表和数据，可以看到从服务器数据库已经修改。  \n重启主从数据库，依然可以正常同步。\n\n### 错误处理办法\n\n连接不上master：  \n1，密码是否正确，是否给予权限  \n2，防火墙是否开启3306端口 配置的时候注意锁表\n\n    LOCK TABLES\n    \n\n    UNLOCK TABLES;\n    \n\n错误提示 Got fatal error 1236 from master when reading data from binary log: 'Slave can not handle replication events with the checksum that master is configured to log; the first event 'mysql-bin.000002' at 120, the last event read from './mysql-bin.000002' at 120, the last byte read from './mysql-bin.000002' at 120 由于主库是5.6, 从库是5.5.  \n5.6的版本中加入了replication event checksum，主从复制时间校验功能，所以需要把这个关掉才能正常同步到5.5的slave 修改主库\n\n    sudo vim /etc/my.cnf\n    binlog_checksum=none\n    \n\n重新配置主从即可","source":"_posts/MYSQL主从复制.md","raw":"---\ntitle: MYSQL主从复制\ntags:\n  - mysql\nurl: 45.html\nid: 45\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 14:34:49\n---\n\n### 测试环境\n\n主服务器  \n192.168.0.160 mysql 5.6.17 win2008R2  \n从服务器  \n192.168.0.206 mysql 5.6.12 win2003\n\n### 主服务器创建数据库test1, test2\n\n    mysql>CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \n    mysql>USE test1\n    mysql>CREATE TABLE `test1`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \n    mysql>INSERT INTO `user` (`id`, `name`) VALUES (NULL, 'user1'), (NULL, 'user2')\n    \n\n    mysql>CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;    \n    mysql>USE test2\n    mysql>CREATE TABLE `test2`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \n    mysql>INSERT INTO `user` (`id`, `name`) VALUES (NULL, 'user1'), (NULL, 'user2')\n    \n\n### 将test1,test2 复制到从服务器上\n\n    mysql>CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \n    mysql>USE test1  \n    mysql>set names utf8;  \n    mysql>source c:/test1.sql;\n    mysql>CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \n    mysql>USE test2  \n    mysql>set names utf8;  \n    mysql>source c:/test2.sql;\n    \n\n### 主服务器配置\n\n编辑配置文件my.ini\n\n    [mysqld] \n    server-id=1     # 配一个唯一的ID编号，1至32  \n    log-bin=mysql-bin  # 二进制文件存放路径  \n    binlog-do-db=test1  # 需要同步的数据库名  \n    binlog-ignore-db=test2  # 不需要同步的数据库名\n    \n\n重启mysql并重新登陆，创建授权用户\n\n    mysql>grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave@192.168.0.206 identified by '123456' ;  \n    mysql>grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave1@192.168.0.118 identified by '123456' ; # 如果是多从\n    mysql>flush privileges;     \n    mysql>show master status;  # 找到File 和 Position 的值记录下来    \n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160401152254.png)\n\n### 从服务器配置192.168.0.206\n\n编辑配置文件my.ini添加\n\n    [mysqld]\n    server-id=2     #唯一\n    replicate-do-db=test1\n    replicate-ignore-db=test2\n    \n\n重启数据库并重新登陆\n\n    mysql>mysql -uroot -p  \n    mysql>change master to master_host='192.168.0.160',master_user='slave',master_password='123456', master_log_file='mysql-bin.000001',master_log_pos=199;  \n    mysql>start slave;\n    mysql>show slave status\\G\n    \n\n结果出现一下内容表示成功\n\n    Slave_IO_Running: Yes\n    Slave_SQL_Running: Yes\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160401152538.png) 多从，另一个从服务器配置192.168.0.118  \n编辑配置文件my.ini添加\n\n    [mysqld]\n    server-id=3     #唯一，注意和其他的从服务器不一致\n    replicate-do-db=test1\n    replicate-ignore-db=test2\n    \n\n重启mysql并重新登陆，创建授权用户\n\n    mysql>change master to master_host='192.168.0.160',master_user='slave1',master_password='123456', master_log_file='mysql-bin.000001',master_log_pos=199;  \n    mysql>start slave;\n    mysql>show slave status\\G    \n    \n\n### 最后测试\n\n在主服务器添加表和数据，可以看到从服务器数据库已经修改。  \n重启主从数据库，依然可以正常同步。\n\n### 错误处理办法\n\n连接不上master：  \n1，密码是否正确，是否给予权限  \n2，防火墙是否开启3306端口 配置的时候注意锁表\n\n    LOCK TABLES\n    \n\n    UNLOCK TABLES;\n    \n\n错误提示 Got fatal error 1236 from master when reading data from binary log: 'Slave can not handle replication events with the checksum that master is configured to log; the first event 'mysql-bin.000002' at 120, the last event read from './mysql-bin.000002' at 120, the last byte read from './mysql-bin.000002' at 120 由于主库是5.6, 从库是5.5.  \n5.6的版本中加入了replication event checksum，主从复制时间校验功能，所以需要把这个关掉才能正常同步到5.5的slave 修改主库\n\n    sudo vim /etc/my.cnf\n    binlog_checksum=none\n    \n\n重新配置主从即可","slug":"MYSQL主从复制","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwru000hh3a4wvkck5e1","content":"<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>主服务器<br>192.168.0.160 mysql 5.6.17 win2008R2<br>从服务器<br>192.168.0.206 mysql 5.6.12 win2003</p>\n<h3 id=\"主服务器创建数据库test1-test2\"><a href=\"#主服务器创建数据库test1-test2\" class=\"headerlink\" title=\"主服务器创建数据库test1, test2\"></a>主服务器创建数据库test1, test2</h3><pre><code>mysql&gt;CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \nmysql&gt;USE test1\nmysql&gt;CREATE TABLE `test1`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \nmysql&gt;INSERT INTO `user` (`id`, `name`) VALUES (NULL, &apos;user1&apos;), (NULL, &apos;user2&apos;)\n\n\nmysql&gt;CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;    \nmysql&gt;USE test2\nmysql&gt;CREATE TABLE `test2`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \nmysql&gt;INSERT INTO `user` (`id`, `name`) VALUES (NULL, &apos;user1&apos;), (NULL, &apos;user2&apos;)</code></pre><h3 id=\"将test1-test2-复制到从服务器上\"><a href=\"#将test1-test2-复制到从服务器上\" class=\"headerlink\" title=\"将test1,test2 复制到从服务器上\"></a>将test1,test2 复制到从服务器上</h3><pre><code>mysql&gt;CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \nmysql&gt;USE test1  \nmysql&gt;set names utf8;  \nmysql&gt;source c:/test1.sql;\nmysql&gt;CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \nmysql&gt;USE test2  \nmysql&gt;set names utf8;  \nmysql&gt;source c:/test2.sql;</code></pre><h3 id=\"主服务器配置\"><a href=\"#主服务器配置\" class=\"headerlink\" title=\"主服务器配置\"></a>主服务器配置</h3><p>编辑配置文件my.ini</p>\n<pre><code>[mysqld] \nserver-id=1     # 配一个唯一的ID编号，1至32  \nlog-bin=mysql-bin  # 二进制文件存放路径  \nbinlog-do-db=test1  # 需要同步的数据库名  \nbinlog-ignore-db=test2  # 不需要同步的数据库名</code></pre><p>重启mysql并重新登陆，创建授权用户</p>\n<pre><code>mysql&gt;grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave@192.168.0.206 identified by &apos;123456&apos; ;  \nmysql&gt;grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave1@192.168.0.118 identified by &apos;123456&apos; ; # 如果是多从\nmysql&gt;flush privileges;     \nmysql&gt;show master status;  # 找到File 和 Position 的值记录下来    </code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160401152254.png\" alt></p>\n<h3 id=\"从服务器配置192-168-0-206\"><a href=\"#从服务器配置192-168-0-206\" class=\"headerlink\" title=\"从服务器配置192.168.0.206\"></a>从服务器配置192.168.0.206</h3><p>编辑配置文件my.ini添加</p>\n<pre><code>[mysqld]\nserver-id=2     #唯一\nreplicate-do-db=test1\nreplicate-ignore-db=test2</code></pre><p>重启数据库并重新登陆</p>\n<pre><code>mysql&gt;mysql -uroot -p  \nmysql&gt;change master to master_host=&apos;192.168.0.160&apos;,master_user=&apos;slave&apos;,master_password=&apos;123456&apos;, master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=199;  \nmysql&gt;start slave;\nmysql&gt;show slave status\\G</code></pre><p>结果出现一下内容表示成功</p>\n<pre><code>Slave_IO_Running: Yes\nSlave_SQL_Running: Yes</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160401152538.png\" alt> 多从，另一个从服务器配置192.168.0.118<br>编辑配置文件my.ini添加</p>\n<pre><code>[mysqld]\nserver-id=3     #唯一，注意和其他的从服务器不一致\nreplicate-do-db=test1\nreplicate-ignore-db=test2</code></pre><p>重启mysql并重新登陆，创建授权用户</p>\n<pre><code>mysql&gt;change master to master_host=&apos;192.168.0.160&apos;,master_user=&apos;slave1&apos;,master_password=&apos;123456&apos;, master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=199;  \nmysql&gt;start slave;\nmysql&gt;show slave status\\G    </code></pre><h3 id=\"最后测试\"><a href=\"#最后测试\" class=\"headerlink\" title=\"最后测试\"></a>最后测试</h3><p>在主服务器添加表和数据，可以看到从服务器数据库已经修改。<br>重启主从数据库，依然可以正常同步。</p>\n<h3 id=\"错误处理办法\"><a href=\"#错误处理办法\" class=\"headerlink\" title=\"错误处理办法\"></a>错误处理办法</h3><p>连接不上master：<br>1，密码是否正确，是否给予权限<br>2，防火墙是否开启3306端口 配置的时候注意锁表</p>\n<pre><code>LOCK TABLES\n\n\nUNLOCK TABLES;</code></pre><p>错误提示 Got fatal error 1236 from master when reading data from binary log: ‘Slave can not handle replication events with the checksum that master is configured to log; the first event ‘mysql-bin.000002’ at 120, the last event read from ‘./mysql-bin.000002’ at 120, the last byte read from ‘./mysql-bin.000002’ at 120 由于主库是5.6, 从库是5.5.<br>5.6的版本中加入了replication event checksum，主从复制时间校验功能，所以需要把这个关掉才能正常同步到5.5的slave 修改主库</p>\n<pre><code>sudo vim /etc/my.cnf\nbinlog_checksum=none</code></pre><p>重新配置主从即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>主服务器<br>192.168.0.160 mysql 5.6.17 win2008R2<br>从服务器<br>192.168.0.206 mysql 5.6.12 win2003</p>\n<h3 id=\"主服务器创建数据库test1-test2\"><a href=\"#主服务器创建数据库test1-test2\" class=\"headerlink\" title=\"主服务器创建数据库test1, test2\"></a>主服务器创建数据库test1, test2</h3><pre><code>mysql&gt;CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \nmysql&gt;USE test1\nmysql&gt;CREATE TABLE `test1`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \nmysql&gt;INSERT INTO `user` (`id`, `name`) VALUES (NULL, &apos;user1&apos;), (NULL, &apos;user2&apos;)\n\n\nmysql&gt;CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;    \nmysql&gt;USE test2\nmysql&gt;CREATE TABLE `test2`.`user` ( `id` INT(10) NOT NULL AUTO_INCREMENT , `name` VARCHAR(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM;  \nmysql&gt;INSERT INTO `user` (`id`, `name`) VALUES (NULL, &apos;user1&apos;), (NULL, &apos;user2&apos;)</code></pre><h3 id=\"将test1-test2-复制到从服务器上\"><a href=\"#将test1-test2-复制到从服务器上\" class=\"headerlink\" title=\"将test1,test2 复制到从服务器上\"></a>将test1,test2 复制到从服务器上</h3><pre><code>mysql&gt;CREATE DATABASE `test1` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \nmysql&gt;USE test1  \nmysql&gt;set names utf8;  \nmysql&gt;source c:/test1.sql;\nmysql&gt;CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;     \nmysql&gt;USE test2  \nmysql&gt;set names utf8;  \nmysql&gt;source c:/test2.sql;</code></pre><h3 id=\"主服务器配置\"><a href=\"#主服务器配置\" class=\"headerlink\" title=\"主服务器配置\"></a>主服务器配置</h3><p>编辑配置文件my.ini</p>\n<pre><code>[mysqld] \nserver-id=1     # 配一个唯一的ID编号，1至32  \nlog-bin=mysql-bin  # 二进制文件存放路径  \nbinlog-do-db=test1  # 需要同步的数据库名  \nbinlog-ignore-db=test2  # 不需要同步的数据库名</code></pre><p>重启mysql并重新登陆，创建授权用户</p>\n<pre><code>mysql&gt;grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave@192.168.0.206 identified by &apos;123456&apos; ;  \nmysql&gt;grant REPLICATION SLAVE,RELOAD,SUPER on *.* to slave1@192.168.0.118 identified by &apos;123456&apos; ; # 如果是多从\nmysql&gt;flush privileges;     \nmysql&gt;show master status;  # 找到File 和 Position 的值记录下来    </code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160401152254.png\" alt></p>\n<h3 id=\"从服务器配置192-168-0-206\"><a href=\"#从服务器配置192-168-0-206\" class=\"headerlink\" title=\"从服务器配置192.168.0.206\"></a>从服务器配置192.168.0.206</h3><p>编辑配置文件my.ini添加</p>\n<pre><code>[mysqld]\nserver-id=2     #唯一\nreplicate-do-db=test1\nreplicate-ignore-db=test2</code></pre><p>重启数据库并重新登陆</p>\n<pre><code>mysql&gt;mysql -uroot -p  \nmysql&gt;change master to master_host=&apos;192.168.0.160&apos;,master_user=&apos;slave&apos;,master_password=&apos;123456&apos;, master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=199;  \nmysql&gt;start slave;\nmysql&gt;show slave status\\G</code></pre><p>结果出现一下内容表示成功</p>\n<pre><code>Slave_IO_Running: Yes\nSlave_SQL_Running: Yes</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160401152538.png\" alt> 多从，另一个从服务器配置192.168.0.118<br>编辑配置文件my.ini添加</p>\n<pre><code>[mysqld]\nserver-id=3     #唯一，注意和其他的从服务器不一致\nreplicate-do-db=test1\nreplicate-ignore-db=test2</code></pre><p>重启mysql并重新登陆，创建授权用户</p>\n<pre><code>mysql&gt;change master to master_host=&apos;192.168.0.160&apos;,master_user=&apos;slave1&apos;,master_password=&apos;123456&apos;, master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=199;  \nmysql&gt;start slave;\nmysql&gt;show slave status\\G    </code></pre><h3 id=\"最后测试\"><a href=\"#最后测试\" class=\"headerlink\" title=\"最后测试\"></a>最后测试</h3><p>在主服务器添加表和数据，可以看到从服务器数据库已经修改。<br>重启主从数据库，依然可以正常同步。</p>\n<h3 id=\"错误处理办法\"><a href=\"#错误处理办法\" class=\"headerlink\" title=\"错误处理办法\"></a>错误处理办法</h3><p>连接不上master：<br>1，密码是否正确，是否给予权限<br>2，防火墙是否开启3306端口 配置的时候注意锁表</p>\n<pre><code>LOCK TABLES\n\n\nUNLOCK TABLES;</code></pre><p>错误提示 Got fatal error 1236 from master when reading data from binary log: ‘Slave can not handle replication events with the checksum that master is configured to log; the first event ‘mysql-bin.000002’ at 120, the last event read from ‘./mysql-bin.000002’ at 120, the last byte read from ‘./mysql-bin.000002’ at 120 由于主库是5.6, 从库是5.5.<br>5.6的版本中加入了replication event checksum，主从复制时间校验功能，所以需要把这个关掉才能正常同步到5.5的slave 修改主库</p>\n<pre><code>sudo vim /etc/my.cnf\nbinlog_checksum=none</code></pre><p>重新配置主从即可</p>\n"},{"title":"ORACLE Virtualbox使用","url":"11.html","id":"11","comments":0,"date":"2016-11-08T01:09:01.000Z","_content":"\n### 安装和主机共享\n\n> 点击设备，安装增强功能\n\n### 共享剪贴板\n\n> 点击设备，共享剪贴板，双向\n\n### 快捷键\n\n> 显示客户机菜单 右Ctrl+C 全屏快捷键 右Ctrl+F\n\n### 4中网络连接形式(以下内容来自网络)\n\n**第一种 NAT模式**  \n解释： NAT模式是最简单的实现虚拟机上网的方式，你可以这样理解：Vhost访问网络的所有数据都是由主机提供的，vhost并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Vhost的存在。  \n虚拟机与主机关系：  \n只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。  \n虚拟机与网络中其他主机的关系：  \n只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。  \n虚拟机与虚拟机之间的关系：  \n相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。  \nIP:10.0.2.15  \n网关：10.0.2.2  \nDNS：10.0.2.3  \n一台虚拟机的多个网卡可以被设定使用 NAT， 第一个网卡连接了到专用网 10.0.2.0，第二个网卡连接到专用网络 10.0.3.0，等等。默认得到的客户端ip（IP Address）是10.0.2.15，网关（Gateway）是10.0.2.2，域名服务器（DNS）是10.0.2.3，可以手动参考这个进行修改。  \nNAT方案优缺点：  \n笔记本已插网线时： 虚拟机可以访问主机，虚拟机可以访问互联网，在做了端口映射后（最后有说明），主机可以访问虚拟机上的服务（如数据库）。  \n笔记本没插网线时： 主机的“本地连接”有红叉的，虚拟机可以访问主机，虚拟机不可以访问互联网，在做了端口映射后，主机可以访问虚拟机上的服务（如数据库）。 **第二种 Bridged Adapter模式**  \n解释：  \n网桥模式是我最喜欢的用的一种模式，同时，模拟度也是相当完美。你可以这样理解，它是通过主机网卡，架设了一条桥，直接连入到网络中了。因此，它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。  \n虚拟机与主机关系：  \n可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。  \n虚拟机于网络中其他主机关系：  \n可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。  \n虚拟机于虚拟机关系：  \n可以相互访问，原因同上。  \nIP：一般是DHCP分配的，与主机的“本地连接”的IP 是同一网段的。虚拟机就能与主机互相通信。  \n笔记本已插网线时：（若网络中有DHCP服务器）主机与虚拟机会通过DHCP分别得到一个IP，这两个IP在同一网段。 主机与虚拟机可以ping通，虚拟机可以上互联网。  \n笔记本没插网线时：主机与虚拟机不能通信。主机的“本地连接”有红叉，就不能手工指定IP。虚拟机也不能通过DHCP得到IP地址，手工指定IP后，也无法与主机通信，因为主机无IP。  \n这时主机的VirtualBox Host-Only Network 网卡是有ip的，192.168.56.1。虚拟机就算手工指定了IP 192.168.56.*，也ping不能主机。 **第三种 Internal模式**  \n解释：  \n内网模式，顾名思义就是内部网络模式，虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。  \n虚拟机与主机关系：  \n不能相互访问，彼此不属于同一个网络，无法相互访问。  \n虚拟机与网络中其他主机关系：  \n不能相互访问，理由同上。  \n虚拟机与虚拟机关系：  \n可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。如上配置图中，名称为intnet。  \nIP: VirtualBox的DHCP服务器会为它分配IP ，一般得到的是192.168.56.101，因为是从101起分的，也可手工指定192.168.56.*。  \n笔记本已插网线时：虚拟机可以与主机的VirtualBox Host-Only Network 网卡通信  \n这种方案不受主机本地连接（网卡）是否有红叉的影响。 **第四种 Host-only Adapter模式**  \n解释：  \n主机模式，这是一种比较复杂的模式，需要有比较扎实的网络基础知识才能玩转。可以说前面几种模式所实现的功能，在这种模式下，通过虚拟机及网卡的设置都可以被实现。  \n我们可以理解为Vbox在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，我们可以通过设置这张网卡来实现上网及其他很多功能，比如（网卡共享、网卡桥接等）。  \n虚拟机与主机关系  \n默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X 子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。  \n虚拟机与网络主机关系  \n默认不能相互访问，原因同上，通过设置，可以实现相互访问。  \n虚拟机与虚拟机关系  \n默认可以相互访问，都是同处于一个网段。  \n虚拟机访问主机 用的是主机的VirtualBox Host-Only Network网卡的IP：192.168.56.1 ，不管主机“本地连接”有无红叉，永远通。  \n主机访问虚拟机，用是的虚拟机的网卡3的IP： 192.168.56.101 ，不管主机“本地连接”有无红叉，永远通。  \n虚拟机访问互联网，用的是自己的网卡2， 这时主机要能通过“本地连接”有线上网，（无线网卡不行） 通过对以上几种网络模式的了解，我们就可以灵活运用，模拟组建出我们所想要的任何一种网络环境了。  \n比如我想模拟出来一个一台主机，监控一个局域网上网情况的网络环境。  \n首先我开启了两台虚拟机vhost1与vhost2，当然如果硬件允许，我同样可以再增加vhost3、vhost4…  \n所有的vhost我都设置成internat内网模式，网络名称为intnal，网关为192.168.56.100，意思就是通过 192.168.56.100网卡上网。其中有一台vhost1我设置为双网卡，一张为内网模式（192.168.56.100），一张为网桥模式 （192.168.1.101）。两张网卡设置双网卡共享上网  \n虚拟机之间为局域网，其中有一台虚拟机vhost1通过与外网相连，所有局域网中的虚拟机又通过vhost1来实现上外网。这样vhost1就可以监控整个虚拟机局域网上网情况了。\n\n### xp下全屏\n\n安装增强包后再全局设置里设置成本机的分辨率 ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160119172333.png)\n\n### Ubuntu全屏\n\n首先，安装增强包，点击Run Software![](http://7xq3ry.com1.z0.glb.clouddn.com/20160114170837.png) 重启虚拟机  \n点击设备->分配光驱->移除虚拟盘  \n点击 右Ctrl+F全屏快捷键\n\n### Ubuntu设置桥接网卡\n\n在设置->网络->连接方式->桥接网卡\n\n    sudo vim /etc/network/interfaces\n    \n\n修改配置文件,对应的信息要和主机的一致，保证虚拟机和主机在同一IP段\n\n    # The primary network interface\n    auto eth0\n    iface eth0 inet static\n    address 192.168.2.1\n    gateway 192.168.2.254\n    netmask 255.255.255.0\n    #network 192.168.2.0\n    #broadcast 192.168.2.255\n    \n\n重启\n\n    sudo /etc/init.d/networking restart\n    \n\n在主机中设置上级路由器，放行虚拟机的MAC地址保证虚拟机可以访问外网。","source":"_posts/ORACLE Virtualbox使用.md","raw":"---\ntitle: ORACLE Virtualbox使用\nurl: 11.html\nid: 11\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-08 09:09:01\ntags:\n---\n\n### 安装和主机共享\n\n> 点击设备，安装增强功能\n\n### 共享剪贴板\n\n> 点击设备，共享剪贴板，双向\n\n### 快捷键\n\n> 显示客户机菜单 右Ctrl+C 全屏快捷键 右Ctrl+F\n\n### 4中网络连接形式(以下内容来自网络)\n\n**第一种 NAT模式**  \n解释： NAT模式是最简单的实现虚拟机上网的方式，你可以这样理解：Vhost访问网络的所有数据都是由主机提供的，vhost并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Vhost的存在。  \n虚拟机与主机关系：  \n只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。  \n虚拟机与网络中其他主机的关系：  \n只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。  \n虚拟机与虚拟机之间的关系：  \n相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。  \nIP:10.0.2.15  \n网关：10.0.2.2  \nDNS：10.0.2.3  \n一台虚拟机的多个网卡可以被设定使用 NAT， 第一个网卡连接了到专用网 10.0.2.0，第二个网卡连接到专用网络 10.0.3.0，等等。默认得到的客户端ip（IP Address）是10.0.2.15，网关（Gateway）是10.0.2.2，域名服务器（DNS）是10.0.2.3，可以手动参考这个进行修改。  \nNAT方案优缺点：  \n笔记本已插网线时： 虚拟机可以访问主机，虚拟机可以访问互联网，在做了端口映射后（最后有说明），主机可以访问虚拟机上的服务（如数据库）。  \n笔记本没插网线时： 主机的“本地连接”有红叉的，虚拟机可以访问主机，虚拟机不可以访问互联网，在做了端口映射后，主机可以访问虚拟机上的服务（如数据库）。 **第二种 Bridged Adapter模式**  \n解释：  \n网桥模式是我最喜欢的用的一种模式，同时，模拟度也是相当完美。你可以这样理解，它是通过主机网卡，架设了一条桥，直接连入到网络中了。因此，它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。  \n虚拟机与主机关系：  \n可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。  \n虚拟机于网络中其他主机关系：  \n可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。  \n虚拟机于虚拟机关系：  \n可以相互访问，原因同上。  \nIP：一般是DHCP分配的，与主机的“本地连接”的IP 是同一网段的。虚拟机就能与主机互相通信。  \n笔记本已插网线时：（若网络中有DHCP服务器）主机与虚拟机会通过DHCP分别得到一个IP，这两个IP在同一网段。 主机与虚拟机可以ping通，虚拟机可以上互联网。  \n笔记本没插网线时：主机与虚拟机不能通信。主机的“本地连接”有红叉，就不能手工指定IP。虚拟机也不能通过DHCP得到IP地址，手工指定IP后，也无法与主机通信，因为主机无IP。  \n这时主机的VirtualBox Host-Only Network 网卡是有ip的，192.168.56.1。虚拟机就算手工指定了IP 192.168.56.*，也ping不能主机。 **第三种 Internal模式**  \n解释：  \n内网模式，顾名思义就是内部网络模式，虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。  \n虚拟机与主机关系：  \n不能相互访问，彼此不属于同一个网络，无法相互访问。  \n虚拟机与网络中其他主机关系：  \n不能相互访问，理由同上。  \n虚拟机与虚拟机关系：  \n可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。如上配置图中，名称为intnet。  \nIP: VirtualBox的DHCP服务器会为它分配IP ，一般得到的是192.168.56.101，因为是从101起分的，也可手工指定192.168.56.*。  \n笔记本已插网线时：虚拟机可以与主机的VirtualBox Host-Only Network 网卡通信  \n这种方案不受主机本地连接（网卡）是否有红叉的影响。 **第四种 Host-only Adapter模式**  \n解释：  \n主机模式，这是一种比较复杂的模式，需要有比较扎实的网络基础知识才能玩转。可以说前面几种模式所实现的功能，在这种模式下，通过虚拟机及网卡的设置都可以被实现。  \n我们可以理解为Vbox在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，我们可以通过设置这张网卡来实现上网及其他很多功能，比如（网卡共享、网卡桥接等）。  \n虚拟机与主机关系  \n默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X 子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。  \n虚拟机与网络主机关系  \n默认不能相互访问，原因同上，通过设置，可以实现相互访问。  \n虚拟机与虚拟机关系  \n默认可以相互访问，都是同处于一个网段。  \n虚拟机访问主机 用的是主机的VirtualBox Host-Only Network网卡的IP：192.168.56.1 ，不管主机“本地连接”有无红叉，永远通。  \n主机访问虚拟机，用是的虚拟机的网卡3的IP： 192.168.56.101 ，不管主机“本地连接”有无红叉，永远通。  \n虚拟机访问互联网，用的是自己的网卡2， 这时主机要能通过“本地连接”有线上网，（无线网卡不行） 通过对以上几种网络模式的了解，我们就可以灵活运用，模拟组建出我们所想要的任何一种网络环境了。  \n比如我想模拟出来一个一台主机，监控一个局域网上网情况的网络环境。  \n首先我开启了两台虚拟机vhost1与vhost2，当然如果硬件允许，我同样可以再增加vhost3、vhost4…  \n所有的vhost我都设置成internat内网模式，网络名称为intnal，网关为192.168.56.100，意思就是通过 192.168.56.100网卡上网。其中有一台vhost1我设置为双网卡，一张为内网模式（192.168.56.100），一张为网桥模式 （192.168.1.101）。两张网卡设置双网卡共享上网  \n虚拟机之间为局域网，其中有一台虚拟机vhost1通过与外网相连，所有局域网中的虚拟机又通过vhost1来实现上外网。这样vhost1就可以监控整个虚拟机局域网上网情况了。\n\n### xp下全屏\n\n安装增强包后再全局设置里设置成本机的分辨率 ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160119172333.png)\n\n### Ubuntu全屏\n\n首先，安装增强包，点击Run Software![](http://7xq3ry.com1.z0.glb.clouddn.com/20160114170837.png) 重启虚拟机  \n点击设备->分配光驱->移除虚拟盘  \n点击 右Ctrl+F全屏快捷键\n\n### Ubuntu设置桥接网卡\n\n在设置->网络->连接方式->桥接网卡\n\n    sudo vim /etc/network/interfaces\n    \n\n修改配置文件,对应的信息要和主机的一致，保证虚拟机和主机在同一IP段\n\n    # The primary network interface\n    auto eth0\n    iface eth0 inet static\n    address 192.168.2.1\n    gateway 192.168.2.254\n    netmask 255.255.255.0\n    #network 192.168.2.0\n    #broadcast 192.168.2.255\n    \n\n重启\n\n    sudo /etc/init.d/networking restart\n    \n\n在主机中设置上级路由器，放行虚拟机的MAC地址保证虚拟机可以访问外网。","slug":"ORACLE Virtualbox使用","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrw000kh3a492rxuorm","content":"<h3 id=\"安装和主机共享\"><a href=\"#安装和主机共享\" class=\"headerlink\" title=\"安装和主机共享\"></a>安装和主机共享</h3><blockquote>\n<p>点击设备，安装增强功能</p>\n</blockquote>\n<h3 id=\"共享剪贴板\"><a href=\"#共享剪贴板\" class=\"headerlink\" title=\"共享剪贴板\"></a>共享剪贴板</h3><blockquote>\n<p>点击设备，共享剪贴板，双向</p>\n</blockquote>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><blockquote>\n<p>显示客户机菜单 右Ctrl+C 全屏快捷键 右Ctrl+F</p>\n</blockquote>\n<h3 id=\"4中网络连接形式-以下内容来自网络\"><a href=\"#4中网络连接形式-以下内容来自网络\" class=\"headerlink\" title=\"4中网络连接形式(以下内容来自网络)\"></a>4中网络连接形式(以下内容来自网络)</h3><p><strong>第一种 NAT模式</strong><br>解释： NAT模式是最简单的实现虚拟机上网的方式，你可以这样理解：Vhost访问网络的所有数据都是由主机提供的，vhost并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Vhost的存在。<br>虚拟机与主机关系：<br>只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。<br>虚拟机与网络中其他主机的关系：<br>只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。<br>虚拟机与虚拟机之间的关系：<br>相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。<br>IP:10.0.2.15<br>网关：10.0.2.2<br>DNS：10.0.2.3<br>一台虚拟机的多个网卡可以被设定使用 NAT， 第一个网卡连接了到专用网 10.0.2.0，第二个网卡连接到专用网络 10.0.3.0，等等。默认得到的客户端ip（IP Address）是10.0.2.15，网关（Gateway）是10.0.2.2，域名服务器（DNS）是10.0.2.3，可以手动参考这个进行修改。<br>NAT方案优缺点：<br>笔记本已插网线时： 虚拟机可以访问主机，虚拟机可以访问互联网，在做了端口映射后（最后有说明），主机可以访问虚拟机上的服务（如数据库）。<br>笔记本没插网线时： 主机的“本地连接”有红叉的，虚拟机可以访问主机，虚拟机不可以访问互联网，在做了端口映射后，主机可以访问虚拟机上的服务（如数据库）。 <strong>第二种 Bridged Adapter模式</strong><br>解释：<br>网桥模式是我最喜欢的用的一种模式，同时，模拟度也是相当完美。你可以这样理解，它是通过主机网卡，架设了一条桥，直接连入到网络中了。因此，它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。<br>虚拟机与主机关系：<br>可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。<br>虚拟机于网络中其他主机关系：<br>可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。<br>虚拟机于虚拟机关系：<br>可以相互访问，原因同上。<br>IP：一般是DHCP分配的，与主机的“本地连接”的IP 是同一网段的。虚拟机就能与主机互相通信。<br>笔记本已插网线时：（若网络中有DHCP服务器）主机与虚拟机会通过DHCP分别得到一个IP，这两个IP在同一网段。 主机与虚拟机可以ping通，虚拟机可以上互联网。<br>笔记本没插网线时：主机与虚拟机不能通信。主机的“本地连接”有红叉，就不能手工指定IP。虚拟机也不能通过DHCP得到IP地址，手工指定IP后，也无法与主机通信，因为主机无IP。<br>这时主机的VirtualBox Host-Only Network 网卡是有ip的，192.168.56.1。虚拟机就算手工指定了IP 192.168.56.<em>，也ping不能主机。 *</em>第三种 Internal模式**<br>解释：<br>内网模式，顾名思义就是内部网络模式，虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。<br>虚拟机与主机关系：<br>不能相互访问，彼此不属于同一个网络，无法相互访问。<br>虚拟机与网络中其他主机关系：<br>不能相互访问，理由同上。<br>虚拟机与虚拟机关系：<br>可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。如上配置图中，名称为intnet。<br>IP: VirtualBox的DHCP服务器会为它分配IP ，一般得到的是192.168.56.101，因为是从101起分的，也可手工指定192.168.56.<em>。<br>笔记本已插网线时：虚拟机可以与主机的VirtualBox Host-Only Network 网卡通信<br>这种方案不受主机本地连接（网卡）是否有红叉的影响。 *</em>第四种 Host-only Adapter模式**<br>解释：<br>主机模式，这是一种比较复杂的模式，需要有比较扎实的网络基础知识才能玩转。可以说前面几种模式所实现的功能，在这种模式下，通过虚拟机及网卡的设置都可以被实现。<br>我们可以理解为Vbox在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，我们可以通过设置这张网卡来实现上网及其他很多功能，比如（网卡共享、网卡桥接等）。<br>虚拟机与主机关系<br>默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X 子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。<br>虚拟机与网络主机关系<br>默认不能相互访问，原因同上，通过设置，可以实现相互访问。<br>虚拟机与虚拟机关系<br>默认可以相互访问，都是同处于一个网段。<br>虚拟机访问主机 用的是主机的VirtualBox Host-Only Network网卡的IP：192.168.56.1 ，不管主机“本地连接”有无红叉，永远通。<br>主机访问虚拟机，用是的虚拟机的网卡3的IP： 192.168.56.101 ，不管主机“本地连接”有无红叉，永远通。<br>虚拟机访问互联网，用的是自己的网卡2， 这时主机要能通过“本地连接”有线上网，（无线网卡不行） 通过对以上几种网络模式的了解，我们就可以灵活运用，模拟组建出我们所想要的任何一种网络环境了。<br>比如我想模拟出来一个一台主机，监控一个局域网上网情况的网络环境。<br>首先我开启了两台虚拟机vhost1与vhost2，当然如果硬件允许，我同样可以再增加vhost3、vhost4…<br>所有的vhost我都设置成internat内网模式，网络名称为intnal，网关为192.168.56.100，意思就是通过 192.168.56.100网卡上网。其中有一台vhost1我设置为双网卡，一张为内网模式（192.168.56.100），一张为网桥模式 （192.168.1.101）。两张网卡设置双网卡共享上网<br>虚拟机之间为局域网，其中有一台虚拟机vhost1通过与外网相连，所有局域网中的虚拟机又通过vhost1来实现上外网。这样vhost1就可以监控整个虚拟机局域网上网情况了。</p>\n<h3 id=\"xp下全屏\"><a href=\"#xp下全屏\" class=\"headerlink\" title=\"xp下全屏\"></a>xp下全屏</h3><p>安装增强包后再全局设置里设置成本机的分辨率 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160119172333.png\" alt></p>\n<h3 id=\"Ubuntu全屏\"><a href=\"#Ubuntu全屏\" class=\"headerlink\" title=\"Ubuntu全屏\"></a>Ubuntu全屏</h3><p>首先，安装增强包，点击Run Software<img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160114170837.png\" alt> 重启虚拟机<br>点击设备-&gt;分配光驱-&gt;移除虚拟盘<br>点击 右Ctrl+F全屏快捷键</p>\n<h3 id=\"Ubuntu设置桥接网卡\"><a href=\"#Ubuntu设置桥接网卡\" class=\"headerlink\" title=\"Ubuntu设置桥接网卡\"></a>Ubuntu设置桥接网卡</h3><p>在设置-&gt;网络-&gt;连接方式-&gt;桥接网卡</p>\n<pre><code>sudo vim /etc/network/interfaces</code></pre><p>修改配置文件,对应的信息要和主机的一致，保证虚拟机和主机在同一IP段</p>\n<pre><code># The primary network interface\nauto eth0\niface eth0 inet static\naddress 192.168.2.1\ngateway 192.168.2.254\nnetmask 255.255.255.0\n#network 192.168.2.0\n#broadcast 192.168.2.255</code></pre><p>重启</p>\n<pre><code>sudo /etc/init.d/networking restart</code></pre><p>在主机中设置上级路由器，放行虚拟机的MAC地址保证虚拟机可以访问外网。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装和主机共享\"><a href=\"#安装和主机共享\" class=\"headerlink\" title=\"安装和主机共享\"></a>安装和主机共享</h3><blockquote>\n<p>点击设备，安装增强功能</p>\n</blockquote>\n<h3 id=\"共享剪贴板\"><a href=\"#共享剪贴板\" class=\"headerlink\" title=\"共享剪贴板\"></a>共享剪贴板</h3><blockquote>\n<p>点击设备，共享剪贴板，双向</p>\n</blockquote>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><blockquote>\n<p>显示客户机菜单 右Ctrl+C 全屏快捷键 右Ctrl+F</p>\n</blockquote>\n<h3 id=\"4中网络连接形式-以下内容来自网络\"><a href=\"#4中网络连接形式-以下内容来自网络\" class=\"headerlink\" title=\"4中网络连接形式(以下内容来自网络)\"></a>4中网络连接形式(以下内容来自网络)</h3><p><strong>第一种 NAT模式</strong><br>解释： NAT模式是最简单的实现虚拟机上网的方式，你可以这样理解：Vhost访问网络的所有数据都是由主机提供的，vhost并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Vhost的存在。<br>虚拟机与主机关系：<br>只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。<br>虚拟机与网络中其他主机的关系：<br>只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。<br>虚拟机与虚拟机之间的关系：<br>相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。<br>IP:10.0.2.15<br>网关：10.0.2.2<br>DNS：10.0.2.3<br>一台虚拟机的多个网卡可以被设定使用 NAT， 第一个网卡连接了到专用网 10.0.2.0，第二个网卡连接到专用网络 10.0.3.0，等等。默认得到的客户端ip（IP Address）是10.0.2.15，网关（Gateway）是10.0.2.2，域名服务器（DNS）是10.0.2.3，可以手动参考这个进行修改。<br>NAT方案优缺点：<br>笔记本已插网线时： 虚拟机可以访问主机，虚拟机可以访问互联网，在做了端口映射后（最后有说明），主机可以访问虚拟机上的服务（如数据库）。<br>笔记本没插网线时： 主机的“本地连接”有红叉的，虚拟机可以访问主机，虚拟机不可以访问互联网，在做了端口映射后，主机可以访问虚拟机上的服务（如数据库）。 <strong>第二种 Bridged Adapter模式</strong><br>解释：<br>网桥模式是我最喜欢的用的一种模式，同时，模拟度也是相当完美。你可以这样理解，它是通过主机网卡，架设了一条桥，直接连入到网络中了。因此，它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。<br>虚拟机与主机关系：<br>可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。<br>虚拟机于网络中其他主机关系：<br>可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。<br>虚拟机于虚拟机关系：<br>可以相互访问，原因同上。<br>IP：一般是DHCP分配的，与主机的“本地连接”的IP 是同一网段的。虚拟机就能与主机互相通信。<br>笔记本已插网线时：（若网络中有DHCP服务器）主机与虚拟机会通过DHCP分别得到一个IP，这两个IP在同一网段。 主机与虚拟机可以ping通，虚拟机可以上互联网。<br>笔记本没插网线时：主机与虚拟机不能通信。主机的“本地连接”有红叉，就不能手工指定IP。虚拟机也不能通过DHCP得到IP地址，手工指定IP后，也无法与主机通信，因为主机无IP。<br>这时主机的VirtualBox Host-Only Network 网卡是有ip的，192.168.56.1。虚拟机就算手工指定了IP 192.168.56.<em>，也ping不能主机。 *</em>第三种 Internal模式**<br>解释：<br>内网模式，顾名思义就是内部网络模式，虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。<br>虚拟机与主机关系：<br>不能相互访问，彼此不属于同一个网络，无法相互访问。<br>虚拟机与网络中其他主机关系：<br>不能相互访问，理由同上。<br>虚拟机与虚拟机关系：<br>可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。如上配置图中，名称为intnet。<br>IP: VirtualBox的DHCP服务器会为它分配IP ，一般得到的是192.168.56.101，因为是从101起分的，也可手工指定192.168.56.<em>。<br>笔记本已插网线时：虚拟机可以与主机的VirtualBox Host-Only Network 网卡通信<br>这种方案不受主机本地连接（网卡）是否有红叉的影响。 *</em>第四种 Host-only Adapter模式**<br>解释：<br>主机模式，这是一种比较复杂的模式，需要有比较扎实的网络基础知识才能玩转。可以说前面几种模式所实现的功能，在这种模式下，通过虚拟机及网卡的设置都可以被实现。<br>我们可以理解为Vbox在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，我们可以通过设置这张网卡来实现上网及其他很多功能，比如（网卡共享、网卡桥接等）。<br>虚拟机与主机关系<br>默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X 子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。<br>虚拟机与网络主机关系<br>默认不能相互访问，原因同上，通过设置，可以实现相互访问。<br>虚拟机与虚拟机关系<br>默认可以相互访问，都是同处于一个网段。<br>虚拟机访问主机 用的是主机的VirtualBox Host-Only Network网卡的IP：192.168.56.1 ，不管主机“本地连接”有无红叉，永远通。<br>主机访问虚拟机，用是的虚拟机的网卡3的IP： 192.168.56.101 ，不管主机“本地连接”有无红叉，永远通。<br>虚拟机访问互联网，用的是自己的网卡2， 这时主机要能通过“本地连接”有线上网，（无线网卡不行） 通过对以上几种网络模式的了解，我们就可以灵活运用，模拟组建出我们所想要的任何一种网络环境了。<br>比如我想模拟出来一个一台主机，监控一个局域网上网情况的网络环境。<br>首先我开启了两台虚拟机vhost1与vhost2，当然如果硬件允许，我同样可以再增加vhost3、vhost4…<br>所有的vhost我都设置成internat内网模式，网络名称为intnal，网关为192.168.56.100，意思就是通过 192.168.56.100网卡上网。其中有一台vhost1我设置为双网卡，一张为内网模式（192.168.56.100），一张为网桥模式 （192.168.1.101）。两张网卡设置双网卡共享上网<br>虚拟机之间为局域网，其中有一台虚拟机vhost1通过与外网相连，所有局域网中的虚拟机又通过vhost1来实现上外网。这样vhost1就可以监控整个虚拟机局域网上网情况了。</p>\n<h3 id=\"xp下全屏\"><a href=\"#xp下全屏\" class=\"headerlink\" title=\"xp下全屏\"></a>xp下全屏</h3><p>安装增强包后再全局设置里设置成本机的分辨率 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160119172333.png\" alt></p>\n<h3 id=\"Ubuntu全屏\"><a href=\"#Ubuntu全屏\" class=\"headerlink\" title=\"Ubuntu全屏\"></a>Ubuntu全屏</h3><p>首先，安装增强包，点击Run Software<img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160114170837.png\" alt> 重启虚拟机<br>点击设备-&gt;分配光驱-&gt;移除虚拟盘<br>点击 右Ctrl+F全屏快捷键</p>\n<h3 id=\"Ubuntu设置桥接网卡\"><a href=\"#Ubuntu设置桥接网卡\" class=\"headerlink\" title=\"Ubuntu设置桥接网卡\"></a>Ubuntu设置桥接网卡</h3><p>在设置-&gt;网络-&gt;连接方式-&gt;桥接网卡</p>\n<pre><code>sudo vim /etc/network/interfaces</code></pre><p>修改配置文件,对应的信息要和主机的一致，保证虚拟机和主机在同一IP段</p>\n<pre><code># The primary network interface\nauto eth0\niface eth0 inet static\naddress 192.168.2.1\ngateway 192.168.2.254\nnetmask 255.255.255.0\n#network 192.168.2.0\n#broadcast 192.168.2.255</code></pre><p>重启</p>\n<pre><code>sudo /etc/init.d/networking restart</code></pre><p>在主机中设置上级路由器，放行虚拟机的MAC地址保证虚拟机可以访问外网。</p>\n"},{"title":"MYSQL基础教程","url":"42.html","id":"42","comments":0,"date":"2016-11-09T06:32:49.000Z","_content":"\n#### 安装mysql\n\nubuntu16.04\n\n    sudo apt-get install mysql-server\n    sudo apt install mysql-client  # 服务器端不需要\n    mysql_secure_installation\n    \n\n#### 查看mysql版本信息\n\n    mysql --version  \n    mysql> show variables like '%version_%';\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160121142352.png)\n\n#### 数据库创建备份导入命令\n\n    // 创建数据库  \n    CREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  \n    \n    // 删除数据库  \n     DROP DATABASE IF EXISTS `test`; \n    \n    // 创建表  \n    CREATE TABLE test(name varchar(32) not null,password varchar(64) not null)DEFAULT charset=utf8;  \n    \n    ### 重置自增字段\n    ```sql\n    ALTER TABLE `tableName` AUTO_INCREMENT = 1; \n    \n\n或者\n\n    truncate tableName; \n    \n\n    // 删除表\n    DROP TABLE test;\n    \n    // 删除表内容，保留表结构  \n    mysql> TRUNCATE TABLE `tabel_name`;\n    Query OK, 0 rows affected (0.29 sec)\n    \n    // 删除表并重置主键，不会留下日志，相当于删除表并重建    \n    TRUNCATE TABLE `animal_cell_attribute` \n    \n    \n    // 导出一个数据库    \n    mysqldump -u 用户名 -p 数据库名 > 导出的文件名.sql   \n    mysqldump -u root -p uscnerp > uscnerp.sql    \n    Enter password:  \n    \n    // 导出一张表\n    mysqldump -u 用户名 -p 数据库名 表名 > 导出的文件名.sql  \n    mysqldump -u root -p animal animal_service > animal_service.sql\n    Enter password: **********  \n    \n    // 导出多个数据库\n    mysqldump  -uroot -p --databases test mysql #空格分隔\n    \n    // 导出到excel表格\n    mysql   -uroot   -p   -e   \"select   *   from   test.table2 \"   >   d:a.xsl\n    \n    \n    // 导入数据库  \n    mysql -u root -p   \n    mysql>use 数据库  \n    mysql>set names utf8; （先确认编码，如果不设置可能会出现乱码，注意不是UTF-8）   \n    mysql>source d:\\wcnc_db.sql\n    \n\n### 查看表\n\n查看表结构\n\n    show create table 表名;\n    \n\n### 配置用户权限\n\n重置root密码并查看所有用户权限\n\n    mysql> use mysql;\n    Database changed\n    mysql> UPDATE user SET Password = PASSWORD('newpassword') WHERE user = 'root';\n    Query OK, 3 rows affected (0.02 sec)\n    Rows matched: 3  Changed: 3  Warnings: 0\n    \n    mysql> SELECT Host,User,Password FROM mysql.user;\n    +-----------+--------+-------------------------------------------+\n    | Host      | User   | Password                                  |\n    +-----------+--------+-------------------------------------------+\n    | localhost | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |\n    | 127.0.0.1 | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |\n    | ::1       | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |\n    | localhost |        |                                           |\n    | localhost | animal | *CC87B1E39E699B64E0B80741B5D1991BC5BE57AC |\n    +-----------+--------+-------------------------------------------+\n    5 rows in set (0.00 sec)\n    \n\n查看全部用户\n\n    SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;\n    \n\n创建用户\n\n    mysql> CREATE USER username@localhost IDENTIFIED BY 'password';\n    \n\n> username:用户名  \n> @localhost：表示用户只能在本地访问  \n> password:密码\n\n配置权限\n\n    GRANT SELECT,INSERT,UPDATE ON database.* TO username@localhost IDENTIFIED BY 'password';  \n    GRANT ALL PRIVILEGES ON *.* TO user;@localhost \n    // GRANT 权限名称 ON 数据库.数据表 TO 用户名@访问地址 IDENTIFIED BY '密码';\n    \n\n刷新权限列表\n\n    flush privileges;\n    \n\n配置备份用户权限\n\n    CREATE USER 'backuper'@'localhost' IDENTIFIED BY 'PASSWORD';\n    GRANT SELECT, RELOAD, PROCESS, SHOW DATABASES, SUPER, LOCK TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT ON *.* TO 'backuper'@'localhost';\n    FLUSH PRIVILEGES;\n    \n\n### window服务器下自动备份\n\n**编写脚本**\n\n    rem *******************************Code Start*****************************\n    @echo off\n    \n    set \"Ymd=%date:~,4%%date:~5,2%%date:~8,2%\"\n    mysqldump --opt -u root --password=abcdefg database > F:\\FTP\\BackupMysql\\database_%Ymd%.sql\n    @echo on\n    rem *******************************Code End*****************************\n    \n\n**定时任务**  \n注意在操作中填写脚本并在起始于写入脚本所在盘符E:\\\n\n### 删除mysql\n\n> 在服务里找到mysql服务，停止使用  \n> 控制面板中卸载mysql 注册表文件删除： HKEY\\_LOCAL\\_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL 目录删除; 在硬盘和注册表中搜索mysql并删除掉\n\n### 开启慢查询日志\n\n```\n\n    sudo vim /etc/my.cnf\n    # slow_query_log\n    slow_query_log=on\n    slow-query-log-file=/var/log/mysql/slow.log # 保证此文件属于mysql用户，mysql组，并可写权限\n    long_query_time=1 # 超过1秒写入慢查询日志\n    log-queries-not-using-indexes\n    \n\n> 重启mysql\n\n    ### 查看是否开启mysql慢查询日志\n    >mysql show variables like \"slow_query_log\";","source":"_posts/MYSQL基础教程.md","raw":"---\ntitle: MYSQL基础教程\ntags:\n  - mysql\nurl: 42.html\nid: 42\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 14:32:49\n---\n\n#### 安装mysql\n\nubuntu16.04\n\n    sudo apt-get install mysql-server\n    sudo apt install mysql-client  # 服务器端不需要\n    mysql_secure_installation\n    \n\n#### 查看mysql版本信息\n\n    mysql --version  \n    mysql> show variables like '%version_%';\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160121142352.png)\n\n#### 数据库创建备份导入命令\n\n    // 创建数据库  \n    CREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  \n    \n    // 删除数据库  \n     DROP DATABASE IF EXISTS `test`; \n    \n    // 创建表  \n    CREATE TABLE test(name varchar(32) not null,password varchar(64) not null)DEFAULT charset=utf8;  \n    \n    ### 重置自增字段\n    ```sql\n    ALTER TABLE `tableName` AUTO_INCREMENT = 1; \n    \n\n或者\n\n    truncate tableName; \n    \n\n    // 删除表\n    DROP TABLE test;\n    \n    // 删除表内容，保留表结构  \n    mysql> TRUNCATE TABLE `tabel_name`;\n    Query OK, 0 rows affected (0.29 sec)\n    \n    // 删除表并重置主键，不会留下日志，相当于删除表并重建    \n    TRUNCATE TABLE `animal_cell_attribute` \n    \n    \n    // 导出一个数据库    \n    mysqldump -u 用户名 -p 数据库名 > 导出的文件名.sql   \n    mysqldump -u root -p uscnerp > uscnerp.sql    \n    Enter password:  \n    \n    // 导出一张表\n    mysqldump -u 用户名 -p 数据库名 表名 > 导出的文件名.sql  \n    mysqldump -u root -p animal animal_service > animal_service.sql\n    Enter password: **********  \n    \n    // 导出多个数据库\n    mysqldump  -uroot -p --databases test mysql #空格分隔\n    \n    // 导出到excel表格\n    mysql   -uroot   -p   -e   \"select   *   from   test.table2 \"   >   d:a.xsl\n    \n    \n    // 导入数据库  \n    mysql -u root -p   \n    mysql>use 数据库  \n    mysql>set names utf8; （先确认编码，如果不设置可能会出现乱码，注意不是UTF-8）   \n    mysql>source d:\\wcnc_db.sql\n    \n\n### 查看表\n\n查看表结构\n\n    show create table 表名;\n    \n\n### 配置用户权限\n\n重置root密码并查看所有用户权限\n\n    mysql> use mysql;\n    Database changed\n    mysql> UPDATE user SET Password = PASSWORD('newpassword') WHERE user = 'root';\n    Query OK, 3 rows affected (0.02 sec)\n    Rows matched: 3  Changed: 3  Warnings: 0\n    \n    mysql> SELECT Host,User,Password FROM mysql.user;\n    +-----------+--------+-------------------------------------------+\n    | Host      | User   | Password                                  |\n    +-----------+--------+-------------------------------------------+\n    | localhost | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |\n    | 127.0.0.1 | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |\n    | ::1       | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |\n    | localhost |        |                                           |\n    | localhost | animal | *CC87B1E39E699B64E0B80741B5D1991BC5BE57AC |\n    +-----------+--------+-------------------------------------------+\n    5 rows in set (0.00 sec)\n    \n\n查看全部用户\n\n    SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;\n    \n\n创建用户\n\n    mysql> CREATE USER username@localhost IDENTIFIED BY 'password';\n    \n\n> username:用户名  \n> @localhost：表示用户只能在本地访问  \n> password:密码\n\n配置权限\n\n    GRANT SELECT,INSERT,UPDATE ON database.* TO username@localhost IDENTIFIED BY 'password';  \n    GRANT ALL PRIVILEGES ON *.* TO user;@localhost \n    // GRANT 权限名称 ON 数据库.数据表 TO 用户名@访问地址 IDENTIFIED BY '密码';\n    \n\n刷新权限列表\n\n    flush privileges;\n    \n\n配置备份用户权限\n\n    CREATE USER 'backuper'@'localhost' IDENTIFIED BY 'PASSWORD';\n    GRANT SELECT, RELOAD, PROCESS, SHOW DATABASES, SUPER, LOCK TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT ON *.* TO 'backuper'@'localhost';\n    FLUSH PRIVILEGES;\n    \n\n### window服务器下自动备份\n\n**编写脚本**\n\n    rem *******************************Code Start*****************************\n    @echo off\n    \n    set \"Ymd=%date:~,4%%date:~5,2%%date:~8,2%\"\n    mysqldump --opt -u root --password=abcdefg database > F:\\FTP\\BackupMysql\\database_%Ymd%.sql\n    @echo on\n    rem *******************************Code End*****************************\n    \n\n**定时任务**  \n注意在操作中填写脚本并在起始于写入脚本所在盘符E:\\\n\n### 删除mysql\n\n> 在服务里找到mysql服务，停止使用  \n> 控制面板中卸载mysql 注册表文件删除： HKEY\\_LOCAL\\_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL 目录删除; 在硬盘和注册表中搜索mysql并删除掉\n\n### 开启慢查询日志\n\n```\n\n    sudo vim /etc/my.cnf\n    # slow_query_log\n    slow_query_log=on\n    slow-query-log-file=/var/log/mysql/slow.log # 保证此文件属于mysql用户，mysql组，并可写权限\n    long_query_time=1 # 超过1秒写入慢查询日志\n    log-queries-not-using-indexes\n    \n\n> 重启mysql\n\n    ### 查看是否开启mysql慢查询日志\n    >mysql show variables like \"slow_query_log\";","slug":"MYSQL基础教程","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrx000nh3a4x6v3lvjw","content":"<h4 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h4><p>ubuntu16.04</p>\n<pre><code>sudo apt-get install mysql-server\nsudo apt install mysql-client  # 服务器端不需要\nmysql_secure_installation</code></pre><h4 id=\"查看mysql版本信息\"><a href=\"#查看mysql版本信息\" class=\"headerlink\" title=\"查看mysql版本信息\"></a>查看mysql版本信息</h4><pre><code>mysql --version  \nmysql&gt; show variables like &apos;%version_%&apos;;</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160121142352.png\" alt></p>\n<h4 id=\"数据库创建备份导入命令\"><a href=\"#数据库创建备份导入命令\" class=\"headerlink\" title=\"数据库创建备份导入命令\"></a>数据库创建备份导入命令</h4><pre><code>// 创建数据库  \nCREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  \n\n// 删除数据库  \n DROP DATABASE IF EXISTS `test`; \n\n// 创建表  \nCREATE TABLE test(name varchar(32) not null,password varchar(64) not null)DEFAULT charset=utf8;  \n\n### 重置自增字段\n<figure class=\"highlight sql hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`tableName`</span> AUTO_INCREMENT = <span class=\"hljs-number\">1</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">truncate</span> tableName; </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    // 删除表</span><br><span class=\"line\">    <span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">test</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 删除表内容，保留表结构  </span><br><span class=\"line\">    mysql&gt; TRUNCATE TABLE `tabel_name`;</span><br><span class=\"line\">    Query OK, 0 rows affected (0.29 sec)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 删除表并重置主键，不会留下日志，相当于删除表并重建    </span><br><span class=\"line\">    <span class=\"hljs-keyword\">TRUNCATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`animal_cell_attribute`</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出一个数据库    </span><br><span class=\"line\">    mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名.sql   </span><br><span class=\"line\">    mysqldump -u root -p uscnerp &gt; uscnerp.sql    </span><br><span class=\"line\">    Enter <span class=\"hljs-keyword\">password</span>:  </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出一张表</span><br><span class=\"line\">    mysqldump -u 用户名 -p 数据库名 表名 &gt; 导出的文件名.sql  </span><br><span class=\"line\">    mysqldump -u root -p animal animal_service &gt; animal_service.sql</span><br><span class=\"line\">    Enter <span class=\"hljs-keyword\">password</span>: **********  </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出多个数据库</span><br><span class=\"line\">    mysqldump  -uroot -p <span class=\"hljs-comment\">--databases test mysql #空格分隔</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出到excel表格</span><br><span class=\"line\">    mysql   -uroot   -p   -e   <span class=\"hljs-string\">\"select   *   from   test.table2 \"</span>   &gt;   d:a.xsl</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导入数据库  </span><br><span class=\"line\">    mysql -u root -p   </span><br><span class=\"line\">    mysql&gt;<span class=\"hljs-keyword\">use</span> 数据库  </span><br><span class=\"line\">    mysql&gt;<span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">names</span> utf8; （先确认编码，如果不设置可能会出现乱码，注意不是UTF-8）   </span><br><span class=\"line\">    mysql&gt;source d:\\wcnc_db.sql</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">### 查看表</span></span><br><span class=\"line\"></span><br><span class=\"line\">查看表结构</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> 表名;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">### 配置用户权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">重置root密码并查看所有用户权限</span><br><span class=\"line\"></span><br><span class=\"line\">    mysql&gt; use mysql;</span><br><span class=\"line\">    Database changed</span><br><span class=\"line\">    mysql&gt; UPDATE user SET Password = PASSWORD('newpassword') WHERE user = 'root';</span><br><span class=\"line\">    Query OK, 3 rows affected (0.02 sec)</span><br><span class=\"line\">    Rows matched: 3  Changed: 3  Warnings: 0</span><br><span class=\"line\">    </span><br><span class=\"line\">    mysql&gt; SELECT Host,User,Password FROM mysql.user;</span><br><span class=\"line\">    +<span class=\"hljs-comment\">-----------+--------+-------------------------------------------+</span></span><br><span class=\"line\">    | Host      | User   | Password                                  |</span><br><span class=\"line\">    +<span class=\"hljs-comment\">-----------+--------+-------------------------------------------+</span></span><br><span class=\"line\">    | localhost | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |</span><br><span class=\"line\">    | 127.0.0.1 | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |</span><br><span class=\"line\">    | ::1       | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |</span><br><span class=\"line\">    | localhost |        |                                           |</span><br><span class=\"line\">    | localhost | animal | *CC87B1E39E699B64E0B80741B5D1991BC5BE57AC |</span><br><span class=\"line\">    +<span class=\"hljs-comment\">-----------+--------+-------------------------------------------+</span></span><br><span class=\"line\">    5 rows in <span class=\"hljs-keyword\">set</span> (<span class=\"hljs-number\">0.00</span> sec)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">查看全部用户</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> <span class=\"hljs-keyword\">CONCAT</span>(<span class=\"hljs-string\">'User: '''</span>,<span class=\"hljs-keyword\">user</span>,<span class=\"hljs-string\">'''@'''</span>,host,<span class=\"hljs-string\">''';'</span>) <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-keyword\">query</span> <span class=\"hljs-keyword\">FROM</span> mysql.user;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">创建用户</span><br><span class=\"line\"></span><br><span class=\"line\">    mysql&gt; CREATE USER username@localhost IDENTIFIED BY 'password';</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; username:用户名  </span><br><span class=\"line\">&gt; @localhost：表示用户只能在本地访问  </span><br><span class=\"line\">&gt; password:密码</span><br><span class=\"line\"></span><br><span class=\"line\">配置权限</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">SELECT</span>,<span class=\"hljs-keyword\">INSERT</span>,<span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> database.* <span class=\"hljs-keyword\">TO</span> username@localhost <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;  </span><br><span class=\"line\">    <span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">PRIVILEGES</span> <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-keyword\">user</span>;@localhost </span><br><span class=\"line\">    // <span class=\"hljs-keyword\">GRANT</span> 权限名称 <span class=\"hljs-keyword\">ON</span> 数据库.数据表 <span class=\"hljs-keyword\">TO</span> 用户名@访问地址 <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'密码'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">刷新权限列表</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">配置备份用户权限</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'backuper'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'PASSWORD'</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">GRANT</span> <span class=\"hljs-keyword\">SELECT</span>, RELOAD, PROCESS, <span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">DATABASES</span>, SUPER, <span class=\"hljs-keyword\">LOCK</span> <span class=\"hljs-keyword\">TABLES</span>, <span class=\"hljs-keyword\">REPLICATION</span> <span class=\"hljs-keyword\">CLIENT</span>, <span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">VIEW</span>, <span class=\"hljs-keyword\">EVENT</span> <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'backuper'</span>@<span class=\"hljs-string\">'localhost'</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">FLUSH</span> <span class=\"hljs-keyword\">PRIVILEGES</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">### window服务器下自动备份</span></span><br><span class=\"line\"></span><br><span class=\"line\">**编写脚本**</span><br><span class=\"line\"></span><br><span class=\"line\">    rem *******************************Code Start*****************************</span><br><span class=\"line\">    @echo off</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-string\">\"Ymd=%date:~,4%%date:~5,2%%date:~8,2%\"</span></span><br><span class=\"line\">    mysqldump <span class=\"hljs-comment\">--opt -u root --password=abcdefg database &gt; F:\\FTP\\BackupMysql\\database_%Ymd%.sql</span></span><br><span class=\"line\">    @echo <span class=\"hljs-keyword\">on</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">rem</span> *******************************Code <span class=\"hljs-keyword\">End</span>*****************************</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">**定时任务**  </span><br><span class=\"line\">注意在操作中填写脚本并在起始于写入脚本所在盘符E:\\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">### 删除mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 在服务里找到mysql服务，停止使用  </span><br><span class=\"line\">&gt; 控制面板中卸载mysql 注册表文件删除： HKEY\\_LOCAL\\_MACHINE/<span class=\"hljs-keyword\">SYSTEM</span>/ControlSet001/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL 目录删除; 在硬盘和注册表中搜索mysql并删除掉</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">### 开启慢查询日志</span></span><br></pre></td></tr></table></figure>\n\nsudo vim /etc/my.cnf\n# slow_query_log\nslow_query_log=on\nslow-query-log-file=/var/log/mysql/slow.log # 保证此文件属于mysql用户，mysql组，并可写权限\nlong_query_time=1 # 超过1秒写入慢查询日志\nlog-queries-not-using-indexes</code></pre><blockquote>\n<p>重启mysql</p>\n</blockquote>\n<pre><code>### 查看是否开启mysql慢查询日志\n&gt;mysql show variables like &quot;slow_query_log&quot;;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h4><p>ubuntu16.04</p>\n<pre><code>sudo apt-get install mysql-server\nsudo apt install mysql-client  # 服务器端不需要\nmysql_secure_installation</code></pre><h4 id=\"查看mysql版本信息\"><a href=\"#查看mysql版本信息\" class=\"headerlink\" title=\"查看mysql版本信息\"></a>查看mysql版本信息</h4><pre><code>mysql --version  \nmysql&gt; show variables like &apos;%version_%&apos;;</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160121142352.png\" alt></p>\n<h4 id=\"数据库创建备份导入命令\"><a href=\"#数据库创建备份导入命令\" class=\"headerlink\" title=\"数据库创建备份导入命令\"></a>数据库创建备份导入命令</h4><pre><code>// 创建数据库  \nCREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  \n\n// 删除数据库  \n DROP DATABASE IF EXISTS `test`; \n\n// 创建表  \nCREATE TABLE test(name varchar(32) not null,password varchar(64) not null)DEFAULT charset=utf8;  \n\n### 重置自增字段\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`tableName`</span> AUTO_INCREMENT = <span class=\"number\">1</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">truncate</span> tableName; </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    // 删除表</span><br><span class=\"line\">    <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 删除表内容，保留表结构  </span><br><span class=\"line\">    mysql&gt; TRUNCATE TABLE `tabel_name`;</span><br><span class=\"line\">    Query OK, 0 rows affected (0.29 sec)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 删除表并重置主键，不会留下日志，相当于删除表并重建    </span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`animal_cell_attribute`</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出一个数据库    </span><br><span class=\"line\">    mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名.sql   </span><br><span class=\"line\">    mysqldump -u root -p uscnerp &gt; uscnerp.sql    </span><br><span class=\"line\">    Enter <span class=\"keyword\">password</span>:  </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出一张表</span><br><span class=\"line\">    mysqldump -u 用户名 -p 数据库名 表名 &gt; 导出的文件名.sql  </span><br><span class=\"line\">    mysqldump -u root -p animal animal_service &gt; animal_service.sql</span><br><span class=\"line\">    Enter <span class=\"keyword\">password</span>: **********  </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出多个数据库</span><br><span class=\"line\">    mysqldump  -uroot -p <span class=\"comment\">--databases test mysql #空格分隔</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导出到excel表格</span><br><span class=\"line\">    mysql   -uroot   -p   -e   <span class=\"string\">\"select   *   from   test.table2 \"</span>   &gt;   d:a.xsl</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 导入数据库  </span><br><span class=\"line\">    mysql -u root -p   </span><br><span class=\"line\">    mysql&gt;<span class=\"keyword\">use</span> 数据库  </span><br><span class=\"line\">    mysql&gt;<span class=\"keyword\">set</span> <span class=\"keyword\">names</span> utf8; （先确认编码，如果不设置可能会出现乱码，注意不是UTF-8）   </span><br><span class=\"line\">    mysql&gt;source d:\\wcnc_db.sql</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 查看表</span></span><br><span class=\"line\"></span><br><span class=\"line\">查看表结构</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 配置用户权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">重置root密码并查看所有用户权限</span><br><span class=\"line\"></span><br><span class=\"line\">    mysql&gt; use mysql;</span><br><span class=\"line\">    Database changed</span><br><span class=\"line\">    mysql&gt; UPDATE user SET Password = PASSWORD('newpassword') WHERE user = 'root';</span><br><span class=\"line\">    Query OK, 3 rows affected (0.02 sec)</span><br><span class=\"line\">    Rows matched: 3  Changed: 3  Warnings: 0</span><br><span class=\"line\">    </span><br><span class=\"line\">    mysql&gt; SELECT Host,User,Password FROM mysql.user;</span><br><span class=\"line\">    +<span class=\"comment\">-----------+--------+-------------------------------------------+</span></span><br><span class=\"line\">    | Host      | User   | Password                                  |</span><br><span class=\"line\">    +<span class=\"comment\">-----------+--------+-------------------------------------------+</span></span><br><span class=\"line\">    | localhost | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |</span><br><span class=\"line\">    | 127.0.0.1 | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |</span><br><span class=\"line\">    | ::1       | root   | *2ED3112AFECE04CEE0AA42619AB00D4498BA3342 |</span><br><span class=\"line\">    | localhost |        |                                           |</span><br><span class=\"line\">    | localhost | animal | *CC87B1E39E699B64E0B80741B5D1991BC5BE57AC |</span><br><span class=\"line\">    +<span class=\"comment\">-----------+--------+-------------------------------------------+</span></span><br><span class=\"line\">    5 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">查看全部用户</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'User: '''</span>,<span class=\"keyword\">user</span>,<span class=\"string\">'''@'''</span>,host,<span class=\"string\">''';'</span>) <span class=\"keyword\">AS</span> <span class=\"keyword\">query</span> <span class=\"keyword\">FROM</span> mysql.user;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">创建用户</span><br><span class=\"line\"></span><br><span class=\"line\">    mysql&gt; CREATE USER username@localhost IDENTIFIED BY 'password';</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; username:用户名  </span><br><span class=\"line\">&gt; @localhost：表示用户只能在本地访问  </span><br><span class=\"line\">&gt; password:密码</span><br><span class=\"line\"></span><br><span class=\"line\">配置权限</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>,<span class=\"keyword\">INSERT</span>,<span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> database.* <span class=\"keyword\">TO</span> username@localhost <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"keyword\">user</span>;@localhost </span><br><span class=\"line\">    // <span class=\"keyword\">GRANT</span> 权限名称 <span class=\"keyword\">ON</span> 数据库.数据表 <span class=\"keyword\">TO</span> 用户名@访问地址 <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'密码'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">刷新权限列表</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">配置备份用户权限</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'backuper'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'PASSWORD'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, RELOAD, PROCESS, <span class=\"keyword\">SHOW</span> <span class=\"keyword\">DATABASES</span>, SUPER, <span class=\"keyword\">LOCK</span> <span class=\"keyword\">TABLES</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">CLIENT</span>, <span class=\"keyword\">SHOW</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">EVENT</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'backuper'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### window服务器下自动备份</span></span><br><span class=\"line\"></span><br><span class=\"line\">**编写脚本**</span><br><span class=\"line\"></span><br><span class=\"line\">    rem *******************************Code Start*****************************</span><br><span class=\"line\">    @echo off</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"string\">\"Ymd=%date:~,4%%date:~5,2%%date:~8,2%\"</span></span><br><span class=\"line\">    mysqldump <span class=\"comment\">--opt -u root --password=abcdefg database &gt; F:\\FTP\\BackupMysql\\database_%Ymd%.sql</span></span><br><span class=\"line\">    @echo <span class=\"keyword\">on</span></span><br><span class=\"line\">    <span class=\"keyword\">rem</span> *******************************Code <span class=\"keyword\">End</span>*****************************</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">**定时任务**  </span><br><span class=\"line\">注意在操作中填写脚本并在起始于写入脚本所在盘符E:\\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 删除mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 在服务里找到mysql服务，停止使用  </span><br><span class=\"line\">&gt; 控制面板中卸载mysql 注册表文件删除： HKEY\\_LOCAL\\_MACHINE/<span class=\"keyword\">SYSTEM</span>/ControlSet001/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL 目录删除; HKEY\\_LOCAL\\_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL 目录删除; 在硬盘和注册表中搜索mysql并删除掉</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 开启慢查询日志</span></span><br></pre></td></tr></table></figure>\n\nsudo vim /etc/my.cnf\n# slow_query_log\nslow_query_log=on\nslow-query-log-file=/var/log/mysql/slow.log # 保证此文件属于mysql用户，mysql组，并可写权限\nlong_query_time=1 # 超过1秒写入慢查询日志\nlog-queries-not-using-indexes</code></pre><blockquote>\n<p>重启mysql</p>\n</blockquote>\n<pre><code>### 查看是否开启mysql慢查询日志\n&gt;mysql show variables like &quot;slow_query_log&quot;;</code></pre>"},{"title":"PHPUnit单元测试","url":"93.html","id":"93","comments":0,"date":"2016-11-10T02:31:18.000Z","_content":"\n### 安装\n\n安装composer\n\n    sudo apt-get install composer\n    \n\n安装PHPUnit\n\n    sudo composer require --dev phpunit/phpunit\n    \n\n安装xdebug\n\n    sudo apt-get install php-xdebug\n    \n\n### 配置\n\n路径/phpunit.xml\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <phpunit bootstrap=\"tests/bootstrap.php\">\n       <testsuites>\n           <testsuite name=\"whovian\">\n               <directory suffix=\"Test.php\">\n                   tests\n               </directory>\n           </testsuite>\n       </testsuites>\n        <filter>\n            <whitelist>\n                <directory>src</directory>\n            </whitelist>\n        </filter>\n    </phpunit>\n    \n\ntests/bootstrap..php表示phpunit文件的路径  \nfilter元素列出需要分析代码覆盖度分析涵盖的目录  \nwhitelist元素告诉PHPUnit只分析src/目录中的代码  \ntests/bootstrap.php\n\n    <?php\n    require dirname(__DIR__) . '/vendor/autoload.php';\n    \n\nsrc/Whovian.php\n\n    <?php\n    \n    class Whovian\n    {\n      protected $favoriteDoctor;\n    \n      // 设置实例喜欢的医生\n      public function __construct($favoriteDoctor)\n      {\n        $this->favoriteDoctor = (string)$favoriteDoctor;\n      }\n    \n      // 返回一个字符串，说出实例最喜欢的医生\n      public function say()\n      {\n        return 'The best doctor is ' . $this->favoriteDoctor;\n      }\n    \n      // 与另一个实例喜欢的医生进行比较，并做出回应\n      public function respondTo($input)\n      {\n        $input = strtolower($input);\n        $myDoctor = strtolower($this->favoriteDoctor);\n        if(strpos($input, $myDoctor) === false) {\n          throw new Exception(sprintf(\n            'No way, %s is the best doctor ever', $this->favoriteDoctor\n          ));\n        }\n        return 'I agree!';\n      }\n    }\n    \n\ntests/WhovianTest.php\n\n    <?php\n    \n      require dirname(__DIR__) . '/src/Whovian.php';\n      class WhovianTest extends PHPUnit_Framework_TestCase\n      {\n        // 确认构造方法是否设定了Whovian实例最喜欢的医生\n        public function testSetsDoctorWithConstructor()\n        {\n          $whovian = new Whovian('Peter Capaldi');\n          $this->assertAttributeEquals('Peter Capaldi', 'favoriteDoctor', $whovian);\n        }\n    \n        // 确认say方法是否会返回一个包含最喜欢医生名字的字符串\n        public function testSaysDoctorName()\n        {\n          $whovian = new Whovian('David Tennant');\n          $this->assertEquals('The best doctor is David Tennant', $whovian->say());\n        }\n        // 确认认同另一个实例最喜欢的医生\n        public function testRespondToInAgreement()\n        {\n          $whovian = new Whovian('David Tennant');\n          $opinion = 'David Tennant is the best doctor, period';\n          $this->assertEquals('I agree!', $whovian->respondTo($opinion));\n        }\n        // 反对另一个实例最喜欢的医生\n        public function testRespondToInDisagreement()\n        {\n          $whovian = new Whovian('David Tennant');\n          $opinion = 'No way, Matt smith was awesome!';\n          $whovian->respondTo($opinion);\n        }\n      }\n    \n\n终端执行测试\n\n    vendor/bin/phpunit -c phpunit.xml\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/phpunit-run) 测试的目录结构\n\n    src/     \n        /Whovian.php  \n    tests/    \n        /bootstrap.php  \n        /WhovianTest.php\n    vendor/\n        /bin/  \n        /composer/  \n        /phpunit/  \n        /autoload.php  \n    composer.json  \n    composer.lock  \n    phpunit.xml","source":"_posts/PHPUnit单元测试.md","raw":"---\ntitle: PHPUnit单元测试\ntags:\n  - php\nurl: 93.html\nid: 93\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-10 10:31:18\n---\n\n### 安装\n\n安装composer\n\n    sudo apt-get install composer\n    \n\n安装PHPUnit\n\n    sudo composer require --dev phpunit/phpunit\n    \n\n安装xdebug\n\n    sudo apt-get install php-xdebug\n    \n\n### 配置\n\n路径/phpunit.xml\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <phpunit bootstrap=\"tests/bootstrap.php\">\n       <testsuites>\n           <testsuite name=\"whovian\">\n               <directory suffix=\"Test.php\">\n                   tests\n               </directory>\n           </testsuite>\n       </testsuites>\n        <filter>\n            <whitelist>\n                <directory>src</directory>\n            </whitelist>\n        </filter>\n    </phpunit>\n    \n\ntests/bootstrap..php表示phpunit文件的路径  \nfilter元素列出需要分析代码覆盖度分析涵盖的目录  \nwhitelist元素告诉PHPUnit只分析src/目录中的代码  \ntests/bootstrap.php\n\n    <?php\n    require dirname(__DIR__) . '/vendor/autoload.php';\n    \n\nsrc/Whovian.php\n\n    <?php\n    \n    class Whovian\n    {\n      protected $favoriteDoctor;\n    \n      // 设置实例喜欢的医生\n      public function __construct($favoriteDoctor)\n      {\n        $this->favoriteDoctor = (string)$favoriteDoctor;\n      }\n    \n      // 返回一个字符串，说出实例最喜欢的医生\n      public function say()\n      {\n        return 'The best doctor is ' . $this->favoriteDoctor;\n      }\n    \n      // 与另一个实例喜欢的医生进行比较，并做出回应\n      public function respondTo($input)\n      {\n        $input = strtolower($input);\n        $myDoctor = strtolower($this->favoriteDoctor);\n        if(strpos($input, $myDoctor) === false) {\n          throw new Exception(sprintf(\n            'No way, %s is the best doctor ever', $this->favoriteDoctor\n          ));\n        }\n        return 'I agree!';\n      }\n    }\n    \n\ntests/WhovianTest.php\n\n    <?php\n    \n      require dirname(__DIR__) . '/src/Whovian.php';\n      class WhovianTest extends PHPUnit_Framework_TestCase\n      {\n        // 确认构造方法是否设定了Whovian实例最喜欢的医生\n        public function testSetsDoctorWithConstructor()\n        {\n          $whovian = new Whovian('Peter Capaldi');\n          $this->assertAttributeEquals('Peter Capaldi', 'favoriteDoctor', $whovian);\n        }\n    \n        // 确认say方法是否会返回一个包含最喜欢医生名字的字符串\n        public function testSaysDoctorName()\n        {\n          $whovian = new Whovian('David Tennant');\n          $this->assertEquals('The best doctor is David Tennant', $whovian->say());\n        }\n        // 确认认同另一个实例最喜欢的医生\n        public function testRespondToInAgreement()\n        {\n          $whovian = new Whovian('David Tennant');\n          $opinion = 'David Tennant is the best doctor, period';\n          $this->assertEquals('I agree!', $whovian->respondTo($opinion));\n        }\n        // 反对另一个实例最喜欢的医生\n        public function testRespondToInDisagreement()\n        {\n          $whovian = new Whovian('David Tennant');\n          $opinion = 'No way, Matt smith was awesome!';\n          $whovian->respondTo($opinion);\n        }\n      }\n    \n\n终端执行测试\n\n    vendor/bin/phpunit -c phpunit.xml\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/phpunit-run) 测试的目录结构\n\n    src/     \n        /Whovian.php  \n    tests/    \n        /bootstrap.php  \n        /WhovianTest.php\n    vendor/\n        /bin/  \n        /composer/  \n        /phpunit/  \n        /autoload.php  \n    composer.json  \n    composer.lock  \n    phpunit.xml","slug":"PHPUnit单元测试","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrx000qh3a4a40m123c","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装composer</p>\n<pre><code>sudo apt-get install composer</code></pre><p>安装PHPUnit</p>\n<pre><code>sudo composer require --dev phpunit/phpunit</code></pre><p>安装xdebug</p>\n<pre><code>sudo apt-get install php-xdebug</code></pre><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>路径/phpunit.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;phpunit bootstrap=&quot;tests/bootstrap.php&quot;&gt;\n   &lt;testsuites&gt;\n       &lt;testsuite name=&quot;whovian&quot;&gt;\n           &lt;directory suffix=&quot;Test.php&quot;&gt;\n               tests\n           &lt;/directory&gt;\n       &lt;/testsuite&gt;\n   &lt;/testsuites&gt;\n    &lt;filter&gt;\n        &lt;whitelist&gt;\n            &lt;directory&gt;src&lt;/directory&gt;\n        &lt;/whitelist&gt;\n    &lt;/filter&gt;\n&lt;/phpunit&gt;</code></pre><p>tests/bootstrap..php表示phpunit文件的路径<br>filter元素列出需要分析代码覆盖度分析涵盖的目录<br>whitelist元素告诉PHPUnit只分析src/目录中的代码<br>tests/bootstrap.php</p>\n<pre><code>&lt;?php\nrequire dirname(__DIR__) . &apos;/vendor/autoload.php&apos;;</code></pre><p>src/Whovian.php</p>\n<pre><code>&lt;?php\n\nclass Whovian\n{\n  protected $favoriteDoctor;\n\n  // 设置实例喜欢的医生\n  public function __construct($favoriteDoctor)\n  {\n    $this-&gt;favoriteDoctor = (string)$favoriteDoctor;\n  }\n\n  // 返回一个字符串，说出实例最喜欢的医生\n  public function say()\n  {\n    return &apos;The best doctor is &apos; . $this-&gt;favoriteDoctor;\n  }\n\n  // 与另一个实例喜欢的医生进行比较，并做出回应\n  public function respondTo($input)\n  {\n    $input = strtolower($input);\n    $myDoctor = strtolower($this-&gt;favoriteDoctor);\n    if(strpos($input, $myDoctor) === false) {\n      throw new Exception(sprintf(\n        &apos;No way, %s is the best doctor ever&apos;, $this-&gt;favoriteDoctor\n      ));\n    }\n    return &apos;I agree!&apos;;\n  }\n}</code></pre><p>tests/WhovianTest.php</p>\n<pre><code>&lt;?php\n\n  require dirname(__DIR__) . &apos;/src/Whovian.php&apos;;\n  class WhovianTest extends PHPUnit_Framework_TestCase\n  {\n    // 确认构造方法是否设定了Whovian实例最喜欢的医生\n    public function testSetsDoctorWithConstructor()\n    {\n      $whovian = new Whovian(&apos;Peter Capaldi&apos;);\n      $this-&gt;assertAttributeEquals(&apos;Peter Capaldi&apos;, &apos;favoriteDoctor&apos;, $whovian);\n    }\n\n    // 确认say方法是否会返回一个包含最喜欢医生名字的字符串\n    public function testSaysDoctorName()\n    {\n      $whovian = new Whovian(&apos;David Tennant&apos;);\n      $this-&gt;assertEquals(&apos;The best doctor is David Tennant&apos;, $whovian-&gt;say());\n    }\n    // 确认认同另一个实例最喜欢的医生\n    public function testRespondToInAgreement()\n    {\n      $whovian = new Whovian(&apos;David Tennant&apos;);\n      $opinion = &apos;David Tennant is the best doctor, period&apos;;\n      $this-&gt;assertEquals(&apos;I agree!&apos;, $whovian-&gt;respondTo($opinion));\n    }\n    // 反对另一个实例最喜欢的医生\n    public function testRespondToInDisagreement()\n    {\n      $whovian = new Whovian(&apos;David Tennant&apos;);\n      $opinion = &apos;No way, Matt smith was awesome!&apos;;\n      $whovian-&gt;respondTo($opinion);\n    }\n  }</code></pre><p>终端执行测试</p>\n<pre><code>vendor/bin/phpunit -c phpunit.xml</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/phpunit-run\" alt> 测试的目录结构</p>\n<pre><code>src/     \n    /Whovian.php  \ntests/    \n    /bootstrap.php  \n    /WhovianTest.php\nvendor/\n    /bin/  \n    /composer/  \n    /phpunit/  \n    /autoload.php  \ncomposer.json  \ncomposer.lock  \nphpunit.xml</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装composer</p>\n<pre><code>sudo apt-get install composer</code></pre><p>安装PHPUnit</p>\n<pre><code>sudo composer require --dev phpunit/phpunit</code></pre><p>安装xdebug</p>\n<pre><code>sudo apt-get install php-xdebug</code></pre><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>路径/phpunit.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;phpunit bootstrap=&quot;tests/bootstrap.php&quot;&gt;\n   &lt;testsuites&gt;\n       &lt;testsuite name=&quot;whovian&quot;&gt;\n           &lt;directory suffix=&quot;Test.php&quot;&gt;\n               tests\n           &lt;/directory&gt;\n       &lt;/testsuite&gt;\n   &lt;/testsuites&gt;\n    &lt;filter&gt;\n        &lt;whitelist&gt;\n            &lt;directory&gt;src&lt;/directory&gt;\n        &lt;/whitelist&gt;\n    &lt;/filter&gt;\n&lt;/phpunit&gt;</code></pre><p>tests/bootstrap..php表示phpunit文件的路径<br>filter元素列出需要分析代码覆盖度分析涵盖的目录<br>whitelist元素告诉PHPUnit只分析src/目录中的代码<br>tests/bootstrap.php</p>\n<pre><code>&lt;?php\nrequire dirname(__DIR__) . &apos;/vendor/autoload.php&apos;;</code></pre><p>src/Whovian.php</p>\n<pre><code>&lt;?php\n\nclass Whovian\n{\n  protected $favoriteDoctor;\n\n  // 设置实例喜欢的医生\n  public function __construct($favoriteDoctor)\n  {\n    $this-&gt;favoriteDoctor = (string)$favoriteDoctor;\n  }\n\n  // 返回一个字符串，说出实例最喜欢的医生\n  public function say()\n  {\n    return &apos;The best doctor is &apos; . $this-&gt;favoriteDoctor;\n  }\n\n  // 与另一个实例喜欢的医生进行比较，并做出回应\n  public function respondTo($input)\n  {\n    $input = strtolower($input);\n    $myDoctor = strtolower($this-&gt;favoriteDoctor);\n    if(strpos($input, $myDoctor) === false) {\n      throw new Exception(sprintf(\n        &apos;No way, %s is the best doctor ever&apos;, $this-&gt;favoriteDoctor\n      ));\n    }\n    return &apos;I agree!&apos;;\n  }\n}</code></pre><p>tests/WhovianTest.php</p>\n<pre><code>&lt;?php\n\n  require dirname(__DIR__) . &apos;/src/Whovian.php&apos;;\n  class WhovianTest extends PHPUnit_Framework_TestCase\n  {\n    // 确认构造方法是否设定了Whovian实例最喜欢的医生\n    public function testSetsDoctorWithConstructor()\n    {\n      $whovian = new Whovian(&apos;Peter Capaldi&apos;);\n      $this-&gt;assertAttributeEquals(&apos;Peter Capaldi&apos;, &apos;favoriteDoctor&apos;, $whovian);\n    }\n\n    // 确认say方法是否会返回一个包含最喜欢医生名字的字符串\n    public function testSaysDoctorName()\n    {\n      $whovian = new Whovian(&apos;David Tennant&apos;);\n      $this-&gt;assertEquals(&apos;The best doctor is David Tennant&apos;, $whovian-&gt;say());\n    }\n    // 确认认同另一个实例最喜欢的医生\n    public function testRespondToInAgreement()\n    {\n      $whovian = new Whovian(&apos;David Tennant&apos;);\n      $opinion = &apos;David Tennant is the best doctor, period&apos;;\n      $this-&gt;assertEquals(&apos;I agree!&apos;, $whovian-&gt;respondTo($opinion));\n    }\n    // 反对另一个实例最喜欢的医生\n    public function testRespondToInDisagreement()\n    {\n      $whovian = new Whovian(&apos;David Tennant&apos;);\n      $opinion = &apos;No way, Matt smith was awesome!&apos;;\n      $whovian-&gt;respondTo($opinion);\n    }\n  }</code></pre><p>终端执行测试</p>\n<pre><code>vendor/bin/phpunit -c phpunit.xml</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/phpunit-run\" alt> 测试的目录结构</p>\n<pre><code>src/     \n    /Whovian.php  \ntests/    \n    /bootstrap.php  \n    /WhovianTest.php\nvendor/\n    /bin/  \n    /composer/  \n    /phpunit/  \n    /autoload.php  \ncomposer.json  \ncomposer.lock  \nphpunit.xml</code></pre>"},{"title":"PHP将PDF转为jpg，png图片","url":"14.html","id":"14","comments":0,"date":"2016-11-08T08:23:41.000Z","_content":"\n### 环境\n\nWINDOW,PHP5.2\n\n### 安装\n\n安装ImageMagick并添加环境变量 [官网](http://www.imagemagick.org/script/index.php)  \n安装php扩展php_imagick.dll,并在php.ini开启 [官网](https://pecl.php.net/package/imagick)  \n查看是否载入扩展\n\n    phpinfo();\n    \n\n安装Ghostscript并添加环境变量 [官网](http://www.ghostscript.com/download/)\n\n### 下载地址\n\n[百度网盘](http://pan.baidu.com/s/1kTOkhFL)\n\n### 测试是否可以正常运行\n\n    λ convert.exe SEZ588Hu.pdf SEZ588Hu.png\n    \n\n### php代码\n\n生成jpg文件\n\n    $im = new imagick('A.pdf[0]');\n    $im->setImageFormat('jpg');\n    $im->writeImages('A.jpg', true);\n    \n    \n\n或者直接输出到浏览器\n\n    <?php\n    $im = new imagick('file.pdf[0]');\n    $im->setImageFormat('jpg');\n    header('Content-Type: image/jpeg');\n    echo $im;\n    ?>\n    \n\n### 错误处理\n\n1，将Ghostscript64位卸载，安装32位  \n2，将php.ini里的upload\\_tmp\\_dir对应目录权限修改为IISUER可读写","source":"_posts/PHP将PDF转为jpg，png图片.md","raw":"---\ntitle: PHP将PDF转为jpg，png图片\ntags:\n  - php\nurl: 14.html\nid: 14\ncomments: false\ncategories:\n  - 前端\ndate: 2016-11-08 16:23:41\n---\n\n### 环境\n\nWINDOW,PHP5.2\n\n### 安装\n\n安装ImageMagick并添加环境变量 [官网](http://www.imagemagick.org/script/index.php)  \n安装php扩展php_imagick.dll,并在php.ini开启 [官网](https://pecl.php.net/package/imagick)  \n查看是否载入扩展\n\n    phpinfo();\n    \n\n安装Ghostscript并添加环境变量 [官网](http://www.ghostscript.com/download/)\n\n### 下载地址\n\n[百度网盘](http://pan.baidu.com/s/1kTOkhFL)\n\n### 测试是否可以正常运行\n\n    λ convert.exe SEZ588Hu.pdf SEZ588Hu.png\n    \n\n### php代码\n\n生成jpg文件\n\n    $im = new imagick('A.pdf[0]');\n    $im->setImageFormat('jpg');\n    $im->writeImages('A.jpg', true);\n    \n    \n\n或者直接输出到浏览器\n\n    <?php\n    $im = new imagick('file.pdf[0]');\n    $im->setImageFormat('jpg');\n    header('Content-Type: image/jpeg');\n    echo $im;\n    ?>\n    \n\n### 错误处理\n\n1，将Ghostscript64位卸载，安装32位  \n2，将php.ini里的upload\\_tmp\\_dir对应目录权限修改为IISUER可读写","slug":"PHP将PDF转为jpg，png图片","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwry000th3a4kxx83kq9","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>WINDOW,PHP5.2</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装ImageMagick并添加环境变量 <a href=\"http://www.imagemagick.org/script/index.php\" target=\"_blank\" rel=\"noopener\">官网</a><br>安装php扩展php_imagick.dll,并在php.ini开启 <a href=\"https://pecl.php.net/package/imagick\" target=\"_blank\" rel=\"noopener\">官网</a><br>查看是否载入扩展</p>\n<pre><code>phpinfo();</code></pre><p>安装Ghostscript并添加环境变量 <a href=\"http://www.ghostscript.com/download/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"http://pan.baidu.com/s/1kTOkhFL\" target=\"_blank\" rel=\"noopener\">百度网盘</a></p>\n<h3 id=\"测试是否可以正常运行\"><a href=\"#测试是否可以正常运行\" class=\"headerlink\" title=\"测试是否可以正常运行\"></a>测试是否可以正常运行</h3><pre><code>λ convert.exe SEZ588Hu.pdf SEZ588Hu.png</code></pre><h3 id=\"php代码\"><a href=\"#php代码\" class=\"headerlink\" title=\"php代码\"></a>php代码</h3><p>生成jpg文件</p>\n<pre><code>$im = new imagick(&apos;A.pdf[0]&apos;);\n$im-&gt;setImageFormat(&apos;jpg&apos;);\n$im-&gt;writeImages(&apos;A.jpg&apos;, true);</code></pre><p>或者直接输出到浏览器</p>\n<pre><code>&lt;?php\n$im = new imagick(&apos;file.pdf[0]&apos;);\n$im-&gt;setImageFormat(&apos;jpg&apos;);\nheader(&apos;Content-Type: image/jpeg&apos;);\necho $im;\n?&gt;</code></pre><h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>1，将Ghostscript64位卸载，安装32位<br>2，将php.ini里的upload_tmp_dir对应目录权限修改为IISUER可读写</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>WINDOW,PHP5.2</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装ImageMagick并添加环境变量 <a href=\"http://www.imagemagick.org/script/index.php\" target=\"_blank\" rel=\"noopener\">官网</a><br>安装php扩展php_imagick.dll,并在php.ini开启 <a href=\"https://pecl.php.net/package/imagick\" target=\"_blank\" rel=\"noopener\">官网</a><br>查看是否载入扩展</p>\n<pre><code>phpinfo();</code></pre><p>安装Ghostscript并添加环境变量 <a href=\"http://www.ghostscript.com/download/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"http://pan.baidu.com/s/1kTOkhFL\" target=\"_blank\" rel=\"noopener\">百度网盘</a></p>\n<h3 id=\"测试是否可以正常运行\"><a href=\"#测试是否可以正常运行\" class=\"headerlink\" title=\"测试是否可以正常运行\"></a>测试是否可以正常运行</h3><pre><code>λ convert.exe SEZ588Hu.pdf SEZ588Hu.png</code></pre><h3 id=\"php代码\"><a href=\"#php代码\" class=\"headerlink\" title=\"php代码\"></a>php代码</h3><p>生成jpg文件</p>\n<pre><code>$im = new imagick(&apos;A.pdf[0]&apos;);\n$im-&gt;setImageFormat(&apos;jpg&apos;);\n$im-&gt;writeImages(&apos;A.jpg&apos;, true);</code></pre><p>或者直接输出到浏览器</p>\n<pre><code>&lt;?php\n$im = new imagick(&apos;file.pdf[0]&apos;);\n$im-&gt;setImageFormat(&apos;jpg&apos;);\nheader(&apos;Content-Type: image/jpeg&apos;);\necho $im;\n?&gt;</code></pre><h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>1，将Ghostscript64位卸载，安装32位<br>2，将php.ini里的upload_tmp_dir对应目录权限修改为IISUER可读写</p>\n"},{"title":"Python基础及内建函数学习","url":"34.html","id":"34","comments":0,"date":"2016-11-09T02:46:24.000Z","_content":"\n### 源码安装python2.7.9\n\n    $ sudo apt-get install -y openssl\n    $ sudo apt-get install -y libssl-dev # 即 openssl-devel\n    $ sudo apt-get install -y libffi-dev # 即 libffi-devel\n    $ sudo apt-get install -y python-openssl\n    $ sudo apt-get install libbz2-dev\n    $ sudo apt-get install libxml2-dev\n    $ sudo apt-get install libxslt1-dev\n    $ sudo apt-get install sqlite3 libsqlite3-dev\n    $ sudo apt-get install libmysqlclient-dev\n    \n\n    wget -c https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz  \n    tar -xzvf Python-2.7.9.tgz  \n    cd Python-2.7.9/ \n    \n\n修改源码，支持ssl\n\n    vim Modules/Setup.dist\n    \n\n    # Socket module helper for SSL support; you must comment out the other\n    # socket line above, and possibly edit the SSL variable:\n    #SSL=/usr/local/ssl\n    #_ssl _ssl.c \\\n    #        -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    #        -L$(SSL)/lib -lssl -lcrypto\n    \n\n改成\n\n    # Socket module helper for SSL support; you must comment out the other\n    # socket line above, and possibly edit the SSL variable:\n    SSL=/usr/local/ssl\n    _ssl _ssl.c \\\n            -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    \n            -L$(SSL)/lib -lssl -lcrypto\n    \n\n    LDFLAGS=\"-L/usr/lib/x86_64-linux-gnu\" ./configure  \n    make  \n    sudo make install\n    \n\n### 虚拟环境搭建\n\n安装\n\n    sudo apt-get install python-virtualenv\n    \n\n创建虚拟环境\n\n    cd ~/var/www\n    virtualenv --no-site-packages -p /usr/local/bin/python Novel # 参数表示不安装系统已经安装的第三方包, -p表示用哪个版本的python\n    \n\n启用虚拟环境\n\n    cd /var/www/Novel\n    source ./bin/activate\n    \n\n虚拟环境安装包\n\n    (Novel) pip isntall django==1.8.2 # 不能加sudo\n    \n\n退出虚拟环境，进入正常环境\n\n    deactivate\n    \n\n虚拟环境复制\n\n    pip freeze > requirements.txt\n    pip install -r requirements.txt\n    \n\n### pip安装超时\n\n    pip --default-timeout=100 install -U pip\n    \n\n### 安装python-mysql\n\n    sudo apt-get install python-setuptools\n    \n    sudo apt-get install libmysqld-dev\n    \n    sudo apt-get install libmysqlclient-dev\n    \n    sudo apt-get install python-dev\n    \n    sudo easy_install mysql-python\n    \n\n在终端输入以下内容,不报错则表示成功\n\n    import MySQLdb\n    \n\n### 获取文件修改时间\n\n    import time\n    filemt= time.localtime(os.stat(filename).st_mtime)  #文件修改时间\n    filect = time.localtime(os.stat(filename).st_ctime)  #文件创建\n    print time.strftime(\"%Y-%m-%d\",filemt)  \n    print time.strftime(\"%Y-%m-%d\",filect)\n    \n\n### 获取多少天以前的时间\n\n    import datetime\n    # 30天以前的日期\n    date_time = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime(\"%Y-%m-%d\")\n    print date_time\n    \n\n### 去除列表重复项内容\n\n    # 如果列表里面内容为字典\n    f = lambda x,y:x if y in x else x + [y]\n    products = reduce(f, [[], ] + products_query)\n    print products\n    \n    # 如果列表里面内容为字符串\n    l1 = ['b','c','d','b','c','a','a']\n    l2 = list(set(l1))\n    print l2\n    # 保持原来的顺序\n    l1 = ['b','c','d','b','c','a','a']\n    l2 = sorted(set(l1),key=l1.index)\n    print l2\n    \n\n### md5，hash加密\n\n    import hashlib\n    data =  'This a md5 test!'\n    hash_md5 = hashlib.md5(data)  # md5\n    hash_md5.hexdigest()\n    \n    hashlib.sha1('This is a sha1 test!').hexdigest() # sha1\n    \n\n### 打印输出对象\n\n    from pprint import pprint\n    pprint(vars(object))\n    \n\nwindows安装python相关环境\n===================\n\n### 安装虚拟环境\n\n    # 安装包\n    pip install virtualenv\n    # 创建虚拟环境env\n    virtualenv.exe  env\n    # 开启虚拟环境\n    ./scripts/active\n    # 退出虚拟环境\n    deactivate","source":"_posts/Python基础及内建函数学习.md","raw":"---\ntitle: Python基础及内建函数学习\ntags:\n  - python\nurl: 34.html\nid: 34\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-09 10:46:24\n---\n\n### 源码安装python2.7.9\n\n    $ sudo apt-get install -y openssl\n    $ sudo apt-get install -y libssl-dev # 即 openssl-devel\n    $ sudo apt-get install -y libffi-dev # 即 libffi-devel\n    $ sudo apt-get install -y python-openssl\n    $ sudo apt-get install libbz2-dev\n    $ sudo apt-get install libxml2-dev\n    $ sudo apt-get install libxslt1-dev\n    $ sudo apt-get install sqlite3 libsqlite3-dev\n    $ sudo apt-get install libmysqlclient-dev\n    \n\n    wget -c https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz  \n    tar -xzvf Python-2.7.9.tgz  \n    cd Python-2.7.9/ \n    \n\n修改源码，支持ssl\n\n    vim Modules/Setup.dist\n    \n\n    # Socket module helper for SSL support; you must comment out the other\n    # socket line above, and possibly edit the SSL variable:\n    #SSL=/usr/local/ssl\n    #_ssl _ssl.c \\\n    #        -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    #        -L$(SSL)/lib -lssl -lcrypto\n    \n\n改成\n\n    # Socket module helper for SSL support; you must comment out the other\n    # socket line above, and possibly edit the SSL variable:\n    SSL=/usr/local/ssl\n    _ssl _ssl.c \\\n            -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n    \n            -L$(SSL)/lib -lssl -lcrypto\n    \n\n    LDFLAGS=\"-L/usr/lib/x86_64-linux-gnu\" ./configure  \n    make  \n    sudo make install\n    \n\n### 虚拟环境搭建\n\n安装\n\n    sudo apt-get install python-virtualenv\n    \n\n创建虚拟环境\n\n    cd ~/var/www\n    virtualenv --no-site-packages -p /usr/local/bin/python Novel # 参数表示不安装系统已经安装的第三方包, -p表示用哪个版本的python\n    \n\n启用虚拟环境\n\n    cd /var/www/Novel\n    source ./bin/activate\n    \n\n虚拟环境安装包\n\n    (Novel) pip isntall django==1.8.2 # 不能加sudo\n    \n\n退出虚拟环境，进入正常环境\n\n    deactivate\n    \n\n虚拟环境复制\n\n    pip freeze > requirements.txt\n    pip install -r requirements.txt\n    \n\n### pip安装超时\n\n    pip --default-timeout=100 install -U pip\n    \n\n### 安装python-mysql\n\n    sudo apt-get install python-setuptools\n    \n    sudo apt-get install libmysqld-dev\n    \n    sudo apt-get install libmysqlclient-dev\n    \n    sudo apt-get install python-dev\n    \n    sudo easy_install mysql-python\n    \n\n在终端输入以下内容,不报错则表示成功\n\n    import MySQLdb\n    \n\n### 获取文件修改时间\n\n    import time\n    filemt= time.localtime(os.stat(filename).st_mtime)  #文件修改时间\n    filect = time.localtime(os.stat(filename).st_ctime)  #文件创建\n    print time.strftime(\"%Y-%m-%d\",filemt)  \n    print time.strftime(\"%Y-%m-%d\",filect)\n    \n\n### 获取多少天以前的时间\n\n    import datetime\n    # 30天以前的日期\n    date_time = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime(\"%Y-%m-%d\")\n    print date_time\n    \n\n### 去除列表重复项内容\n\n    # 如果列表里面内容为字典\n    f = lambda x,y:x if y in x else x + [y]\n    products = reduce(f, [[], ] + products_query)\n    print products\n    \n    # 如果列表里面内容为字符串\n    l1 = ['b','c','d','b','c','a','a']\n    l2 = list(set(l1))\n    print l2\n    # 保持原来的顺序\n    l1 = ['b','c','d','b','c','a','a']\n    l2 = sorted(set(l1),key=l1.index)\n    print l2\n    \n\n### md5，hash加密\n\n    import hashlib\n    data =  'This a md5 test!'\n    hash_md5 = hashlib.md5(data)  # md5\n    hash_md5.hexdigest()\n    \n    hashlib.sha1('This is a sha1 test!').hexdigest() # sha1\n    \n\n### 打印输出对象\n\n    from pprint import pprint\n    pprint(vars(object))\n    \n\nwindows安装python相关环境\n===================\n\n### 安装虚拟环境\n\n    # 安装包\n    pip install virtualenv\n    # 创建虚拟环境env\n    virtualenv.exe  env\n    # 开启虚拟环境\n    ./scripts/active\n    # 退出虚拟环境\n    deactivate","slug":"Python基础及内建函数学习","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwrz000xh3a4qcuq3bbj","content":"<h3 id=\"源码安装python2-7-9\"><a href=\"#源码安装python2-7-9\" class=\"headerlink\" title=\"源码安装python2.7.9\"></a>源码安装python2.7.9</h3><pre><code>$ sudo apt-get install -y openssl\n$ sudo apt-get install -y libssl-dev # 即 openssl-devel\n$ sudo apt-get install -y libffi-dev # 即 libffi-devel\n$ sudo apt-get install -y python-openssl\n$ sudo apt-get install libbz2-dev\n$ sudo apt-get install libxml2-dev\n$ sudo apt-get install libxslt1-dev\n$ sudo apt-get install sqlite3 libsqlite3-dev\n$ sudo apt-get install libmysqlclient-dev\n\n\nwget -c https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz  \ntar -xzvf Python-2.7.9.tgz  \ncd Python-2.7.9/ </code></pre><p>修改源码，支持ssl</p>\n<pre><code>vim Modules/Setup.dist\n\n\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n#_ssl _ssl.c \\\n#        -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n#        -L$(SSL)/lib -lssl -lcrypto</code></pre><p>改成</p>\n<pre><code># Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n        -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n\n        -L$(SSL)/lib -lssl -lcrypto\n\n\nLDFLAGS=&quot;-L/usr/lib/x86_64-linux-gnu&quot; ./configure  \nmake  \nsudo make install</code></pre><h3 id=\"虚拟环境搭建\"><a href=\"#虚拟环境搭建\" class=\"headerlink\" title=\"虚拟环境搭建\"></a>虚拟环境搭建</h3><p>安装</p>\n<pre><code>sudo apt-get install python-virtualenv</code></pre><p>创建虚拟环境</p>\n<pre><code>cd ~/var/www\nvirtualenv --no-site-packages -p /usr/local/bin/python Novel # 参数表示不安装系统已经安装的第三方包, -p表示用哪个版本的python</code></pre><p>启用虚拟环境</p>\n<pre><code>cd /var/www/Novel\nsource ./bin/activate</code></pre><p>虚拟环境安装包</p>\n<pre><code>(Novel) pip isntall django==1.8.2 # 不能加sudo</code></pre><p>退出虚拟环境，进入正常环境</p>\n<pre><code>deactivate</code></pre><p>虚拟环境复制</p>\n<pre><code>pip freeze &gt; requirements.txt\npip install -r requirements.txt</code></pre><h3 id=\"pip安装超时\"><a href=\"#pip安装超时\" class=\"headerlink\" title=\"pip安装超时\"></a>pip安装超时</h3><pre><code>pip --default-timeout=100 install -U pip</code></pre><h3 id=\"安装python-mysql\"><a href=\"#安装python-mysql\" class=\"headerlink\" title=\"安装python-mysql\"></a>安装python-mysql</h3><pre><code>sudo apt-get install python-setuptools\n\nsudo apt-get install libmysqld-dev\n\nsudo apt-get install libmysqlclient-dev\n\nsudo apt-get install python-dev\n\nsudo easy_install mysql-python</code></pre><p>在终端输入以下内容,不报错则表示成功</p>\n<pre><code>import MySQLdb</code></pre><h3 id=\"获取文件修改时间\"><a href=\"#获取文件修改时间\" class=\"headerlink\" title=\"获取文件修改时间\"></a>获取文件修改时间</h3><pre><code>import time\nfilemt= time.localtime(os.stat(filename).st_mtime)  #文件修改时间\nfilect = time.localtime(os.stat(filename).st_ctime)  #文件创建\nprint time.strftime(&quot;%Y-%m-%d&quot;,filemt)  \nprint time.strftime(&quot;%Y-%m-%d&quot;,filect)</code></pre><h3 id=\"获取多少天以前的时间\"><a href=\"#获取多少天以前的时间\" class=\"headerlink\" title=\"获取多少天以前的时间\"></a>获取多少天以前的时间</h3><pre><code>import datetime\n# 30天以前的日期\ndate_time = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime(&quot;%Y-%m-%d&quot;)\nprint date_time</code></pre><h3 id=\"去除列表重复项内容\"><a href=\"#去除列表重复项内容\" class=\"headerlink\" title=\"去除列表重复项内容\"></a>去除列表重复项内容</h3><pre><code># 如果列表里面内容为字典\nf = lambda x,y:x if y in x else x + [y]\nproducts = reduce(f, [[], ] + products_query)\nprint products\n\n# 如果列表里面内容为字符串\nl1 = [&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;b&apos;,&apos;c&apos;,&apos;a&apos;,&apos;a&apos;]\nl2 = list(set(l1))\nprint l2\n# 保持原来的顺序\nl1 = [&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;b&apos;,&apos;c&apos;,&apos;a&apos;,&apos;a&apos;]\nl2 = sorted(set(l1),key=l1.index)\nprint l2</code></pre><h3 id=\"md5，hash加密\"><a href=\"#md5，hash加密\" class=\"headerlink\" title=\"md5，hash加密\"></a>md5，hash加密</h3><pre><code>import hashlib\ndata =  &apos;This a md5 test!&apos;\nhash_md5 = hashlib.md5(data)  # md5\nhash_md5.hexdigest()\n\nhashlib.sha1(&apos;This is a sha1 test!&apos;).hexdigest() # sha1</code></pre><h3 id=\"打印输出对象\"><a href=\"#打印输出对象\" class=\"headerlink\" title=\"打印输出对象\"></a>打印输出对象</h3><pre><code>from pprint import pprint\npprint(vars(object))</code></pre><h1 id=\"windows安装python相关环境\"><a href=\"#windows安装python相关环境\" class=\"headerlink\" title=\"windows安装python相关环境\"></a>windows安装python相关环境</h1><h3 id=\"安装虚拟环境\"><a href=\"#安装虚拟环境\" class=\"headerlink\" title=\"安装虚拟环境\"></a>安装虚拟环境</h3><pre><code># 安装包\npip install virtualenv\n# 创建虚拟环境env\nvirtualenv.exe  env\n# 开启虚拟环境\n./scripts/active\n# 退出虚拟环境\ndeactivate</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"源码安装python2-7-9\"><a href=\"#源码安装python2-7-9\" class=\"headerlink\" title=\"源码安装python2.7.9\"></a>源码安装python2.7.9</h3><pre><code>$ sudo apt-get install -y openssl\n$ sudo apt-get install -y libssl-dev # 即 openssl-devel\n$ sudo apt-get install -y libffi-dev # 即 libffi-devel\n$ sudo apt-get install -y python-openssl\n$ sudo apt-get install libbz2-dev\n$ sudo apt-get install libxml2-dev\n$ sudo apt-get install libxslt1-dev\n$ sudo apt-get install sqlite3 libsqlite3-dev\n$ sudo apt-get install libmysqlclient-dev\n\n\nwget -c https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz  \ntar -xzvf Python-2.7.9.tgz  \ncd Python-2.7.9/ </code></pre><p>修改源码，支持ssl</p>\n<pre><code>vim Modules/Setup.dist\n\n\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n#_ssl _ssl.c \\\n#        -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n#        -L$(SSL)/lib -lssl -lcrypto</code></pre><p>改成</p>\n<pre><code># Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\nSSL=/usr/local/ssl\n_ssl _ssl.c \\\n        -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n\n        -L$(SSL)/lib -lssl -lcrypto\n\n\nLDFLAGS=&quot;-L/usr/lib/x86_64-linux-gnu&quot; ./configure  \nmake  \nsudo make install</code></pre><h3 id=\"虚拟环境搭建\"><a href=\"#虚拟环境搭建\" class=\"headerlink\" title=\"虚拟环境搭建\"></a>虚拟环境搭建</h3><p>安装</p>\n<pre><code>sudo apt-get install python-virtualenv</code></pre><p>创建虚拟环境</p>\n<pre><code>cd ~/var/www\nvirtualenv --no-site-packages -p /usr/local/bin/python Novel # 参数表示不安装系统已经安装的第三方包, -p表示用哪个版本的python</code></pre><p>启用虚拟环境</p>\n<pre><code>cd /var/www/Novel\nsource ./bin/activate</code></pre><p>虚拟环境安装包</p>\n<pre><code>(Novel) pip isntall django==1.8.2 # 不能加sudo</code></pre><p>退出虚拟环境，进入正常环境</p>\n<pre><code>deactivate</code></pre><p>虚拟环境复制</p>\n<pre><code>pip freeze &gt; requirements.txt\npip install -r requirements.txt</code></pre><h3 id=\"pip安装超时\"><a href=\"#pip安装超时\" class=\"headerlink\" title=\"pip安装超时\"></a>pip安装超时</h3><pre><code>pip --default-timeout=100 install -U pip</code></pre><h3 id=\"安装python-mysql\"><a href=\"#安装python-mysql\" class=\"headerlink\" title=\"安装python-mysql\"></a>安装python-mysql</h3><pre><code>sudo apt-get install python-setuptools\n\nsudo apt-get install libmysqld-dev\n\nsudo apt-get install libmysqlclient-dev\n\nsudo apt-get install python-dev\n\nsudo easy_install mysql-python</code></pre><p>在终端输入以下内容,不报错则表示成功</p>\n<pre><code>import MySQLdb</code></pre><h3 id=\"获取文件修改时间\"><a href=\"#获取文件修改时间\" class=\"headerlink\" title=\"获取文件修改时间\"></a>获取文件修改时间</h3><pre><code>import time\nfilemt= time.localtime(os.stat(filename).st_mtime)  #文件修改时间\nfilect = time.localtime(os.stat(filename).st_ctime)  #文件创建\nprint time.strftime(&quot;%Y-%m-%d&quot;,filemt)  \nprint time.strftime(&quot;%Y-%m-%d&quot;,filect)</code></pre><h3 id=\"获取多少天以前的时间\"><a href=\"#获取多少天以前的时间\" class=\"headerlink\" title=\"获取多少天以前的时间\"></a>获取多少天以前的时间</h3><pre><code>import datetime\n# 30天以前的日期\ndate_time = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime(&quot;%Y-%m-%d&quot;)\nprint date_time</code></pre><h3 id=\"去除列表重复项内容\"><a href=\"#去除列表重复项内容\" class=\"headerlink\" title=\"去除列表重复项内容\"></a>去除列表重复项内容</h3><pre><code># 如果列表里面内容为字典\nf = lambda x,y:x if y in x else x + [y]\nproducts = reduce(f, [[], ] + products_query)\nprint products\n\n# 如果列表里面内容为字符串\nl1 = [&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;b&apos;,&apos;c&apos;,&apos;a&apos;,&apos;a&apos;]\nl2 = list(set(l1))\nprint l2\n# 保持原来的顺序\nl1 = [&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;b&apos;,&apos;c&apos;,&apos;a&apos;,&apos;a&apos;]\nl2 = sorted(set(l1),key=l1.index)\nprint l2</code></pre><h3 id=\"md5，hash加密\"><a href=\"#md5，hash加密\" class=\"headerlink\" title=\"md5，hash加密\"></a>md5，hash加密</h3><pre><code>import hashlib\ndata =  &apos;This a md5 test!&apos;\nhash_md5 = hashlib.md5(data)  # md5\nhash_md5.hexdigest()\n\nhashlib.sha1(&apos;This is a sha1 test!&apos;).hexdigest() # sha1</code></pre><h3 id=\"打印输出对象\"><a href=\"#打印输出对象\" class=\"headerlink\" title=\"打印输出对象\"></a>打印输出对象</h3><pre><code>from pprint import pprint\npprint(vars(object))</code></pre><h1 id=\"windows安装python相关环境\"><a href=\"#windows安装python相关环境\" class=\"headerlink\" title=\"windows安装python相关环境\"></a>windows安装python相关环境</h1><h3 id=\"安装虚拟环境\"><a href=\"#安装虚拟环境\" class=\"headerlink\" title=\"安装虚拟环境\"></a>安装虚拟环境</h3><pre><code># 安装包\npip install virtualenv\n# 创建虚拟环境env\nvirtualenv.exe  env\n# 开启虚拟环境\n./scripts/active\n# 退出虚拟环境\ndeactivate</code></pre>"},{"title":"Python将office word 转为html 并提取相关图片信息","url":"29.html","id":"29","comments":0,"date":"2016-11-09T02:10:01.000Z","_content":"\n### 需求\n\n工作需要将2000多格word文档中的图片提取出来，并改名为word文档名\n\n### 思路1\n\n> More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it. I downloaded a sample (Google: some search term filetype:docx) and after unzipping I found some folders. The word folder contains the document itself, in file document.xml.\n\n于是使用unzip模块\n\n    import zipfile\n    \n\n但是报错\n\n    BadZipfile: File is not a zip file\n    \n\n检查发现同事提供的office word文件结尾为.doc,  \n于是使用7-zip进行提取发现确实报错\n\n> 文件末端错误\n\n尝试用本机office2013打开并另存为word文档.docx  \n再次使用7-zip进行提取，成功，会生成以下一个文件夹\n\n> _rels文件夹  \n> docProps文件夹  \n> word文件夹  \n> \\[Content_Types\\].xml文件\n\n其中\\\\word\\\\media文件夹下就有我需要的图片信息  \n既然需要更改文件后缀，那么就有另一个思路。\n\n### 思路2\n\n> 通过win32com.clientm将文件改为html文件，会生成类似的文件夹\n\n核心代码\n\n    # -*- encoding: utf8 -*-\n    \n    import win32com\n    from win32com.client import constants\n    \n    # 打开初始化word文档\n    w = win32com.client.Dispatch('Word.Application')\n    w.Visible = 0\n    w.DisplayAlerts = 0\n    doc = w.Documents.Open(source_file)  # 打开文件\n    doc.SaveAs(target_fold + '/' + file_number + '.htm', 8)  # 更名为htm文件\n    doc.Close()\n    w.Quit()\n    \n    \n\n另存为其他规格只需要将参数8修改即可\n\n> wdFormatDocument = 0  \n> wdFormatDocument97 = 0  \n> wdFormatDocumentDefault = 16  \n> wdFormatDOSText = 4  \n> wdFormatDOSTextLineBreaks = 5  \n> wdFormatEncodedText = 7  \n> wdFormatFilteredHTML = 10  \n> wdFormatFlatXML = 19  \n> wdFormatFlatXMLMacroEnabled = 20  \n> wdFormatFlatXMLTemplate = 21  \n> wdFormatFlatXMLTemplateMacroEnabled = 22  \n> wdFormatHTML = 8  \n> wdFormatPDF = 17  \n> wdFormatRTF = 6  \n> wdFormatTemplate = 1  \n> wdFormatTemplate97 = 1  \n> wdFormatText = 2  \n> wdFormatTextLineBreaks = 3  \n> wdFormatUnicodeText = 7  \n> wdFormatWebArchive = 9  \n> wdFormatXML = 11  \n> wdFormatXMLDocument = 12  \n> wdFormatXMLDocumentMacroEnabled = 13  \n> wdFormatXMLTemplate = 14  \n> wdFormatXMLTemplateMacroEnabled = 15  \n> wdFormatXPS = 18\n\n最后脚本\n\n    # -*- encoding: utf8 -*-\n    \n    import win32com\n    import os\n    import xlrd\n    import shutil\n    from win32com.client import constants\n    \n    # 从excel表格中导入数据并组成字典\n    XlsFile = 'default.xlsx'                  # 需要的数据\n    data = xlrd.open_workbook(XlsFile)\n    table = data.sheets()[0]\n    nrows = table.nrows\n    \n    # 获取文件名列表\n    number_list = []\n    for i in range(1, nrows):\n        number_list.append(table.row_values(i)[0])\n    \n    # 打开初始化word文档\n    w = win32com.client.Dispatch('Word.Application')\n    w.Visible = 0\n    w.DisplayAlerts = 0\n    \n    \n    # 遍历文件夹并将文件剪贴到新的文件夹中\n    source_fold = os.path.split(os.path.realpath(__file__))[0] + '/' + 'WordFile'\n    target_fold = os.path.split(os.path.realpath(__file__))[0] + '/' + 'NewFile'\n    img_fold = os.path.split(os.path.realpath(__file__))[0] + '/' + 'Img'\n    word_list = os.listdir(source_fold)\n    for file_name in word_list:\n        # 根据货号在列表中查找\n        try:\n            file_number = file_name[0:10]\n            if file_number in number_list:\n                print(file_name + '是需要的文件.')\n                source_file = source_fold + '/' + file_name\n                doc = w.Documents.Open(source_file)  # 打开文件\n                doc.SaveAs(target_fold + '/' + file_number + '.htm', 8)  # 更名为htm文件\n                doc.Close()\n                od_img = target_fold + '/' + file_number + '.files' + '/' + 'image003.jpg'\n                shutil.copyfile(od_img, img_fold + '/' + file_number + '.jpg')  # 复制新的文件\n                number_list.remove(file_number)  # 从excel列表中删除此元素防止重复选取\n        except Exception, e:\n            print(file_name)\n            print e\n    w.Quit()\n    \n    try:\n        f = open(\"php.json\", \"w\")\n        print >>f, number_list  # 最后将剩下的元素打印到文件中\n    except Exception, e:\n        print '写入php.json失败'","source":"_posts/Python将office word 转为html 并提取相关图片信息.md","raw":"---\ntitle: Python将office word 转为html 并提取相关图片信息\ntags:\n  - python\nurl: 29.html\nid: 29\ncomments: false\ncategories:\n  - 办公\n  - 运维\ndate: 2016-11-09 10:10:01\n---\n\n### 需求\n\n工作需要将2000多格word文档中的图片提取出来，并改名为word文档名\n\n### 思路1\n\n> More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it. I downloaded a sample (Google: some search term filetype:docx) and after unzipping I found some folders. The word folder contains the document itself, in file document.xml.\n\n于是使用unzip模块\n\n    import zipfile\n    \n\n但是报错\n\n    BadZipfile: File is not a zip file\n    \n\n检查发现同事提供的office word文件结尾为.doc,  \n于是使用7-zip进行提取发现确实报错\n\n> 文件末端错误\n\n尝试用本机office2013打开并另存为word文档.docx  \n再次使用7-zip进行提取，成功，会生成以下一个文件夹\n\n> _rels文件夹  \n> docProps文件夹  \n> word文件夹  \n> \\[Content_Types\\].xml文件\n\n其中\\\\word\\\\media文件夹下就有我需要的图片信息  \n既然需要更改文件后缀，那么就有另一个思路。\n\n### 思路2\n\n> 通过win32com.clientm将文件改为html文件，会生成类似的文件夹\n\n核心代码\n\n    # -*- encoding: utf8 -*-\n    \n    import win32com\n    from win32com.client import constants\n    \n    # 打开初始化word文档\n    w = win32com.client.Dispatch('Word.Application')\n    w.Visible = 0\n    w.DisplayAlerts = 0\n    doc = w.Documents.Open(source_file)  # 打开文件\n    doc.SaveAs(target_fold + '/' + file_number + '.htm', 8)  # 更名为htm文件\n    doc.Close()\n    w.Quit()\n    \n    \n\n另存为其他规格只需要将参数8修改即可\n\n> wdFormatDocument = 0  \n> wdFormatDocument97 = 0  \n> wdFormatDocumentDefault = 16  \n> wdFormatDOSText = 4  \n> wdFormatDOSTextLineBreaks = 5  \n> wdFormatEncodedText = 7  \n> wdFormatFilteredHTML = 10  \n> wdFormatFlatXML = 19  \n> wdFormatFlatXMLMacroEnabled = 20  \n> wdFormatFlatXMLTemplate = 21  \n> wdFormatFlatXMLTemplateMacroEnabled = 22  \n> wdFormatHTML = 8  \n> wdFormatPDF = 17  \n> wdFormatRTF = 6  \n> wdFormatTemplate = 1  \n> wdFormatTemplate97 = 1  \n> wdFormatText = 2  \n> wdFormatTextLineBreaks = 3  \n> wdFormatUnicodeText = 7  \n> wdFormatWebArchive = 9  \n> wdFormatXML = 11  \n> wdFormatXMLDocument = 12  \n> wdFormatXMLDocumentMacroEnabled = 13  \n> wdFormatXMLTemplate = 14  \n> wdFormatXMLTemplateMacroEnabled = 15  \n> wdFormatXPS = 18\n\n最后脚本\n\n    # -*- encoding: utf8 -*-\n    \n    import win32com\n    import os\n    import xlrd\n    import shutil\n    from win32com.client import constants\n    \n    # 从excel表格中导入数据并组成字典\n    XlsFile = 'default.xlsx'                  # 需要的数据\n    data = xlrd.open_workbook(XlsFile)\n    table = data.sheets()[0]\n    nrows = table.nrows\n    \n    # 获取文件名列表\n    number_list = []\n    for i in range(1, nrows):\n        number_list.append(table.row_values(i)[0])\n    \n    # 打开初始化word文档\n    w = win32com.client.Dispatch('Word.Application')\n    w.Visible = 0\n    w.DisplayAlerts = 0\n    \n    \n    # 遍历文件夹并将文件剪贴到新的文件夹中\n    source_fold = os.path.split(os.path.realpath(__file__))[0] + '/' + 'WordFile'\n    target_fold = os.path.split(os.path.realpath(__file__))[0] + '/' + 'NewFile'\n    img_fold = os.path.split(os.path.realpath(__file__))[0] + '/' + 'Img'\n    word_list = os.listdir(source_fold)\n    for file_name in word_list:\n        # 根据货号在列表中查找\n        try:\n            file_number = file_name[0:10]\n            if file_number in number_list:\n                print(file_name + '是需要的文件.')\n                source_file = source_fold + '/' + file_name\n                doc = w.Documents.Open(source_file)  # 打开文件\n                doc.SaveAs(target_fold + '/' + file_number + '.htm', 8)  # 更名为htm文件\n                doc.Close()\n                od_img = target_fold + '/' + file_number + '.files' + '/' + 'image003.jpg'\n                shutil.copyfile(od_img, img_fold + '/' + file_number + '.jpg')  # 复制新的文件\n                number_list.remove(file_number)  # 从excel列表中删除此元素防止重复选取\n        except Exception, e:\n            print(file_name)\n            print e\n    w.Quit()\n    \n    try:\n        f = open(\"php.json\", \"w\")\n        print >>f, number_list  # 最后将剩下的元素打印到文件中\n    except Exception, e:\n        print '写入php.json失败'","slug":"Python将office word 转为html 并提取相关图片信息","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws00011h3a43suu6n66","content":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>工作需要将2000多格word文档中的图片提取出来，并改名为word文档名</p>\n<h3 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h3><blockquote>\n<p>More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it. I downloaded a sample (Google: some search term filetype:docx) and after unzipping I found some folders. The word folder contains the document itself, in file document.xml.</p>\n</blockquote>\n<p>于是使用unzip模块</p>\n<pre><code>import zipfile</code></pre><p>但是报错</p>\n<pre><code>BadZipfile: File is not a zip file</code></pre><p>检查发现同事提供的office word文件结尾为.doc,<br>于是使用7-zip进行提取发现确实报错</p>\n<blockquote>\n<p>文件末端错误</p>\n</blockquote>\n<p>尝试用本机office2013打开并另存为word文档.docx<br>再次使用7-zip进行提取，成功，会生成以下一个文件夹</p>\n<blockquote>\n<p>_rels文件夹<br>docProps文件夹<br>word文件夹<br>[Content_Types].xml文件</p>\n</blockquote>\n<p>其中\\word\\media文件夹下就有我需要的图片信息<br>既然需要更改文件后缀，那么就有另一个思路。</p>\n<h3 id=\"思路2\"><a href=\"#思路2\" class=\"headerlink\" title=\"思路2\"></a>思路2</h3><blockquote>\n<p>通过win32com.clientm将文件改为html文件，会生成类似的文件夹</p>\n</blockquote>\n<p>核心代码</p>\n<pre><code># -*- encoding: utf8 -*-\n\nimport win32com\nfrom win32com.client import constants\n\n# 打开初始化word文档\nw = win32com.client.Dispatch(&apos;Word.Application&apos;)\nw.Visible = 0\nw.DisplayAlerts = 0\ndoc = w.Documents.Open(source_file)  # 打开文件\ndoc.SaveAs(target_fold + &apos;/&apos; + file_number + &apos;.htm&apos;, 8)  # 更名为htm文件\ndoc.Close()\nw.Quit()</code></pre><p>另存为其他规格只需要将参数8修改即可</p>\n<blockquote>\n<p>wdFormatDocument = 0<br>wdFormatDocument97 = 0<br>wdFormatDocumentDefault = 16<br>wdFormatDOSText = 4<br>wdFormatDOSTextLineBreaks = 5<br>wdFormatEncodedText = 7<br>wdFormatFilteredHTML = 10<br>wdFormatFlatXML = 19<br>wdFormatFlatXMLMacroEnabled = 20<br>wdFormatFlatXMLTemplate = 21<br>wdFormatFlatXMLTemplateMacroEnabled = 22<br>wdFormatHTML = 8<br>wdFormatPDF = 17<br>wdFormatRTF = 6<br>wdFormatTemplate = 1<br>wdFormatTemplate97 = 1<br>wdFormatText = 2<br>wdFormatTextLineBreaks = 3<br>wdFormatUnicodeText = 7<br>wdFormatWebArchive = 9<br>wdFormatXML = 11<br>wdFormatXMLDocument = 12<br>wdFormatXMLDocumentMacroEnabled = 13<br>wdFormatXMLTemplate = 14<br>wdFormatXMLTemplateMacroEnabled = 15<br>wdFormatXPS = 18</p>\n</blockquote>\n<p>最后脚本</p>\n<pre><code># -*- encoding: utf8 -*-\n\nimport win32com\nimport os\nimport xlrd\nimport shutil\nfrom win32com.client import constants\n\n# 从excel表格中导入数据并组成字典\nXlsFile = &apos;default.xlsx&apos;                  # 需要的数据\ndata = xlrd.open_workbook(XlsFile)\ntable = data.sheets()[0]\nnrows = table.nrows\n\n# 获取文件名列表\nnumber_list = []\nfor i in range(1, nrows):\n    number_list.append(table.row_values(i)[0])\n\n# 打开初始化word文档\nw = win32com.client.Dispatch(&apos;Word.Application&apos;)\nw.Visible = 0\nw.DisplayAlerts = 0\n\n\n# 遍历文件夹并将文件剪贴到新的文件夹中\nsource_fold = os.path.split(os.path.realpath(__file__))[0] + &apos;/&apos; + &apos;WordFile&apos;\ntarget_fold = os.path.split(os.path.realpath(__file__))[0] + &apos;/&apos; + &apos;NewFile&apos;\nimg_fold = os.path.split(os.path.realpath(__file__))[0] + &apos;/&apos; + &apos;Img&apos;\nword_list = os.listdir(source_fold)\nfor file_name in word_list:\n    # 根据货号在列表中查找\n    try:\n        file_number = file_name[0:10]\n        if file_number in number_list:\n            print(file_name + &apos;是需要的文件.&apos;)\n            source_file = source_fold + &apos;/&apos; + file_name\n            doc = w.Documents.Open(source_file)  # 打开文件\n            doc.SaveAs(target_fold + &apos;/&apos; + file_number + &apos;.htm&apos;, 8)  # 更名为htm文件\n            doc.Close()\n            od_img = target_fold + &apos;/&apos; + file_number + &apos;.files&apos; + &apos;/&apos; + &apos;image003.jpg&apos;\n            shutil.copyfile(od_img, img_fold + &apos;/&apos; + file_number + &apos;.jpg&apos;)  # 复制新的文件\n            number_list.remove(file_number)  # 从excel列表中删除此元素防止重复选取\n    except Exception, e:\n        print(file_name)\n        print e\nw.Quit()\n\ntry:\n    f = open(&quot;php.json&quot;, &quot;w&quot;)\n    print &gt;&gt;f, number_list  # 最后将剩下的元素打印到文件中\nexcept Exception, e:\n    print &apos;写入php.json失败&apos;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>工作需要将2000多格word文档中的图片提取出来，并改名为word文档名</p>\n<h3 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h3><blockquote>\n<p>More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it. I downloaded a sample (Google: some search term filetype:docx) and after unzipping I found some folders. The word folder contains the document itself, in file document.xml.</p>\n</blockquote>\n<p>于是使用unzip模块</p>\n<pre><code>import zipfile</code></pre><p>但是报错</p>\n<pre><code>BadZipfile: File is not a zip file</code></pre><p>检查发现同事提供的office word文件结尾为.doc,<br>于是使用7-zip进行提取发现确实报错</p>\n<blockquote>\n<p>文件末端错误</p>\n</blockquote>\n<p>尝试用本机office2013打开并另存为word文档.docx<br>再次使用7-zip进行提取，成功，会生成以下一个文件夹</p>\n<blockquote>\n<p>_rels文件夹<br>docProps文件夹<br>word文件夹<br>[Content_Types].xml文件</p>\n</blockquote>\n<p>其中\\word\\media文件夹下就有我需要的图片信息<br>既然需要更改文件后缀，那么就有另一个思路。</p>\n<h3 id=\"思路2\"><a href=\"#思路2\" class=\"headerlink\" title=\"思路2\"></a>思路2</h3><blockquote>\n<p>通过win32com.clientm将文件改为html文件，会生成类似的文件夹</p>\n</blockquote>\n<p>核心代码</p>\n<pre><code># -*- encoding: utf8 -*-\n\nimport win32com\nfrom win32com.client import constants\n\n# 打开初始化word文档\nw = win32com.client.Dispatch(&apos;Word.Application&apos;)\nw.Visible = 0\nw.DisplayAlerts = 0\ndoc = w.Documents.Open(source_file)  # 打开文件\ndoc.SaveAs(target_fold + &apos;/&apos; + file_number + &apos;.htm&apos;, 8)  # 更名为htm文件\ndoc.Close()\nw.Quit()</code></pre><p>另存为其他规格只需要将参数8修改即可</p>\n<blockquote>\n<p>wdFormatDocument = 0<br>wdFormatDocument97 = 0<br>wdFormatDocumentDefault = 16<br>wdFormatDOSText = 4<br>wdFormatDOSTextLineBreaks = 5<br>wdFormatEncodedText = 7<br>wdFormatFilteredHTML = 10<br>wdFormatFlatXML = 19<br>wdFormatFlatXMLMacroEnabled = 20<br>wdFormatFlatXMLTemplate = 21<br>wdFormatFlatXMLTemplateMacroEnabled = 22<br>wdFormatHTML = 8<br>wdFormatPDF = 17<br>wdFormatRTF = 6<br>wdFormatTemplate = 1<br>wdFormatTemplate97 = 1<br>wdFormatText = 2<br>wdFormatTextLineBreaks = 3<br>wdFormatUnicodeText = 7<br>wdFormatWebArchive = 9<br>wdFormatXML = 11<br>wdFormatXMLDocument = 12<br>wdFormatXMLDocumentMacroEnabled = 13<br>wdFormatXMLTemplate = 14<br>wdFormatXMLTemplateMacroEnabled = 15<br>wdFormatXPS = 18</p>\n</blockquote>\n<p>最后脚本</p>\n<pre><code># -*- encoding: utf8 -*-\n\nimport win32com\nimport os\nimport xlrd\nimport shutil\nfrom win32com.client import constants\n\n# 从excel表格中导入数据并组成字典\nXlsFile = &apos;default.xlsx&apos;                  # 需要的数据\ndata = xlrd.open_workbook(XlsFile)\ntable = data.sheets()[0]\nnrows = table.nrows\n\n# 获取文件名列表\nnumber_list = []\nfor i in range(1, nrows):\n    number_list.append(table.row_values(i)[0])\n\n# 打开初始化word文档\nw = win32com.client.Dispatch(&apos;Word.Application&apos;)\nw.Visible = 0\nw.DisplayAlerts = 0\n\n\n# 遍历文件夹并将文件剪贴到新的文件夹中\nsource_fold = os.path.split(os.path.realpath(__file__))[0] + &apos;/&apos; + &apos;WordFile&apos;\ntarget_fold = os.path.split(os.path.realpath(__file__))[0] + &apos;/&apos; + &apos;NewFile&apos;\nimg_fold = os.path.split(os.path.realpath(__file__))[0] + &apos;/&apos; + &apos;Img&apos;\nword_list = os.listdir(source_fold)\nfor file_name in word_list:\n    # 根据货号在列表中查找\n    try:\n        file_number = file_name[0:10]\n        if file_number in number_list:\n            print(file_name + &apos;是需要的文件.&apos;)\n            source_file = source_fold + &apos;/&apos; + file_name\n            doc = w.Documents.Open(source_file)  # 打开文件\n            doc.SaveAs(target_fold + &apos;/&apos; + file_number + &apos;.htm&apos;, 8)  # 更名为htm文件\n            doc.Close()\n            od_img = target_fold + &apos;/&apos; + file_number + &apos;.files&apos; + &apos;/&apos; + &apos;image003.jpg&apos;\n            shutil.copyfile(od_img, img_fold + &apos;/&apos; + file_number + &apos;.jpg&apos;)  # 复制新的文件\n            number_list.remove(file_number)  # 从excel列表中删除此元素防止重复选取\n    except Exception, e:\n        print(file_name)\n        print e\nw.Quit()\n\ntry:\n    f = open(&quot;php.json&quot;, &quot;w&quot;)\n    print &gt;&gt;f, number_list  # 最后将剩下的元素打印到文件中\nexcept Exception, e:\n    print &apos;写入php.json失败&apos;</code></pre>"},{"title":"Redis基础","url":"486.html","id":"486","comments":0,"date":"2018-01-11T07:51:36.000Z","_content":"\nREmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。\n\n### redis安装\n\n    $sudo apt-get update\n    $sudo apt-get install redis-server\n    $redis-cli\n    \n\n### redis配置\n\n    sudo vim /etc/redis.conf\n    # 设置为守护进程\n    protected-mode yes\n    # 设置密码\n    requirepass redispassword\n    # port\n    port 6379\n    # bind 127.0.0.1\n    bing 0.0.0.0 # 允许远程访问\n    \n    \n\n### 客户端远程登录\n\n    redis-cli -h 127.0.0.1 -p 6379 -a redispassword\n    \n\n### redis客户端\n\n    # redis-commander，基于nodejs\n    $ npm install -g redis-commander\n    $ redis-commander\n    \n\n### 通用命令\n\n    $ 127.0.0.1:6379> del name # 删除数据\n    $ 127.0.0.1:6379> type name # 查看数据类型\n    $ 127.0.0.1:6379> rename name # 重命名\n    \n    \n\n### 数据结构\n\n字符串string\n\n    $ 127.0.0.1:6379>  set string-name value\n    $ 127.0.0.1:6379> get string-name\n    $ 127.0.0.1:6379>  del string-name\n    \n\n列表list： 相当于默认键的数组\n\n    $ 127.0.0.1:6379> lpush list-name value1 value2 value3 ... # 左侧插入列表值\n    (integer) 3\n    $ 127.0.0.1:6379> rpush list-name value4 value5 value6... # 右侧插入列表值\n    (integer) 6\n    $ 127.0.0.1:6379>  lindex list-name 1 # 获取第1个的值\n    \"value2\"\n    $ 127.0.0.1:6379>  lrange list-name 1 2 # 获取从第1位置到2位置的列表值\n    1) \"value2\"\n    2) \"value1\"\n    $ 127.0.0.1:6379>  lpop list-name # 弹出最左边值\n    \"value3\"\n    $ 127.0.0.1:6379> rpop list-name # 弹出最右边值\n    \"value6\"\n    \n\n集合set：无序，不重复的列表\n\n    $ 127.0.0.1:6379>  sadd set-name value1 value2 value3 # 设置无序列表值\n    (integer) 3\n    $ 127.0.0.1:6379> smembers set-name  # 查看所有值\n    1) \"value3\"\n    2) \"value2\"\n    3) \"value1\"\n    $ 127.0.0.1:6379> srem set-name value1 # 删除值\n    (integer) 1\n    $ 127.0.0.1:6379> sismember set-name value2 # 查看是否在无序列表内\n    (integer) 1\n    \n\n散列值hash：相当于自定义键的数组\n\n    $ 127.0.0.1:6379> HSET hash-name key1 value1 #设置键值对\n    (integer) 1\n    $ 127.0.0.1:6379> HGET hash-name key1 # 获取指定键的值\n    \"value1\"\n    $ 127.0.0.1:6379> HSET hash-name key1 value2 # 更新键的值\n    (integer) 0\n    $ 127.0.0.1:6379> HGET hash-name key1 \n    \"value2\"\n    $ 127.0.0.1:6379> HSET hash-name key2 value2\n    (integer) 1\n    $ 127.0.0.1:6379> HGETALL hash-name # 查找所有键值对\n    1) \"key1\"\n    2) \"value2\"\n    3) \"key2\"\n    4) \"value2\"\n    $ 127.0.0.1:6379> HDEL hash-name key1 # 删除hash键值对\n    (integer) 1\n    \n\n有序集合zset：成员+分值，分值必须是浮点数，通过浮点数进行排序\n\n    $ 127.0.0.1:6379> zadd zset-name 100 member1 # 添加键值对\n    (integer) 1\n    $ 127.0.0.1:6379> zadd zset-name 202 member2\n    (integer) 1\n    $ 127.0.0.1:6379> zadd zset-name 803 member3\n    (integer) 1\n    $ 127.0.0.1:6379> ZRANGE zset-name 0 -1 # 获取多个元素\n    1) \"member1\"\n    2) \"member2\"\n    3) \"member3\"\n    $ 127.0.0.1:6379> ZRANGE zset-name 0 -1 withscores # 获取多个元素\n    1) \"member1\"\n    2) \"100\"\n    3) \"member2\"\n    4) \"202\"\n    5) \"member3\"\n    6) \"803\"\n    $ 127.0.0.1:6379> ZRANGEBYSCORE zset-name 0 300 withscores # 按score获取多个元素\n    1) \"member1\"\n    2) \"100\"\n    3) \"member2\"\n    4) \"202\"\n    $ 127.0.0.1:6379> ZREM zset-name member1 # 移除一个元素\n    (integer) 1","source":"_posts/Redis基础.md","raw":"---\ntitle: Redis基础\ntags:\n  - redis\n  - 数据库\nurl: 486.html\nid: 486\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2018-01-11 15:51:36\n---\n\nREmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。\n\n### redis安装\n\n    $sudo apt-get update\n    $sudo apt-get install redis-server\n    $redis-cli\n    \n\n### redis配置\n\n    sudo vim /etc/redis.conf\n    # 设置为守护进程\n    protected-mode yes\n    # 设置密码\n    requirepass redispassword\n    # port\n    port 6379\n    # bind 127.0.0.1\n    bing 0.0.0.0 # 允许远程访问\n    \n    \n\n### 客户端远程登录\n\n    redis-cli -h 127.0.0.1 -p 6379 -a redispassword\n    \n\n### redis客户端\n\n    # redis-commander，基于nodejs\n    $ npm install -g redis-commander\n    $ redis-commander\n    \n\n### 通用命令\n\n    $ 127.0.0.1:6379> del name # 删除数据\n    $ 127.0.0.1:6379> type name # 查看数据类型\n    $ 127.0.0.1:6379> rename name # 重命名\n    \n    \n\n### 数据结构\n\n字符串string\n\n    $ 127.0.0.1:6379>  set string-name value\n    $ 127.0.0.1:6379> get string-name\n    $ 127.0.0.1:6379>  del string-name\n    \n\n列表list： 相当于默认键的数组\n\n    $ 127.0.0.1:6379> lpush list-name value1 value2 value3 ... # 左侧插入列表值\n    (integer) 3\n    $ 127.0.0.1:6379> rpush list-name value4 value5 value6... # 右侧插入列表值\n    (integer) 6\n    $ 127.0.0.1:6379>  lindex list-name 1 # 获取第1个的值\n    \"value2\"\n    $ 127.0.0.1:6379>  lrange list-name 1 2 # 获取从第1位置到2位置的列表值\n    1) \"value2\"\n    2) \"value1\"\n    $ 127.0.0.1:6379>  lpop list-name # 弹出最左边值\n    \"value3\"\n    $ 127.0.0.1:6379> rpop list-name # 弹出最右边值\n    \"value6\"\n    \n\n集合set：无序，不重复的列表\n\n    $ 127.0.0.1:6379>  sadd set-name value1 value2 value3 # 设置无序列表值\n    (integer) 3\n    $ 127.0.0.1:6379> smembers set-name  # 查看所有值\n    1) \"value3\"\n    2) \"value2\"\n    3) \"value1\"\n    $ 127.0.0.1:6379> srem set-name value1 # 删除值\n    (integer) 1\n    $ 127.0.0.1:6379> sismember set-name value2 # 查看是否在无序列表内\n    (integer) 1\n    \n\n散列值hash：相当于自定义键的数组\n\n    $ 127.0.0.1:6379> HSET hash-name key1 value1 #设置键值对\n    (integer) 1\n    $ 127.0.0.1:6379> HGET hash-name key1 # 获取指定键的值\n    \"value1\"\n    $ 127.0.0.1:6379> HSET hash-name key1 value2 # 更新键的值\n    (integer) 0\n    $ 127.0.0.1:6379> HGET hash-name key1 \n    \"value2\"\n    $ 127.0.0.1:6379> HSET hash-name key2 value2\n    (integer) 1\n    $ 127.0.0.1:6379> HGETALL hash-name # 查找所有键值对\n    1) \"key1\"\n    2) \"value2\"\n    3) \"key2\"\n    4) \"value2\"\n    $ 127.0.0.1:6379> HDEL hash-name key1 # 删除hash键值对\n    (integer) 1\n    \n\n有序集合zset：成员+分值，分值必须是浮点数，通过浮点数进行排序\n\n    $ 127.0.0.1:6379> zadd zset-name 100 member1 # 添加键值对\n    (integer) 1\n    $ 127.0.0.1:6379> zadd zset-name 202 member2\n    (integer) 1\n    $ 127.0.0.1:6379> zadd zset-name 803 member3\n    (integer) 1\n    $ 127.0.0.1:6379> ZRANGE zset-name 0 -1 # 获取多个元素\n    1) \"member1\"\n    2) \"member2\"\n    3) \"member3\"\n    $ 127.0.0.1:6379> ZRANGE zset-name 0 -1 withscores # 获取多个元素\n    1) \"member1\"\n    2) \"100\"\n    3) \"member2\"\n    4) \"202\"\n    5) \"member3\"\n    6) \"803\"\n    $ 127.0.0.1:6379> ZRANGEBYSCORE zset-name 0 300 withscores # 按score获取多个元素\n    1) \"member1\"\n    2) \"100\"\n    3) \"member2\"\n    4) \"202\"\n    $ 127.0.0.1:6379> ZREM zset-name member1 # 移除一个元素\n    (integer) 1","slug":"Redis基础","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws10015h3a4n9qmwfnu","content":"<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>\n<h3 id=\"redis安装\"><a href=\"#redis安装\" class=\"headerlink\" title=\"redis安装\"></a>redis安装</h3><pre><code>$sudo apt-get update\n$sudo apt-get install redis-server\n$redis-cli</code></pre><h3 id=\"redis配置\"><a href=\"#redis配置\" class=\"headerlink\" title=\"redis配置\"></a>redis配置</h3><pre><code>sudo vim /etc/redis.conf\n# 设置为守护进程\nprotected-mode yes\n# 设置密码\nrequirepass redispassword\n# port\nport 6379\n# bind 127.0.0.1\nbing 0.0.0.0 # 允许远程访问</code></pre><h3 id=\"客户端远程登录\"><a href=\"#客户端远程登录\" class=\"headerlink\" title=\"客户端远程登录\"></a>客户端远程登录</h3><pre><code>redis-cli -h 127.0.0.1 -p 6379 -a redispassword</code></pre><h3 id=\"redis客户端\"><a href=\"#redis客户端\" class=\"headerlink\" title=\"redis客户端\"></a>redis客户端</h3><pre><code># redis-commander，基于nodejs\n$ npm install -g redis-commander\n$ redis-commander</code></pre><h3 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h3><pre><code>$ 127.0.0.1:6379&gt; del name # 删除数据\n$ 127.0.0.1:6379&gt; type name # 查看数据类型\n$ 127.0.0.1:6379&gt; rename name # 重命名</code></pre><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>字符串string</p>\n<pre><code>$ 127.0.0.1:6379&gt;  set string-name value\n$ 127.0.0.1:6379&gt; get string-name\n$ 127.0.0.1:6379&gt;  del string-name</code></pre><p>列表list： 相当于默认键的数组</p>\n<pre><code>$ 127.0.0.1:6379&gt; lpush list-name value1 value2 value3 ... # 左侧插入列表值\n(integer) 3\n$ 127.0.0.1:6379&gt; rpush list-name value4 value5 value6... # 右侧插入列表值\n(integer) 6\n$ 127.0.0.1:6379&gt;  lindex list-name 1 # 获取第1个的值\n&quot;value2&quot;\n$ 127.0.0.1:6379&gt;  lrange list-name 1 2 # 获取从第1位置到2位置的列表值\n1) &quot;value2&quot;\n2) &quot;value1&quot;\n$ 127.0.0.1:6379&gt;  lpop list-name # 弹出最左边值\n&quot;value3&quot;\n$ 127.0.0.1:6379&gt; rpop list-name # 弹出最右边值\n&quot;value6&quot;</code></pre><p>集合set：无序，不重复的列表</p>\n<pre><code>$ 127.0.0.1:6379&gt;  sadd set-name value1 value2 value3 # 设置无序列表值\n(integer) 3\n$ 127.0.0.1:6379&gt; smembers set-name  # 查看所有值\n1) &quot;value3&quot;\n2) &quot;value2&quot;\n3) &quot;value1&quot;\n$ 127.0.0.1:6379&gt; srem set-name value1 # 删除值\n(integer) 1\n$ 127.0.0.1:6379&gt; sismember set-name value2 # 查看是否在无序列表内\n(integer) 1</code></pre><p>散列值hash：相当于自定义键的数组</p>\n<pre><code>$ 127.0.0.1:6379&gt; HSET hash-name key1 value1 #设置键值对\n(integer) 1\n$ 127.0.0.1:6379&gt; HGET hash-name key1 # 获取指定键的值\n&quot;value1&quot;\n$ 127.0.0.1:6379&gt; HSET hash-name key1 value2 # 更新键的值\n(integer) 0\n$ 127.0.0.1:6379&gt; HGET hash-name key1 \n&quot;value2&quot;\n$ 127.0.0.1:6379&gt; HSET hash-name key2 value2\n(integer) 1\n$ 127.0.0.1:6379&gt; HGETALL hash-name # 查找所有键值对\n1) &quot;key1&quot;\n2) &quot;value2&quot;\n3) &quot;key2&quot;\n4) &quot;value2&quot;\n$ 127.0.0.1:6379&gt; HDEL hash-name key1 # 删除hash键值对\n(integer) 1</code></pre><p>有序集合zset：成员+分值，分值必须是浮点数，通过浮点数进行排序</p>\n<pre><code>$ 127.0.0.1:6379&gt; zadd zset-name 100 member1 # 添加键值对\n(integer) 1\n$ 127.0.0.1:6379&gt; zadd zset-name 202 member2\n(integer) 1\n$ 127.0.0.1:6379&gt; zadd zset-name 803 member3\n(integer) 1\n$ 127.0.0.1:6379&gt; ZRANGE zset-name 0 -1 # 获取多个元素\n1) &quot;member1&quot;\n2) &quot;member2&quot;\n3) &quot;member3&quot;\n$ 127.0.0.1:6379&gt; ZRANGE zset-name 0 -1 withscores # 获取多个元素\n1) &quot;member1&quot;\n2) &quot;100&quot;\n3) &quot;member2&quot;\n4) &quot;202&quot;\n5) &quot;member3&quot;\n6) &quot;803&quot;\n$ 127.0.0.1:6379&gt; ZRANGEBYSCORE zset-name 0 300 withscores # 按score获取多个元素\n1) &quot;member1&quot;\n2) &quot;100&quot;\n3) &quot;member2&quot;\n4) &quot;202&quot;\n$ 127.0.0.1:6379&gt; ZREM zset-name member1 # 移除一个元素\n(integer) 1</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>\n<h3 id=\"redis安装\"><a href=\"#redis安装\" class=\"headerlink\" title=\"redis安装\"></a>redis安装</h3><pre><code>$sudo apt-get update\n$sudo apt-get install redis-server\n$redis-cli</code></pre><h3 id=\"redis配置\"><a href=\"#redis配置\" class=\"headerlink\" title=\"redis配置\"></a>redis配置</h3><pre><code>sudo vim /etc/redis.conf\n# 设置为守护进程\nprotected-mode yes\n# 设置密码\nrequirepass redispassword\n# port\nport 6379\n# bind 127.0.0.1\nbing 0.0.0.0 # 允许远程访问</code></pre><h3 id=\"客户端远程登录\"><a href=\"#客户端远程登录\" class=\"headerlink\" title=\"客户端远程登录\"></a>客户端远程登录</h3><pre><code>redis-cli -h 127.0.0.1 -p 6379 -a redispassword</code></pre><h3 id=\"redis客户端\"><a href=\"#redis客户端\" class=\"headerlink\" title=\"redis客户端\"></a>redis客户端</h3><pre><code># redis-commander，基于nodejs\n$ npm install -g redis-commander\n$ redis-commander</code></pre><h3 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h3><pre><code>$ 127.0.0.1:6379&gt; del name # 删除数据\n$ 127.0.0.1:6379&gt; type name # 查看数据类型\n$ 127.0.0.1:6379&gt; rename name # 重命名</code></pre><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>字符串string</p>\n<pre><code>$ 127.0.0.1:6379&gt;  set string-name value\n$ 127.0.0.1:6379&gt; get string-name\n$ 127.0.0.1:6379&gt;  del string-name</code></pre><p>列表list： 相当于默认键的数组</p>\n<pre><code>$ 127.0.0.1:6379&gt; lpush list-name value1 value2 value3 ... # 左侧插入列表值\n(integer) 3\n$ 127.0.0.1:6379&gt; rpush list-name value4 value5 value6... # 右侧插入列表值\n(integer) 6\n$ 127.0.0.1:6379&gt;  lindex list-name 1 # 获取第1个的值\n&quot;value2&quot;\n$ 127.0.0.1:6379&gt;  lrange list-name 1 2 # 获取从第1位置到2位置的列表值\n1) &quot;value2&quot;\n2) &quot;value1&quot;\n$ 127.0.0.1:6379&gt;  lpop list-name # 弹出最左边值\n&quot;value3&quot;\n$ 127.0.0.1:6379&gt; rpop list-name # 弹出最右边值\n&quot;value6&quot;</code></pre><p>集合set：无序，不重复的列表</p>\n<pre><code>$ 127.0.0.1:6379&gt;  sadd set-name value1 value2 value3 # 设置无序列表值\n(integer) 3\n$ 127.0.0.1:6379&gt; smembers set-name  # 查看所有值\n1) &quot;value3&quot;\n2) &quot;value2&quot;\n3) &quot;value1&quot;\n$ 127.0.0.1:6379&gt; srem set-name value1 # 删除值\n(integer) 1\n$ 127.0.0.1:6379&gt; sismember set-name value2 # 查看是否在无序列表内\n(integer) 1</code></pre><p>散列值hash：相当于自定义键的数组</p>\n<pre><code>$ 127.0.0.1:6379&gt; HSET hash-name key1 value1 #设置键值对\n(integer) 1\n$ 127.0.0.1:6379&gt; HGET hash-name key1 # 获取指定键的值\n&quot;value1&quot;\n$ 127.0.0.1:6379&gt; HSET hash-name key1 value2 # 更新键的值\n(integer) 0\n$ 127.0.0.1:6379&gt; HGET hash-name key1 \n&quot;value2&quot;\n$ 127.0.0.1:6379&gt; HSET hash-name key2 value2\n(integer) 1\n$ 127.0.0.1:6379&gt; HGETALL hash-name # 查找所有键值对\n1) &quot;key1&quot;\n2) &quot;value2&quot;\n3) &quot;key2&quot;\n4) &quot;value2&quot;\n$ 127.0.0.1:6379&gt; HDEL hash-name key1 # 删除hash键值对\n(integer) 1</code></pre><p>有序集合zset：成员+分值，分值必须是浮点数，通过浮点数进行排序</p>\n<pre><code>$ 127.0.0.1:6379&gt; zadd zset-name 100 member1 # 添加键值对\n(integer) 1\n$ 127.0.0.1:6379&gt; zadd zset-name 202 member2\n(integer) 1\n$ 127.0.0.1:6379&gt; zadd zset-name 803 member3\n(integer) 1\n$ 127.0.0.1:6379&gt; ZRANGE zset-name 0 -1 # 获取多个元素\n1) &quot;member1&quot;\n2) &quot;member2&quot;\n3) &quot;member3&quot;\n$ 127.0.0.1:6379&gt; ZRANGE zset-name 0 -1 withscores # 获取多个元素\n1) &quot;member1&quot;\n2) &quot;100&quot;\n3) &quot;member2&quot;\n4) &quot;202&quot;\n5) &quot;member3&quot;\n6) &quot;803&quot;\n$ 127.0.0.1:6379&gt; ZRANGEBYSCORE zset-name 0 300 withscores # 按score获取多个元素\n1) &quot;member1&quot;\n2) &quot;100&quot;\n3) &quot;member2&quot;\n4) &quot;202&quot;\n$ 127.0.0.1:6379&gt; ZREM zset-name member1 # 移除一个元素\n(integer) 1</code></pre>"},{"title":"Sublime使用指南","url":"67.html","id":"67","comments":0,"date":"2016-11-09T07:36:07.000Z","_content":"\n### 下载地址\n\n[http://www.sublimetext.com/3](http://www.sublimetext.com/3)\n\n### Ubuntu下载\n\n    sudo add-apt-repository ppa:webupd8team/sublime-text-3\n    sudo apt-get update\n    sudo apt-get install sublime-text-installer\n    \n\n### 插件下载地址\n\n[https://packagecontrol.io/](https://packagecontrol.io/)\n\n### 注册码\n\n    ----- BEGIN LICENSE ----\n    Andrew Weber\n    Single User License\n    EA7E-855605\n    813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n    942194A6 02396E98 E62C9979 4BB979FE\n    91424C9D A45400BF F6747D88 2FB88078\n    90F5CC94 1CDC92DC 8457107A F151657B\n    1D22E383 A997F016 42397640 33F41CFC\n    E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n    5CDB7036 E56DE1C0 EFCC0840 650CD3A6\n    B98FC99C 8FAC73EE D2B95564 DF450523\n    ------ END LICENSE ------\n    \n\n### 安装Package Control\n\n    import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())\n    \n    \n\n### 安装模板Material Theme\n\n配置方法\n\n    Package Control Messages\n    ========================\n    \n    Material Theme\n    --------------\n    \n      Material Theme for Sublime Text 3\n    \n      For more information on the Material Theme: https://github.com/equinusocio/material-theme\n    \n      **********************************************************************************************\n    \n      If installing manually (not through Package Control), add the following to your \n      Settings - User file and restart Sublime Text after:\n    \n      {\n        \"theme\": \"Material-Theme.sublime-theme\",\n        \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\",\n      }\n    \n      **********************************************************************************************\n    \n      This theme includes a Darker and Lighter version:\n    \n      Darker version:\n    \n      {\n        \"theme\": \"Material-Theme-Darker.sublime-theme\",\n        \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme\",\n      }\n    \n      Lighter version:\n    \n      {\n        \"theme\": \"Material-Theme-Lighter.sublime-theme\",\n        \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme\",\n      }\n    \n      **********************************************************************************************\n    \n      Recommended UI and font settings for a better experience:\n    \n      {\n        \"overlay_scroll_bars\": \"enabled\",\n        \"line_padding_top\": 3,\n        \"line_padding_bottom\": 3,\n        \"always_show_minimap_viewport\": true,\n        \"bold_folder_labels\": true,\n        \"indent_guide_options\": [ \"draw_normal\", \"draw_active\" ]    // Highlight active indent\n        \"font_options\": [ \"gray_antialias\" ],                       // For retina Mac\n      }\n    \n      **********************************************************************************************\n    \n      Other available theme options:\n    \n      \"material_theme_small_tab\": true,                           // Set small tabs\n      \"material_theme_disable_fileicons\": true,                   // Hide siderbar file type icons\n      \"material_theme_disable_folder_animation\": true,            // Disable folder animation\n      \"material_theme_small_statusbar\": true,                     // Set small status bar\n      \"material_theme_disable_tree_indicator\": true,              // Disable sidebar file indicator\n      \"material_theme_bold_tab\": true,                            // Make the tab labels bolder\n      \"material_theme_tabs_separator\": true,                      // Show tabs separator\n      \"material_theme_accent_lime\": true,                         // set green lime accent color\n      \"material_theme_accent_purple\": true,                       // set purple accent color\n      \"material_theme_accent_red\": true,                          // set pale red accent color\n      \"material_theme_accent_orange\": true,                       // set orange accent color\n      \"material_theme_accent_yellow\": true,                       // set yellow accent color\n      \"material_theme_panel_separator\": true,                     // show bottom panel separator\n      \"material_theme_tabs_autowidth\": true,                      // Enable autowidth for tabs\n      \"material_theme_contrast_mode\": true,                       // Enable sidebar and panels contrast mode\n    \n\n### 设置空格缩进\n\n    {    \n        \"tab_size\": 4,    \n        \"translate_tabs_to_spaces\": true \n    } \n    \n\n### 设置行间距\n\n    {\n        \"line_padding_bottom\": 3, \n        \"line_padding_top\": 3,\n    }    \n    \n\n### 插件安装\n\n**Emmet(懂的)**  \n**ConvertToUtf8(编码转换)**  \n**Sublime​Linter(代码检查工具，需要配合各语言插件包检查)**  \n**SideBarEnhancements（侧边栏右键增强）**  \n**Bracket​Highlighter（显示标签块？？）**  \n**SublimeCodeIntel(跳转到自定义函数)**\n\n> For Windows:  \n> Jump to definition = Alt+Click  \n> Jump to definition = Control+Windows+Alt+Up  \n> Go back = Control+Windows+Alt+Left  \n> Manual Code Intelligence = Control+Shift+space  \n> 需要自己设置执行路径\n\n            \"PHP\": {\n                \"php\": \"D:\\\\PHP\\\\php.exe\",\n                \"codeintel_scan_extra_dir\": [],\n                \"codeintel_scan_files_in_project\": true,\n                \"codeintel_max_recursive_dir_depth\": 15,\n                \"codeintel_scan_exclude_dir\":[\"D:\\\\PHP\"]\n            }\n    \n\n**HTML5(html5的snippets)**  \n**Alignment(自动对齐插件)**  \n**SFTP(ftp上传)需要配置对应的ftp路径等信息** **git** **jquery(jquery snippets)** **SaSS(可以支持sass)** **DocBlockr（块状注释）**\n\n### ubuntu安装中文输入法\n\n### 安装\n\n    git clone https://github.com/lyfeyaj/sublime-text-imfix.git\n    \n\n### 复制文件\n\n    cd ~/sublime-text-imfix\n    sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/\n    sudo cp ./src/subl /usr/bin/\n    \n\n### 测试\n\n终端输入\n\n    LD_PRELOAD=./libsublime-imfix.so subl\n    \n\n### 建立快捷方式\n\n新建文件sublime放在/home目录下，脚本内容：\n\n    #!/bin/bash\n    LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl\n    \n\n### 测试\n\n终端输入\n\n    bash ~/sublime\n    \n\n### 快捷方式修改\n\n将\\[Desktop Entry\\]中的字符串  \nExec=/opt/sublime\\_text/sublime\\_text %F  \n修改为  \nExec=bash -c \"LD\\_PRELOAD=/opt/sublime\\_text/libsublime-imfix.so exec /opt/sublime\\_text/sublime\\_text %F\"  \n将\\[Desktop Action Window\\]中的字符串  \nExec=/opt/sublime\\_text/sublime\\_text -n  \n修改为  \nExec=bash -c \"LD\\_PRELOAD=/opt/sublime\\_text/libsublime-imfix.so exec /opt/sublime\\_text/sublime\\_text -n\"  \n将\\[Desktop Action Document\\]中的字符串  \nExec=/opt/sublime\\_text/sublime\\_text --command new_file  \n修改为  \nExec=bash -c \"LD\\_PRELOAD=/opt/sublime\\_text/libsublime-imfix.so exec /opt/sublime\\_text/sublime\\_text --command new_file\"  \n注意：  \n修改时请注意双引号\"\",否则会导致不能打开带有空格文件名的文件。","source":"_posts/Sublime使用指南.md","raw":"---\ntitle: Sublime使用指南\ntags:\n  - IDE\nurl: 67.html\nid: 67\ncomments: false\ncategories:\n  - 办公\ndate: 2016-11-09 15:36:07\n---\n\n### 下载地址\n\n[http://www.sublimetext.com/3](http://www.sublimetext.com/3)\n\n### Ubuntu下载\n\n    sudo add-apt-repository ppa:webupd8team/sublime-text-3\n    sudo apt-get update\n    sudo apt-get install sublime-text-installer\n    \n\n### 插件下载地址\n\n[https://packagecontrol.io/](https://packagecontrol.io/)\n\n### 注册码\n\n    ----- BEGIN LICENSE ----\n    Andrew Weber\n    Single User License\n    EA7E-855605\n    813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n    942194A6 02396E98 E62C9979 4BB979FE\n    91424C9D A45400BF F6747D88 2FB88078\n    90F5CC94 1CDC92DC 8457107A F151657B\n    1D22E383 A997F016 42397640 33F41CFC\n    E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n    5CDB7036 E56DE1C0 EFCC0840 650CD3A6\n    B98FC99C 8FAC73EE D2B95564 DF450523\n    ------ END LICENSE ------\n    \n\n### 安装Package Control\n\n    import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())\n    \n    \n\n### 安装模板Material Theme\n\n配置方法\n\n    Package Control Messages\n    ========================\n    \n    Material Theme\n    --------------\n    \n      Material Theme for Sublime Text 3\n    \n      For more information on the Material Theme: https://github.com/equinusocio/material-theme\n    \n      **********************************************************************************************\n    \n      If installing manually (not through Package Control), add the following to your \n      Settings - User file and restart Sublime Text after:\n    \n      {\n        \"theme\": \"Material-Theme.sublime-theme\",\n        \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\",\n      }\n    \n      **********************************************************************************************\n    \n      This theme includes a Darker and Lighter version:\n    \n      Darker version:\n    \n      {\n        \"theme\": \"Material-Theme-Darker.sublime-theme\",\n        \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme\",\n      }\n    \n      Lighter version:\n    \n      {\n        \"theme\": \"Material-Theme-Lighter.sublime-theme\",\n        \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme\",\n      }\n    \n      **********************************************************************************************\n    \n      Recommended UI and font settings for a better experience:\n    \n      {\n        \"overlay_scroll_bars\": \"enabled\",\n        \"line_padding_top\": 3,\n        \"line_padding_bottom\": 3,\n        \"always_show_minimap_viewport\": true,\n        \"bold_folder_labels\": true,\n        \"indent_guide_options\": [ \"draw_normal\", \"draw_active\" ]    // Highlight active indent\n        \"font_options\": [ \"gray_antialias\" ],                       // For retina Mac\n      }\n    \n      **********************************************************************************************\n    \n      Other available theme options:\n    \n      \"material_theme_small_tab\": true,                           // Set small tabs\n      \"material_theme_disable_fileicons\": true,                   // Hide siderbar file type icons\n      \"material_theme_disable_folder_animation\": true,            // Disable folder animation\n      \"material_theme_small_statusbar\": true,                     // Set small status bar\n      \"material_theme_disable_tree_indicator\": true,              // Disable sidebar file indicator\n      \"material_theme_bold_tab\": true,                            // Make the tab labels bolder\n      \"material_theme_tabs_separator\": true,                      // Show tabs separator\n      \"material_theme_accent_lime\": true,                         // set green lime accent color\n      \"material_theme_accent_purple\": true,                       // set purple accent color\n      \"material_theme_accent_red\": true,                          // set pale red accent color\n      \"material_theme_accent_orange\": true,                       // set orange accent color\n      \"material_theme_accent_yellow\": true,                       // set yellow accent color\n      \"material_theme_panel_separator\": true,                     // show bottom panel separator\n      \"material_theme_tabs_autowidth\": true,                      // Enable autowidth for tabs\n      \"material_theme_contrast_mode\": true,                       // Enable sidebar and panels contrast mode\n    \n\n### 设置空格缩进\n\n    {    \n        \"tab_size\": 4,    \n        \"translate_tabs_to_spaces\": true \n    } \n    \n\n### 设置行间距\n\n    {\n        \"line_padding_bottom\": 3, \n        \"line_padding_top\": 3,\n    }    \n    \n\n### 插件安装\n\n**Emmet(懂的)**  \n**ConvertToUtf8(编码转换)**  \n**Sublime​Linter(代码检查工具，需要配合各语言插件包检查)**  \n**SideBarEnhancements（侧边栏右键增强）**  \n**Bracket​Highlighter（显示标签块？？）**  \n**SublimeCodeIntel(跳转到自定义函数)**\n\n> For Windows:  \n> Jump to definition = Alt+Click  \n> Jump to definition = Control+Windows+Alt+Up  \n> Go back = Control+Windows+Alt+Left  \n> Manual Code Intelligence = Control+Shift+space  \n> 需要自己设置执行路径\n\n            \"PHP\": {\n                \"php\": \"D:\\\\PHP\\\\php.exe\",\n                \"codeintel_scan_extra_dir\": [],\n                \"codeintel_scan_files_in_project\": true,\n                \"codeintel_max_recursive_dir_depth\": 15,\n                \"codeintel_scan_exclude_dir\":[\"D:\\\\PHP\"]\n            }\n    \n\n**HTML5(html5的snippets)**  \n**Alignment(自动对齐插件)**  \n**SFTP(ftp上传)需要配置对应的ftp路径等信息** **git** **jquery(jquery snippets)** **SaSS(可以支持sass)** **DocBlockr（块状注释）**\n\n### ubuntu安装中文输入法\n\n### 安装\n\n    git clone https://github.com/lyfeyaj/sublime-text-imfix.git\n    \n\n### 复制文件\n\n    cd ~/sublime-text-imfix\n    sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/\n    sudo cp ./src/subl /usr/bin/\n    \n\n### 测试\n\n终端输入\n\n    LD_PRELOAD=./libsublime-imfix.so subl\n    \n\n### 建立快捷方式\n\n新建文件sublime放在/home目录下，脚本内容：\n\n    #!/bin/bash\n    LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl\n    \n\n### 测试\n\n终端输入\n\n    bash ~/sublime\n    \n\n### 快捷方式修改\n\n将\\[Desktop Entry\\]中的字符串  \nExec=/opt/sublime\\_text/sublime\\_text %F  \n修改为  \nExec=bash -c \"LD\\_PRELOAD=/opt/sublime\\_text/libsublime-imfix.so exec /opt/sublime\\_text/sublime\\_text %F\"  \n将\\[Desktop Action Window\\]中的字符串  \nExec=/opt/sublime\\_text/sublime\\_text -n  \n修改为  \nExec=bash -c \"LD\\_PRELOAD=/opt/sublime\\_text/libsublime-imfix.so exec /opt/sublime\\_text/sublime\\_text -n\"  \n将\\[Desktop Action Document\\]中的字符串  \nExec=/opt/sublime\\_text/sublime\\_text --command new_file  \n修改为  \nExec=bash -c \"LD\\_PRELOAD=/opt/sublime\\_text/libsublime-imfix.so exec /opt/sublime\\_text/sublime\\_text --command new_file\"  \n注意：  \n修改时请注意双引号\"\",否则会导致不能打开带有空格文件名的文件。","slug":"Sublime使用指南","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws20018h3a4phuklaju","content":"<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">http://www.sublimetext.com/3</a></p>\n<h3 id=\"Ubuntu下载\"><a href=\"#Ubuntu下载\" class=\"headerlink\" title=\"Ubuntu下载\"></a>Ubuntu下载</h3><pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-3\nsudo apt-get update\nsudo apt-get install sublime-text-installer</code></pre><h3 id=\"插件下载地址\"><a href=\"#插件下载地址\" class=\"headerlink\" title=\"插件下载地址\"></a>插件下载地址</h3><p><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"noopener\">https://packagecontrol.io/</a></p>\n<h3 id=\"注册码\"><a href=\"#注册码\" class=\"headerlink\" title=\"注册码\"></a>注册码</h3><pre><code>----- BEGIN LICENSE ----\nAndrew Weber\nSingle User License\nEA7E-855605\n813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n942194A6 02396E98 E62C9979 4BB979FE\n91424C9D A45400BF F6747D88 2FB88078\n90F5CC94 1CDC92DC 8457107A F151657B\n1D22E383 A997F016 42397640 33F41CFC\nE1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n5CDB7036 E56DE1C0 EFCC0840 650CD3A6\nB98FC99C 8FAC73EE D2B95564 DF450523\n------ END LICENSE ------</code></pre><h3 id=\"安装Package-Control\"><a href=\"#安装Package-Control\" class=\"headerlink\" title=\"安装Package Control\"></a>安装Package Control</h3><pre><code>import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</code></pre><h3 id=\"安装模板Material-Theme\"><a href=\"#安装模板Material-Theme\" class=\"headerlink\" title=\"安装模板Material Theme\"></a>安装模板Material Theme</h3><p>配置方法</p>\n<pre><code>Package Control Messages\n========================\n\nMaterial Theme\n--------------\n\n  Material Theme for Sublime Text 3\n\n  For more information on the Material Theme: https://github.com/equinusocio/material-theme\n\n  **********************************************************************************************\n\n  If installing manually (not through Package Control), add the following to your \n  Settings - User file and restart Sublime Text after:\n\n  {\n    &quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,\n    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,\n  }\n\n  **********************************************************************************************\n\n  This theme includes a Darker and Lighter version:\n\n  Darker version:\n\n  {\n    &quot;theme&quot;: &quot;Material-Theme-Darker.sublime-theme&quot;,\n    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme&quot;,\n  }\n\n  Lighter version:\n\n  {\n    &quot;theme&quot;: &quot;Material-Theme-Lighter.sublime-theme&quot;,\n    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme&quot;,\n  }\n\n  **********************************************************************************************\n\n  Recommended UI and font settings for a better experience:\n\n  {\n    &quot;overlay_scroll_bars&quot;: &quot;enabled&quot;,\n    &quot;line_padding_top&quot;: 3,\n    &quot;line_padding_bottom&quot;: 3,\n    &quot;always_show_minimap_viewport&quot;: true,\n    &quot;bold_folder_labels&quot;: true,\n    &quot;indent_guide_options&quot;: [ &quot;draw_normal&quot;, &quot;draw_active&quot; ]    // Highlight active indent\n    &quot;font_options&quot;: [ &quot;gray_antialias&quot; ],                       // For retina Mac\n  }\n\n  **********************************************************************************************\n\n  Other available theme options:\n\n  &quot;material_theme_small_tab&quot;: true,                           // Set small tabs\n  &quot;material_theme_disable_fileicons&quot;: true,                   // Hide siderbar file type icons\n  &quot;material_theme_disable_folder_animation&quot;: true,            // Disable folder animation\n  &quot;material_theme_small_statusbar&quot;: true,                     // Set small status bar\n  &quot;material_theme_disable_tree_indicator&quot;: true,              // Disable sidebar file indicator\n  &quot;material_theme_bold_tab&quot;: true,                            // Make the tab labels bolder\n  &quot;material_theme_tabs_separator&quot;: true,                      // Show tabs separator\n  &quot;material_theme_accent_lime&quot;: true,                         // set green lime accent color\n  &quot;material_theme_accent_purple&quot;: true,                       // set purple accent color\n  &quot;material_theme_accent_red&quot;: true,                          // set pale red accent color\n  &quot;material_theme_accent_orange&quot;: true,                       // set orange accent color\n  &quot;material_theme_accent_yellow&quot;: true,                       // set yellow accent color\n  &quot;material_theme_panel_separator&quot;: true,                     // show bottom panel separator\n  &quot;material_theme_tabs_autowidth&quot;: true,                      // Enable autowidth for tabs\n  &quot;material_theme_contrast_mode&quot;: true,                       // Enable sidebar and panels contrast mode</code></pre><h3 id=\"设置空格缩进\"><a href=\"#设置空格缩进\" class=\"headerlink\" title=\"设置空格缩进\"></a>设置空格缩进</h3><pre><code>{    \n    &quot;tab_size&quot;: 4,    \n    &quot;translate_tabs_to_spaces&quot;: true \n} </code></pre><h3 id=\"设置行间距\"><a href=\"#设置行间距\" class=\"headerlink\" title=\"设置行间距\"></a>设置行间距</h3><pre><code>{\n    &quot;line_padding_bottom&quot;: 3, \n    &quot;line_padding_top&quot;: 3,\n}    </code></pre><h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><p><strong>Emmet(懂的)</strong><br><strong>ConvertToUtf8(编码转换)</strong><br><strong>Sublime​Linter(代码检查工具，需要配合各语言插件包检查)</strong><br><strong>SideBarEnhancements（侧边栏右键增强）</strong><br><strong>Bracket​Highlighter（显示标签块？？）</strong><br><strong>SublimeCodeIntel(跳转到自定义函数)</strong></p>\n<blockquote>\n<p>For Windows:<br>Jump to definition = Alt+Click<br>Jump to definition = Control+Windows+Alt+Up<br>Go back = Control+Windows+Alt+Left<br>Manual Code Intelligence = Control+Shift+space<br>需要自己设置执行路径</p>\n</blockquote>\n<pre><code>&quot;PHP&quot;: {\n    &quot;php&quot;: &quot;D:\\\\PHP\\\\php.exe&quot;,\n    &quot;codeintel_scan_extra_dir&quot;: [],\n    &quot;codeintel_scan_files_in_project&quot;: true,\n    &quot;codeintel_max_recursive_dir_depth&quot;: 15,\n    &quot;codeintel_scan_exclude_dir&quot;:[&quot;D:\\\\PHP&quot;]\n}</code></pre><p><strong>HTML5(html5的snippets)</strong><br><strong>Alignment(自动对齐插件)</strong><br><strong>SFTP(ftp上传)需要配置对应的ftp路径等信息</strong> <strong>git</strong> <strong>jquery(jquery snippets)</strong> <strong>SaSS(可以支持sass)</strong> <strong>DocBlockr（块状注释）</strong></p>\n<h3 id=\"ubuntu安装中文输入法\"><a href=\"#ubuntu安装中文输入法\" class=\"headerlink\" title=\"ubuntu安装中文输入法\"></a>ubuntu安装中文输入法</h3><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>git clone https://github.com/lyfeyaj/sublime-text-imfix.git</code></pre><h3 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h3><pre><code>cd ~/sublime-text-imfix\nsudo cp ./lib/libsublime-imfix.so /opt/sublime_text/\nsudo cp ./src/subl /usr/bin/</code></pre><h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>终端输入</p>\n<pre><code>LD_PRELOAD=./libsublime-imfix.so subl</code></pre><h3 id=\"建立快捷方式\"><a href=\"#建立快捷方式\" class=\"headerlink\" title=\"建立快捷方式\"></a>建立快捷方式</h3><p>新建文件sublime放在/home目录下，脚本内容：</p>\n<pre><code>#!/bin/bash\nLD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl</code></pre><h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>终端输入</p>\n<pre><code>bash ~/sublime</code></pre><h3 id=\"快捷方式修改\"><a href=\"#快捷方式修改\" class=\"headerlink\" title=\"快捷方式修改\"></a>快捷方式修改</h3><p>将[Desktop Entry]中的字符串<br>Exec=/opt/sublime_text/sublime_text %F<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text %F”<br>将[Desktop Action Window]中的字符串<br>Exec=/opt/sublime_text/sublime_text -n<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text -n”<br>将[Desktop Action Document]中的字符串<br>Exec=/opt/sublime_text/sublime_text –command new_file<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text –command new_file”<br>注意：<br>修改时请注意双引号””,否则会导致不能打开带有空格文件名的文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">http://www.sublimetext.com/3</a></p>\n<h3 id=\"Ubuntu下载\"><a href=\"#Ubuntu下载\" class=\"headerlink\" title=\"Ubuntu下载\"></a>Ubuntu下载</h3><pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-3\nsudo apt-get update\nsudo apt-get install sublime-text-installer</code></pre><h3 id=\"插件下载地址\"><a href=\"#插件下载地址\" class=\"headerlink\" title=\"插件下载地址\"></a>插件下载地址</h3><p><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"noopener\">https://packagecontrol.io/</a></p>\n<h3 id=\"注册码\"><a href=\"#注册码\" class=\"headerlink\" title=\"注册码\"></a>注册码</h3><pre><code>----- BEGIN LICENSE ----\nAndrew Weber\nSingle User License\nEA7E-855605\n813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n942194A6 02396E98 E62C9979 4BB979FE\n91424C9D A45400BF F6747D88 2FB88078\n90F5CC94 1CDC92DC 8457107A F151657B\n1D22E383 A997F016 42397640 33F41CFC\nE1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n5CDB7036 E56DE1C0 EFCC0840 650CD3A6\nB98FC99C 8FAC73EE D2B95564 DF450523\n------ END LICENSE ------</code></pre><h3 id=\"安装Package-Control\"><a href=\"#安装Package-Control\" class=\"headerlink\" title=\"安装Package Control\"></a>安装Package Control</h3><pre><code>import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</code></pre><h3 id=\"安装模板Material-Theme\"><a href=\"#安装模板Material-Theme\" class=\"headerlink\" title=\"安装模板Material Theme\"></a>安装模板Material Theme</h3><p>配置方法</p>\n<pre><code>Package Control Messages\n========================\n\nMaterial Theme\n--------------\n\n  Material Theme for Sublime Text 3\n\n  For more information on the Material Theme: https://github.com/equinusocio/material-theme\n\n  **********************************************************************************************\n\n  If installing manually (not through Package Control), add the following to your \n  Settings - User file and restart Sublime Text after:\n\n  {\n    &quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,\n    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,\n  }\n\n  **********************************************************************************************\n\n  This theme includes a Darker and Lighter version:\n\n  Darker version:\n\n  {\n    &quot;theme&quot;: &quot;Material-Theme-Darker.sublime-theme&quot;,\n    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme&quot;,\n  }\n\n  Lighter version:\n\n  {\n    &quot;theme&quot;: &quot;Material-Theme-Lighter.sublime-theme&quot;,\n    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme&quot;,\n  }\n\n  **********************************************************************************************\n\n  Recommended UI and font settings for a better experience:\n\n  {\n    &quot;overlay_scroll_bars&quot;: &quot;enabled&quot;,\n    &quot;line_padding_top&quot;: 3,\n    &quot;line_padding_bottom&quot;: 3,\n    &quot;always_show_minimap_viewport&quot;: true,\n    &quot;bold_folder_labels&quot;: true,\n    &quot;indent_guide_options&quot;: [ &quot;draw_normal&quot;, &quot;draw_active&quot; ]    // Highlight active indent\n    &quot;font_options&quot;: [ &quot;gray_antialias&quot; ],                       // For retina Mac\n  }\n\n  **********************************************************************************************\n\n  Other available theme options:\n\n  &quot;material_theme_small_tab&quot;: true,                           // Set small tabs\n  &quot;material_theme_disable_fileicons&quot;: true,                   // Hide siderbar file type icons\n  &quot;material_theme_disable_folder_animation&quot;: true,            // Disable folder animation\n  &quot;material_theme_small_statusbar&quot;: true,                     // Set small status bar\n  &quot;material_theme_disable_tree_indicator&quot;: true,              // Disable sidebar file indicator\n  &quot;material_theme_bold_tab&quot;: true,                            // Make the tab labels bolder\n  &quot;material_theme_tabs_separator&quot;: true,                      // Show tabs separator\n  &quot;material_theme_accent_lime&quot;: true,                         // set green lime accent color\n  &quot;material_theme_accent_purple&quot;: true,                       // set purple accent color\n  &quot;material_theme_accent_red&quot;: true,                          // set pale red accent color\n  &quot;material_theme_accent_orange&quot;: true,                       // set orange accent color\n  &quot;material_theme_accent_yellow&quot;: true,                       // set yellow accent color\n  &quot;material_theme_panel_separator&quot;: true,                     // show bottom panel separator\n  &quot;material_theme_tabs_autowidth&quot;: true,                      // Enable autowidth for tabs\n  &quot;material_theme_contrast_mode&quot;: true,                       // Enable sidebar and panels contrast mode</code></pre><h3 id=\"设置空格缩进\"><a href=\"#设置空格缩进\" class=\"headerlink\" title=\"设置空格缩进\"></a>设置空格缩进</h3><pre><code>{    \n    &quot;tab_size&quot;: 4,    \n    &quot;translate_tabs_to_spaces&quot;: true \n} </code></pre><h3 id=\"设置行间距\"><a href=\"#设置行间距\" class=\"headerlink\" title=\"设置行间距\"></a>设置行间距</h3><pre><code>{\n    &quot;line_padding_bottom&quot;: 3, \n    &quot;line_padding_top&quot;: 3,\n}    </code></pre><h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><p><strong>Emmet(懂的)</strong><br><strong>ConvertToUtf8(编码转换)</strong><br><strong>Sublime​Linter(代码检查工具，需要配合各语言插件包检查)</strong><br><strong>SideBarEnhancements（侧边栏右键增强）</strong><br><strong>Bracket​Highlighter（显示标签块？？）</strong><br><strong>SublimeCodeIntel(跳转到自定义函数)</strong></p>\n<blockquote>\n<p>For Windows:<br>Jump to definition = Alt+Click<br>Jump to definition = Control+Windows+Alt+Up<br>Go back = Control+Windows+Alt+Left<br>Manual Code Intelligence = Control+Shift+space<br>需要自己设置执行路径</p>\n</blockquote>\n<pre><code>&quot;PHP&quot;: {\n    &quot;php&quot;: &quot;D:\\\\PHP\\\\php.exe&quot;,\n    &quot;codeintel_scan_extra_dir&quot;: [],\n    &quot;codeintel_scan_files_in_project&quot;: true,\n    &quot;codeintel_max_recursive_dir_depth&quot;: 15,\n    &quot;codeintel_scan_exclude_dir&quot;:[&quot;D:\\\\PHP&quot;]\n}</code></pre><p><strong>HTML5(html5的snippets)</strong><br><strong>Alignment(自动对齐插件)</strong><br><strong>SFTP(ftp上传)需要配置对应的ftp路径等信息</strong> <strong>git</strong> <strong>jquery(jquery snippets)</strong> <strong>SaSS(可以支持sass)</strong> <strong>DocBlockr（块状注释）</strong></p>\n<h3 id=\"ubuntu安装中文输入法\"><a href=\"#ubuntu安装中文输入法\" class=\"headerlink\" title=\"ubuntu安装中文输入法\"></a>ubuntu安装中文输入法</h3><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>git clone https://github.com/lyfeyaj/sublime-text-imfix.git</code></pre><h3 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h3><pre><code>cd ~/sublime-text-imfix\nsudo cp ./lib/libsublime-imfix.so /opt/sublime_text/\nsudo cp ./src/subl /usr/bin/</code></pre><h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>终端输入</p>\n<pre><code>LD_PRELOAD=./libsublime-imfix.so subl</code></pre><h3 id=\"建立快捷方式\"><a href=\"#建立快捷方式\" class=\"headerlink\" title=\"建立快捷方式\"></a>建立快捷方式</h3><p>新建文件sublime放在/home目录下，脚本内容：</p>\n<pre><code>#!/bin/bash\nLD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl</code></pre><h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>终端输入</p>\n<pre><code>bash ~/sublime</code></pre><h3 id=\"快捷方式修改\"><a href=\"#快捷方式修改\" class=\"headerlink\" title=\"快捷方式修改\"></a>快捷方式修改</h3><p>将[Desktop Entry]中的字符串<br>Exec=/opt/sublime_text/sublime_text %F<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text %F”<br>将[Desktop Action Window]中的字符串<br>Exec=/opt/sublime_text/sublime_text -n<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text -n”<br>将[Desktop Action Document]中的字符串<br>Exec=/opt/sublime_text/sublime_text –command new_file<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text –command new_file”<br>注意：<br>修改时请注意双引号””,否则会导致不能打开带有空格文件名的文件。</p>\n"},{"title":"WindowsServer服务器基础设置","url":"76.html","id":"76","comments":0,"date":"2016-11-09T08:04:17.000Z","_content":"\n### 远程连接\n\n禁止administrators组远程连接\n\n> 运行gpedit.msc  \n> 计算机配置->windows设置->安全设置->本地策略->用户权限分配->通过终端服务允许登录  \n> 将Administrators账号删除掉,保留Remote Desktop Users\n\n创建新的用户\n\n> 本地用户和组->用户右键->新用户->输入用户名，设置密码 添加Administrators组，Remote Desktop Users组\n\n限制登陆次数\n\n> 计算机配置->windows设置->安全设置->账户策略->账户锁定策略”，“账户锁定阈值”设置为 20后，系统会自动设置锁定时间和计数器\n\n3389端口修改\n\n> 修改注册表，是不是需要修改？\n\n超过2个远程连接处理办法及规避方法\n\n    mstsc /console /v:10.10.10.10:3389\n    \n\n> 开始－管理工具－终端服务配置－服务器配置－限制每个用户使用一个会话\n\n### 防火墙\n\n开启防火墙\n\n> 控制面板>防火墙>开启  \n> 例外里勾选远程桌面,保证服务器可以正常连接  \n> 其他情况就在添加端口里添加即可\n\n### FTP\n\n开启ftp\n\n> 在控制面板的添加/删除程序——Windows组件向导——应用程序服务器——Internet信息服务(IIS)中选中“文件传输协议(FTP)服务”。  \n> 需要文件夹AMD64 设置一个ftp用户ftpuser  \n> 在ftp设置中关掉允许匿名连接  \n> 主目录中本地路径为E:\\\\FTP  \n> 不要勾选写入权限  \n> 默认ftp站点新建虚拟目录ftpuser 路径E:\\\\FTP\\\\ftpuser  \n> 在防火墙上开启20，21端口 在ftp客户端选择port主动模式，主动模式不需要服务器开启其他端口","source":"_posts/WindowsServer服务器基础设置.md","raw":"---\ntitle: WindowsServer服务器基础设置\ntags:\n  - windows\nurl: 76.html\nid: 76\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 16:04:17\n---\n\n### 远程连接\n\n禁止administrators组远程连接\n\n> 运行gpedit.msc  \n> 计算机配置->windows设置->安全设置->本地策略->用户权限分配->通过终端服务允许登录  \n> 将Administrators账号删除掉,保留Remote Desktop Users\n\n创建新的用户\n\n> 本地用户和组->用户右键->新用户->输入用户名，设置密码 添加Administrators组，Remote Desktop Users组\n\n限制登陆次数\n\n> 计算机配置->windows设置->安全设置->账户策略->账户锁定策略”，“账户锁定阈值”设置为 20后，系统会自动设置锁定时间和计数器\n\n3389端口修改\n\n> 修改注册表，是不是需要修改？\n\n超过2个远程连接处理办法及规避方法\n\n    mstsc /console /v:10.10.10.10:3389\n    \n\n> 开始－管理工具－终端服务配置－服务器配置－限制每个用户使用一个会话\n\n### 防火墙\n\n开启防火墙\n\n> 控制面板>防火墙>开启  \n> 例外里勾选远程桌面,保证服务器可以正常连接  \n> 其他情况就在添加端口里添加即可\n\n### FTP\n\n开启ftp\n\n> 在控制面板的添加/删除程序——Windows组件向导——应用程序服务器——Internet信息服务(IIS)中选中“文件传输协议(FTP)服务”。  \n> 需要文件夹AMD64 设置一个ftp用户ftpuser  \n> 在ftp设置中关掉允许匿名连接  \n> 主目录中本地路径为E:\\\\FTP  \n> 不要勾选写入权限  \n> 默认ftp站点新建虚拟目录ftpuser 路径E:\\\\FTP\\\\ftpuser  \n> 在防火墙上开启20，21端口 在ftp客户端选择port主动模式，主动模式不需要服务器开启其他端口","slug":"WindowsServer服务器基础设置","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws3001dh3a4xilng9s2","content":"<h3 id=\"远程连接\"><a href=\"#远程连接\" class=\"headerlink\" title=\"远程连接\"></a>远程连接</h3><p>禁止administrators组远程连接</p>\n<blockquote>\n<p>运行gpedit.msc<br>计算机配置-&gt;windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配-&gt;通过终端服务允许登录<br>将Administrators账号删除掉,保留Remote Desktop Users</p>\n</blockquote>\n<p>创建新的用户</p>\n<blockquote>\n<p>本地用户和组-&gt;用户右键-&gt;新用户-&gt;输入用户名，设置密码 添加Administrators组，Remote Desktop Users组</p>\n</blockquote>\n<p>限制登陆次数</p>\n<blockquote>\n<p>计算机配置-&gt;windows设置-&gt;安全设置-&gt;账户策略-&gt;账户锁定策略”，“账户锁定阈值”设置为 20后，系统会自动设置锁定时间和计数器</p>\n</blockquote>\n<p>3389端口修改</p>\n<blockquote>\n<p>修改注册表，是不是需要修改？</p>\n</blockquote>\n<p>超过2个远程连接处理办法及规避方法</p>\n<pre><code>mstsc /console /v:10.10.10.10:3389</code></pre><blockquote>\n<p>开始－管理工具－终端服务配置－服务器配置－限制每个用户使用一个会话</p>\n</blockquote>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>开启防火墙</p>\n<blockquote>\n<p>控制面板&gt;防火墙&gt;开启<br>例外里勾选远程桌面,保证服务器可以正常连接<br>其他情况就在添加端口里添加即可</p>\n</blockquote>\n<h3 id=\"FTP\"><a href=\"#FTP\" class=\"headerlink\" title=\"FTP\"></a>FTP</h3><p>开启ftp</p>\n<blockquote>\n<p>在控制面板的添加/删除程序——Windows组件向导——应用程序服务器——Internet信息服务(IIS)中选中“文件传输协议(FTP)服务”。<br>需要文件夹AMD64 设置一个ftp用户ftpuser<br>在ftp设置中关掉允许匿名连接<br>主目录中本地路径为E:\\FTP<br>不要勾选写入权限<br>默认ftp站点新建虚拟目录ftpuser 路径E:\\FTP\\ftpuser<br>在防火墙上开启20，21端口 在ftp客户端选择port主动模式，主动模式不需要服务器开启其他端口</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"远程连接\"><a href=\"#远程连接\" class=\"headerlink\" title=\"远程连接\"></a>远程连接</h3><p>禁止administrators组远程连接</p>\n<blockquote>\n<p>运行gpedit.msc<br>计算机配置-&gt;windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配-&gt;通过终端服务允许登录<br>将Administrators账号删除掉,保留Remote Desktop Users</p>\n</blockquote>\n<p>创建新的用户</p>\n<blockquote>\n<p>本地用户和组-&gt;用户右键-&gt;新用户-&gt;输入用户名，设置密码 添加Administrators组，Remote Desktop Users组</p>\n</blockquote>\n<p>限制登陆次数</p>\n<blockquote>\n<p>计算机配置-&gt;windows设置-&gt;安全设置-&gt;账户策略-&gt;账户锁定策略”，“账户锁定阈值”设置为 20后，系统会自动设置锁定时间和计数器</p>\n</blockquote>\n<p>3389端口修改</p>\n<blockquote>\n<p>修改注册表，是不是需要修改？</p>\n</blockquote>\n<p>超过2个远程连接处理办法及规避方法</p>\n<pre><code>mstsc /console /v:10.10.10.10:3389</code></pre><blockquote>\n<p>开始－管理工具－终端服务配置－服务器配置－限制每个用户使用一个会话</p>\n</blockquote>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>开启防火墙</p>\n<blockquote>\n<p>控制面板&gt;防火墙&gt;开启<br>例外里勾选远程桌面,保证服务器可以正常连接<br>其他情况就在添加端口里添加即可</p>\n</blockquote>\n<h3 id=\"FTP\"><a href=\"#FTP\" class=\"headerlink\" title=\"FTP\"></a>FTP</h3><p>开启ftp</p>\n<blockquote>\n<p>在控制面板的添加/删除程序——Windows组件向导——应用程序服务器——Internet信息服务(IIS)中选中“文件传输协议(FTP)服务”。<br>需要文件夹AMD64 设置一个ftp用户ftpuser<br>在ftp设置中关掉允许匿名连接<br>主目录中本地路径为E:\\FTP<br>不要勾选写入权限<br>默认ftp站点新建虚拟目录ftpuser 路径E:\\FTP\\ftpuser<br>在防火墙上开启20，21端口 在ftp客户端选择port主动模式，主动模式不需要服务器开启其他端口</p>\n</blockquote>\n"},{"title":"ThinkPHP基础入门","url":"73.html","id":"73","comments":0,"date":"2016-11-09T07:46:39.000Z","_content":"\n### URL\n\n### 配置URL伪静态\n\n3.1版本默认支持.html,.shtml,.xml,.pdf伪静态  \n在配置文件中配置\\[是在项目下的配置文件./App/Conf/config.php\\]\n\n    'URL_HTML_SUFFIX'=>'html|shmtl|xml' // 多个用 | 分割\n    \n\n### 配置URL路由\n\n基本规则\n\n> 一、规则路由  \n> 格式1：'路由规则'=>'\\[分组/模块/操作\\]?额外参数1=值1&额外参数2=值2...'  \n> 格式2：'路由规则'=>array('\\[分组/模块/操作\\]','额外参数1=值1&额外参数2=值2...')  \n> 格式3：'路由规则'=>'外部地址'  \n> 格式4：'路由规则'=>array('外部地址','重定向代码')  \n> 注意事项：  \n> 路由规则中如果以“:”开头，表示动态变量，否则为静态地址  \n> 格式2的额外参数可以传入数组或者字符串  \n> 外部地址中如果要引用动态变量， 采用 :1、:2 的方式  \n> 路由规则支持变量的数字约束定义，例如：'news/:id\\\\d'=>'News/read'  \n> 规则路由可以支持 全动态和动静结合定义，例如':user/blog/:id'=>'Home/Blog/user'  \n> 路由规则非数字变量支持排除，例如 'news/:cate^add|edit|delete'=>'News/category'  \n> 路由规则中的静态地址部分不区分大小写\n\n配置文件开启路由\n\n    'URL_ROUTER_ON'   => true, //开启路由\n    'URL_ROUTE_RULES' => array( //定义路由规则\n        'news/:year/:month/:day' => array('News/archive', 'status=1'),\n        'news/:id'               => 'News/read',\n        'news/read/:id'          => '/news/:1',\n     ),\n    \n\n> `http://serverName/index.php/news/2012/01/08`匹配第一条路由  \n> 也可以写成`'news/:year/:month/:day/'=>'News/archive?status=1',` `http://serverName/index.php/news/8`匹配第二条路由 第三条用于url地址迁移，重定向使用\n\n### 正则路由\n\n> 正则路由可以实现更加复杂的路由定义，支持的定义格式如下：  \n> 格式1：'路由正则'=>'\\[分组/模块/操作\\]?参数1=值1&参数2=值2...'  \n> 格式2：'路由正则'=>array('\\[分组/模块/操作\\]','参数1=值1&参数2=值2...')  \n> 格式3：'路由正则'=>'外部地址'  \n> 格式4：'路由正则'=>array('外部地址','重定向代码')\n\n注意事项：  \n正则路由规则必须以“/”开始和结束  \n格式2的参数可以传入数组或者字符串  \n参数值和外部地址中可以用动态变量 采用 :1、 :2 的方式  \n下面是正则路由的定义示例：\n\n    'URL_ROUTER_ON'   => true, //开启路由\n     'URL_ROUTE_RULES' => array( //定义路由规则\n        '/^blog\\/(\\d+)$/'        => 'Blog/read?id=:1',\n        '/^blog\\/(\\d+)\\/(\\d+)$/' => 'Blog/achive?year=:1&month=:2',\n        '/^blog\\/(\\d+)_(\\d+)$/'  => 'blog.php?id=:1&page=:2',\n     ),\n     ```   \n    ### URL区分大小写\n    \n\n'URL\\_CASE\\_INSENSITIVE' =>true, // 不区分 'URL\\_CASE\\_INSENSITIVE' =>false, // 区分\n\n    ### 缓存\n    ### 静态缓存\n    开启静态缓存[是在分组下的配置文件./App/Moduels/Index/Conf/config.php]  \n    和静态缓存相关的配置参数包括：  \n    HTML_CACHE_ON 是否开启静态缓存功能  \n    HTML_FILE_SUFFIX 静态文件后缀 惯例配置的值是 .html  \n    HTML_CACHE_TIME 默认的静态缓存有效期 默认60秒 可以在静态规则定义覆盖  \n    \n\n'HTML\\_CACHE\\_ON'=>true, 'HTML\\_CACHE\\_RULES'=> array( 'ActionName' => array('静态规则', '静态缓存有效期', '附加规则'), 'ModuleName(小写)' => array('静态规则', '静态缓存有效期', '附加规则'), 'ModuleName(小写):ActionName' => array('静态规则', '静态缓存有效期', '附加规则'), '*' => array('静态规则', '静态缓存有效期', '附加规则'), 'Show:index' => array('{:module}_{:action}_{id}', 100),\n\n    所有控制器下read方法缓存，其中，{id} 表示取$_GET['id'] 为静态缓存文件名，第二个参数表示缓存60秒\n    \n\n'read'=>array('{id}','60')\n\n    User控制器下所有方法缓存，其中，{:action} 表示当前的操作名称\n    \n\n'user:'=>array('User/{:action}_{id}','600')\n\n    Blog控制器下read方法缓存\n    \n\n'blog:read'=>array('{id}',0)\n\n    全局缓存\n    \n\n'*'=>array('{$\\_SERVER.REQUEST\\_URI|md5}'),\n\n    静态规则  \n    1.  使用系统变量 包括 _GET _REQUEST _SERVER _SESSION _COOKIE\n    > {$_×××|function}\n    \n    2.  使用框架特定的变量\n    > {:app}、{:group} 、{:module} 和{:action} 分别表示当前项目名、分组名、模块名和操作名\n    \n    3.  使用_GET变量\n    > {var|function}    也就是说 {id} 其实等效于 {$_GET.id}\n    \n    4.  直接使用函数\n    > {|function}   例如：{|time}\n    \n    5.  支持混合定义\n    > '{id},{name|md5}'   \n    在{}之外的字符作为字符串对待，如果包含有”/”，会自动创建目录。  \n    例如，定义下面的静态规则：  \n    {:module}/{:action}_{id}  \n    则会在静态目录下面创建模块名称的子目录，然后写入操作名_id.shtml 文件。    \n    \n    \n    \n    \n    使用get中文参数乱码问题\n    ### 原因\n    中文浏览器中默认使用的是gbk2312编码\n    \n    ### 解决方法\n    \n\n/\\*\\* \\* 解决get参数中带中文的乱码问题 * @param $keywords 传入的关键字 * @return string */ function decodeToUtf($keywords) { $keywords = mb\\_convert\\_encoding($keywords, 'UTF-8','GB2312,UTF-8'); return $keywords; }\n\n    \n\n$keywords = I('keywords'); $keywords = decodeToUtf($keywords); $page = new Page($count,self::$perPage); $page->parameter = 'keywords=' . $keywords; ```","source":"_posts/ThinkPHP基础入门.md","raw":"---\ntitle: ThinkPHP基础入门\ntags:\n  - php\nurl: 73.html\nid: 73\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-09 15:46:39\n---\n\n### URL\n\n### 配置URL伪静态\n\n3.1版本默认支持.html,.shtml,.xml,.pdf伪静态  \n在配置文件中配置\\[是在项目下的配置文件./App/Conf/config.php\\]\n\n    'URL_HTML_SUFFIX'=>'html|shmtl|xml' // 多个用 | 分割\n    \n\n### 配置URL路由\n\n基本规则\n\n> 一、规则路由  \n> 格式1：'路由规则'=>'\\[分组/模块/操作\\]?额外参数1=值1&额外参数2=值2...'  \n> 格式2：'路由规则'=>array('\\[分组/模块/操作\\]','额外参数1=值1&额外参数2=值2...')  \n> 格式3：'路由规则'=>'外部地址'  \n> 格式4：'路由规则'=>array('外部地址','重定向代码')  \n> 注意事项：  \n> 路由规则中如果以“:”开头，表示动态变量，否则为静态地址  \n> 格式2的额外参数可以传入数组或者字符串  \n> 外部地址中如果要引用动态变量， 采用 :1、:2 的方式  \n> 路由规则支持变量的数字约束定义，例如：'news/:id\\\\d'=>'News/read'  \n> 规则路由可以支持 全动态和动静结合定义，例如':user/blog/:id'=>'Home/Blog/user'  \n> 路由规则非数字变量支持排除，例如 'news/:cate^add|edit|delete'=>'News/category'  \n> 路由规则中的静态地址部分不区分大小写\n\n配置文件开启路由\n\n    'URL_ROUTER_ON'   => true, //开启路由\n    'URL_ROUTE_RULES' => array( //定义路由规则\n        'news/:year/:month/:day' => array('News/archive', 'status=1'),\n        'news/:id'               => 'News/read',\n        'news/read/:id'          => '/news/:1',\n     ),\n    \n\n> `http://serverName/index.php/news/2012/01/08`匹配第一条路由  \n> 也可以写成`'news/:year/:month/:day/'=>'News/archive?status=1',` `http://serverName/index.php/news/8`匹配第二条路由 第三条用于url地址迁移，重定向使用\n\n### 正则路由\n\n> 正则路由可以实现更加复杂的路由定义，支持的定义格式如下：  \n> 格式1：'路由正则'=>'\\[分组/模块/操作\\]?参数1=值1&参数2=值2...'  \n> 格式2：'路由正则'=>array('\\[分组/模块/操作\\]','参数1=值1&参数2=值2...')  \n> 格式3：'路由正则'=>'外部地址'  \n> 格式4：'路由正则'=>array('外部地址','重定向代码')\n\n注意事项：  \n正则路由规则必须以“/”开始和结束  \n格式2的参数可以传入数组或者字符串  \n参数值和外部地址中可以用动态变量 采用 :1、 :2 的方式  \n下面是正则路由的定义示例：\n\n    'URL_ROUTER_ON'   => true, //开启路由\n     'URL_ROUTE_RULES' => array( //定义路由规则\n        '/^blog\\/(\\d+)$/'        => 'Blog/read?id=:1',\n        '/^blog\\/(\\d+)\\/(\\d+)$/' => 'Blog/achive?year=:1&month=:2',\n        '/^blog\\/(\\d+)_(\\d+)$/'  => 'blog.php?id=:1&page=:2',\n     ),\n     ```   \n    ### URL区分大小写\n    \n\n'URL\\_CASE\\_INSENSITIVE' =>true, // 不区分 'URL\\_CASE\\_INSENSITIVE' =>false, // 区分\n\n    ### 缓存\n    ### 静态缓存\n    开启静态缓存[是在分组下的配置文件./App/Moduels/Index/Conf/config.php]  \n    和静态缓存相关的配置参数包括：  \n    HTML_CACHE_ON 是否开启静态缓存功能  \n    HTML_FILE_SUFFIX 静态文件后缀 惯例配置的值是 .html  \n    HTML_CACHE_TIME 默认的静态缓存有效期 默认60秒 可以在静态规则定义覆盖  \n    \n\n'HTML\\_CACHE\\_ON'=>true, 'HTML\\_CACHE\\_RULES'=> array( 'ActionName' => array('静态规则', '静态缓存有效期', '附加规则'), 'ModuleName(小写)' => array('静态规则', '静态缓存有效期', '附加规则'), 'ModuleName(小写):ActionName' => array('静态规则', '静态缓存有效期', '附加规则'), '*' => array('静态规则', '静态缓存有效期', '附加规则'), 'Show:index' => array('{:module}_{:action}_{id}', 100),\n\n    所有控制器下read方法缓存，其中，{id} 表示取$_GET['id'] 为静态缓存文件名，第二个参数表示缓存60秒\n    \n\n'read'=>array('{id}','60')\n\n    User控制器下所有方法缓存，其中，{:action} 表示当前的操作名称\n    \n\n'user:'=>array('User/{:action}_{id}','600')\n\n    Blog控制器下read方法缓存\n    \n\n'blog:read'=>array('{id}',0)\n\n    全局缓存\n    \n\n'*'=>array('{$\\_SERVER.REQUEST\\_URI|md5}'),\n\n    静态规则  \n    1.  使用系统变量 包括 _GET _REQUEST _SERVER _SESSION _COOKIE\n    > {$_×××|function}\n    \n    2.  使用框架特定的变量\n    > {:app}、{:group} 、{:module} 和{:action} 分别表示当前项目名、分组名、模块名和操作名\n    \n    3.  使用_GET变量\n    > {var|function}    也就是说 {id} 其实等效于 {$_GET.id}\n    \n    4.  直接使用函数\n    > {|function}   例如：{|time}\n    \n    5.  支持混合定义\n    > '{id},{name|md5}'   \n    在{}之外的字符作为字符串对待，如果包含有”/”，会自动创建目录。  \n    例如，定义下面的静态规则：  \n    {:module}/{:action}_{id}  \n    则会在静态目录下面创建模块名称的子目录，然后写入操作名_id.shtml 文件。    \n    \n    \n    \n    \n    使用get中文参数乱码问题\n    ### 原因\n    中文浏览器中默认使用的是gbk2312编码\n    \n    ### 解决方法\n    \n\n/\\*\\* \\* 解决get参数中带中文的乱码问题 * @param $keywords 传入的关键字 * @return string */ function decodeToUtf($keywords) { $keywords = mb\\_convert\\_encoding($keywords, 'UTF-8','GB2312,UTF-8'); return $keywords; }\n\n    \n\n$keywords = I('keywords'); $keywords = decodeToUtf($keywords); $page = new Page($count,self::$perPage); $page->parameter = 'keywords=' . $keywords; ```","slug":"ThinkPHP基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws4001gh3a4ca2q1e6j","content":"<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><h3 id=\"配置URL伪静态\"><a href=\"#配置URL伪静态\" class=\"headerlink\" title=\"配置URL伪静态\"></a>配置URL伪静态</h3><p>3.1版本默认支持.html,.shtml,.xml,.pdf伪静态<br>在配置文件中配置[是在项目下的配置文件./App/Conf/config.php]</p>\n<pre><code>&apos;URL_HTML_SUFFIX&apos;=&gt;&apos;html|shmtl|xml&apos; // 多个用 | 分割</code></pre><h3 id=\"配置URL路由\"><a href=\"#配置URL路由\" class=\"headerlink\" title=\"配置URL路由\"></a>配置URL路由</h3><p>基本规则</p>\n<blockquote>\n<p>一、规则路由<br>格式1：’路由规则’=&gt;’[分组/模块/操作]?额外参数1=值1&amp;额外参数2=值2…’<br>格式2：’路由规则’=&gt;array(‘[分组/模块/操作]‘,’额外参数1=值1&amp;额外参数2=值2…’)<br>格式3：’路由规则’=&gt;’外部地址’<br>格式4：’路由规则’=&gt;array(‘外部地址’,’重定向代码’)<br>注意事项：<br>路由规则中如果以“:”开头，表示动态变量，否则为静态地址<br>格式2的额外参数可以传入数组或者字符串<br>外部地址中如果要引用动态变量， 采用 :1、:2 的方式<br>路由规则支持变量的数字约束定义，例如：’news/:id\\d’=&gt;’News/read’<br>规则路由可以支持 全动态和动静结合定义，例如’:user/blog/:id’=&gt;’Home/Blog/user’<br>路由规则非数字变量支持排除，例如 ‘news/:cate^add|edit|delete’=&gt;’News/category’<br>路由规则中的静态地址部分不区分大小写</p>\n</blockquote>\n<p>配置文件开启路由</p>\n<pre><code>&apos;URL_ROUTER_ON&apos;   =&gt; true, //开启路由\n&apos;URL_ROUTE_RULES&apos; =&gt; array( //定义路由规则\n    &apos;news/:year/:month/:day&apos; =&gt; array(&apos;News/archive&apos;, &apos;status=1&apos;),\n    &apos;news/:id&apos;               =&gt; &apos;News/read&apos;,\n    &apos;news/read/:id&apos;          =&gt; &apos;/news/:1&apos;,\n ),</code></pre><blockquote>\n<p><code>http://serverName/index.php/news/2012/01/08</code>匹配第一条路由<br>也可以写成<code>&#39;news/:year/:month/:day/&#39;=&gt;&#39;News/archive?status=1&#39;,</code> <code>http://serverName/index.php/news/8</code>匹配第二条路由 第三条用于url地址迁移，重定向使用</p>\n</blockquote>\n<h3 id=\"正则路由\"><a href=\"#正则路由\" class=\"headerlink\" title=\"正则路由\"></a>正则路由</h3><blockquote>\n<p>正则路由可以实现更加复杂的路由定义，支持的定义格式如下：<br>格式1：’路由正则’=&gt;’[分组/模块/操作]?参数1=值1&amp;参数2=值2…’<br>格式2：’路由正则’=&gt;array(‘[分组/模块/操作]‘,’参数1=值1&amp;参数2=值2…’)<br>格式3：’路由正则’=&gt;’外部地址’<br>格式4：’路由正则’=&gt;array(‘外部地址’,’重定向代码’)</p>\n</blockquote>\n<p>注意事项：<br>正则路由规则必须以“/”开始和结束<br>格式2的参数可以传入数组或者字符串<br>参数值和外部地址中可以用动态变量 采用 :1、 :2 的方式<br>下面是正则路由的定义示例：</p>\n<pre><code>&apos;URL_ROUTER_ON&apos;   =&gt; true, //开启路由\n &apos;URL_ROUTE_RULES&apos; =&gt; array( //定义路由规则\n    &apos;/^blog\\/(\\d+)$/&apos;        =&gt; &apos;Blog/read?id=:1&apos;,\n    &apos;/^blog\\/(\\d+)\\/(\\d+)$/&apos; =&gt; &apos;Blog/achive?year=:1&amp;month=:2&apos;,\n    &apos;/^blog\\/(\\d+)_(\\d+)$/&apos;  =&gt; &apos;blog.php?id=:1&amp;page=:2&apos;,\n ),\n <figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    ### URL区分大小写</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;URL\\_CASE\\_INSENSITIVE&apos; =&gt;true, // 不区分 &apos;URL\\_CASE\\_INSENSITIVE&apos; =&gt;false, // 区分</span><br><span class=\"line\"></span><br><span class=\"line\">    ### 缓存</span><br><span class=\"line\">    ### 静态缓存</span><br><span class=\"line\">    开启静态缓存[是在分组下的配置文件./App/Moduels/Index/Conf/config.php]  </span><br><span class=\"line\">    和静态缓存相关的配置参数包括：  </span><br><span class=\"line\">    HTML_CACHE_ON 是否开启静态缓存功能  </span><br><span class=\"line\">    HTML_FILE_SUFFIX 静态文件后缀 惯例配置的值是 .html  </span><br><span class=\"line\">    HTML_CACHE_TIME 默认的静态缓存有效期 默认60秒 可以在静态规则定义覆盖  </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;HTML\\_CACHE\\_ON&apos;=&gt;true, &apos;HTML\\_CACHE\\_RULES&apos;=&gt; array( &apos;ActionName&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;ModuleName(小写)&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;ModuleName(小写):ActionName&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;*&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;Show:index&apos; =&gt; array(&apos;&#123;:module&#125;_&#123;:action&#125;_&#123;id&#125;&apos;, 100),</span><br><span class=\"line\"></span><br><span class=\"line\">    所有控制器下read方法缓存，其中，&#123;id&#125; 表示取$_GET[&apos;id&apos;] 为静态缓存文件名，第二个参数表示缓存60秒</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;read&apos;=&gt;array(&apos;&#123;id&#125;&apos;,&apos;60&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    User控制器下所有方法缓存，其中，&#123;:action&#125; 表示当前的操作名称</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;user:&apos;=&gt;array(&apos;User/&#123;:action&#125;_&#123;id&#125;&apos;,&apos;600&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Blog控制器下read方法缓存</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;blog:read&apos;=&gt;array(&apos;&#123;id&#125;&apos;,0)</span><br><span class=\"line\"></span><br><span class=\"line\">    全局缓存</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;*&apos;=&gt;array(&apos;&#123;$\\_SERVER.REQUEST\\_URI|md5&#125;&apos;),</span><br><span class=\"line\"></span><br><span class=\"line\">    静态规则  </span><br><span class=\"line\">    1.  使用系统变量 包括 _GET _REQUEST _SERVER _SESSION _COOKIE</span><br><span class=\"line\">    &gt; &#123;$_×××|function&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    2.  使用框架特定的变量</span><br><span class=\"line\">    &gt; &#123;:app&#125;、&#123;:group&#125; 、&#123;:module&#125; 和&#123;:action&#125; 分别表示当前项目名、分组名、模块名和操作名</span><br><span class=\"line\">    </span><br><span class=\"line\">    3.  使用_GET变量</span><br><span class=\"line\">    &gt; &#123;var|function&#125;    也就是说 &#123;id&#125; 其实等效于 &#123;$_GET.id&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    4.  直接使用函数</span><br><span class=\"line\">    &gt; &#123;|function&#125;   例如：&#123;|time&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    5.  支持混合定义</span><br><span class=\"line\">    &gt; &apos;&#123;id&#125;,&#123;name|md5&#125;&apos;   </span><br><span class=\"line\">    在&#123;&#125;之外的字符作为字符串对待，如果包含有”/”，会自动创建目录。  </span><br><span class=\"line\">    例如，定义下面的静态规则：  </span><br><span class=\"line\">    &#123;:module&#125;/&#123;:action&#125;_&#123;id&#125;  </span><br><span class=\"line\">    则会在静态目录下面创建模块名称的子目录，然后写入操作名_id.shtml 文件。    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    使用get中文参数乱码问题</span><br><span class=\"line\">    ### 原因</span><br><span class=\"line\">    中文浏览器中默认使用的是gbk2312编码</span><br><span class=\"line\">    </span><br><span class=\"line\">    ### 解决方法</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">/\\*\\* \\* 解决get参数中带中文的乱码问题 * @param $keywords 传入的关键字 * @return string */ function decodeToUtf($keywords) &#123; $keywords = mb\\_convert\\_encoding($keywords, &apos;UTF-8&apos;,&apos;GB2312,UTF-8&apos;); return $keywords; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">$keywords = I(&apos;keywords&apos;); $keywords = decodeToUtf($keywords); $page = new Page($count,self::$perPage); $page-&gt;parameter = &apos;keywords=&apos; . $keywords;</span><br></pre></td></tr></table></figure></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><h3 id=\"配置URL伪静态\"><a href=\"#配置URL伪静态\" class=\"headerlink\" title=\"配置URL伪静态\"></a>配置URL伪静态</h3><p>3.1版本默认支持.html,.shtml,.xml,.pdf伪静态<br>在配置文件中配置[是在项目下的配置文件./App/Conf/config.php]</p>\n<pre><code>&apos;URL_HTML_SUFFIX&apos;=&gt;&apos;html|shmtl|xml&apos; // 多个用 | 分割</code></pre><h3 id=\"配置URL路由\"><a href=\"#配置URL路由\" class=\"headerlink\" title=\"配置URL路由\"></a>配置URL路由</h3><p>基本规则</p>\n<blockquote>\n<p>一、规则路由<br>格式1：’路由规则’=&gt;’[分组/模块/操作]?额外参数1=值1&amp;额外参数2=值2…’<br>格式2：’路由规则’=&gt;array(‘[分组/模块/操作]‘,’额外参数1=值1&amp;额外参数2=值2…’)<br>格式3：’路由规则’=&gt;’外部地址’<br>格式4：’路由规则’=&gt;array(‘外部地址’,’重定向代码’)<br>注意事项：<br>路由规则中如果以“:”开头，表示动态变量，否则为静态地址<br>格式2的额外参数可以传入数组或者字符串<br>外部地址中如果要引用动态变量， 采用 :1、:2 的方式<br>路由规则支持变量的数字约束定义，例如：’news/:id\\d’=&gt;’News/read’<br>规则路由可以支持 全动态和动静结合定义，例如’:user/blog/:id’=&gt;’Home/Blog/user’<br>路由规则非数字变量支持排除，例如 ‘news/:cate^add|edit|delete’=&gt;’News/category’<br>路由规则中的静态地址部分不区分大小写</p>\n</blockquote>\n<p>配置文件开启路由</p>\n<pre><code>&apos;URL_ROUTER_ON&apos;   =&gt; true, //开启路由\n&apos;URL_ROUTE_RULES&apos; =&gt; array( //定义路由规则\n    &apos;news/:year/:month/:day&apos; =&gt; array(&apos;News/archive&apos;, &apos;status=1&apos;),\n    &apos;news/:id&apos;               =&gt; &apos;News/read&apos;,\n    &apos;news/read/:id&apos;          =&gt; &apos;/news/:1&apos;,\n ),</code></pre><blockquote>\n<p><code>http://serverName/index.php/news/2012/01/08</code>匹配第一条路由<br>也可以写成<code>&#39;news/:year/:month/:day/&#39;=&gt;&#39;News/archive?status=1&#39;,</code> <code>http://serverName/index.php/news/8</code>匹配第二条路由 第三条用于url地址迁移，重定向使用</p>\n</blockquote>\n<h3 id=\"正则路由\"><a href=\"#正则路由\" class=\"headerlink\" title=\"正则路由\"></a>正则路由</h3><blockquote>\n<p>正则路由可以实现更加复杂的路由定义，支持的定义格式如下：<br>格式1：’路由正则’=&gt;’[分组/模块/操作]?参数1=值1&amp;参数2=值2…’<br>格式2：’路由正则’=&gt;array(‘[分组/模块/操作]‘,’参数1=值1&amp;参数2=值2…’)<br>格式3：’路由正则’=&gt;’外部地址’<br>格式4：’路由正则’=&gt;array(‘外部地址’,’重定向代码’)</p>\n</blockquote>\n<p>注意事项：<br>正则路由规则必须以“/”开始和结束<br>格式2的参数可以传入数组或者字符串<br>参数值和外部地址中可以用动态变量 采用 :1、 :2 的方式<br>下面是正则路由的定义示例：</p>\n<pre><code>&apos;URL_ROUTER_ON&apos;   =&gt; true, //开启路由\n &apos;URL_ROUTE_RULES&apos; =&gt; array( //定义路由规则\n    &apos;/^blog\\/(\\d+)$/&apos;        =&gt; &apos;Blog/read?id=:1&apos;,\n    &apos;/^blog\\/(\\d+)\\/(\\d+)$/&apos; =&gt; &apos;Blog/achive?year=:1&amp;month=:2&apos;,\n    &apos;/^blog\\/(\\d+)_(\\d+)$/&apos;  =&gt; &apos;blog.php?id=:1&amp;page=:2&apos;,\n ),\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    ### URL区分大小写</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;URL\\_CASE\\_INSENSITIVE&apos; =&gt;true, // 不区分 &apos;URL\\_CASE\\_INSENSITIVE&apos; =&gt;false, // 区分</span><br><span class=\"line\"></span><br><span class=\"line\">    ### 缓存</span><br><span class=\"line\">    ### 静态缓存</span><br><span class=\"line\">    开启静态缓存[是在分组下的配置文件./App/Moduels/Index/Conf/config.php]  </span><br><span class=\"line\">    和静态缓存相关的配置参数包括：  </span><br><span class=\"line\">    HTML_CACHE_ON 是否开启静态缓存功能  </span><br><span class=\"line\">    HTML_FILE_SUFFIX 静态文件后缀 惯例配置的值是 .html  </span><br><span class=\"line\">    HTML_CACHE_TIME 默认的静态缓存有效期 默认60秒 可以在静态规则定义覆盖  </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;HTML\\_CACHE\\_ON&apos;=&gt;true, &apos;HTML\\_CACHE\\_RULES&apos;=&gt; array( &apos;ActionName&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;ModuleName(小写)&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;ModuleName(小写):ActionName&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;*&apos; =&gt; array(&apos;静态规则&apos;, &apos;静态缓存有效期&apos;, &apos;附加规则&apos;), &apos;Show:index&apos; =&gt; array(&apos;&#123;:module&#125;_&#123;:action&#125;_&#123;id&#125;&apos;, 100),</span><br><span class=\"line\"></span><br><span class=\"line\">    所有控制器下read方法缓存，其中，&#123;id&#125; 表示取$_GET[&apos;id&apos;] 为静态缓存文件名，第二个参数表示缓存60秒</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;read&apos;=&gt;array(&apos;&#123;id&#125;&apos;,&apos;60&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    User控制器下所有方法缓存，其中，&#123;:action&#125; 表示当前的操作名称</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;user:&apos;=&gt;array(&apos;User/&#123;:action&#125;_&#123;id&#125;&apos;,&apos;600&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Blog控制器下read方法缓存</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;blog:read&apos;=&gt;array(&apos;&#123;id&#125;&apos;,0)</span><br><span class=\"line\"></span><br><span class=\"line\">    全局缓存</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&apos;*&apos;=&gt;array(&apos;&#123;$\\_SERVER.REQUEST\\_URI|md5&#125;&apos;),</span><br><span class=\"line\"></span><br><span class=\"line\">    静态规则  </span><br><span class=\"line\">    1.  使用系统变量 包括 _GET _REQUEST _SERVER _SESSION _COOKIE</span><br><span class=\"line\">    &gt; &#123;$_×××|function&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    2.  使用框架特定的变量</span><br><span class=\"line\">    &gt; &#123;:app&#125;、&#123;:group&#125; 、&#123;:module&#125; 和&#123;:action&#125; 分别表示当前项目名、分组名、模块名和操作名</span><br><span class=\"line\">    </span><br><span class=\"line\">    3.  使用_GET变量</span><br><span class=\"line\">    &gt; &#123;var|function&#125;    也就是说 &#123;id&#125; 其实等效于 &#123;$_GET.id&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    4.  直接使用函数</span><br><span class=\"line\">    &gt; &#123;|function&#125;   例如：&#123;|time&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    5.  支持混合定义</span><br><span class=\"line\">    &gt; &apos;&#123;id&#125;,&#123;name|md5&#125;&apos;   </span><br><span class=\"line\">    在&#123;&#125;之外的字符作为字符串对待，如果包含有”/”，会自动创建目录。  </span><br><span class=\"line\">    例如，定义下面的静态规则：  </span><br><span class=\"line\">    &#123;:module&#125;/&#123;:action&#125;_&#123;id&#125;  </span><br><span class=\"line\">    则会在静态目录下面创建模块名称的子目录，然后写入操作名_id.shtml 文件。    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    使用get中文参数乱码问题</span><br><span class=\"line\">    ### 原因</span><br><span class=\"line\">    中文浏览器中默认使用的是gbk2312编码</span><br><span class=\"line\">    </span><br><span class=\"line\">    ### 解决方法</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">/\\*\\* \\* 解决get参数中带中文的乱码问题 * @param $keywords 传入的关键字 * @return string */ function decodeToUtf($keywords) &#123; $keywords = mb\\_convert\\_encoding($keywords, &apos;UTF-8&apos;,&apos;GB2312,UTF-8&apos;); return $keywords; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">$keywords = I(&apos;keywords&apos;); $keywords = decodeToUtf($keywords); $page = new Page($count,self::$perPage); $page-&gt;parameter = &apos;keywords=&apos; . $keywords;</span><br></pre></td></tr></table></figure></code></pre>"},{"title":"Unittest单元测试","url":"118.html","id":"118","comments":0,"date":"2016-11-30T03:13:19.000Z","_content":"\n#### unittest基础使用方法\n\n    # -*- coding:utf-8 -*-\n    # calculator.py\n    # 需要测试的类\n    class Count:\n    \n        def __init__(self, a, b):\n            self.a = int(a)\n            self.b = int(b)\n    \n        def add(self):\n            return self.a + self.b\n    \n    \n\n    # -*- coding: utf-8 -*-\n    # test.py 测试类\n    from calculator import Count\n    import unittest\n    class TestCount(unittest.TestCase):\n        def setUp(self):\n            print 'test start'\n    \n        def test_add(self):\n            j = Count(2,3)\n            self.assertEqual(j.add(), 5)\n    \n        def test_add2(self):\n            j = Count(41, 76)\n            self.assertEqual(j.add(), 115, 'not equal')\n    \n        def tearDown(self):\n            print 'test end'\n    \n    \n    if __name__ == '__main__':\n        # 测试全部方法\n        # unittest.main()\n        # 构造测试集\n        suite = unittest.TestSuite()\n        # 指定测试方法\n        suite.addTest(TestCount('test_add2'))\n        # 执行测试\n        runner = unittest.TextTestRunner()\n        runner.run(suite)\n    \n    \n\n#### 自动识别测试用例\n\n    # -*- coding:utf-8 -*-\n    # calculator.py\n    # 需要测试的类\n    class Count:\n    \n        def __init__(self, a, b):\n            self.a = int(a)\n            self.b = int(b)\n    \n        def add(self):\n            return self.a + self.b\n    \n        def sub(self):\n            return self.a - self.b\n    \n\n    # -*- coding: utf-8 -*-\n    # testadd.py 测试类\n    from calculator import Count\n    import unittest\n    class TestAdd(unittest.TestCase):\n        def setUp(self):\n            print 'test add start'\n    \n        def test_add(self):\n            j = Count(2,3)\n            self.assertEqual(j.add(), 5)\n    \n        def test_add2(self):\n            j = Count(41, 76)\n            self.assertEqual(j.add(), 115, 'not equal')\n    \n        def tearDown(self):\n            print 'test add end'\n    \n    \n    if __name__ == '__main__':\n        # 测试全部方法\n        unittest.main()\n    \n\n    # -*- coding: utf-8 -*-\n    # testsub.py 测试类\n    from calculator import Count\n    import unittest\n    \n    \n    class TestSub(unittest.TestCase):\n        def setUp(self):\n            print 'test sub start'\n    \n        def test_sub(self):\n            j = Count(2,3)\n            self.assertEqual(j.sub(), 5)\n    \n        def test_sub2(self):\n            j = Count(41, 76)\n            self.assertEqual(j.sub(), 115, 'not equal')\n    \n        def tearDown(self):\n            print 'test sub end'\n    \n    \n    if __name__ == '__main__':\n        # 测试全部方法\n        unittest.main()\n    \n\n    # -*- coding: utf-8 -*-\n    # runtest.py\n    import unittest\n    test_dir = './'\n    discover = unittest.defaultTestLoader.discover(test_dir, pattern='test*.py')\n    if __name__ == '__main__':\n        runner = unittest.TextTestRunner()\n        runner.run(discover)\n    \n\n#### 断言方法啊\n\n    # unittest.TestCase.assertEqual(a, b, msg=None)   a == b\n    # unittest.TestCase.assertNotEqual(a, b) a !=b  \n    # unittest.TestCase.assertTrue(x)   x is True\n    # unittest.TestCase.assertFalse(x)  x is False\n    # unittest.TestCase.assertIs(a, b)  x is b\n    # unittest.TestCase.assertIsNot(a, b)  a is not b\n    # unittest.TestCase.assertIsNotNone(x)  x is not None\n    # unittest.TestCase.assertIn(a, b)  a in b\n    # unittest.TestCase.assertNotIn(a, b) a not in b\n    # unittest.TestCase.assertNotIsInstance(a, b) isinstance(a,b)\n    # unittest.TestCase.assertNotIsInstance(a, b) not isinstance(a,b)\n    \n\n#### 跳过测试与预期失败\n\n    # -*- coding: utf-8 -*-\n    # test.py\n    import unittest\n    \n    class MyTest(unittest.TestCase):\n    \n        def setUp(self):\n            pass\n        def tearDown(self):\n            pass\n    \n        @unittest.skip(u'直接跳过测试')\n        def test_skip(self):\n            print 'test aaa'\n    \n        @unittest.skipIf(3 > 2, u'条件满足时跳过测试')\n        def test_skip_if(self):\n            print 'test bbb'\n    \n        @unittest.skipUnless(3 > 2, u'条件满足时执行测试')\n        def test_skip_unless(self):\n            print 'test ccc'\n    \n        # 不管测试成功与否，都标记为失败\n        @unittest.expectedFailure\n        def test_expected_failure(self):\n            print 'test ddd'\n            self.assertEqual(2, 3)\n    \n    if __name__ == '__main__':\n        unittest.main()","source":"_posts/Unittest单元测试.md","raw":"---\ntitle: Unittest单元测试\ntags:\n  - python\nurl: 118.html\nid: 118\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-30 11:13:19\n---\n\n#### unittest基础使用方法\n\n    # -*- coding:utf-8 -*-\n    # calculator.py\n    # 需要测试的类\n    class Count:\n    \n        def __init__(self, a, b):\n            self.a = int(a)\n            self.b = int(b)\n    \n        def add(self):\n            return self.a + self.b\n    \n    \n\n    # -*- coding: utf-8 -*-\n    # test.py 测试类\n    from calculator import Count\n    import unittest\n    class TestCount(unittest.TestCase):\n        def setUp(self):\n            print 'test start'\n    \n        def test_add(self):\n            j = Count(2,3)\n            self.assertEqual(j.add(), 5)\n    \n        def test_add2(self):\n            j = Count(41, 76)\n            self.assertEqual(j.add(), 115, 'not equal')\n    \n        def tearDown(self):\n            print 'test end'\n    \n    \n    if __name__ == '__main__':\n        # 测试全部方法\n        # unittest.main()\n        # 构造测试集\n        suite = unittest.TestSuite()\n        # 指定测试方法\n        suite.addTest(TestCount('test_add2'))\n        # 执行测试\n        runner = unittest.TextTestRunner()\n        runner.run(suite)\n    \n    \n\n#### 自动识别测试用例\n\n    # -*- coding:utf-8 -*-\n    # calculator.py\n    # 需要测试的类\n    class Count:\n    \n        def __init__(self, a, b):\n            self.a = int(a)\n            self.b = int(b)\n    \n        def add(self):\n            return self.a + self.b\n    \n        def sub(self):\n            return self.a - self.b\n    \n\n    # -*- coding: utf-8 -*-\n    # testadd.py 测试类\n    from calculator import Count\n    import unittest\n    class TestAdd(unittest.TestCase):\n        def setUp(self):\n            print 'test add start'\n    \n        def test_add(self):\n            j = Count(2,3)\n            self.assertEqual(j.add(), 5)\n    \n        def test_add2(self):\n            j = Count(41, 76)\n            self.assertEqual(j.add(), 115, 'not equal')\n    \n        def tearDown(self):\n            print 'test add end'\n    \n    \n    if __name__ == '__main__':\n        # 测试全部方法\n        unittest.main()\n    \n\n    # -*- coding: utf-8 -*-\n    # testsub.py 测试类\n    from calculator import Count\n    import unittest\n    \n    \n    class TestSub(unittest.TestCase):\n        def setUp(self):\n            print 'test sub start'\n    \n        def test_sub(self):\n            j = Count(2,3)\n            self.assertEqual(j.sub(), 5)\n    \n        def test_sub2(self):\n            j = Count(41, 76)\n            self.assertEqual(j.sub(), 115, 'not equal')\n    \n        def tearDown(self):\n            print 'test sub end'\n    \n    \n    if __name__ == '__main__':\n        # 测试全部方法\n        unittest.main()\n    \n\n    # -*- coding: utf-8 -*-\n    # runtest.py\n    import unittest\n    test_dir = './'\n    discover = unittest.defaultTestLoader.discover(test_dir, pattern='test*.py')\n    if __name__ == '__main__':\n        runner = unittest.TextTestRunner()\n        runner.run(discover)\n    \n\n#### 断言方法啊\n\n    # unittest.TestCase.assertEqual(a, b, msg=None)   a == b\n    # unittest.TestCase.assertNotEqual(a, b) a !=b  \n    # unittest.TestCase.assertTrue(x)   x is True\n    # unittest.TestCase.assertFalse(x)  x is False\n    # unittest.TestCase.assertIs(a, b)  x is b\n    # unittest.TestCase.assertIsNot(a, b)  a is not b\n    # unittest.TestCase.assertIsNotNone(x)  x is not None\n    # unittest.TestCase.assertIn(a, b)  a in b\n    # unittest.TestCase.assertNotIn(a, b) a not in b\n    # unittest.TestCase.assertNotIsInstance(a, b) isinstance(a,b)\n    # unittest.TestCase.assertNotIsInstance(a, b) not isinstance(a,b)\n    \n\n#### 跳过测试与预期失败\n\n    # -*- coding: utf-8 -*-\n    # test.py\n    import unittest\n    \n    class MyTest(unittest.TestCase):\n    \n        def setUp(self):\n            pass\n        def tearDown(self):\n            pass\n    \n        @unittest.skip(u'直接跳过测试')\n        def test_skip(self):\n            print 'test aaa'\n    \n        @unittest.skipIf(3 > 2, u'条件满足时跳过测试')\n        def test_skip_if(self):\n            print 'test bbb'\n    \n        @unittest.skipUnless(3 > 2, u'条件满足时执行测试')\n        def test_skip_unless(self):\n            print 'test ccc'\n    \n        # 不管测试成功与否，都标记为失败\n        @unittest.expectedFailure\n        def test_expected_failure(self):\n            print 'test ddd'\n            self.assertEqual(2, 3)\n    \n    if __name__ == '__main__':\n        unittest.main()","slug":"Unittest单元测试","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws5001lh3a4g12jk7wh","content":"<h4 id=\"unittest基础使用方法\"><a href=\"#unittest基础使用方法\" class=\"headerlink\" title=\"unittest基础使用方法\"></a>unittest基础使用方法</h4><pre><code># -*- coding:utf-8 -*-\n# calculator.py\n# 需要测试的类\nclass Count:\n\n    def __init__(self, a, b):\n        self.a = int(a)\n        self.b = int(b)\n\n    def add(self):\n        return self.a + self.b\n\n\n\n# -*- coding: utf-8 -*-\n# test.py 测试类\nfrom calculator import Count\nimport unittest\nclass TestCount(unittest.TestCase):\n    def setUp(self):\n        print &apos;test start&apos;\n\n    def test_add(self):\n        j = Count(2,3)\n        self.assertEqual(j.add(), 5)\n\n    def test_add2(self):\n        j = Count(41, 76)\n        self.assertEqual(j.add(), 115, &apos;not equal&apos;)\n\n    def tearDown(self):\n        print &apos;test end&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    # 测试全部方法\n    # unittest.main()\n    # 构造测试集\n    suite = unittest.TestSuite()\n    # 指定测试方法\n    suite.addTest(TestCount(&apos;test_add2&apos;))\n    # 执行测试\n    runner = unittest.TextTestRunner()\n    runner.run(suite)</code></pre><h4 id=\"自动识别测试用例\"><a href=\"#自动识别测试用例\" class=\"headerlink\" title=\"自动识别测试用例\"></a>自动识别测试用例</h4><pre><code># -*- coding:utf-8 -*-\n# calculator.py\n# 需要测试的类\nclass Count:\n\n    def __init__(self, a, b):\n        self.a = int(a)\n        self.b = int(b)\n\n    def add(self):\n        return self.a + self.b\n\n    def sub(self):\n        return self.a - self.b\n\n\n# -*- coding: utf-8 -*-\n# testadd.py 测试类\nfrom calculator import Count\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def setUp(self):\n        print &apos;test add start&apos;\n\n    def test_add(self):\n        j = Count(2,3)\n        self.assertEqual(j.add(), 5)\n\n    def test_add2(self):\n        j = Count(41, 76)\n        self.assertEqual(j.add(), 115, &apos;not equal&apos;)\n\n    def tearDown(self):\n        print &apos;test add end&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    # 测试全部方法\n    unittest.main()\n\n\n# -*- coding: utf-8 -*-\n# testsub.py 测试类\nfrom calculator import Count\nimport unittest\n\n\nclass TestSub(unittest.TestCase):\n    def setUp(self):\n        print &apos;test sub start&apos;\n\n    def test_sub(self):\n        j = Count(2,3)\n        self.assertEqual(j.sub(), 5)\n\n    def test_sub2(self):\n        j = Count(41, 76)\n        self.assertEqual(j.sub(), 115, &apos;not equal&apos;)\n\n    def tearDown(self):\n        print &apos;test sub end&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    # 测试全部方法\n    unittest.main()\n\n\n# -*- coding: utf-8 -*-\n# runtest.py\nimport unittest\ntest_dir = &apos;./&apos;\ndiscover = unittest.defaultTestLoader.discover(test_dir, pattern=&apos;test*.py&apos;)\nif __name__ == &apos;__main__&apos;:\n    runner = unittest.TextTestRunner()\n    runner.run(discover)</code></pre><h4 id=\"断言方法啊\"><a href=\"#断言方法啊\" class=\"headerlink\" title=\"断言方法啊\"></a>断言方法啊</h4><pre><code># unittest.TestCase.assertEqual(a, b, msg=None)   a == b\n# unittest.TestCase.assertNotEqual(a, b) a !=b  \n# unittest.TestCase.assertTrue(x)   x is True\n# unittest.TestCase.assertFalse(x)  x is False\n# unittest.TestCase.assertIs(a, b)  x is b\n# unittest.TestCase.assertIsNot(a, b)  a is not b\n# unittest.TestCase.assertIsNotNone(x)  x is not None\n# unittest.TestCase.assertIn(a, b)  a in b\n# unittest.TestCase.assertNotIn(a, b) a not in b\n# unittest.TestCase.assertNotIsInstance(a, b) isinstance(a,b)\n# unittest.TestCase.assertNotIsInstance(a, b) not isinstance(a,b)</code></pre><h4 id=\"跳过测试与预期失败\"><a href=\"#跳过测试与预期失败\" class=\"headerlink\" title=\"跳过测试与预期失败\"></a>跳过测试与预期失败</h4><pre><code># -*- coding: utf-8 -*-\n# test.py\nimport unittest\n\nclass MyTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n    def tearDown(self):\n        pass\n\n    @unittest.skip(u&apos;直接跳过测试&apos;)\n    def test_skip(self):\n        print &apos;test aaa&apos;\n\n    @unittest.skipIf(3 &gt; 2, u&apos;条件满足时跳过测试&apos;)\n    def test_skip_if(self):\n        print &apos;test bbb&apos;\n\n    @unittest.skipUnless(3 &gt; 2, u&apos;条件满足时执行测试&apos;)\n    def test_skip_unless(self):\n        print &apos;test ccc&apos;\n\n    # 不管测试成功与否，都标记为失败\n    @unittest.expectedFailure\n    def test_expected_failure(self):\n        print &apos;test ddd&apos;\n        self.assertEqual(2, 3)\n\nif __name__ == &apos;__main__&apos;:\n    unittest.main()</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"unittest基础使用方法\"><a href=\"#unittest基础使用方法\" class=\"headerlink\" title=\"unittest基础使用方法\"></a>unittest基础使用方法</h4><pre><code># -*- coding:utf-8 -*-\n# calculator.py\n# 需要测试的类\nclass Count:\n\n    def __init__(self, a, b):\n        self.a = int(a)\n        self.b = int(b)\n\n    def add(self):\n        return self.a + self.b\n\n\n\n# -*- coding: utf-8 -*-\n# test.py 测试类\nfrom calculator import Count\nimport unittest\nclass TestCount(unittest.TestCase):\n    def setUp(self):\n        print &apos;test start&apos;\n\n    def test_add(self):\n        j = Count(2,3)\n        self.assertEqual(j.add(), 5)\n\n    def test_add2(self):\n        j = Count(41, 76)\n        self.assertEqual(j.add(), 115, &apos;not equal&apos;)\n\n    def tearDown(self):\n        print &apos;test end&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    # 测试全部方法\n    # unittest.main()\n    # 构造测试集\n    suite = unittest.TestSuite()\n    # 指定测试方法\n    suite.addTest(TestCount(&apos;test_add2&apos;))\n    # 执行测试\n    runner = unittest.TextTestRunner()\n    runner.run(suite)</code></pre><h4 id=\"自动识别测试用例\"><a href=\"#自动识别测试用例\" class=\"headerlink\" title=\"自动识别测试用例\"></a>自动识别测试用例</h4><pre><code># -*- coding:utf-8 -*-\n# calculator.py\n# 需要测试的类\nclass Count:\n\n    def __init__(self, a, b):\n        self.a = int(a)\n        self.b = int(b)\n\n    def add(self):\n        return self.a + self.b\n\n    def sub(self):\n        return self.a - self.b\n\n\n# -*- coding: utf-8 -*-\n# testadd.py 测试类\nfrom calculator import Count\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def setUp(self):\n        print &apos;test add start&apos;\n\n    def test_add(self):\n        j = Count(2,3)\n        self.assertEqual(j.add(), 5)\n\n    def test_add2(self):\n        j = Count(41, 76)\n        self.assertEqual(j.add(), 115, &apos;not equal&apos;)\n\n    def tearDown(self):\n        print &apos;test add end&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    # 测试全部方法\n    unittest.main()\n\n\n# -*- coding: utf-8 -*-\n# testsub.py 测试类\nfrom calculator import Count\nimport unittest\n\n\nclass TestSub(unittest.TestCase):\n    def setUp(self):\n        print &apos;test sub start&apos;\n\n    def test_sub(self):\n        j = Count(2,3)\n        self.assertEqual(j.sub(), 5)\n\n    def test_sub2(self):\n        j = Count(41, 76)\n        self.assertEqual(j.sub(), 115, &apos;not equal&apos;)\n\n    def tearDown(self):\n        print &apos;test sub end&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    # 测试全部方法\n    unittest.main()\n\n\n# -*- coding: utf-8 -*-\n# runtest.py\nimport unittest\ntest_dir = &apos;./&apos;\ndiscover = unittest.defaultTestLoader.discover(test_dir, pattern=&apos;test*.py&apos;)\nif __name__ == &apos;__main__&apos;:\n    runner = unittest.TextTestRunner()\n    runner.run(discover)</code></pre><h4 id=\"断言方法啊\"><a href=\"#断言方法啊\" class=\"headerlink\" title=\"断言方法啊\"></a>断言方法啊</h4><pre><code># unittest.TestCase.assertEqual(a, b, msg=None)   a == b\n# unittest.TestCase.assertNotEqual(a, b) a !=b  \n# unittest.TestCase.assertTrue(x)   x is True\n# unittest.TestCase.assertFalse(x)  x is False\n# unittest.TestCase.assertIs(a, b)  x is b\n# unittest.TestCase.assertIsNot(a, b)  a is not b\n# unittest.TestCase.assertIsNotNone(x)  x is not None\n# unittest.TestCase.assertIn(a, b)  a in b\n# unittest.TestCase.assertNotIn(a, b) a not in b\n# unittest.TestCase.assertNotIsInstance(a, b) isinstance(a,b)\n# unittest.TestCase.assertNotIsInstance(a, b) not isinstance(a,b)</code></pre><h4 id=\"跳过测试与预期失败\"><a href=\"#跳过测试与预期失败\" class=\"headerlink\" title=\"跳过测试与预期失败\"></a>跳过测试与预期失败</h4><pre><code># -*- coding: utf-8 -*-\n# test.py\nimport unittest\n\nclass MyTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n    def tearDown(self):\n        pass\n\n    @unittest.skip(u&apos;直接跳过测试&apos;)\n    def test_skip(self):\n        print &apos;test aaa&apos;\n\n    @unittest.skipIf(3 &gt; 2, u&apos;条件满足时跳过测试&apos;)\n    def test_skip_if(self):\n        print &apos;test bbb&apos;\n\n    @unittest.skipUnless(3 &gt; 2, u&apos;条件满足时执行测试&apos;)\n    def test_skip_unless(self):\n        print &apos;test ccc&apos;\n\n    # 不管测试成功与否，都标记为失败\n    @unittest.expectedFailure\n    def test_expected_failure(self):\n        print &apos;test ddd&apos;\n        self.assertEqual(2, 3)\n\nif __name__ == &apos;__main__&apos;:\n    unittest.main()</code></pre>"},{"title":"Windows软件运行时错误429,ACTIVEX部件不能创建对象的解决方法","url":"70.html","id":"70","comments":0,"date":"2016-11-09T07:38:56.000Z","_content":"\n### 安装软件出现“ACTIVEX部件不能创建对象”\n\n提示错误\n\n> 中文：“运行时错误429，ActiveX部件不能创建对象”  \n> 英文：\"Run-time error '429' ActiveX componnent can't create object\"\n\n新建文件，将下面代码复制粘贴，文件另存为xxx.bat 运行xxx.bat，重启电脑，OK.\n\n    echo 正在修复，这个过程可能需要几分钟，请稍候…… \n    rundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\System32\\dacui.dll \n    rundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\Catroot\\icatalog.mdb \n    regsvr32 /s comcat.dll \n    regsvr32 /s asctrls.ocx \n    regsvr32 /s oleaut32.dll \n    regsvr32 /s shdocvw.dll /I \n    regsvr32 /s shdocvw.dll \n    regsvr32 /s browseui.dll \n    regsvr32 /s browseui.dll /I \n    regsvr32 /s msrating.dll \n    regsvr32 /s mlang.dll \n    regsvr32 /s hlink.dll \n    regsvr32 /s mshtml.dll \n    regsvr32 /s mshtmled.dll \n    regsvr32 /s urlmon.dll \n    regsvr32 /s plugin.ocx \n    regsvr32 /s sendmail.dll \n    regsvr32 /s mshtml.dll /i \n    regsvr32 /s scrobj.dll \n    regsvr32 /s corpol.dll \n    regsvr32 /s jscrīpt.dll \n    regsvr32 /s msxml.dll \n    regsvr32 /s imgutil.dll \n    regsvr32 /s cryptext.dll \n    regsvr32 /s inseng.dll \n    regsvr32 /s iesetup.dll /i \n    regsvr32 /s cryptdlg.dll \n    regsvr32 /s actxprxy.dll \n    regsvr32 /s dispex.dll \n    regsvr32 /s occache.dll \n    regsvr32 /s iepeers.dll \n    regsvr32 /s urlmon.dll /i \n    regsvr32 /s cdfview.dll \n    regsvr32 /s webcheck.dll \n    regsvr32 /s mobsync.dll \n    regsvr32 /s pngfilt.dll \n    regsvr32 /s licmgr10.dll \n    regsvr32 /s hhctrl.ocx \n    regsvr32 /s inetcfg.dll \n    regsvr32 /s trialoc.dll \n    regsvr32 /s tdc.ocx \n    regsvr32 /s MSR2C.DLL \n    regsvr32 /s msident.dll \n    regsvr32 /s msieftp.dll \n    regsvr32 /s xmsconf.ocx \n    regsvr32 /s ils.dll \n    regsvr32 /s msoeacct.dll \n    regsvr32 /s wab32.dll \n    regsvr32 /s wabimp.dll \n    regsvr32 /s wabfind.dll \n    regsvr32 /s oemiglib.dll \n    regsvr32 /s directdb.dll \n    regsvr32 /s inetcomm.dll \n    regsvr32 /s msoe.dll \n    regsvr32 /s oeimport.dll \n    regsvr32 /s msdxm.ocx \n    regsvr32 /s dxmasf.dll \n    regsvr32 /s laprxy.dll \n    regsvr32 /s l3codecx.ax \n    regsvr32 /s acelpdec.ax \n    regsvr32 /s mpg4ds32.ax \n    regsvr32 /s danim.dll \n    regsvr32 /s Daxctle.ocx \n    regsvr32 /s lmrt.dll \n    regsvr32 /s datime.dll \n    regsvr32 /s dxtrans.dll \n    regsvr32 /s dxtmsft.dll \n    regsvr32 /s wshom.ocx \n    regsvr32 /s wshext.dll \n    regsvr32 /s vbscrīpt.dll \n    regsvr32 /s scrrun.dll mstinit.exe /setup \n    regsvr32 /s msnsspc.dll /SspcCreateSspiReg \n    regsvr32 /s msapsspc.dll /SspcCreateSspiReg \n    echo. \n    echo. \n    echo 修复成功！任意键退出！ \n    pause>nul","source":"_posts/Windows软件运行时错误429,ACTIVEX部件不能创建对象的解决方法.md","raw":"---\ntitle: Windows软件运行时错误429,ACTIVEX部件不能创建对象的解决方法\nurl: 70.html\nid: 70\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 15:38:56\ntags:\n---\n\n### 安装软件出现“ACTIVEX部件不能创建对象”\n\n提示错误\n\n> 中文：“运行时错误429，ActiveX部件不能创建对象”  \n> 英文：\"Run-time error '429' ActiveX componnent can't create object\"\n\n新建文件，将下面代码复制粘贴，文件另存为xxx.bat 运行xxx.bat，重启电脑，OK.\n\n    echo 正在修复，这个过程可能需要几分钟，请稍候…… \n    rundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\System32\\dacui.dll \n    rundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\Catroot\\icatalog.mdb \n    regsvr32 /s comcat.dll \n    regsvr32 /s asctrls.ocx \n    regsvr32 /s oleaut32.dll \n    regsvr32 /s shdocvw.dll /I \n    regsvr32 /s shdocvw.dll \n    regsvr32 /s browseui.dll \n    regsvr32 /s browseui.dll /I \n    regsvr32 /s msrating.dll \n    regsvr32 /s mlang.dll \n    regsvr32 /s hlink.dll \n    regsvr32 /s mshtml.dll \n    regsvr32 /s mshtmled.dll \n    regsvr32 /s urlmon.dll \n    regsvr32 /s plugin.ocx \n    regsvr32 /s sendmail.dll \n    regsvr32 /s mshtml.dll /i \n    regsvr32 /s scrobj.dll \n    regsvr32 /s corpol.dll \n    regsvr32 /s jscrīpt.dll \n    regsvr32 /s msxml.dll \n    regsvr32 /s imgutil.dll \n    regsvr32 /s cryptext.dll \n    regsvr32 /s inseng.dll \n    regsvr32 /s iesetup.dll /i \n    regsvr32 /s cryptdlg.dll \n    regsvr32 /s actxprxy.dll \n    regsvr32 /s dispex.dll \n    regsvr32 /s occache.dll \n    regsvr32 /s iepeers.dll \n    regsvr32 /s urlmon.dll /i \n    regsvr32 /s cdfview.dll \n    regsvr32 /s webcheck.dll \n    regsvr32 /s mobsync.dll \n    regsvr32 /s pngfilt.dll \n    regsvr32 /s licmgr10.dll \n    regsvr32 /s hhctrl.ocx \n    regsvr32 /s inetcfg.dll \n    regsvr32 /s trialoc.dll \n    regsvr32 /s tdc.ocx \n    regsvr32 /s MSR2C.DLL \n    regsvr32 /s msident.dll \n    regsvr32 /s msieftp.dll \n    regsvr32 /s xmsconf.ocx \n    regsvr32 /s ils.dll \n    regsvr32 /s msoeacct.dll \n    regsvr32 /s wab32.dll \n    regsvr32 /s wabimp.dll \n    regsvr32 /s wabfind.dll \n    regsvr32 /s oemiglib.dll \n    regsvr32 /s directdb.dll \n    regsvr32 /s inetcomm.dll \n    regsvr32 /s msoe.dll \n    regsvr32 /s oeimport.dll \n    regsvr32 /s msdxm.ocx \n    regsvr32 /s dxmasf.dll \n    regsvr32 /s laprxy.dll \n    regsvr32 /s l3codecx.ax \n    regsvr32 /s acelpdec.ax \n    regsvr32 /s mpg4ds32.ax \n    regsvr32 /s danim.dll \n    regsvr32 /s Daxctle.ocx \n    regsvr32 /s lmrt.dll \n    regsvr32 /s datime.dll \n    regsvr32 /s dxtrans.dll \n    regsvr32 /s dxtmsft.dll \n    regsvr32 /s wshom.ocx \n    regsvr32 /s wshext.dll \n    regsvr32 /s vbscrīpt.dll \n    regsvr32 /s scrrun.dll mstinit.exe /setup \n    regsvr32 /s msnsspc.dll /SspcCreateSspiReg \n    regsvr32 /s msapsspc.dll /SspcCreateSspiReg \n    echo. \n    echo. \n    echo 修复成功！任意键退出！ \n    pause>nul","slug":"Windows软件运行时错误429,ACTIVEX部件不能创建对象的解决方法","published":1,"updated":"2019-07-23T06:50:41.037Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws6001oh3a4h5jn7bpb","content":"<h3 id=\"安装软件出现“ACTIVEX部件不能创建对象”\"><a href=\"#安装软件出现“ACTIVEX部件不能创建对象”\" class=\"headerlink\" title=\"安装软件出现“ACTIVEX部件不能创建对象”\"></a>安装软件出现“ACTIVEX部件不能创建对象”</h3><p>提示错误</p>\n<blockquote>\n<p>中文：“运行时错误429，ActiveX部件不能创建对象”<br>英文：”Run-time error ‘429’ ActiveX componnent can’t create object”</p>\n</blockquote>\n<p>新建文件，将下面代码复制粘贴，文件另存为xxx.bat 运行xxx.bat，重启电脑，OK.</p>\n<pre><code>echo 正在修复，这个过程可能需要几分钟，请稍候…… \nrundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\System32\\dacui.dll \nrundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\Catroot\\icatalog.mdb \nregsvr32 /s comcat.dll \nregsvr32 /s asctrls.ocx \nregsvr32 /s oleaut32.dll \nregsvr32 /s shdocvw.dll /I \nregsvr32 /s shdocvw.dll \nregsvr32 /s browseui.dll \nregsvr32 /s browseui.dll /I \nregsvr32 /s msrating.dll \nregsvr32 /s mlang.dll \nregsvr32 /s hlink.dll \nregsvr32 /s mshtml.dll \nregsvr32 /s mshtmled.dll \nregsvr32 /s urlmon.dll \nregsvr32 /s plugin.ocx \nregsvr32 /s sendmail.dll \nregsvr32 /s mshtml.dll /i \nregsvr32 /s scrobj.dll \nregsvr32 /s corpol.dll \nregsvr32 /s jscrīpt.dll \nregsvr32 /s msxml.dll \nregsvr32 /s imgutil.dll \nregsvr32 /s cryptext.dll \nregsvr32 /s inseng.dll \nregsvr32 /s iesetup.dll /i \nregsvr32 /s cryptdlg.dll \nregsvr32 /s actxprxy.dll \nregsvr32 /s dispex.dll \nregsvr32 /s occache.dll \nregsvr32 /s iepeers.dll \nregsvr32 /s urlmon.dll /i \nregsvr32 /s cdfview.dll \nregsvr32 /s webcheck.dll \nregsvr32 /s mobsync.dll \nregsvr32 /s pngfilt.dll \nregsvr32 /s licmgr10.dll \nregsvr32 /s hhctrl.ocx \nregsvr32 /s inetcfg.dll \nregsvr32 /s trialoc.dll \nregsvr32 /s tdc.ocx \nregsvr32 /s MSR2C.DLL \nregsvr32 /s msident.dll \nregsvr32 /s msieftp.dll \nregsvr32 /s xmsconf.ocx \nregsvr32 /s ils.dll \nregsvr32 /s msoeacct.dll \nregsvr32 /s wab32.dll \nregsvr32 /s wabimp.dll \nregsvr32 /s wabfind.dll \nregsvr32 /s oemiglib.dll \nregsvr32 /s directdb.dll \nregsvr32 /s inetcomm.dll \nregsvr32 /s msoe.dll \nregsvr32 /s oeimport.dll \nregsvr32 /s msdxm.ocx \nregsvr32 /s dxmasf.dll \nregsvr32 /s laprxy.dll \nregsvr32 /s l3codecx.ax \nregsvr32 /s acelpdec.ax \nregsvr32 /s mpg4ds32.ax \nregsvr32 /s danim.dll \nregsvr32 /s Daxctle.ocx \nregsvr32 /s lmrt.dll \nregsvr32 /s datime.dll \nregsvr32 /s dxtrans.dll \nregsvr32 /s dxtmsft.dll \nregsvr32 /s wshom.ocx \nregsvr32 /s wshext.dll \nregsvr32 /s vbscrīpt.dll \nregsvr32 /s scrrun.dll mstinit.exe /setup \nregsvr32 /s msnsspc.dll /SspcCreateSspiReg \nregsvr32 /s msapsspc.dll /SspcCreateSspiReg \necho. \necho. \necho 修复成功！任意键退出！ \npause&gt;nul</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装软件出现“ACTIVEX部件不能创建对象”\"><a href=\"#安装软件出现“ACTIVEX部件不能创建对象”\" class=\"headerlink\" title=\"安装软件出现“ACTIVEX部件不能创建对象”\"></a>安装软件出现“ACTIVEX部件不能创建对象”</h3><p>提示错误</p>\n<blockquote>\n<p>中文：“运行时错误429，ActiveX部件不能创建对象”<br>英文：”Run-time error ‘429’ ActiveX componnent can’t create object”</p>\n</blockquote>\n<p>新建文件，将下面代码复制粘贴，文件另存为xxx.bat 运行xxx.bat，重启电脑，OK.</p>\n<pre><code>echo 正在修复，这个过程可能需要几分钟，请稍候…… \nrundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\System32\\dacui.dll \nrundll32.exe advpack.dll /DelNodeRunDLL32 %systemroot%\\Catroot\\icatalog.mdb \nregsvr32 /s comcat.dll \nregsvr32 /s asctrls.ocx \nregsvr32 /s oleaut32.dll \nregsvr32 /s shdocvw.dll /I \nregsvr32 /s shdocvw.dll \nregsvr32 /s browseui.dll \nregsvr32 /s browseui.dll /I \nregsvr32 /s msrating.dll \nregsvr32 /s mlang.dll \nregsvr32 /s hlink.dll \nregsvr32 /s mshtml.dll \nregsvr32 /s mshtmled.dll \nregsvr32 /s urlmon.dll \nregsvr32 /s plugin.ocx \nregsvr32 /s sendmail.dll \nregsvr32 /s mshtml.dll /i \nregsvr32 /s scrobj.dll \nregsvr32 /s corpol.dll \nregsvr32 /s jscrīpt.dll \nregsvr32 /s msxml.dll \nregsvr32 /s imgutil.dll \nregsvr32 /s cryptext.dll \nregsvr32 /s inseng.dll \nregsvr32 /s iesetup.dll /i \nregsvr32 /s cryptdlg.dll \nregsvr32 /s actxprxy.dll \nregsvr32 /s dispex.dll \nregsvr32 /s occache.dll \nregsvr32 /s iepeers.dll \nregsvr32 /s urlmon.dll /i \nregsvr32 /s cdfview.dll \nregsvr32 /s webcheck.dll \nregsvr32 /s mobsync.dll \nregsvr32 /s pngfilt.dll \nregsvr32 /s licmgr10.dll \nregsvr32 /s hhctrl.ocx \nregsvr32 /s inetcfg.dll \nregsvr32 /s trialoc.dll \nregsvr32 /s tdc.ocx \nregsvr32 /s MSR2C.DLL \nregsvr32 /s msident.dll \nregsvr32 /s msieftp.dll \nregsvr32 /s xmsconf.ocx \nregsvr32 /s ils.dll \nregsvr32 /s msoeacct.dll \nregsvr32 /s wab32.dll \nregsvr32 /s wabimp.dll \nregsvr32 /s wabfind.dll \nregsvr32 /s oemiglib.dll \nregsvr32 /s directdb.dll \nregsvr32 /s inetcomm.dll \nregsvr32 /s msoe.dll \nregsvr32 /s oeimport.dll \nregsvr32 /s msdxm.ocx \nregsvr32 /s dxmasf.dll \nregsvr32 /s laprxy.dll \nregsvr32 /s l3codecx.ax \nregsvr32 /s acelpdec.ax \nregsvr32 /s mpg4ds32.ax \nregsvr32 /s danim.dll \nregsvr32 /s Daxctle.ocx \nregsvr32 /s lmrt.dll \nregsvr32 /s datime.dll \nregsvr32 /s dxtrans.dll \nregsvr32 /s dxtmsft.dll \nregsvr32 /s wshom.ocx \nregsvr32 /s wshext.dll \nregsvr32 /s vbscrīpt.dll \nregsvr32 /s scrrun.dll mstinit.exe /setup \nregsvr32 /s msnsspc.dll /SspcCreateSspiReg \nregsvr32 /s msapsspc.dll /SspcCreateSspiReg \necho. \necho. \necho 修复成功！任意键退出！ \npause&gt;nul</code></pre>"},{"title":"centos7.2使用rabbitMQ","url":"549.html","id":"549","comments":0,"date":"2018-09-08T06:45:54.000Z","_content":"\n    # 安装 Erlang\n    yum -y install epel-release\n    yum -y update\n    yum -y install erlang socat\n    \n\n    # 查看是否安装成功\n    erl -version\n    \n\n    # 安装rabbitMQ\n    wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm\n    rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n    rpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm\n    \n\n    # 启用,开机启动,状态\n    systemctl start rabbitmq-server\n    systemctl enable rabbitmq-server\n    systemctl status rabbitmq-server\n    \n\n    # 启动图形界面管理\n    rabbitmq-plugins enable rabbitmq_management\n    chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/\n    rabbitmqctl add_user admin StrongPassword  # 踩坑:密码不要以';'结尾\n    rabbitmqctl set_user_tags admin administrator\n    rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n    \n\n    # 自定义配置文件\n    cd /etc/rabbitmq\n    touch rabbitmq.conf\n    \n\n    # 访问图形界面\n    http://Your_Server_IP:15672/\n    \n\n    # api文档\n    http://Your_Server_IP:15672/api","source":"_posts/centos7.2使用rabbitMQ.md","raw":"---\ntitle: centos7.2使用rabbitMQ\nurl: 549.html\nid: 549\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2018-09-08 14:45:54\ntags:\n---\n\n    # 安装 Erlang\n    yum -y install epel-release\n    yum -y update\n    yum -y install erlang socat\n    \n\n    # 查看是否安装成功\n    erl -version\n    \n\n    # 安装rabbitMQ\n    wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm\n    rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n    rpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm\n    \n\n    # 启用,开机启动,状态\n    systemctl start rabbitmq-server\n    systemctl enable rabbitmq-server\n    systemctl status rabbitmq-server\n    \n\n    # 启动图形界面管理\n    rabbitmq-plugins enable rabbitmq_management\n    chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/\n    rabbitmqctl add_user admin StrongPassword  # 踩坑:密码不要以';'结尾\n    rabbitmqctl set_user_tags admin administrator\n    rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n    \n\n    # 自定义配置文件\n    cd /etc/rabbitmq\n    touch rabbitmq.conf\n    \n\n    # 访问图形界面\n    http://Your_Server_IP:15672/\n    \n\n    # api文档\n    http://Your_Server_IP:15672/api","slug":"centos7.2使用rabbitMQ","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws8001sh3a4mlpfrl89","content":"<pre><code># 安装 Erlang\nyum -y install epel-release\nyum -y update\nyum -y install erlang socat\n\n\n# 查看是否安装成功\nerl -version\n\n\n# 安装rabbitMQ\nwget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\nrpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm\n\n\n# 启用,开机启动,状态\nsystemctl start rabbitmq-server\nsystemctl enable rabbitmq-server\nsystemctl status rabbitmq-server\n\n\n# 启动图形界面管理\nrabbitmq-plugins enable rabbitmq_management\nchown -R rabbitmq:rabbitmq /var/lib/rabbitmq/\nrabbitmqctl add_user admin StrongPassword  # 踩坑:密码不要以&apos;;&apos;结尾\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n\n# 自定义配置文件\ncd /etc/rabbitmq\ntouch rabbitmq.conf\n\n\n# 访问图形界面\nhttp://Your_Server_IP:15672/\n\n\n# api文档\nhttp://Your_Server_IP:15672/api</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code># 安装 Erlang\nyum -y install epel-release\nyum -y update\nyum -y install erlang socat\n\n\n# 查看是否安装成功\nerl -version\n\n\n# 安装rabbitMQ\nwget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\nrpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm\n\n\n# 启用,开机启动,状态\nsystemctl start rabbitmq-server\nsystemctl enable rabbitmq-server\nsystemctl status rabbitmq-server\n\n\n# 启动图形界面管理\nrabbitmq-plugins enable rabbitmq_management\nchown -R rabbitmq:rabbitmq /var/lib/rabbitmq/\nrabbitmqctl add_user admin StrongPassword  # 踩坑:密码不要以&apos;;&apos;结尾\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n\n# 自定义配置文件\ncd /etc/rabbitmq\ntouch rabbitmq.conf\n\n\n# 访问图形界面\nhttp://Your_Server_IP:15672/\n\n\n# api文档\nhttp://Your_Server_IP:15672/api</code></pre>"},{"title":"centos7.2安装使用openResty","url":"579.html","id":"579","comments":0,"date":"2018-11-14T10:35:08.000Z","_content":"\n    # 安装\n    sudo yum install pcre-devel openssl-devel gcc curl\n    wget https://openresty.org/download/openresty-1.13.6.2.tar.gz\n    tar -xzvf openresty-1.13.6.2.tar.gz\n    cd openresty-1.13.6.2\n    # 默认安装到/usr/local/openresty, 可以指定./configure --prefix=/your/path/openresty设置\n    # 默认安装的组件https://openresty.org/cn/components.html\n    ./configure --with-luajit \\\n                --without-http_redis2_module \\\n                --with-http_iconv_module \\\n                --with-http_postgres_module\n    make && sudo make install\n    # 创建软链接\n    ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/nginx\n    # 启动/重启/停止\n    nginx \n    nginx -s reload\n    nginx -s stop\n    \n\n#### 配置\n\n*   openResty的nginx和普通nginx配置一致","source":"_posts/centos7.2安装使用openResty.md","raw":"---\ntitle: centos7.2安装使用openResty\nurl: 579.html\nid: 579\ncomments: false\ncategories:\n  - 运维\ndate: 2018-11-14 18:35:08\ntags:\n---\n\n    # 安装\n    sudo yum install pcre-devel openssl-devel gcc curl\n    wget https://openresty.org/download/openresty-1.13.6.2.tar.gz\n    tar -xzvf openresty-1.13.6.2.tar.gz\n    cd openresty-1.13.6.2\n    # 默认安装到/usr/local/openresty, 可以指定./configure --prefix=/your/path/openresty设置\n    # 默认安装的组件https://openresty.org/cn/components.html\n    ./configure --with-luajit \\\n                --without-http_redis2_module \\\n                --with-http_iconv_module \\\n                --with-http_postgres_module\n    make && sudo make install\n    # 创建软链接\n    ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/nginx\n    # 启动/重启/停止\n    nginx \n    nginx -s reload\n    nginx -s stop\n    \n\n#### 配置\n\n*   openResty的nginx和普通nginx配置一致","slug":"centos7.2安装使用openResty","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqws9001wh3a4zfny4hon","content":"<pre><code># 安装\nsudo yum install pcre-devel openssl-devel gcc curl\nwget https://openresty.org/download/openresty-1.13.6.2.tar.gz\ntar -xzvf openresty-1.13.6.2.tar.gz\ncd openresty-1.13.6.2\n# 默认安装到/usr/local/openresty, 可以指定./configure --prefix=/your/path/openresty设置\n# 默认安装的组件https://openresty.org/cn/components.html\n./configure --with-luajit \\\n            --without-http_redis2_module \\\n            --with-http_iconv_module \\\n            --with-http_postgres_module\nmake &amp;&amp; sudo make install\n# 创建软链接\nln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/nginx\n# 启动/重启/停止\nnginx \nnginx -s reload\nnginx -s stop</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li>openResty的nginx和普通nginx配置一致</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<pre><code># 安装\nsudo yum install pcre-devel openssl-devel gcc curl\nwget https://openresty.org/download/openresty-1.13.6.2.tar.gz\ntar -xzvf openresty-1.13.6.2.tar.gz\ncd openresty-1.13.6.2\n# 默认安装到/usr/local/openresty, 可以指定./configure --prefix=/your/path/openresty设置\n# 默认安装的组件https://openresty.org/cn/components.html\n./configure --with-luajit \\\n            --without-http_redis2_module \\\n            --with-http_iconv_module \\\n            --with-http_postgres_module\nmake &amp;&amp; sudo make install\n# 创建软链接\nln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/nginx\n# 启动/重启/停止\nnginx \nnginx -s reload\nnginx -s stop</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li>openResty的nginx和普通nginx配置一致</li>\n</ul>\n"},{"title":"Wireshark抓包基础","url":"56.html","id":"56","comments":0,"date":"2016-11-09T07:09:21.000Z","_content":"\n### nmap安装\n\n    sudo apt-get install nmap\n    \n\n### Zenmap图形GUI安装\n\n    sudo apt-get install Zenmap\n    \n\n### 扫描主机\n\n    nmap -T4 -A -v 192.168.1.3/16\n    \n\n其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态。  \n/32 表示扫描 192.168.1.3  \n/24 表示扫描 192.168.1.0-192.168.1.255  \n/16 表示扫描 192.168.0.0-192.168.255.255  \n/8  \n/1  \n参考[cird](https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1)\n\n### Nmap所识别的6个端口状态。\n\nopen(开放的) 应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。 closed(关闭的) 关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。 filtered(被过滤的) 由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。 unfiltered(未被过滤的) 未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。 open|filtered(开放或者被过滤的) 当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。 closed|filtered(关闭或者被过滤的) 该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。\n\n### 监视指定网络接口的数据包tcpdump\n\n如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，\n\n    tcpdump -i eth0\n    \n\n### 路由追踪traceroute\n\nlinux\n\n    sudo apt-get install traceroute  \n    traceroute hostname\n    \n\nwindow\n\n    tracert hostname\n    \n\n### ubuntu开启和关闭混杂模式\n\n``` ifconfig eth0 promisc # 设置eth0为混杂模式。 ifconfig eth0 -promisc # 取消它的混杂模式\n\n    ifconfig参数详解\n    \n\n字段含义说明： eth0/eth1： 分别表示第一块网卡和第二块网卡； lo： 表示回环测试接口，注意，这个虚拟的interface一定要存在！ usb0： 表示USB接口的网卡； Linkencap： 表示位于OSI物理层的名称，即连接类型Ethernet（以太网） HWaddr： 表示网卡的硬件地址，即MAC地址 inetaddr ： 表示网卡IP； Bcast： 表示广播(broadcast ) 的地址； Mask： 表示子网掩码； UP： 表示网卡开启状态； BROADCAST： 表示支持广播； MULTICAST： 表示网卡混杂模式； RUNNING： 表示网卡的网线被接上； MULTICAST： 表示支持组播； MTU： 表示MaximumTrasmission Unit 最大传输单元(字节)，即此接口一次所能传输的最大封包； Metric： 表示路由度量值，缺省值是0； RX： 表示网络由激活到目前为止接收的数据包； TX： 表示网络由激活到目前为止发送的数据包； collisions： 表示网络信号冲突的情况； txqueuelen： 表示传输缓冲区长度大小； Memory： 表示占用内存范围。\n\n    ### 安装wireshark\n    \n\nsudo apt-get install wireshark\n\n    wireshark捕获过滤器  \n    \n\nsrc 192.168.0.10 && port 80 源地址192.168.0.10和端口为80相关  \nhost 192.160.0.1 和主机192.168.0.1相关  \nsrc host 192.168.0.1  \nport 8080  \n!port 8080  \ndst port 80  \nicmp  \n!ip6\n\n    wireshark显示过滤器  \n    \n\n!tcp  \nip.addr == 192.168.0.1  \nframe.len <= 128  \ntcp.port == 23 || tcp.port == 21  \nsmtp || pop || imap  \nip.addr == 192.168.0.1 or ip.addr == 192.168.0.2\n\n操作符 ==, !=, >, <, >=. <=\n========================\n\n操作符 and, or, xor(有且仅有1个满足), not\n===============================","source":"_posts/Wireshark抓包基础.md","raw":"---\ntitle: Wireshark抓包基础\nurl: 56.html\nid: 56\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 15:09:21\ntags:\n---\n\n### nmap安装\n\n    sudo apt-get install nmap\n    \n\n### Zenmap图形GUI安装\n\n    sudo apt-get install Zenmap\n    \n\n### 扫描主机\n\n    nmap -T4 -A -v 192.168.1.3/16\n    \n\n其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态。  \n/32 表示扫描 192.168.1.3  \n/24 表示扫描 192.168.1.0-192.168.1.255  \n/16 表示扫描 192.168.0.0-192.168.255.255  \n/8  \n/1  \n参考[cird](https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1)\n\n### Nmap所识别的6个端口状态。\n\nopen(开放的) 应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。 closed(关闭的) 关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。 filtered(被过滤的) 由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。 unfiltered(未被过滤的) 未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。 open|filtered(开放或者被过滤的) 当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。 closed|filtered(关闭或者被过滤的) 该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。\n\n### 监视指定网络接口的数据包tcpdump\n\n如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，\n\n    tcpdump -i eth0\n    \n\n### 路由追踪traceroute\n\nlinux\n\n    sudo apt-get install traceroute  \n    traceroute hostname\n    \n\nwindow\n\n    tracert hostname\n    \n\n### ubuntu开启和关闭混杂模式\n\n``` ifconfig eth0 promisc # 设置eth0为混杂模式。 ifconfig eth0 -promisc # 取消它的混杂模式\n\n    ifconfig参数详解\n    \n\n字段含义说明： eth0/eth1： 分别表示第一块网卡和第二块网卡； lo： 表示回环测试接口，注意，这个虚拟的interface一定要存在！ usb0： 表示USB接口的网卡； Linkencap： 表示位于OSI物理层的名称，即连接类型Ethernet（以太网） HWaddr： 表示网卡的硬件地址，即MAC地址 inetaddr ： 表示网卡IP； Bcast： 表示广播(broadcast ) 的地址； Mask： 表示子网掩码； UP： 表示网卡开启状态； BROADCAST： 表示支持广播； MULTICAST： 表示网卡混杂模式； RUNNING： 表示网卡的网线被接上； MULTICAST： 表示支持组播； MTU： 表示MaximumTrasmission Unit 最大传输单元(字节)，即此接口一次所能传输的最大封包； Metric： 表示路由度量值，缺省值是0； RX： 表示网络由激活到目前为止接收的数据包； TX： 表示网络由激活到目前为止发送的数据包； collisions： 表示网络信号冲突的情况； txqueuelen： 表示传输缓冲区长度大小； Memory： 表示占用内存范围。\n\n    ### 安装wireshark\n    \n\nsudo apt-get install wireshark\n\n    wireshark捕获过滤器  \n    \n\nsrc 192.168.0.10 && port 80 源地址192.168.0.10和端口为80相关  \nhost 192.160.0.1 和主机192.168.0.1相关  \nsrc host 192.168.0.1  \nport 8080  \n!port 8080  \ndst port 80  \nicmp  \n!ip6\n\n    wireshark显示过滤器  \n    \n\n!tcp  \nip.addr == 192.168.0.1  \nframe.len <= 128  \ntcp.port == 23 || tcp.port == 21  \nsmtp || pop || imap  \nip.addr == 192.168.0.1 or ip.addr == 192.168.0.2\n\n操作符 ==, !=, >, <, >=. <=\n========================\n\n操作符 and, or, xor(有且仅有1个满足), not\n===============================","slug":"Wireshark抓包基础","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsa001zh3a4226zld1z","content":"<h3 id=\"nmap安装\"><a href=\"#nmap安装\" class=\"headerlink\" title=\"nmap安装\"></a>nmap安装</h3><pre><code>sudo apt-get install nmap</code></pre><h3 id=\"Zenmap图形GUI安装\"><a href=\"#Zenmap图形GUI安装\" class=\"headerlink\" title=\"Zenmap图形GUI安装\"></a>Zenmap图形GUI安装</h3><pre><code>sudo apt-get install Zenmap</code></pre><h3 id=\"扫描主机\"><a href=\"#扫描主机\" class=\"headerlink\" title=\"扫描主机\"></a>扫描主机</h3><pre><code>nmap -T4 -A -v 192.168.1.3/16</code></pre><p>其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态。<br>/32 表示扫描 192.168.1.3<br>/24 表示扫描 192.168.1.0-192.168.1.255<br>/16 表示扫描 192.168.0.0-192.168.255.255<br>/8<br>/1<br>参考<a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1\" target=\"_blank\" rel=\"noopener\">cird</a></p>\n<h3 id=\"Nmap所识别的6个端口状态。\"><a href=\"#Nmap所识别的6个端口状态。\" class=\"headerlink\" title=\"Nmap所识别的6个端口状态。\"></a>Nmap所识别的6个端口状态。</h3><p>open(开放的) 应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。 closed(关闭的) 关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。 filtered(被过滤的) 由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。 unfiltered(未被过滤的) 未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。 open|filtered(开放或者被过滤的) 当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。 closed|filtered(关闭或者被过滤的) 该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。</p>\n<h3 id=\"监视指定网络接口的数据包tcpdump\"><a href=\"#监视指定网络接口的数据包tcpdump\" class=\"headerlink\" title=\"监视指定网络接口的数据包tcpdump\"></a>监视指定网络接口的数据包tcpdump</h3><p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，</p>\n<pre><code>tcpdump -i eth0</code></pre><h3 id=\"路由追踪traceroute\"><a href=\"#路由追踪traceroute\" class=\"headerlink\" title=\"路由追踪traceroute\"></a>路由追踪traceroute</h3><p>linux</p>\n<pre><code>sudo apt-get install traceroute  \ntraceroute hostname</code></pre><p>window</p>\n<pre><code>tracert hostname</code></pre><h3 id=\"ubuntu开启和关闭混杂模式\"><a href=\"#ubuntu开启和关闭混杂模式\" class=\"headerlink\" title=\"ubuntu开启和关闭混杂模式\"></a>ubuntu开启和关闭混杂模式</h3><p>``` ifconfig eth0 promisc # 设置eth0为混杂模式。 ifconfig eth0 -promisc # 取消它的混杂模式</p>\n<pre><code>ifconfig参数详解</code></pre><p>字段含义说明： eth0/eth1： 分别表示第一块网卡和第二块网卡； lo： 表示回环测试接口，注意，这个虚拟的interface一定要存在！ usb0： 表示USB接口的网卡； Linkencap： 表示位于OSI物理层的名称，即连接类型Ethernet（以太网） HWaddr： 表示网卡的硬件地址，即MAC地址 inetaddr ： 表示网卡IP； Bcast： 表示广播(broadcast ) 的地址； Mask： 表示子网掩码； UP： 表示网卡开启状态； BROADCAST： 表示支持广播； MULTICAST： 表示网卡混杂模式； RUNNING： 表示网卡的网线被接上； MULTICAST： 表示支持组播； MTU： 表示MaximumTrasmission Unit 最大传输单元(字节)，即此接口一次所能传输的最大封包； Metric： 表示路由度量值，缺省值是0； RX： 表示网络由激活到目前为止接收的数据包； TX： 表示网络由激活到目前为止发送的数据包； collisions： 表示网络信号冲突的情况； txqueuelen： 表示传输缓冲区长度大小； Memory： 表示占用内存范围。</p>\n<pre><code>### 安装wireshark</code></pre><p>sudo apt-get install wireshark</p>\n<pre><code>wireshark捕获过滤器  </code></pre><p>src 192.168.0.10 &amp;&amp; port 80 源地址192.168.0.10和端口为80相关<br>host 192.160.0.1 和主机192.168.0.1相关<br>src host 192.168.0.1<br>port 8080<br>!port 8080<br>dst port 80<br>icmp<br>!ip6</p>\n<pre><code>wireshark显示过滤器  </code></pre><p>!tcp<br>ip.addr == 192.168.0.1<br>frame.len &lt;= 128<br>tcp.port == 23 || tcp.port == 21<br>smtp || pop || imap<br>ip.addr == 192.168.0.1 or ip.addr == 192.168.0.2</p>\n<h1 id=\"操作符-gt-lt-gt-lt\"><a href=\"#操作符-gt-lt-gt-lt\" class=\"headerlink\" title=\"操作符 ==, !=, &gt;, &lt;, &gt;=. &lt;=\"></a>操作符 ==, !=, &gt;, &lt;, &gt;=. &lt;=</h1><h1 id=\"操作符-and-or-xor-有且仅有1个满足-not\"><a href=\"#操作符-and-or-xor-有且仅有1个满足-not\" class=\"headerlink\" title=\"操作符 and, or, xor(有且仅有1个满足), not\"></a>操作符 and, or, xor(有且仅有1个满足), not</h1>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nmap安装\"><a href=\"#nmap安装\" class=\"headerlink\" title=\"nmap安装\"></a>nmap安装</h3><pre><code>sudo apt-get install nmap</code></pre><h3 id=\"Zenmap图形GUI安装\"><a href=\"#Zenmap图形GUI安装\" class=\"headerlink\" title=\"Zenmap图形GUI安装\"></a>Zenmap图形GUI安装</h3><pre><code>sudo apt-get install Zenmap</code></pre><h3 id=\"扫描主机\"><a href=\"#扫描主机\" class=\"headerlink\" title=\"扫描主机\"></a>扫描主机</h3><pre><code>nmap -T4 -A -v 192.168.1.3/16</code></pre><p>其中-A选项用于使用进攻性（Aggressive）方式扫描；-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态。<br>/32 表示扫描 192.168.1.3<br>/24 表示扫描 192.168.1.0-192.168.1.255<br>/16 表示扫描 192.168.0.0-192.168.255.255<br>/8<br>/1<br>参考<a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1\" target=\"_blank\" rel=\"noopener\">cird</a></p>\n<h3 id=\"Nmap所识别的6个端口状态。\"><a href=\"#Nmap所识别的6个端口状态。\" class=\"headerlink\" title=\"Nmap所识别的6个端口状态。\"></a>Nmap所识别的6个端口状态。</h3><p>open(开放的) 应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。 closed(关闭的) 关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。 filtered(被过滤的) 由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。 unfiltered(未被过滤的) 未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。 open|filtered(开放或者被过滤的) 当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。 closed|filtered(关闭或者被过滤的) 该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。</p>\n<h3 id=\"监视指定网络接口的数据包tcpdump\"><a href=\"#监视指定网络接口的数据包tcpdump\" class=\"headerlink\" title=\"监视指定网络接口的数据包tcpdump\"></a>监视指定网络接口的数据包tcpdump</h3><p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，</p>\n<pre><code>tcpdump -i eth0</code></pre><h3 id=\"路由追踪traceroute\"><a href=\"#路由追踪traceroute\" class=\"headerlink\" title=\"路由追踪traceroute\"></a>路由追踪traceroute</h3><p>linux</p>\n<pre><code>sudo apt-get install traceroute  \ntraceroute hostname</code></pre><p>window</p>\n<pre><code>tracert hostname</code></pre><h3 id=\"ubuntu开启和关闭混杂模式\"><a href=\"#ubuntu开启和关闭混杂模式\" class=\"headerlink\" title=\"ubuntu开启和关闭混杂模式\"></a>ubuntu开启和关闭混杂模式</h3><p>``` ifconfig eth0 promisc # 设置eth0为混杂模式。 ifconfig eth0 -promisc # 取消它的混杂模式</p>\n<pre><code>ifconfig参数详解</code></pre><p>字段含义说明： eth0/eth1： 分别表示第一块网卡和第二块网卡； lo： 表示回环测试接口，注意，这个虚拟的interface一定要存在！ usb0： 表示USB接口的网卡； Linkencap： 表示位于OSI物理层的名称，即连接类型Ethernet（以太网） HWaddr： 表示网卡的硬件地址，即MAC地址 inetaddr ： 表示网卡IP； Bcast： 表示广播(broadcast ) 的地址； Mask： 表示子网掩码； UP： 表示网卡开启状态； BROADCAST： 表示支持广播； MULTICAST： 表示网卡混杂模式； RUNNING： 表示网卡的网线被接上； MULTICAST： 表示支持组播； MTU： 表示MaximumTrasmission Unit 最大传输单元(字节)，即此接口一次所能传输的最大封包； Metric： 表示路由度量值，缺省值是0； RX： 表示网络由激活到目前为止接收的数据包； TX： 表示网络由激活到目前为止发送的数据包； collisions： 表示网络信号冲突的情况； txqueuelen： 表示传输缓冲区长度大小； Memory： 表示占用内存范围。</p>\n<pre><code>### 安装wireshark</code></pre><p>sudo apt-get install wireshark</p>\n<pre><code>wireshark捕获过滤器  </code></pre><p>src 192.168.0.10 &amp;&amp; port 80 源地址192.168.0.10和端口为80相关<br>host 192.160.0.1 和主机192.168.0.1相关<br>src host 192.168.0.1<br>port 8080<br>!port 8080<br>dst port 80<br>icmp<br>!ip6</p>\n<pre><code>wireshark显示过滤器  </code></pre><p>!tcp<br>ip.addr == 192.168.0.1<br>frame.len &lt;= 128<br>tcp.port == 23 || tcp.port == 21<br>smtp || pop || imap<br>ip.addr == 192.168.0.1 or ip.addr == 192.168.0.2</p>\n<h1 id=\"操作符-gt-lt-gt-lt\"><a href=\"#操作符-gt-lt-gt-lt\" class=\"headerlink\" title=\"操作符 ==, !=, &gt;, &lt;, &gt;=. &lt;=\"></a>操作符 ==, !=, &gt;, &lt;, &gt;=. &lt;=</h1><h1 id=\"操作符-and-or-xor-有且仅有1个满足-not\"><a href=\"#操作符-and-or-xor-有且仅有1个满足-not\" class=\"headerlink\" title=\"操作符 and, or, xor(有且仅有1个满足), not\"></a>操作符 and, or, xor(有且仅有1个满足), not</h1>"},{"title":"centos7.2安装使用sentry","url":"553.html","id":"553","comments":0,"date":"2018-09-08T06:48:41.000Z","_content":"\n    # 先安装docker  https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n    # 后安装sentry   https://github.com/getsentry/onpremise\n    $ mkdir sentry\n    $ cd sentry\n    $ mkdir -p data/{sentry,postgres}\n    $ git clone https://github.com/getsentry/onpremise\n    $ cd onpremise\n    $ docker-compose run --rm web config generate-secret-key # 创建一个secret key并配置到docker-compose.yml中的SENTRY_SECRET_KEY.\n    $ docker-compose run --rm web upgrade # 创建数据库\n    $ docker-compose up -d  # 后台执行","source":"_posts/centos7.2安装使用sentry.md","raw":"---\ntitle: centos7.2安装使用sentry\nurl: 553.html\nid: 553\ncomments: false\ncategories:\n  - 运维\ndate: 2018-09-08 14:48:41\ntags:\n---\n\n    # 先安装docker  https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n    # 后安装sentry   https://github.com/getsentry/onpremise\n    $ mkdir sentry\n    $ cd sentry\n    $ mkdir -p data/{sentry,postgres}\n    $ git clone https://github.com/getsentry/onpremise\n    $ cd onpremise\n    $ docker-compose run --rm web config generate-secret-key # 创建一个secret key并配置到docker-compose.yml中的SENTRY_SECRET_KEY.\n    $ docker-compose run --rm web upgrade # 创建数据库\n    $ docker-compose up -d  # 后台执行","slug":"centos7.2安装使用sentry","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsb0023h3a4dif5yf1n","content":"<pre><code># 先安装docker  https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n# 后安装sentry   https://github.com/getsentry/onpremise\n$ mkdir sentry\n$ cd sentry\n$ mkdir -p data/{sentry,postgres}\n$ git clone https://github.com/getsentry/onpremise\n$ cd onpremise\n$ docker-compose run --rm web config generate-secret-key # 创建一个secret key并配置到docker-compose.yml中的SENTRY_SECRET_KEY.\n$ docker-compose run --rm web upgrade # 创建数据库\n$ docker-compose up -d  # 后台执行</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code># 先安装docker  https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n# 后安装sentry   https://github.com/getsentry/onpremise\n$ mkdir sentry\n$ cd sentry\n$ mkdir -p data/{sentry,postgres}\n$ git clone https://github.com/getsentry/onpremise\n$ cd onpremise\n$ docker-compose run --rm web config generate-secret-key # 创建一个secret key并配置到docker-compose.yml中的SENTRY_SECRET_KEY.\n$ docker-compose run --rm web upgrade # 创建数据库\n$ docker-compose up -d  # 后台执行</code></pre>"},{"title":"centos7.2安装及使用docker","url":"557.html","id":"557","comments":0,"date":"2018-09-08T06:52:53.000Z","_content":"\n    # https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n    # 卸载旧版本\n    $ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n    # 安装依赖包\n    $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n    # 安装源\n    $ sudo yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n    # 安装\n    $ sudo yum install docker-ce\n    # 启动\n    $ sudo systemctl start docker\n    $ sudo systemctl enable docker\n    # 测试\n    $ sudo docker run hello-world\n    # 加入用户组(记得退出重新登录) https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user\n    # 安装docker-compose\n    $ sudo yum install epel-release\n    $ sudo yum install python-pip\n    $ sudo pip install docker-compose\n    # 换源https://lug.ustc.edu.cn/wiki/mirrors/help/docker","source":"_posts/centos7.2安装及使用docker.md","raw":"---\ntitle: centos7.2安装及使用docker\nurl: 557.html\nid: 557\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2018-09-08 14:52:53\ntags:\n---\n\n    # https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n    # 卸载旧版本\n    $ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n    # 安装依赖包\n    $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n    # 安装源\n    $ sudo yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n    # 安装\n    $ sudo yum install docker-ce\n    # 启动\n    $ sudo systemctl start docker\n    $ sudo systemctl enable docker\n    # 测试\n    $ sudo docker run hello-world\n    # 加入用户组(记得退出重新登录) https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user\n    # 安装docker-compose\n    $ sudo yum install epel-release\n    $ sudo yum install python-pip\n    $ sudo pip install docker-compose\n    # 换源https://lug.ustc.edu.cn/wiki/mirrors/help/docker","slug":"centos7.2安装及使用docker","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsc0026h3a4xa08pgc0","content":"<pre><code># https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n# 卸载旧版本\n$ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n# 安装依赖包\n$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 安装源\n$ sudo yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 安装\n$ sudo yum install docker-ce\n# 启动\n$ sudo systemctl start docker\n$ sudo systemctl enable docker\n# 测试\n$ sudo docker run hello-world\n# 加入用户组(记得退出重新登录) https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user\n# 安装docker-compose\n$ sudo yum install epel-release\n$ sudo yum install python-pip\n$ sudo pip install docker-compose\n# 换源https://lug.ustc.edu.cn/wiki/mirrors/help/docker</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code># https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce\n# 卸载旧版本\n$ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n# 安装依赖包\n$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 安装源\n$ sudo yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 安装\n$ sudo yum install docker-ce\n# 启动\n$ sudo systemctl start docker\n$ sudo systemctl enable docker\n# 测试\n$ sudo docker run hello-world\n# 加入用户组(记得退出重新登录) https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user\n# 安装docker-compose\n$ sudo yum install epel-release\n$ sudo yum install python-pip\n$ sudo pip install docker-compose\n# 换源https://lug.ustc.edu.cn/wiki/mirrors/help/docker</code></pre>"},{"title":"centos7创建nagios监控集群服务","url":"166.html","id":"166","comments":0,"date":"2017-04-20T03:17:12.000Z","_content":"\n### 安装服务器端192.168.0.206\n\n1,安装lamp环境 [参考](http://www.zhuohc.com/articles/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/) 2, 配置nagios服务\n\n    # 创建nagiso用户\n    $ sudo useradd nagios\n    # 创建apache用户，yum安装httpd服务会自动创建\n    $ sudo useradd apache -M -s /sbin/nologin\n    useradd：用户“apache”已存在\n    # 创建nagcmd用户组\n    $ sudo groupadd nagcmd\n    # 将usermod加入nagcmd用户组\n    sudo usermod -a -G nagcmd nagios\n    # 将apache用户加入nagcmd用户组\n    $ sudo usermod -a -G nagcmd apache\n    # 查看nagios用户所属的组\n    $ id -n -G nagios\n    nagios nagcmd\n    # 查看apace用户所属的组\n    $ id -n -G apache\n    apache nagcmd\n    # 安装nagiso服务\n    $sudo yum install nagios\n    $sudo yum install nagios-plugins-all\n    # 安装nrpe（服务器端和客户端都需要安装）\n    $sudo yum install nrpe\n    # 启动和开机启动\n    $sudo systemctl start nagios\n    $sudo systemctl enable nagios\n    $sudo systemctl start nrpe\n    $sudo systemctl enable nrpe\n    \n\n3,配置web\n\n    # 取消认证\n    $ sudo vim /etc/nagios/cgi.cfg\n    use_authentication=0 # 此处将1改为0\n    # 查看配置文件\n    $ls /etc/httpd/conf.d\n    autoindex.conf  nagios.conf  php.conf  README  userdir.conf  welcome.conf  xcache.conf\n    # 其中nagiso.conf就是nagios的web配置文件\n    # 访问http://192.168.0.206/nagios，其中登陆密码在/etc/nagios/passwd文件中，具体文件位置可以在/etc/httpd/conf.d/nagios.conf中查看\n    \n\n### 安装客户端192.168.0.208\n\n    # 安装mysql，参考上方链接，配合生成check_mysql插件\n    # 安装nrpe（服务器端和客户端都需要安装）\n    $ sudo yum -y install epel-release\n    $ sudo yum install nrpe\n    $ sudo yum install nagios-plugins-all\n    # 配置nagios客户端\n    $ sudo vim /etc/nagios/nrpe.cfg\n    allowed_hosts=127.0.0.1,192.168.0.206 # 监控当前客户端的nagios服务器地址\n    # 启动服务\n    $ sudo systemctl restart nrpe\n    $ sudo systemctl enable nrpe\n    # 检查启动结果\n    $ sudo netstat -lntup | grep nrpe\n    tcp        0      0 0.0.0.0:5666            0.0.0.0:*               LISTEN      2540/nrpe           \n    tcp6       0      0 :::5666                 :::*                    LISTEN      2540/nrpe\n    $ sudo ps -ef | grep nrpe | grep -v grep\n    nrpe      2540     1  0 11:59 ?        00:00:00 /usr/sbin/nrpe -c /etc/nagios/nrpe.cfg -d\n    \n\n### 配置服务器端192.168.0.206\n\n    $ tree /etc/nagios\n    .\n    ├── cgi.cfg  \n    ├── conf.d  # 添加新的监视客户端信息\n    │   └── web_one.cfg\n    ├── nagios.cfg  # 配置服务器端nagios\n    ├── nrpe.cfg # 配置服务器端nrpe\n    ├── objects\n    │   ├── commands.cfg\n    │   ├── contacts.cfg\n    │   ├── localhost.cfg\n    │   ├── printer.cfg\n    │   ├── switch.cfg\n    │   ├── templates.cfg\n    │   ├── timeperiods.cfg\n    │   └── windows.cfg\n    ├── passwd\n    └── private\n        └── resource.cfg\n    $ cp /etc/nagios/objects/localhost.cfg  /etc/nagios/conf.d/web_one.cfg\n    $ vim /etc/nagios/conf.d/web_one.cfg # 将localhost 改成web_one\n    define host{\n            use                     linux-server  \n            host_name         web_one\n            alias                   web_one\n            address              192.168.0.208\n    }\n    define service{\n            use                             local-service \n            host_name                 web_one\n            service_description    PING\n            check_command        check_ping!100.0,20%!500.0,60%\n    }\n    \n\n### 查看结果\n\n![nagios](http://www.zhuohc.com/wp-content/uploads/2017/04/nagios.png)","source":"_posts/centos7创建nagios监控集群服务.md","raw":"---\ntitle: centos7创建nagios监控集群服务\nurl: 166.html\nid: 166\ncomments: false\ncategories:\n  - 运维\ndate: 2017-04-20 11:17:12\ntags:\n---\n\n### 安装服务器端192.168.0.206\n\n1,安装lamp环境 [参考](http://www.zhuohc.com/articles/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/) 2, 配置nagios服务\n\n    # 创建nagiso用户\n    $ sudo useradd nagios\n    # 创建apache用户，yum安装httpd服务会自动创建\n    $ sudo useradd apache -M -s /sbin/nologin\n    useradd：用户“apache”已存在\n    # 创建nagcmd用户组\n    $ sudo groupadd nagcmd\n    # 将usermod加入nagcmd用户组\n    sudo usermod -a -G nagcmd nagios\n    # 将apache用户加入nagcmd用户组\n    $ sudo usermod -a -G nagcmd apache\n    # 查看nagios用户所属的组\n    $ id -n -G nagios\n    nagios nagcmd\n    # 查看apace用户所属的组\n    $ id -n -G apache\n    apache nagcmd\n    # 安装nagiso服务\n    $sudo yum install nagios\n    $sudo yum install nagios-plugins-all\n    # 安装nrpe（服务器端和客户端都需要安装）\n    $sudo yum install nrpe\n    # 启动和开机启动\n    $sudo systemctl start nagios\n    $sudo systemctl enable nagios\n    $sudo systemctl start nrpe\n    $sudo systemctl enable nrpe\n    \n\n3,配置web\n\n    # 取消认证\n    $ sudo vim /etc/nagios/cgi.cfg\n    use_authentication=0 # 此处将1改为0\n    # 查看配置文件\n    $ls /etc/httpd/conf.d\n    autoindex.conf  nagios.conf  php.conf  README  userdir.conf  welcome.conf  xcache.conf\n    # 其中nagiso.conf就是nagios的web配置文件\n    # 访问http://192.168.0.206/nagios，其中登陆密码在/etc/nagios/passwd文件中，具体文件位置可以在/etc/httpd/conf.d/nagios.conf中查看\n    \n\n### 安装客户端192.168.0.208\n\n    # 安装mysql，参考上方链接，配合生成check_mysql插件\n    # 安装nrpe（服务器端和客户端都需要安装）\n    $ sudo yum -y install epel-release\n    $ sudo yum install nrpe\n    $ sudo yum install nagios-plugins-all\n    # 配置nagios客户端\n    $ sudo vim /etc/nagios/nrpe.cfg\n    allowed_hosts=127.0.0.1,192.168.0.206 # 监控当前客户端的nagios服务器地址\n    # 启动服务\n    $ sudo systemctl restart nrpe\n    $ sudo systemctl enable nrpe\n    # 检查启动结果\n    $ sudo netstat -lntup | grep nrpe\n    tcp        0      0 0.0.0.0:5666            0.0.0.0:*               LISTEN      2540/nrpe           \n    tcp6       0      0 :::5666                 :::*                    LISTEN      2540/nrpe\n    $ sudo ps -ef | grep nrpe | grep -v grep\n    nrpe      2540     1  0 11:59 ?        00:00:00 /usr/sbin/nrpe -c /etc/nagios/nrpe.cfg -d\n    \n\n### 配置服务器端192.168.0.206\n\n    $ tree /etc/nagios\n    .\n    ├── cgi.cfg  \n    ├── conf.d  # 添加新的监视客户端信息\n    │   └── web_one.cfg\n    ├── nagios.cfg  # 配置服务器端nagios\n    ├── nrpe.cfg # 配置服务器端nrpe\n    ├── objects\n    │   ├── commands.cfg\n    │   ├── contacts.cfg\n    │   ├── localhost.cfg\n    │   ├── printer.cfg\n    │   ├── switch.cfg\n    │   ├── templates.cfg\n    │   ├── timeperiods.cfg\n    │   └── windows.cfg\n    ├── passwd\n    └── private\n        └── resource.cfg\n    $ cp /etc/nagios/objects/localhost.cfg  /etc/nagios/conf.d/web_one.cfg\n    $ vim /etc/nagios/conf.d/web_one.cfg # 将localhost 改成web_one\n    define host{\n            use                     linux-server  \n            host_name         web_one\n            alias                   web_one\n            address              192.168.0.208\n    }\n    define service{\n            use                             local-service \n            host_name                 web_one\n            service_description    PING\n            check_command        check_ping!100.0,20%!500.0,60%\n    }\n    \n\n### 查看结果\n\n![nagios](http://www.zhuohc.com/wp-content/uploads/2017/04/nagios.png)","slug":"centos7创建nagios监控集群服务","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsd0028h3a48986jgz3","content":"<h3 id=\"安装服务器端192-168-0-206\"><a href=\"#安装服务器端192-168-0-206\" class=\"headerlink\" title=\"安装服务器端192.168.0.206\"></a>安装服务器端192.168.0.206</h3><p>1,安装lamp环境 <a href=\"http://www.zhuohc.com/articles/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">参考</a> 2, 配置nagios服务</p>\n<pre><code># 创建nagiso用户\n$ sudo useradd nagios\n# 创建apache用户，yum安装httpd服务会自动创建\n$ sudo useradd apache -M -s /sbin/nologin\nuseradd：用户“apache”已存在\n# 创建nagcmd用户组\n$ sudo groupadd nagcmd\n# 将usermod加入nagcmd用户组\nsudo usermod -a -G nagcmd nagios\n# 将apache用户加入nagcmd用户组\n$ sudo usermod -a -G nagcmd apache\n# 查看nagios用户所属的组\n$ id -n -G nagios\nnagios nagcmd\n# 查看apace用户所属的组\n$ id -n -G apache\napache nagcmd\n# 安装nagiso服务\n$sudo yum install nagios\n$sudo yum install nagios-plugins-all\n# 安装nrpe（服务器端和客户端都需要安装）\n$sudo yum install nrpe\n# 启动和开机启动\n$sudo systemctl start nagios\n$sudo systemctl enable nagios\n$sudo systemctl start nrpe\n$sudo systemctl enable nrpe</code></pre><p>3,配置web</p>\n<pre><code># 取消认证\n$ sudo vim /etc/nagios/cgi.cfg\nuse_authentication=0 # 此处将1改为0\n# 查看配置文件\n$ls /etc/httpd/conf.d\nautoindex.conf  nagios.conf  php.conf  README  userdir.conf  welcome.conf  xcache.conf\n# 其中nagiso.conf就是nagios的web配置文件\n# 访问http://192.168.0.206/nagios，其中登陆密码在/etc/nagios/passwd文件中，具体文件位置可以在/etc/httpd/conf.d/nagios.conf中查看</code></pre><h3 id=\"安装客户端192-168-0-208\"><a href=\"#安装客户端192-168-0-208\" class=\"headerlink\" title=\"安装客户端192.168.0.208\"></a>安装客户端192.168.0.208</h3><pre><code># 安装mysql，参考上方链接，配合生成check_mysql插件\n# 安装nrpe（服务器端和客户端都需要安装）\n$ sudo yum -y install epel-release\n$ sudo yum install nrpe\n$ sudo yum install nagios-plugins-all\n# 配置nagios客户端\n$ sudo vim /etc/nagios/nrpe.cfg\nallowed_hosts=127.0.0.1,192.168.0.206 # 监控当前客户端的nagios服务器地址\n# 启动服务\n$ sudo systemctl restart nrpe\n$ sudo systemctl enable nrpe\n# 检查启动结果\n$ sudo netstat -lntup | grep nrpe\ntcp        0      0 0.0.0.0:5666            0.0.0.0:*               LISTEN      2540/nrpe           \ntcp6       0      0 :::5666                 :::*                    LISTEN      2540/nrpe\n$ sudo ps -ef | grep nrpe | grep -v grep\nnrpe      2540     1  0 11:59 ?        00:00:00 /usr/sbin/nrpe -c /etc/nagios/nrpe.cfg -d</code></pre><h3 id=\"配置服务器端192-168-0-206\"><a href=\"#配置服务器端192-168-0-206\" class=\"headerlink\" title=\"配置服务器端192.168.0.206\"></a>配置服务器端192.168.0.206</h3><pre><code>$ tree /etc/nagios\n.\n├── cgi.cfg  \n├── conf.d  # 添加新的监视客户端信息\n│   └── web_one.cfg\n├── nagios.cfg  # 配置服务器端nagios\n├── nrpe.cfg # 配置服务器端nrpe\n├── objects\n│   ├── commands.cfg\n│   ├── contacts.cfg\n│   ├── localhost.cfg\n│   ├── printer.cfg\n│   ├── switch.cfg\n│   ├── templates.cfg\n│   ├── timeperiods.cfg\n│   └── windows.cfg\n├── passwd\n└── private\n    └── resource.cfg\n$ cp /etc/nagios/objects/localhost.cfg  /etc/nagios/conf.d/web_one.cfg\n$ vim /etc/nagios/conf.d/web_one.cfg # 将localhost 改成web_one\ndefine host{\n        use                     linux-server  \n        host_name         web_one\n        alias                   web_one\n        address              192.168.0.208\n}\ndefine service{\n        use                             local-service \n        host_name                 web_one\n        service_description    PING\n        check_command        check_ping!100.0,20%!500.0,60%\n}</code></pre><h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p><img src=\"http://www.zhuohc.com/wp-content/uploads/2017/04/nagios.png\" alt=\"nagios\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装服务器端192-168-0-206\"><a href=\"#安装服务器端192-168-0-206\" class=\"headerlink\" title=\"安装服务器端192.168.0.206\"></a>安装服务器端192.168.0.206</h3><p>1,安装lamp环境 <a href=\"http://www.zhuohc.com/articles/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">参考</a> 2, 配置nagios服务</p>\n<pre><code># 创建nagiso用户\n$ sudo useradd nagios\n# 创建apache用户，yum安装httpd服务会自动创建\n$ sudo useradd apache -M -s /sbin/nologin\nuseradd：用户“apache”已存在\n# 创建nagcmd用户组\n$ sudo groupadd nagcmd\n# 将usermod加入nagcmd用户组\nsudo usermod -a -G nagcmd nagios\n# 将apache用户加入nagcmd用户组\n$ sudo usermod -a -G nagcmd apache\n# 查看nagios用户所属的组\n$ id -n -G nagios\nnagios nagcmd\n# 查看apace用户所属的组\n$ id -n -G apache\napache nagcmd\n# 安装nagiso服务\n$sudo yum install nagios\n$sudo yum install nagios-plugins-all\n# 安装nrpe（服务器端和客户端都需要安装）\n$sudo yum install nrpe\n# 启动和开机启动\n$sudo systemctl start nagios\n$sudo systemctl enable nagios\n$sudo systemctl start nrpe\n$sudo systemctl enable nrpe</code></pre><p>3,配置web</p>\n<pre><code># 取消认证\n$ sudo vim /etc/nagios/cgi.cfg\nuse_authentication=0 # 此处将1改为0\n# 查看配置文件\n$ls /etc/httpd/conf.d\nautoindex.conf  nagios.conf  php.conf  README  userdir.conf  welcome.conf  xcache.conf\n# 其中nagiso.conf就是nagios的web配置文件\n# 访问http://192.168.0.206/nagios，其中登陆密码在/etc/nagios/passwd文件中，具体文件位置可以在/etc/httpd/conf.d/nagios.conf中查看</code></pre><h3 id=\"安装客户端192-168-0-208\"><a href=\"#安装客户端192-168-0-208\" class=\"headerlink\" title=\"安装客户端192.168.0.208\"></a>安装客户端192.168.0.208</h3><pre><code># 安装mysql，参考上方链接，配合生成check_mysql插件\n# 安装nrpe（服务器端和客户端都需要安装）\n$ sudo yum -y install epel-release\n$ sudo yum install nrpe\n$ sudo yum install nagios-plugins-all\n# 配置nagios客户端\n$ sudo vim /etc/nagios/nrpe.cfg\nallowed_hosts=127.0.0.1,192.168.0.206 # 监控当前客户端的nagios服务器地址\n# 启动服务\n$ sudo systemctl restart nrpe\n$ sudo systemctl enable nrpe\n# 检查启动结果\n$ sudo netstat -lntup | grep nrpe\ntcp        0      0 0.0.0.0:5666            0.0.0.0:*               LISTEN      2540/nrpe           \ntcp6       0      0 :::5666                 :::*                    LISTEN      2540/nrpe\n$ sudo ps -ef | grep nrpe | grep -v grep\nnrpe      2540     1  0 11:59 ?        00:00:00 /usr/sbin/nrpe -c /etc/nagios/nrpe.cfg -d</code></pre><h3 id=\"配置服务器端192-168-0-206\"><a href=\"#配置服务器端192-168-0-206\" class=\"headerlink\" title=\"配置服务器端192.168.0.206\"></a>配置服务器端192.168.0.206</h3><pre><code>$ tree /etc/nagios\n.\n├── cgi.cfg  \n├── conf.d  # 添加新的监视客户端信息\n│   └── web_one.cfg\n├── nagios.cfg  # 配置服务器端nagios\n├── nrpe.cfg # 配置服务器端nrpe\n├── objects\n│   ├── commands.cfg\n│   ├── contacts.cfg\n│   ├── localhost.cfg\n│   ├── printer.cfg\n│   ├── switch.cfg\n│   ├── templates.cfg\n│   ├── timeperiods.cfg\n│   └── windows.cfg\n├── passwd\n└── private\n    └── resource.cfg\n$ cp /etc/nagios/objects/localhost.cfg  /etc/nagios/conf.d/web_one.cfg\n$ vim /etc/nagios/conf.d/web_one.cfg # 将localhost 改成web_one\ndefine host{\n        use                     linux-server  \n        host_name         web_one\n        alias                   web_one\n        address              192.168.0.208\n}\ndefine service{\n        use                             local-service \n        host_name                 web_one\n        service_description    PING\n        check_command        check_ping!100.0,20%!500.0,60%\n}</code></pre><h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p><img src=\"http://www.zhuohc.com/wp-content/uploads/2017/04/nagios.png\" alt=\"nagios\"></p>\n"},{"title":"java基础","url":"499.html","id":"499","comments":0,"date":"2018-01-31T01:44:05.000Z","_content":"\n### linux安装java开发环境\n\n    [root@localhost ~]# mkdir /usr/java\n    [root@localhost ~]# cd /usr/java\n    # 从官方网站下载javaLTS版本源码并复制到当前目录\n    # 下载地址: https://www.oracle.com/technetwork/java/javase/downloads/index.html\n    [root@localhost ~]# tar -zxvf jdk-11.0.3_linux-x64_bin.tar.gz && rm  jdk-11.0.3_linux-x64_bin.tar.gz\n    \n\n    # 设置环境变量\n    vi /etc/profile\n    #set java environment\n    JAVA_HOME=/usr/java/jdk-11.0.3\n    JRE_HOME=/usr/java/jdk-11.0.3/jre\n    CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\n    PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n    export JAVA_HOME JRE_HOME CLASS_PATH PATH\n    \n\n    # 验证\n    [root@localhost ~]# which java\n    /usr/java/jdk-11.0.3/bin/java\n    [root@localhost ~]# java -version\n    java version \"11.0.3\" 2019-04-16 LTS\n    Java(TM) SE Runtime Environment 18.9 (build 11.0.3+12-LTS)                                           \n    Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.3+12-LTS, mixed mode)","source":"_posts/java基础.md","raw":"---\ntitle: java基础\nurl: 499.html\nid: 499\ncomments: false\ncategories:\n  - 前端\ndate: 2018-01-31 09:44:05\ntags:\n---\n\n### linux安装java开发环境\n\n    [root@localhost ~]# mkdir /usr/java\n    [root@localhost ~]# cd /usr/java\n    # 从官方网站下载javaLTS版本源码并复制到当前目录\n    # 下载地址: https://www.oracle.com/technetwork/java/javase/downloads/index.html\n    [root@localhost ~]# tar -zxvf jdk-11.0.3_linux-x64_bin.tar.gz && rm  jdk-11.0.3_linux-x64_bin.tar.gz\n    \n\n    # 设置环境变量\n    vi /etc/profile\n    #set java environment\n    JAVA_HOME=/usr/java/jdk-11.0.3\n    JRE_HOME=/usr/java/jdk-11.0.3/jre\n    CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\n    PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n    export JAVA_HOME JRE_HOME CLASS_PATH PATH\n    \n\n    # 验证\n    [root@localhost ~]# which java\n    /usr/java/jdk-11.0.3/bin/java\n    [root@localhost ~]# java -version\n    java version \"11.0.3\" 2019-04-16 LTS\n    Java(TM) SE Runtime Environment 18.9 (build 11.0.3+12-LTS)                                           \n    Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.3+12-LTS, mixed mode)","slug":"java基础","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwse002bh3a475snpwuo","content":"<h3 id=\"linux安装java开发环境\"><a href=\"#linux安装java开发环境\" class=\"headerlink\" title=\"linux安装java开发环境\"></a>linux安装java开发环境</h3><pre><code>[root@localhost ~]# mkdir /usr/java\n[root@localhost ~]# cd /usr/java\n# 从官方网站下载javaLTS版本源码并复制到当前目录\n# 下载地址: https://www.oracle.com/technetwork/java/javase/downloads/index.html\n[root@localhost ~]# tar -zxvf jdk-11.0.3_linux-x64_bin.tar.gz &amp;&amp; rm  jdk-11.0.3_linux-x64_bin.tar.gz\n\n\n# 设置环境变量\nvi /etc/profile\n#set java environment\nJAVA_HOME=/usr/java/jdk-11.0.3\nJRE_HOME=/usr/java/jdk-11.0.3/jre\nCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nexport JAVA_HOME JRE_HOME CLASS_PATH PATH\n\n\n# 验证\n[root@localhost ~]# which java\n/usr/java/jdk-11.0.3/bin/java\n[root@localhost ~]# java -version\njava version &quot;11.0.3&quot; 2019-04-16 LTS\nJava(TM) SE Runtime Environment 18.9 (build 11.0.3+12-LTS)                                           \nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.3+12-LTS, mixed mode)</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"linux安装java开发环境\"><a href=\"#linux安装java开发环境\" class=\"headerlink\" title=\"linux安装java开发环境\"></a>linux安装java开发环境</h3><pre><code>[root@localhost ~]# mkdir /usr/java\n[root@localhost ~]# cd /usr/java\n# 从官方网站下载javaLTS版本源码并复制到当前目录\n# 下载地址: https://www.oracle.com/technetwork/java/javase/downloads/index.html\n[root@localhost ~]# tar -zxvf jdk-11.0.3_linux-x64_bin.tar.gz &amp;&amp; rm  jdk-11.0.3_linux-x64_bin.tar.gz\n\n\n# 设置环境变量\nvi /etc/profile\n#set java environment\nJAVA_HOME=/usr/java/jdk-11.0.3\nJRE_HOME=/usr/java/jdk-11.0.3/jre\nCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nexport JAVA_HOME JRE_HOME CLASS_PATH PATH\n\n\n# 验证\n[root@localhost ~]# which java\n/usr/java/jdk-11.0.3/bin/java\n[root@localhost ~]# java -version\njava version &quot;11.0.3&quot; 2019-04-16 LTS\nJava(TM) SE Runtime Environment 18.9 (build 11.0.3+12-LTS)                                           \nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.3+12-LTS, mixed mode)</code></pre>"},{"title":"centos7配置keepalived实现高可用集群","url":"161.html","id":"161","comments":0,"date":"2017-04-19T06:30:29.000Z","_content":"\n### CENTOS6.8 192.168.0.106 MASTER\n\n    # 安装\n    sudo yum install keepalived\n    # 配置\n    sudo vim /etc/keepalived/keepalived.conf\n    \n    ! Configuration File for keepalived\n    \n    global_defs {\n        # 这些信息是配置报警发邮件信息\n       notification_email {\n         acassen@firewall.loc\n         failover@firewall.loc\n         sysadmin@firewall.loc\n       }\n       notification_email_from Alexandre.Cassen@firewall.loc\n       smtp_server 192.168.200.1\n       smtp_connect_timeout 30\n         # 路由标识，同一局域网应该唯一\n       router_id lb01\n    }\n    vrrp_instance VI_1 {\n        # 当前角色是master\n        state MASTER\n            # 对外提供网络的接口\n        interface eth0\n            # 虚拟路由id标识，数字，必须和backup里相同实例一致\n        virtual_router_id 55\n            # 优先级，数字必须比backup大\n        priority 150\n        advert_int 1\n            # 权限认证，和backup一致\n        authentication {\n            auth_type PASS\n            auth_pass 1111\n        }\n        virtual_ipaddress {\n           192.168.0.200\n        }\n    }\n    \n    # 重启\n    sudo /etc/init.d/keepalived restart\n    # 查看结果\n    ip addr | grep 192.168.0.200\n    \n\n### CENTOS7.2 192.168.0.209 BACKUP\n\n    # 安装\n    sudo yum install keepalived\n    # 配置\n    sudo vim /etc/keepalived/keepalived.conf\n    \n    ! Configuration File for keepalived\n    \n    global_defs {\n       notification_email {\n         acassen@firewall.loc\n         failover@firewall.loc\n         sysadmin@firewall.loc\n       }\n       notification_email_from Alexandre.Cassen@firewall.loc\n       smtp_server 192.168.200.1\n       smtp_connect_timeout 30\n       router_id lb02  # 和master不一致\n    }\n    \n    vrrp_instance VI_1 {\n        state BACKUP      # 和MASTER不一致\n        interface enp0s3\n        virtual_router_id 55\n        priority 100      # 和master不一致\n        advert_int 1\n        authentication {\n            auth_type PASS\n            auth_pass 1111\n        }\n        virtual_ipaddress {\n            192.168.0.200\n        }\n    }\n    # 重启\n    sudo systemctl restart keepalived\n    # 查看结果\n    ip addr | grep 192.168.0.200\n    \n\n### CENTOS6.8 192.168.0.106 nginx配置\n\n    # nginx配置文件\n        server {\n            listen       192.168.0.200:80; # 这里需要指定虚拟vip监听\n            server_name  localhost;\n    \n            location / {\n                      # 只访问web站点\n               proxy_pass http://www_server_pools;\n            }\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n    \n\n### CENTOS7.2 192.168.0.209 配置nginx\n\n    # nginx配置文件\n       server {\n            listen       192.168.0.200:80;\n            server_name  localhost;\n    \n            location / {\n                         # 只访问phone站点\n               proxy_pass http://www_phone_pools;\n            }\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n    \n    \n\n### 测试结果\n\n    # 开启192.168.0.106，192.168.0.209的keepalive服务\n    \n    # 查看192.168.0.106\n    $ ip addr | grep 192.168.0.200\n    inet 192.168.0.200/32 scope global eth0 # 应该有这行结果\n    \n    # 查看192.168.0.209\n    $ ip addr | grep 192.168.0.200 # 结果应该为空，如果有结果，表示脑裂，检查相关配置和防火墙\n    \n    # 访问http://192.168.200 \n    curl 192.168.0.200 # 结果应该只访问web网站\n    \n    \n    # 关停192.168.0.106的keepalive服务\n    \n    # 访问http://192.168.200 \n    curl 192.168.0.200 # 结果应该只访问phone网站\n    \n    # 查看192.168.0.106\n    $ ip addr | grep 192.168.0.200\n    inet 192.168.0.200/32 scope global eth0 # 结果应该为空\n    \n    # 查看192.168.0.209\n    $ ip addr | grep 192.168.0.200 \n    inet 192.168.0.200/32 scope global enp0s3 # 此时有这行结果\n    \n    # 重启192.168.0.106的keepalive服务，应该恢复之前的测试结果","source":"_posts/centos7配置keepalived实现高可用集群.md","raw":"---\ntitle: centos7配置keepalived实现高可用集群\nurl: 161.html\nid: 161\ncomments: false\ncategories:\n  - 运维\ndate: 2017-04-19 14:30:29\ntags:\n---\n\n### CENTOS6.8 192.168.0.106 MASTER\n\n    # 安装\n    sudo yum install keepalived\n    # 配置\n    sudo vim /etc/keepalived/keepalived.conf\n    \n    ! Configuration File for keepalived\n    \n    global_defs {\n        # 这些信息是配置报警发邮件信息\n       notification_email {\n         acassen@firewall.loc\n         failover@firewall.loc\n         sysadmin@firewall.loc\n       }\n       notification_email_from Alexandre.Cassen@firewall.loc\n       smtp_server 192.168.200.1\n       smtp_connect_timeout 30\n         # 路由标识，同一局域网应该唯一\n       router_id lb01\n    }\n    vrrp_instance VI_1 {\n        # 当前角色是master\n        state MASTER\n            # 对外提供网络的接口\n        interface eth0\n            # 虚拟路由id标识，数字，必须和backup里相同实例一致\n        virtual_router_id 55\n            # 优先级，数字必须比backup大\n        priority 150\n        advert_int 1\n            # 权限认证，和backup一致\n        authentication {\n            auth_type PASS\n            auth_pass 1111\n        }\n        virtual_ipaddress {\n           192.168.0.200\n        }\n    }\n    \n    # 重启\n    sudo /etc/init.d/keepalived restart\n    # 查看结果\n    ip addr | grep 192.168.0.200\n    \n\n### CENTOS7.2 192.168.0.209 BACKUP\n\n    # 安装\n    sudo yum install keepalived\n    # 配置\n    sudo vim /etc/keepalived/keepalived.conf\n    \n    ! Configuration File for keepalived\n    \n    global_defs {\n       notification_email {\n         acassen@firewall.loc\n         failover@firewall.loc\n         sysadmin@firewall.loc\n       }\n       notification_email_from Alexandre.Cassen@firewall.loc\n       smtp_server 192.168.200.1\n       smtp_connect_timeout 30\n       router_id lb02  # 和master不一致\n    }\n    \n    vrrp_instance VI_1 {\n        state BACKUP      # 和MASTER不一致\n        interface enp0s3\n        virtual_router_id 55\n        priority 100      # 和master不一致\n        advert_int 1\n        authentication {\n            auth_type PASS\n            auth_pass 1111\n        }\n        virtual_ipaddress {\n            192.168.0.200\n        }\n    }\n    # 重启\n    sudo systemctl restart keepalived\n    # 查看结果\n    ip addr | grep 192.168.0.200\n    \n\n### CENTOS6.8 192.168.0.106 nginx配置\n\n    # nginx配置文件\n        server {\n            listen       192.168.0.200:80; # 这里需要指定虚拟vip监听\n            server_name  localhost;\n    \n            location / {\n                      # 只访问web站点\n               proxy_pass http://www_server_pools;\n            }\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n    \n\n### CENTOS7.2 192.168.0.209 配置nginx\n\n    # nginx配置文件\n       server {\n            listen       192.168.0.200:80;\n            server_name  localhost;\n    \n            location / {\n                         # 只访问phone站点\n               proxy_pass http://www_phone_pools;\n            }\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n    \n    \n\n### 测试结果\n\n    # 开启192.168.0.106，192.168.0.209的keepalive服务\n    \n    # 查看192.168.0.106\n    $ ip addr | grep 192.168.0.200\n    inet 192.168.0.200/32 scope global eth0 # 应该有这行结果\n    \n    # 查看192.168.0.209\n    $ ip addr | grep 192.168.0.200 # 结果应该为空，如果有结果，表示脑裂，检查相关配置和防火墙\n    \n    # 访问http://192.168.200 \n    curl 192.168.0.200 # 结果应该只访问web网站\n    \n    \n    # 关停192.168.0.106的keepalive服务\n    \n    # 访问http://192.168.200 \n    curl 192.168.0.200 # 结果应该只访问phone网站\n    \n    # 查看192.168.0.106\n    $ ip addr | grep 192.168.0.200\n    inet 192.168.0.200/32 scope global eth0 # 结果应该为空\n    \n    # 查看192.168.0.209\n    $ ip addr | grep 192.168.0.200 \n    inet 192.168.0.200/32 scope global enp0s3 # 此时有这行结果\n    \n    # 重启192.168.0.106的keepalive服务，应该恢复之前的测试结果","slug":"centos7配置keepalived实现高可用集群","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsf002eh3a4qdqeh01u","content":"<h3 id=\"CENTOS6-8-192-168-0-106-MASTER\"><a href=\"#CENTOS6-8-192-168-0-106-MASTER\" class=\"headerlink\" title=\"CENTOS6.8 192.168.0.106 MASTER\"></a>CENTOS6.8 192.168.0.106 MASTER</h3><pre><code># 安装\nsudo yum install keepalived\n# 配置\nsudo vim /etc/keepalived/keepalived.conf\n\n! Configuration File for keepalived\n\nglobal_defs {\n    # 这些信息是配置报警发邮件信息\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.200.1\n   smtp_connect_timeout 30\n     # 路由标识，同一局域网应该唯一\n   router_id lb01\n}\nvrrp_instance VI_1 {\n    # 当前角色是master\n    state MASTER\n        # 对外提供网络的接口\n    interface eth0\n        # 虚拟路由id标识，数字，必须和backup里相同实例一致\n    virtual_router_id 55\n        # 优先级，数字必须比backup大\n    priority 150\n    advert_int 1\n        # 权限认证，和backup一致\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n       192.168.0.200\n    }\n}\n\n# 重启\nsudo /etc/init.d/keepalived restart\n# 查看结果\nip addr | grep 192.168.0.200</code></pre><h3 id=\"CENTOS7-2-192-168-0-209-BACKUP\"><a href=\"#CENTOS7-2-192-168-0-209-BACKUP\" class=\"headerlink\" title=\"CENTOS7.2 192.168.0.209 BACKUP\"></a>CENTOS7.2 192.168.0.209 BACKUP</h3><pre><code># 安装\nsudo yum install keepalived\n# 配置\nsudo vim /etc/keepalived/keepalived.conf\n\n! Configuration File for keepalived\n\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.200.1\n   smtp_connect_timeout 30\n   router_id lb02  # 和master不一致\n}\n\nvrrp_instance VI_1 {\n    state BACKUP      # 和MASTER不一致\n    interface enp0s3\n    virtual_router_id 55\n    priority 100      # 和master不一致\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.0.200\n    }\n}\n# 重启\nsudo systemctl restart keepalived\n# 查看结果\nip addr | grep 192.168.0.200</code></pre><h3 id=\"CENTOS6-8-192-168-0-106-nginx配置\"><a href=\"#CENTOS6-8-192-168-0-106-nginx配置\" class=\"headerlink\" title=\"CENTOS6.8 192.168.0.106 nginx配置\"></a>CENTOS6.8 192.168.0.106 nginx配置</h3><pre><code># nginx配置文件\n    server {\n        listen       192.168.0.200:80; # 这里需要指定虚拟vip监听\n        server_name  localhost;\n\n        location / {\n                  # 只访问web站点\n           proxy_pass http://www_server_pools;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }</code></pre><h3 id=\"CENTOS7-2-192-168-0-209-配置nginx\"><a href=\"#CENTOS7-2-192-168-0-209-配置nginx\" class=\"headerlink\" title=\"CENTOS7.2 192.168.0.209 配置nginx\"></a>CENTOS7.2 192.168.0.209 配置nginx</h3><pre><code># nginx配置文件\n   server {\n        listen       192.168.0.200:80;\n        server_name  localhost;\n\n        location / {\n                     # 只访问phone站点\n           proxy_pass http://www_phone_pools;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }</code></pre><h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><pre><code># 开启192.168.0.106，192.168.0.209的keepalive服务\n\n# 查看192.168.0.106\n$ ip addr | grep 192.168.0.200\ninet 192.168.0.200/32 scope global eth0 # 应该有这行结果\n\n# 查看192.168.0.209\n$ ip addr | grep 192.168.0.200 # 结果应该为空，如果有结果，表示脑裂，检查相关配置和防火墙\n\n# 访问http://192.168.200 \ncurl 192.168.0.200 # 结果应该只访问web网站\n\n\n# 关停192.168.0.106的keepalive服务\n\n# 访问http://192.168.200 \ncurl 192.168.0.200 # 结果应该只访问phone网站\n\n# 查看192.168.0.106\n$ ip addr | grep 192.168.0.200\ninet 192.168.0.200/32 scope global eth0 # 结果应该为空\n\n# 查看192.168.0.209\n$ ip addr | grep 192.168.0.200 \ninet 192.168.0.200/32 scope global enp0s3 # 此时有这行结果\n\n# 重启192.168.0.106的keepalive服务，应该恢复之前的测试结果</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CENTOS6-8-192-168-0-106-MASTER\"><a href=\"#CENTOS6-8-192-168-0-106-MASTER\" class=\"headerlink\" title=\"CENTOS6.8 192.168.0.106 MASTER\"></a>CENTOS6.8 192.168.0.106 MASTER</h3><pre><code># 安装\nsudo yum install keepalived\n# 配置\nsudo vim /etc/keepalived/keepalived.conf\n\n! Configuration File for keepalived\n\nglobal_defs {\n    # 这些信息是配置报警发邮件信息\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.200.1\n   smtp_connect_timeout 30\n     # 路由标识，同一局域网应该唯一\n   router_id lb01\n}\nvrrp_instance VI_1 {\n    # 当前角色是master\n    state MASTER\n        # 对外提供网络的接口\n    interface eth0\n        # 虚拟路由id标识，数字，必须和backup里相同实例一致\n    virtual_router_id 55\n        # 优先级，数字必须比backup大\n    priority 150\n    advert_int 1\n        # 权限认证，和backup一致\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n       192.168.0.200\n    }\n}\n\n# 重启\nsudo /etc/init.d/keepalived restart\n# 查看结果\nip addr | grep 192.168.0.200</code></pre><h3 id=\"CENTOS7-2-192-168-0-209-BACKUP\"><a href=\"#CENTOS7-2-192-168-0-209-BACKUP\" class=\"headerlink\" title=\"CENTOS7.2 192.168.0.209 BACKUP\"></a>CENTOS7.2 192.168.0.209 BACKUP</h3><pre><code># 安装\nsudo yum install keepalived\n# 配置\nsudo vim /etc/keepalived/keepalived.conf\n\n! Configuration File for keepalived\n\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.200.1\n   smtp_connect_timeout 30\n   router_id lb02  # 和master不一致\n}\n\nvrrp_instance VI_1 {\n    state BACKUP      # 和MASTER不一致\n    interface enp0s3\n    virtual_router_id 55\n    priority 100      # 和master不一致\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.0.200\n    }\n}\n# 重启\nsudo systemctl restart keepalived\n# 查看结果\nip addr | grep 192.168.0.200</code></pre><h3 id=\"CENTOS6-8-192-168-0-106-nginx配置\"><a href=\"#CENTOS6-8-192-168-0-106-nginx配置\" class=\"headerlink\" title=\"CENTOS6.8 192.168.0.106 nginx配置\"></a>CENTOS6.8 192.168.0.106 nginx配置</h3><pre><code># nginx配置文件\n    server {\n        listen       192.168.0.200:80; # 这里需要指定虚拟vip监听\n        server_name  localhost;\n\n        location / {\n                  # 只访问web站点\n           proxy_pass http://www_server_pools;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }</code></pre><h3 id=\"CENTOS7-2-192-168-0-209-配置nginx\"><a href=\"#CENTOS7-2-192-168-0-209-配置nginx\" class=\"headerlink\" title=\"CENTOS7.2 192.168.0.209 配置nginx\"></a>CENTOS7.2 192.168.0.209 配置nginx</h3><pre><code># nginx配置文件\n   server {\n        listen       192.168.0.200:80;\n        server_name  localhost;\n\n        location / {\n                     # 只访问phone站点\n           proxy_pass http://www_phone_pools;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }</code></pre><h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><pre><code># 开启192.168.0.106，192.168.0.209的keepalive服务\n\n# 查看192.168.0.106\n$ ip addr | grep 192.168.0.200\ninet 192.168.0.200/32 scope global eth0 # 应该有这行结果\n\n# 查看192.168.0.209\n$ ip addr | grep 192.168.0.200 # 结果应该为空，如果有结果，表示脑裂，检查相关配置和防火墙\n\n# 访问http://192.168.200 \ncurl 192.168.0.200 # 结果应该只访问web网站\n\n\n# 关停192.168.0.106的keepalive服务\n\n# 访问http://192.168.200 \ncurl 192.168.0.200 # 结果应该只访问phone网站\n\n# 查看192.168.0.106\n$ ip addr | grep 192.168.0.200\ninet 192.168.0.200/32 scope global eth0 # 结果应该为空\n\n# 查看192.168.0.209\n$ ip addr | grep 192.168.0.200 \ninet 192.168.0.200/32 scope global enp0s3 # 此时有这行结果\n\n# 重启192.168.0.106的keepalive服务，应该恢复之前的测试结果</code></pre>"},{"title":"linux命令记录","url":"219.html","id":"219","comments":0,"date":"2017-11-08T06:41:40.000Z","_content":"\n### 查看文件夹大小\n\n    du -h your_path --max-depth=1\n    \n\n#### 常见命令\n\n> -a或-all 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或–total 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。 -D或–dereference-args 显示指定符号连接的源文件大小。 -h或–human-readable 以K，M，G为单位，提高信息的可读性。 -H或–si 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。 -k或–kilobytes 以1024 bytes为单位。 -l或–count-links 重复计算硬件连接的文件。 -L<符号连接>或–dereference<符号连接> 显示选项中所指定符号连接的源文件大小。 -m或–megabytes 以1MB为单位。 -s或–summarize 仅显示总计，即当前目录的大小。 -S或–separate-dirs 显示每个目录的大小时，并不含其子目录的大小。 -x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X<文件>或–exclude-from=<文件> 在<文件>指定目录或文件。 –exclude=<目录或文件> 略过指定的目录或文件。 –max-depth=<目录层数> 超过指定层数的目录后，予以忽略。 –help 显示帮助。 –version 显示版本信息","source":"_posts/linux命令记录.md","raw":"---\ntitle: linux命令记录\nurl: 219.html\nid: 219\ncomments: false\ncategories:\n  - 运维\ndate: 2017-11-08 14:41:40\ntags:\n---\n\n### 查看文件夹大小\n\n    du -h your_path --max-depth=1\n    \n\n#### 常见命令\n\n> -a或-all 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或–total 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。 -D或–dereference-args 显示指定符号连接的源文件大小。 -h或–human-readable 以K，M，G为单位，提高信息的可读性。 -H或–si 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。 -k或–kilobytes 以1024 bytes为单位。 -l或–count-links 重复计算硬件连接的文件。 -L<符号连接>或–dereference<符号连接> 显示选项中所指定符号连接的源文件大小。 -m或–megabytes 以1MB为单位。 -s或–summarize 仅显示总计，即当前目录的大小。 -S或–separate-dirs 显示每个目录的大小时，并不含其子目录的大小。 -x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X<文件>或–exclude-from=<文件> 在<文件>指定目录或文件。 –exclude=<目录或文件> 略过指定的目录或文件。 –max-depth=<目录层数> 超过指定层数的目录后，予以忽略。 –help 显示帮助。 –version 显示版本信息","slug":"linux命令记录","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsf002hh3a4724ailfk","content":"<h3 id=\"查看文件夹大小\"><a href=\"#查看文件夹大小\" class=\"headerlink\" title=\"查看文件夹大小\"></a>查看文件夹大小</h3><pre><code>du -h your_path --max-depth=1</code></pre><h4 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h4><blockquote>\n<p>-a或-all 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或–total 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。 -D或–dereference-args 显示指定符号连接的源文件大小。 -h或–human-readable 以K，M，G为单位，提高信息的可读性。 -H或–si 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。 -k或–kilobytes 以1024 bytes为单位。 -l或–count-links 重复计算硬件连接的文件。 -L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。 -m或–megabytes 以1MB为单位。 -s或–summarize 仅显示总计，即当前目录的大小。 -S或–separate-dirs 显示每个目录的大小时，并不含其子目录的大小。 -x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。 –exclude=&lt;目录或文件&gt; 略过指定的目录或文件。 –max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。 –help 显示帮助。 –version 显示版本信息</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查看文件夹大小\"><a href=\"#查看文件夹大小\" class=\"headerlink\" title=\"查看文件夹大小\"></a>查看文件夹大小</h3><pre><code>du -h your_path --max-depth=1</code></pre><h4 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h4><blockquote>\n<p>-a或-all 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或–total 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。 -D或–dereference-args 显示指定符号连接的源文件大小。 -h或–human-readable 以K，M，G为单位，提高信息的可读性。 -H或–si 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。 -k或–kilobytes 以1024 bytes为单位。 -l或–count-links 重复计算硬件连接的文件。 -L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。 -m或–megabytes 以1MB为单位。 -s或–summarize 仅显示总计，即当前目录的大小。 -S或–separate-dirs 显示每个目录的大小时，并不含其子目录的大小。 -x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。 –exclude=&lt;目录或文件&gt; 略过指定的目录或文件。 –max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。 –help 显示帮助。 –version 显示版本信息</p>\n</blockquote>\n"},{"title":"ubuntu本地配置SSL","url":"199.html","id":"199","comments":0,"date":"2017-11-07T03:25:08.000Z","_content":"\n    # 安装相关模块\n    sudo a2enmod ssl   //启用ssl模块\n    sudo apt-get install openssl  //安装openssl\n    \n\n    # 创建证书\n    openssl genrsa -des3 -out server.key 1024  //创建CA签名(不使用密码去除-des3选项)\n    openssl req -new -key server.key -out server.csr  //创建CSR(Certificate Signing Request)\n    openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  //自己签发证书\n    sudo cp server.crt /etc/ssl/certs\n    sudo cp server.key /etc/ssl/private\n    \n\n    # 修改虚拟主机信息\n    在<VirtualHost *:80>段中，DocumentRoot一行的下方加入内容：\n    SSLEngine On\n    SSLOptions +StrictRequire\n    SSLCertificateFile /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    端口修改为：443，即<VirtualHost *:443>(ssl的端口)\n    \n\n    # 重启apache2\n    sudo /etc/init.d/apache2 force-reload\n    sudo /etc/init.d/apache2 restart","source":"_posts/ubuntu本地配置SSL.md","raw":"---\ntitle: ubuntu本地配置SSL\nurl: 199.html\nid: 199\ncomments: false\ncategories:\n  - 运维\ndate: 2017-11-07 11:25:08\ntags:\n---\n\n    # 安装相关模块\n    sudo a2enmod ssl   //启用ssl模块\n    sudo apt-get install openssl  //安装openssl\n    \n\n    # 创建证书\n    openssl genrsa -des3 -out server.key 1024  //创建CA签名(不使用密码去除-des3选项)\n    openssl req -new -key server.key -out server.csr  //创建CSR(Certificate Signing Request)\n    openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  //自己签发证书\n    sudo cp server.crt /etc/ssl/certs\n    sudo cp server.key /etc/ssl/private\n    \n\n    # 修改虚拟主机信息\n    在<VirtualHost *:80>段中，DocumentRoot一行的下方加入内容：\n    SSLEngine On\n    SSLOptions +StrictRequire\n    SSLCertificateFile /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    端口修改为：443，即<VirtualHost *:443>(ssl的端口)\n    \n\n    # 重启apache2\n    sudo /etc/init.d/apache2 force-reload\n    sudo /etc/init.d/apache2 restart","slug":"ubuntu本地配置SSL","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsg002lh3a4rcaxn6mw","content":"<pre><code># 安装相关模块\nsudo a2enmod ssl   //启用ssl模块\nsudo apt-get install openssl  //安装openssl\n\n\n# 创建证书\nopenssl genrsa -des3 -out server.key 1024  //创建CA签名(不使用密码去除-des3选项)\nopenssl req -new -key server.key -out server.csr  //创建CSR(Certificate Signing Request)\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  //自己签发证书\nsudo cp server.crt /etc/ssl/certs\nsudo cp server.key /etc/ssl/private\n\n\n# 修改虚拟主机信息\n在&lt;VirtualHost *:80&gt;段中，DocumentRoot一行的下方加入内容：\nSSLEngine On\nSSLOptions +StrictRequire\nSSLCertificateFile /etc/ssl/certs/server.crt\nSSLCertificateKeyFile /etc/ssl/private/server.key\n端口修改为：443，即&lt;VirtualHost *:443&gt;(ssl的端口)\n\n\n# 重启apache2\nsudo /etc/init.d/apache2 force-reload\nsudo /etc/init.d/apache2 restart</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code># 安装相关模块\nsudo a2enmod ssl   //启用ssl模块\nsudo apt-get install openssl  //安装openssl\n\n\n# 创建证书\nopenssl genrsa -des3 -out server.key 1024  //创建CA签名(不使用密码去除-des3选项)\nopenssl req -new -key server.key -out server.csr  //创建CSR(Certificate Signing Request)\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  //自己签发证书\nsudo cp server.crt /etc/ssl/certs\nsudo cp server.key /etc/ssl/private\n\n\n# 修改虚拟主机信息\n在&lt;VirtualHost *:80&gt;段中，DocumentRoot一行的下方加入内容：\nSSLEngine On\nSSLOptions +StrictRequire\nSSLCertificateFile /etc/ssl/certs/server.crt\nSSLCertificateKeyFile /etc/ssl/private/server.key\n端口修改为：443，即&lt;VirtualHost *:443&gt;(ssl的端口)\n\n\n# 重启apache2\nsudo /etc/init.d/apache2 force-reload\nsudo /etc/init.d/apache2 restart</code></pre>"},{"title":"postgresql使用","url":"528.html","id":"528","comments":0,"date":"2018-08-07T05:55:57.000Z","_content":"\n#### 安装\n\n[ubuntu安装](https://www.postgresql.org/download/linux/ubuntu/) [centos安装](https://www.postgresql.org/download/linux/redhat/) centos7.2 安装postgresql9.6\n\n    # 添加RPM\n    yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm\n    \n    # 安装PostgreSQL 9.6\n    # postgresql96-server 数据库核心服务端\n    # postgresql96-contrib 附加第三方扩展\n    # postgresql96-devel C语言开发Header头文件和库\n    yum install postgresql96-server postgresql96-contrib postgresql96-devel\n    \n    # 验证是否安装成功\n    rpm -aq| grep postgres\n    \n\n    # 设置目录（可省略）\n    cd /mnt\n    sudo mkdir vdb1\n    sudo chown -R postgres:postgres vdb1\n    sudo chmod 700 vdb1\n    vi /usr/lib/systemd/system/postgresql-9.6.service\n    Environment=PGDATA=/mnt/vdb1/ 修改为自己的新的数据路径\n    \n\n    # 初始化数据库\n    sudo /usr/pgsql-9.6/bin/postgresql96-setup initdb\n    # 开启服务\n    sudo service postgresql-9.6 start 或者 systemctl start postgresql-9.6.service\n    # 开机启动\n    sudo sudo chkconfig postgresql-9.6 on 或者 systemctl enable postgresql-9.6.service\n    \n\n    # 配置文件\n     /var/lib/pgsql/9.6/data/postgresql.conf 通用设置\n     /var/lib/pgsql/9.6/data/pg_hba.conf  控制访问安全\n     /var/lib/pgsql/9.6/data/pg_ident.conf 配合pg_hba.conf使用  \n    \n\n    sudo su postgres\n    psql # 进入命令行模式\n    # 修改密码\n    ALTER USER postgres WITH PASSWORD '密码'; \n    # 创建用户\n    CREATE USER userdoneself WITH PASSWORD '密码passworddoneself';\n    # 创建数据库\n    create --encoding=UTF8 database dbdoneself owner userdoneself;\n    # 赋予权限\n    grant all privileges on database dbdoneself to userdoneself;\n    \\q\n    # 安装postgresql时，系统会自动创建postgres用户\n    \n\n    # 开启远程访问\n    vi /var/lib/pgsql/9.6/data/postgresql.conf 或者  vi /mnt/vdb1/postgresql.conf(创建了目录)\n    \n    修改#listen_addresses = 'localhost' 为  listen_addresses='*'\n    \n\n    # 连接数据库\n    先配置登录权限\n    vim pg_hba.conf\n    # 是否远程登录 数据库 用户名 ip地段 方式\n    # 允许doneself用户远程访问\n    host doneself doneself 127.0.0.1/32 md5\n    # 允许管理员密码登录\n    local all postgres  md5\n    # 如果不知道怎么配置， 将全部登录方式改成md5\n    \n    # 查看版本\n    /usr/pgsql-9.6/bin/psql --version\n    \n\n#### 安装postgis2\n\ncentos7.2\n\n    sudo yum install postgis2_96  # 96和安装的postgresql一致\n    sudo yum install ogr_fdw96  # 安装ogrfdw\n    sudo yum install pgrouting_96 # 安装pgrouting\n    \n\n    # 用管理员登录postgerysql\n    >-- Enable PostGIS (includes raster)\n    CREATE EXTENSION postgis;\n    -- Enable Topology\n    CREATE EXTENSION postgis_topology;\n    -- Enable PostGIS Advanced 3D\n    -- and other geoprocessing algorithms\n    -- sfcgal not available with all distributions\n    CREATE EXTENSION postgis_sfcgal;\n    -- fuzzy matching needed for Tiger\n    CREATE EXTENSION fuzzystrmatch;\n    -- rule based standardizer\n    CREATE EXTENSION address_standardizer;\n    -- example rule data set\n    CREATE EXTENSION address_standardizer_data_us;\n    -- Enable US Tiger Geocoder\n    CREATE EXTENSION postgis_tiger_geocoder;\n    \n    # 验证是否安装成功\n    #postgres=> postgis_full_version();\n    \n\n#### 安装postgresql中文全文搜索zhparser\n\ncentos7.2\n\n     yum install bzip2  # 安装解压包\n     # 安装SCWS中文分词 https://github.com/hightman/scws\n     wget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2\n     tar -jxvf scws-1.2.3.tar.bz2 \n     cd scws-1.2.3\n     ./configure\n     make install\n     # 测试\n     scws '请问怎么自己动手做西红柿蛋炒饭' -c utf-8\n     # 安装zhparser\n     git clone https://github.com/amutu/zhparser.git\n     cd zhparser\n    export PATH=$PATH:/usr/pgsql-9.6/bin/\n    cmake && make install\n    \n\n    # 登录（第一次登录）\n    > sudo su - postgres\n    # 修改可以md5登录后\n    > > psql -U user -D database -W\n    >  输入口令\n    # 创建用户\n    user=>  CREATE USER dbuser WITH PASSWORD 'password';\n    # 修改密码\n    user=>  ALTER USER dbuser WITH PASSWORD 'newpassword';\n    # 赋予权限\n    user=>  GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;\n    # 允许用户创建数据库\n    user=> ALTER USER doneself CREATEDB;\n    # 设置为超级管理员\n    user=> ALTER ROLE doneself SUPERUSER;\n    # 创建数据库\n    user=>  Create database exampledb owner=dbuser  template= template1  ENCODING = 'UTF8';\n    # 选择数据库\n    user=> \\c database\n    # 查看当前数据库所有表\n    user=>  \\dt\n    user=>  \\d 数据库 —— 得到所有表的名字\n    user=>  \\d 表名 —— 得到表结构","source":"_posts/postgresql使用.md","raw":"---\ntitle: postgresql使用\nurl: 528.html\nid: 528\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2018-08-07 13:55:57\ntags:\n---\n\n#### 安装\n\n[ubuntu安装](https://www.postgresql.org/download/linux/ubuntu/) [centos安装](https://www.postgresql.org/download/linux/redhat/) centos7.2 安装postgresql9.6\n\n    # 添加RPM\n    yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm\n    \n    # 安装PostgreSQL 9.6\n    # postgresql96-server 数据库核心服务端\n    # postgresql96-contrib 附加第三方扩展\n    # postgresql96-devel C语言开发Header头文件和库\n    yum install postgresql96-server postgresql96-contrib postgresql96-devel\n    \n    # 验证是否安装成功\n    rpm -aq| grep postgres\n    \n\n    # 设置目录（可省略）\n    cd /mnt\n    sudo mkdir vdb1\n    sudo chown -R postgres:postgres vdb1\n    sudo chmod 700 vdb1\n    vi /usr/lib/systemd/system/postgresql-9.6.service\n    Environment=PGDATA=/mnt/vdb1/ 修改为自己的新的数据路径\n    \n\n    # 初始化数据库\n    sudo /usr/pgsql-9.6/bin/postgresql96-setup initdb\n    # 开启服务\n    sudo service postgresql-9.6 start 或者 systemctl start postgresql-9.6.service\n    # 开机启动\n    sudo sudo chkconfig postgresql-9.6 on 或者 systemctl enable postgresql-9.6.service\n    \n\n    # 配置文件\n     /var/lib/pgsql/9.6/data/postgresql.conf 通用设置\n     /var/lib/pgsql/9.6/data/pg_hba.conf  控制访问安全\n     /var/lib/pgsql/9.6/data/pg_ident.conf 配合pg_hba.conf使用  \n    \n\n    sudo su postgres\n    psql # 进入命令行模式\n    # 修改密码\n    ALTER USER postgres WITH PASSWORD '密码'; \n    # 创建用户\n    CREATE USER userdoneself WITH PASSWORD '密码passworddoneself';\n    # 创建数据库\n    create --encoding=UTF8 database dbdoneself owner userdoneself;\n    # 赋予权限\n    grant all privileges on database dbdoneself to userdoneself;\n    \\q\n    # 安装postgresql时，系统会自动创建postgres用户\n    \n\n    # 开启远程访问\n    vi /var/lib/pgsql/9.6/data/postgresql.conf 或者  vi /mnt/vdb1/postgresql.conf(创建了目录)\n    \n    修改#listen_addresses = 'localhost' 为  listen_addresses='*'\n    \n\n    # 连接数据库\n    先配置登录权限\n    vim pg_hba.conf\n    # 是否远程登录 数据库 用户名 ip地段 方式\n    # 允许doneself用户远程访问\n    host doneself doneself 127.0.0.1/32 md5\n    # 允许管理员密码登录\n    local all postgres  md5\n    # 如果不知道怎么配置， 将全部登录方式改成md5\n    \n    # 查看版本\n    /usr/pgsql-9.6/bin/psql --version\n    \n\n#### 安装postgis2\n\ncentos7.2\n\n    sudo yum install postgis2_96  # 96和安装的postgresql一致\n    sudo yum install ogr_fdw96  # 安装ogrfdw\n    sudo yum install pgrouting_96 # 安装pgrouting\n    \n\n    # 用管理员登录postgerysql\n    >-- Enable PostGIS (includes raster)\n    CREATE EXTENSION postgis;\n    -- Enable Topology\n    CREATE EXTENSION postgis_topology;\n    -- Enable PostGIS Advanced 3D\n    -- and other geoprocessing algorithms\n    -- sfcgal not available with all distributions\n    CREATE EXTENSION postgis_sfcgal;\n    -- fuzzy matching needed for Tiger\n    CREATE EXTENSION fuzzystrmatch;\n    -- rule based standardizer\n    CREATE EXTENSION address_standardizer;\n    -- example rule data set\n    CREATE EXTENSION address_standardizer_data_us;\n    -- Enable US Tiger Geocoder\n    CREATE EXTENSION postgis_tiger_geocoder;\n    \n    # 验证是否安装成功\n    #postgres=> postgis_full_version();\n    \n\n#### 安装postgresql中文全文搜索zhparser\n\ncentos7.2\n\n     yum install bzip2  # 安装解压包\n     # 安装SCWS中文分词 https://github.com/hightman/scws\n     wget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2\n     tar -jxvf scws-1.2.3.tar.bz2 \n     cd scws-1.2.3\n     ./configure\n     make install\n     # 测试\n     scws '请问怎么自己动手做西红柿蛋炒饭' -c utf-8\n     # 安装zhparser\n     git clone https://github.com/amutu/zhparser.git\n     cd zhparser\n    export PATH=$PATH:/usr/pgsql-9.6/bin/\n    cmake && make install\n    \n\n    # 登录（第一次登录）\n    > sudo su - postgres\n    # 修改可以md5登录后\n    > > psql -U user -D database -W\n    >  输入口令\n    # 创建用户\n    user=>  CREATE USER dbuser WITH PASSWORD 'password';\n    # 修改密码\n    user=>  ALTER USER dbuser WITH PASSWORD 'newpassword';\n    # 赋予权限\n    user=>  GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;\n    # 允许用户创建数据库\n    user=> ALTER USER doneself CREATEDB;\n    # 设置为超级管理员\n    user=> ALTER ROLE doneself SUPERUSER;\n    # 创建数据库\n    user=>  Create database exampledb owner=dbuser  template= template1  ENCODING = 'UTF8';\n    # 选择数据库\n    user=> \\c database\n    # 查看当前数据库所有表\n    user=>  \\dt\n    user=>  \\d 数据库 —— 得到所有表的名字\n    user=>  \\d 表名 —— 得到表结构","slug":"postgresql使用","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsh002nh3a493s0ts5d","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.postgresql.org/download/linux/ubuntu/\" target=\"_blank\" rel=\"noopener\">ubuntu安装</a> <a href=\"https://www.postgresql.org/download/linux/redhat/\" target=\"_blank\" rel=\"noopener\">centos安装</a> centos7.2 安装postgresql9.6</p>\n<pre><code># 添加RPM\nyum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm\n\n# 安装PostgreSQL 9.6\n# postgresql96-server 数据库核心服务端\n# postgresql96-contrib 附加第三方扩展\n# postgresql96-devel C语言开发Header头文件和库\nyum install postgresql96-server postgresql96-contrib postgresql96-devel\n\n# 验证是否安装成功\nrpm -aq| grep postgres\n\n\n# 设置目录（可省略）\ncd /mnt\nsudo mkdir vdb1\nsudo chown -R postgres:postgres vdb1\nsudo chmod 700 vdb1\nvi /usr/lib/systemd/system/postgresql-9.6.service\nEnvironment=PGDATA=/mnt/vdb1/ 修改为自己的新的数据路径\n\n\n# 初始化数据库\nsudo /usr/pgsql-9.6/bin/postgresql96-setup initdb\n# 开启服务\nsudo service postgresql-9.6 start 或者 systemctl start postgresql-9.6.service\n# 开机启动\nsudo sudo chkconfig postgresql-9.6 on 或者 systemctl enable postgresql-9.6.service\n\n\n# 配置文件\n /var/lib/pgsql/9.6/data/postgresql.conf 通用设置\n /var/lib/pgsql/9.6/data/pg_hba.conf  控制访问安全\n /var/lib/pgsql/9.6/data/pg_ident.conf 配合pg_hba.conf使用  \n\n\nsudo su postgres\npsql # 进入命令行模式\n# 修改密码\nALTER USER postgres WITH PASSWORD &apos;密码&apos;; \n# 创建用户\nCREATE USER userdoneself WITH PASSWORD &apos;密码passworddoneself&apos;;\n# 创建数据库\ncreate --encoding=UTF8 database dbdoneself owner userdoneself;\n# 赋予权限\ngrant all privileges on database dbdoneself to userdoneself;\n\\q\n# 安装postgresql时，系统会自动创建postgres用户\n\n\n# 开启远程访问\nvi /var/lib/pgsql/9.6/data/postgresql.conf 或者  vi /mnt/vdb1/postgresql.conf(创建了目录)\n\n修改#listen_addresses = &apos;localhost&apos; 为  listen_addresses=&apos;*&apos;\n\n\n# 连接数据库\n先配置登录权限\nvim pg_hba.conf\n# 是否远程登录 数据库 用户名 ip地段 方式\n# 允许doneself用户远程访问\nhost doneself doneself 127.0.0.1/32 md5\n# 允许管理员密码登录\nlocal all postgres  md5\n# 如果不知道怎么配置， 将全部登录方式改成md5\n\n# 查看版本\n/usr/pgsql-9.6/bin/psql --version</code></pre><h4 id=\"安装postgis2\"><a href=\"#安装postgis2\" class=\"headerlink\" title=\"安装postgis2\"></a>安装postgis2</h4><p>centos7.2</p>\n<pre><code>sudo yum install postgis2_96  # 96和安装的postgresql一致\nsudo yum install ogr_fdw96  # 安装ogrfdw\nsudo yum install pgrouting_96 # 安装pgrouting\n\n\n# 用管理员登录postgerysql\n&gt;-- Enable PostGIS (includes raster)\nCREATE EXTENSION postgis;\n-- Enable Topology\nCREATE EXTENSION postgis_topology;\n-- Enable PostGIS Advanced 3D\n-- and other geoprocessing algorithms\n-- sfcgal not available with all distributions\nCREATE EXTENSION postgis_sfcgal;\n-- fuzzy matching needed for Tiger\nCREATE EXTENSION fuzzystrmatch;\n-- rule based standardizer\nCREATE EXTENSION address_standardizer;\n-- example rule data set\nCREATE EXTENSION address_standardizer_data_us;\n-- Enable US Tiger Geocoder\nCREATE EXTENSION postgis_tiger_geocoder;\n\n# 验证是否安装成功\n#postgres=&gt; postgis_full_version();</code></pre><h4 id=\"安装postgresql中文全文搜索zhparser\"><a href=\"#安装postgresql中文全文搜索zhparser\" class=\"headerlink\" title=\"安装postgresql中文全文搜索zhparser\"></a>安装postgresql中文全文搜索zhparser</h4><p>centos7.2</p>\n<pre><code> yum install bzip2  # 安装解压包\n # 安装SCWS中文分词 https://github.com/hightman/scws\n wget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2\n tar -jxvf scws-1.2.3.tar.bz2 \n cd scws-1.2.3\n ./configure\n make install\n # 测试\n scws &apos;请问怎么自己动手做西红柿蛋炒饭&apos; -c utf-8\n # 安装zhparser\n git clone https://github.com/amutu/zhparser.git\n cd zhparser\nexport PATH=$PATH:/usr/pgsql-9.6/bin/\ncmake &amp;&amp; make install\n\n\n# 登录（第一次登录）\n&gt; sudo su - postgres\n# 修改可以md5登录后\n&gt; &gt; psql -U user -D database -W\n&gt;  输入口令\n# 创建用户\nuser=&gt;  CREATE USER dbuser WITH PASSWORD &apos;password&apos;;\n# 修改密码\nuser=&gt;  ALTER USER dbuser WITH PASSWORD &apos;newpassword&apos;;\n# 赋予权限\nuser=&gt;  GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;\n# 允许用户创建数据库\nuser=&gt; ALTER USER doneself CREATEDB;\n# 设置为超级管理员\nuser=&gt; ALTER ROLE doneself SUPERUSER;\n# 创建数据库\nuser=&gt;  Create database exampledb owner=dbuser  template= template1  ENCODING = &apos;UTF8&apos;;\n# 选择数据库\nuser=&gt; \\c database\n# 查看当前数据库所有表\nuser=&gt;  \\dt\nuser=&gt;  \\d 数据库 —— 得到所有表的名字\nuser=&gt;  \\d 表名 —— 得到表结构</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://www.postgresql.org/download/linux/ubuntu/\" target=\"_blank\" rel=\"noopener\">ubuntu安装</a> <a href=\"https://www.postgresql.org/download/linux/redhat/\" target=\"_blank\" rel=\"noopener\">centos安装</a> centos7.2 安装postgresql9.6</p>\n<pre><code># 添加RPM\nyum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm\n\n# 安装PostgreSQL 9.6\n# postgresql96-server 数据库核心服务端\n# postgresql96-contrib 附加第三方扩展\n# postgresql96-devel C语言开发Header头文件和库\nyum install postgresql96-server postgresql96-contrib postgresql96-devel\n\n# 验证是否安装成功\nrpm -aq| grep postgres\n\n\n# 设置目录（可省略）\ncd /mnt\nsudo mkdir vdb1\nsudo chown -R postgres:postgres vdb1\nsudo chmod 700 vdb1\nvi /usr/lib/systemd/system/postgresql-9.6.service\nEnvironment=PGDATA=/mnt/vdb1/ 修改为自己的新的数据路径\n\n\n# 初始化数据库\nsudo /usr/pgsql-9.6/bin/postgresql96-setup initdb\n# 开启服务\nsudo service postgresql-9.6 start 或者 systemctl start postgresql-9.6.service\n# 开机启动\nsudo sudo chkconfig postgresql-9.6 on 或者 systemctl enable postgresql-9.6.service\n\n\n# 配置文件\n /var/lib/pgsql/9.6/data/postgresql.conf 通用设置\n /var/lib/pgsql/9.6/data/pg_hba.conf  控制访问安全\n /var/lib/pgsql/9.6/data/pg_ident.conf 配合pg_hba.conf使用  \n\n\nsudo su postgres\npsql # 进入命令行模式\n# 修改密码\nALTER USER postgres WITH PASSWORD &apos;密码&apos;; \n# 创建用户\nCREATE USER userdoneself WITH PASSWORD &apos;密码passworddoneself&apos;;\n# 创建数据库\ncreate --encoding=UTF8 database dbdoneself owner userdoneself;\n# 赋予权限\ngrant all privileges on database dbdoneself to userdoneself;\n\\q\n# 安装postgresql时，系统会自动创建postgres用户\n\n\n# 开启远程访问\nvi /var/lib/pgsql/9.6/data/postgresql.conf 或者  vi /mnt/vdb1/postgresql.conf(创建了目录)\n\n修改#listen_addresses = &apos;localhost&apos; 为  listen_addresses=&apos;*&apos;\n\n\n# 连接数据库\n先配置登录权限\nvim pg_hba.conf\n# 是否远程登录 数据库 用户名 ip地段 方式\n# 允许doneself用户远程访问\nhost doneself doneself 127.0.0.1/32 md5\n# 允许管理员密码登录\nlocal all postgres  md5\n# 如果不知道怎么配置， 将全部登录方式改成md5\n\n# 查看版本\n/usr/pgsql-9.6/bin/psql --version</code></pre><h4 id=\"安装postgis2\"><a href=\"#安装postgis2\" class=\"headerlink\" title=\"安装postgis2\"></a>安装postgis2</h4><p>centos7.2</p>\n<pre><code>sudo yum install postgis2_96  # 96和安装的postgresql一致\nsudo yum install ogr_fdw96  # 安装ogrfdw\nsudo yum install pgrouting_96 # 安装pgrouting\n\n\n# 用管理员登录postgerysql\n&gt;-- Enable PostGIS (includes raster)\nCREATE EXTENSION postgis;\n-- Enable Topology\nCREATE EXTENSION postgis_topology;\n-- Enable PostGIS Advanced 3D\n-- and other geoprocessing algorithms\n-- sfcgal not available with all distributions\nCREATE EXTENSION postgis_sfcgal;\n-- fuzzy matching needed for Tiger\nCREATE EXTENSION fuzzystrmatch;\n-- rule based standardizer\nCREATE EXTENSION address_standardizer;\n-- example rule data set\nCREATE EXTENSION address_standardizer_data_us;\n-- Enable US Tiger Geocoder\nCREATE EXTENSION postgis_tiger_geocoder;\n\n# 验证是否安装成功\n#postgres=&gt; postgis_full_version();</code></pre><h4 id=\"安装postgresql中文全文搜索zhparser\"><a href=\"#安装postgresql中文全文搜索zhparser\" class=\"headerlink\" title=\"安装postgresql中文全文搜索zhparser\"></a>安装postgresql中文全文搜索zhparser</h4><p>centos7.2</p>\n<pre><code> yum install bzip2  # 安装解压包\n # 安装SCWS中文分词 https://github.com/hightman/scws\n wget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2\n tar -jxvf scws-1.2.3.tar.bz2 \n cd scws-1.2.3\n ./configure\n make install\n # 测试\n scws &apos;请问怎么自己动手做西红柿蛋炒饭&apos; -c utf-8\n # 安装zhparser\n git clone https://github.com/amutu/zhparser.git\n cd zhparser\nexport PATH=$PATH:/usr/pgsql-9.6/bin/\ncmake &amp;&amp; make install\n\n\n# 登录（第一次登录）\n&gt; sudo su - postgres\n# 修改可以md5登录后\n&gt; &gt; psql -U user -D database -W\n&gt;  输入口令\n# 创建用户\nuser=&gt;  CREATE USER dbuser WITH PASSWORD &apos;password&apos;;\n# 修改密码\nuser=&gt;  ALTER USER dbuser WITH PASSWORD &apos;newpassword&apos;;\n# 赋予权限\nuser=&gt;  GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;\n# 允许用户创建数据库\nuser=&gt; ALTER USER doneself CREATEDB;\n# 设置为超级管理员\nuser=&gt; ALTER ROLE doneself SUPERUSER;\n# 创建数据库\nuser=&gt;  Create database exampledb owner=dbuser  template= template1  ENCODING = &apos;UTF8&apos;;\n# 选择数据库\nuser=&gt; \\c database\n# 查看当前数据库所有表\nuser=&gt;  \\dt\nuser=&gt;  \\d 数据库 —— 得到所有表的名字\nuser=&gt;  \\d 表名 —— 得到表结构</code></pre>"},{"title":"vue.js","url":"566.html","id":"566","comments":0,"date":"2018-09-26T09:32:56.000Z","_content":"\n#### 安装nodejs\n\n    # 安装nodejs\n    # https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\n    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n    sudo apt-get install -y nodejs\n    # 安装cnpm\n    sudo npm install -g cnpm\n    \n\n#### 安装vue-cli\n\n    sudo cnpm install -g vue-cli\n    \n\n#### 创建项目\n\n    vue init webpack your-project\n     cnpm install\n     npm run dev  # 启动项目","source":"_posts/vuejs.md","raw":"---\ntitle: vue.js\nurl: 566.html\nid: 566\ncomments: false\ncategories:\n  - 前端\ndate: 2018-09-26 17:32:56\ntags:\n---\n\n#### 安装nodejs\n\n    # 安装nodejs\n    # https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\n    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n    sudo apt-get install -y nodejs\n    # 安装cnpm\n    sudo npm install -g cnpm\n    \n\n#### 安装vue-cli\n\n    sudo cnpm install -g vue-cli\n    \n\n#### 创建项目\n\n    vue init webpack your-project\n     cnpm install\n     npm run dev  # 启动项目","slug":"vuejs","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsi002qh3a4l77z7ciq","content":"<h4 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h4><pre><code># 安装nodejs\n# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt-get install -y nodejs\n# 安装cnpm\nsudo npm install -g cnpm</code></pre><h4 id=\"安装vue-cli\"><a href=\"#安装vue-cli\" class=\"headerlink\" title=\"安装vue-cli\"></a>安装vue-cli</h4><pre><code>sudo cnpm install -g vue-cli</code></pre><h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><pre><code>vue init webpack your-project\n cnpm install\n npm run dev  # 启动项目</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h4><pre><code># 安装nodejs\n# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt-get install -y nodejs\n# 安装cnpm\nsudo npm install -g cnpm</code></pre><h4 id=\"安装vue-cli\"><a href=\"#安装vue-cli\" class=\"headerlink\" title=\"安装vue-cli\"></a>安装vue-cli</h4><pre><code>sudo cnpm install -g vue-cli</code></pre><h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><pre><code>vue init webpack your-project\n cnpm install\n npm run dev  # 启动项目</code></pre>"},{"title":"zabbix安装及使用","url":"615.html","id":"615","comments":0,"date":"2018-11-16T09:40:04.000Z","_content":"\n#### 安装服务器端\n\n[官方](https://www.zabbix.com/download) 1\\. 根据实际情况选择数据库 2. 根据实际情况选择操作系统\n\n#### 汉化\n\n![](/wp-content/uploads/2018/11/2018-11-16-17-36-53屏幕截图.png) 错误提示\n\n> You are not able to choose some of the languages, because locales for them are not installed on the web server.\n\n    # 选中zh-CN UTF-8\n    sudo dpkg-reconfigure locales\n    sudo service apache2 restart\n    \n\n#### 安装客户端\n\n[官方](https://www.zabbix.com/documentation/3.2/manual/installation/install_from_packages/agent_installation) [参考](https://tecadmin.net/install-zabbix-agent-on-centos-rhel/)\n\n#### 设置邮件报警\n\nMedia types ![](/wp-content/uploads/2018/11/zabbix-email.png) ![](/wp-content/uploads/2018/11/zabbix-email-1.png)\n\n#### 交换分区错误问题\n\n    Lack of free swap space\n    \n\n现在的云主机默认没有交换分区 Configuration->Templates->Template OS Linux->Triggers->Lack of free swap space on {HOST.NAME}->Expression\n\n    {Template OS Linux:system.swap.size[,pfree].last(0)}<50改成\n    {Template OS Linux:system.swap.size[,pfree].last(0)}<50 and {Template OS Linux:system.swap.size[,free].last(0)}<>0","source":"_posts/zabbix安装及使用.md","raw":"---\ntitle: zabbix安装及使用\nurl: 615.html\nid: 615\ncomments: false\ncategories:\n  - 后端\ndate: 2018-11-16 17:40:04\ntags:\n---\n\n#### 安装服务器端\n\n[官方](https://www.zabbix.com/download) 1\\. 根据实际情况选择数据库 2. 根据实际情况选择操作系统\n\n#### 汉化\n\n![](/wp-content/uploads/2018/11/2018-11-16-17-36-53屏幕截图.png) 错误提示\n\n> You are not able to choose some of the languages, because locales for them are not installed on the web server.\n\n    # 选中zh-CN UTF-8\n    sudo dpkg-reconfigure locales\n    sudo service apache2 restart\n    \n\n#### 安装客户端\n\n[官方](https://www.zabbix.com/documentation/3.2/manual/installation/install_from_packages/agent_installation) [参考](https://tecadmin.net/install-zabbix-agent-on-centos-rhel/)\n\n#### 设置邮件报警\n\nMedia types ![](/wp-content/uploads/2018/11/zabbix-email.png) ![](/wp-content/uploads/2018/11/zabbix-email-1.png)\n\n#### 交换分区错误问题\n\n    Lack of free swap space\n    \n\n现在的云主机默认没有交换分区 Configuration->Templates->Template OS Linux->Triggers->Lack of free swap space on {HOST.NAME}->Expression\n\n    {Template OS Linux:system.swap.size[,pfree].last(0)}<50改成\n    {Template OS Linux:system.swap.size[,pfree].last(0)}<50 and {Template OS Linux:system.swap.size[,free].last(0)}<>0","slug":"zabbix安装及使用","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsj002sh3a45y2wu8xs","content":"<h4 id=\"安装服务器端\"><a href=\"#安装服务器端\" class=\"headerlink\" title=\"安装服务器端\"></a>安装服务器端</h4><p><a href=\"https://www.zabbix.com/download\" target=\"_blank\" rel=\"noopener\">官方</a> 1. 根据实际情况选择数据库 2. 根据实际情况选择操作系统</p>\n<h4 id=\"汉化\"><a href=\"#汉化\" class=\"headerlink\" title=\"汉化\"></a>汉化</h4><p><img src=\"/wp-content/uploads/2018/11/2018-11-16-17-36-53%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt> 错误提示</p>\n<blockquote>\n<p>You are not able to choose some of the languages, because locales for them are not installed on the web server.</p>\n</blockquote>\n<pre><code># 选中zh-CN UTF-8\nsudo dpkg-reconfigure locales\nsudo service apache2 restart</code></pre><h4 id=\"安装客户端\"><a href=\"#安装客户端\" class=\"headerlink\" title=\"安装客户端\"></a>安装客户端</h4><p><a href=\"https://www.zabbix.com/documentation/3.2/manual/installation/install_from_packages/agent_installation\" target=\"_blank\" rel=\"noopener\">官方</a> <a href=\"https://tecadmin.net/install-zabbix-agent-on-centos-rhel/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h4 id=\"设置邮件报警\"><a href=\"#设置邮件报警\" class=\"headerlink\" title=\"设置邮件报警\"></a>设置邮件报警</h4><p>Media types <img src=\"/wp-content/uploads/2018/11/zabbix-email.png\" alt> <img src=\"/wp-content/uploads/2018/11/zabbix-email-1.png\" alt></p>\n<h4 id=\"交换分区错误问题\"><a href=\"#交换分区错误问题\" class=\"headerlink\" title=\"交换分区错误问题\"></a>交换分区错误问题</h4><pre><code>Lack of free swap space</code></pre><p>现在的云主机默认没有交换分区 Configuration-&gt;Templates-&gt;Template OS Linux-&gt;Triggers-&gt;Lack of free swap space on {HOST.NAME}-&gt;Expression</p>\n<pre><code>{Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50改成\n{Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50 and {Template OS Linux:system.swap.size[,free].last(0)}&lt;&gt;0</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装服务器端\"><a href=\"#安装服务器端\" class=\"headerlink\" title=\"安装服务器端\"></a>安装服务器端</h4><p><a href=\"https://www.zabbix.com/download\" target=\"_blank\" rel=\"noopener\">官方</a> 1. 根据实际情况选择数据库 2. 根据实际情况选择操作系统</p>\n<h4 id=\"汉化\"><a href=\"#汉化\" class=\"headerlink\" title=\"汉化\"></a>汉化</h4><p><img src=\"/wp-content/uploads/2018/11/2018-11-16-17-36-53%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt> 错误提示</p>\n<blockquote>\n<p>You are not able to choose some of the languages, because locales for them are not installed on the web server.</p>\n</blockquote>\n<pre><code># 选中zh-CN UTF-8\nsudo dpkg-reconfigure locales\nsudo service apache2 restart</code></pre><h4 id=\"安装客户端\"><a href=\"#安装客户端\" class=\"headerlink\" title=\"安装客户端\"></a>安装客户端</h4><p><a href=\"https://www.zabbix.com/documentation/3.2/manual/installation/install_from_packages/agent_installation\" target=\"_blank\" rel=\"noopener\">官方</a> <a href=\"https://tecadmin.net/install-zabbix-agent-on-centos-rhel/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h4 id=\"设置邮件报警\"><a href=\"#设置邮件报警\" class=\"headerlink\" title=\"设置邮件报警\"></a>设置邮件报警</h4><p>Media types <img src=\"/wp-content/uploads/2018/11/zabbix-email.png\" alt> <img src=\"/wp-content/uploads/2018/11/zabbix-email-1.png\" alt></p>\n<h4 id=\"交换分区错误问题\"><a href=\"#交换分区错误问题\" class=\"headerlink\" title=\"交换分区错误问题\"></a>交换分区错误问题</h4><pre><code>Lack of free swap space</code></pre><p>现在的云主机默认没有交换分区 Configuration-&gt;Templates-&gt;Template OS Linux-&gt;Triggers-&gt;Lack of free swap space on {HOST.NAME}-&gt;Expression</p>\n<pre><code>{Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50改成\n{Template OS Linux:system.swap.size[,pfree].last(0)}&lt;50 and {Template OS Linux:system.swap.size[,free].last(0)}&lt;&gt;0</code></pre>"},{"title":"ubuntu配置Gitlab服务","url":"178.html","id":"178","comments":0,"date":"2017-06-19T06:18:48.000Z","_content":"\n    # 安装相关服务 postfix为邮件服务\n    sudo apt-get install curl openssh-server ca-certificates postfix\n    \n\n    # 安装gitlab服务包\n    curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\n    sudo apt-get install gitlab-ce\n    \n\n    # 配置服务\n    sudo vim /etc/gitlab/gitlab.rb\n    \n    ## GitLab URL\n    ##! URL on which GitLab will be reachable.\n    ##! For more details on configuring external_url see:\n    ##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n    external_url 'http:/192.168.0.19:1500'    # 地址\n    \n    .\n    .\n    .\n    # 邮件基本设置\n    ### Email Settings\n    gitlab_rails['gitlab_email_enabled'] = true\n    gitlab_rails['gitlab_email_from'] = 'admin@uscnk.com'\n    gitlab_rails['gitlab_email_display_name'] = 'Gitlab'\n    gitlab_rails['gitlab_email_reply_to'] = 'admin@uscnk.com'\n    gitlab_rails['gitlab_email_subject_suffix'] = 'Gitlab'\n    \n    .\n    .\n    .\n    ### GitLab email server settings\n    ###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n    ###! **Use smtp instead of sendmail/postfix.**\n    \n    # gitlab_rails['smtp_enable'] = true\n    # gitlab_rails['smtp_address'] = \"smtp.server\"\n    # gitlab_rails['smtp_port'] = 465\n    # gitlab_rails['smtp_user_name'] = \"smtp user\"\n    # gitlab_rails['smtp_password'] = \"smtp password\"\n    # gitlab_rails['smtp_domain'] = \"example.com\"\n    # gitlab_rails['smtp_authentication'] = \"login\"\n    # gitlab_rails['smtp_enable_starttls_auto'] = true\n    # gitlab_rails['smtp_tls'] = false\n    \n    # 邮件服务地址\n    # QQ exmail (腾讯企业邮箱)\n    gitlab_rails['smtp_enable'] = true\n    gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\n    gitlab_rails['smtp_port'] = 465\n    gitlab_rails['smtp_user_name'] = \"admin@uscnk.com\"\n    gitlab_rails['smtp_password'] = \"xxxxxxxxx\"\n    gitlab_rails['smtp_authentication'] = \"login\"\n    gitlab_rails['smtp_enable_starttls_auto'] = true\n    gitlab_rails['smtp_tls'] = true\n    gitlab_rails['gitlab_email_from'] = 'admin@uscnk.com'\n    \n    \n    # nginx基本设置\n    ################################################################################\n    ## GitLab Nginx\n    ##! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html\n    ################################################################################\n    \n    nginx['listen_addresses'] = ['192.168.0.19']\n    nginx['losten_port'] = 1500\n    \n    \n\n    # 重启服务\n    sudo gitlab-ctl reconfigure\n    # 重启邮件服务\n    sudo /etc/init.d/postfix restart\n    # 访问\n    http://192.168.0.19:1500\n    Username: root\n    Password: 5iveL!fe\n    \n\n### github与gitlab共存\n\n    # github账户邮箱， 将id_rsa改名成id_rsa_github\n    ssh-keygen -t rsa -C \"xxxxx@gmail.com\"\n    # gitlab公司邮箱， 将id_rsa改名成id_rsa_gitlab\n    ssh-keygen -t rsa -C \"xxxxxx@work.com\"\n    # 添加私钥\n    ssh-add ~/.ssh/id_rsa_github\n    ssh-add ~/.ssh/id_rsa_gitlab\n    \n\n    #在 ~/.ssh 目录下新建一个config文件\n    touch config\n    chmod 755 conifg\n    \n\n    # 并添加以下内容\n    # gitlab\n    Host github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/id_rsa_github\n    # github\n    Host gitlib.com\n        HostName gitlib.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/id_rsa_gitlab\n    \n\n    # 将id_rsa_github.pab内容添加到github中\n    # 测试结果\n    ssh -T git@github.com\n    # 将id_rsa_gitlab.pab内容添加到gitlab中\n    \n    \n\n    cd ~/mytest\n    # 在github中测试\n    git remote add github https://github.com/zhcshine/mytest.git\n    git push -u github master\n    # 在gitlab中测试\n    git remote add gitlab http://192.168.0.19:1500/zhcshine/mytest.git\n    git push -u gitlab master","source":"_posts/ubuntu配置Gitlab服务.md","raw":"---\ntitle: ubuntu配置Gitlab服务\nurl: 178.html\nid: 178\ncomments: false\ncategories:\n  - 运维\ndate: 2017-06-19 14:18:48\ntags:\n---\n\n    # 安装相关服务 postfix为邮件服务\n    sudo apt-get install curl openssh-server ca-certificates postfix\n    \n\n    # 安装gitlab服务包\n    curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\n    sudo apt-get install gitlab-ce\n    \n\n    # 配置服务\n    sudo vim /etc/gitlab/gitlab.rb\n    \n    ## GitLab URL\n    ##! URL on which GitLab will be reachable.\n    ##! For more details on configuring external_url see:\n    ##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n    external_url 'http:/192.168.0.19:1500'    # 地址\n    \n    .\n    .\n    .\n    # 邮件基本设置\n    ### Email Settings\n    gitlab_rails['gitlab_email_enabled'] = true\n    gitlab_rails['gitlab_email_from'] = 'admin@uscnk.com'\n    gitlab_rails['gitlab_email_display_name'] = 'Gitlab'\n    gitlab_rails['gitlab_email_reply_to'] = 'admin@uscnk.com'\n    gitlab_rails['gitlab_email_subject_suffix'] = 'Gitlab'\n    \n    .\n    .\n    .\n    ### GitLab email server settings\n    ###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n    ###! **Use smtp instead of sendmail/postfix.**\n    \n    # gitlab_rails['smtp_enable'] = true\n    # gitlab_rails['smtp_address'] = \"smtp.server\"\n    # gitlab_rails['smtp_port'] = 465\n    # gitlab_rails['smtp_user_name'] = \"smtp user\"\n    # gitlab_rails['smtp_password'] = \"smtp password\"\n    # gitlab_rails['smtp_domain'] = \"example.com\"\n    # gitlab_rails['smtp_authentication'] = \"login\"\n    # gitlab_rails['smtp_enable_starttls_auto'] = true\n    # gitlab_rails['smtp_tls'] = false\n    \n    # 邮件服务地址\n    # QQ exmail (腾讯企业邮箱)\n    gitlab_rails['smtp_enable'] = true\n    gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\n    gitlab_rails['smtp_port'] = 465\n    gitlab_rails['smtp_user_name'] = \"admin@uscnk.com\"\n    gitlab_rails['smtp_password'] = \"xxxxxxxxx\"\n    gitlab_rails['smtp_authentication'] = \"login\"\n    gitlab_rails['smtp_enable_starttls_auto'] = true\n    gitlab_rails['smtp_tls'] = true\n    gitlab_rails['gitlab_email_from'] = 'admin@uscnk.com'\n    \n    \n    # nginx基本设置\n    ################################################################################\n    ## GitLab Nginx\n    ##! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html\n    ################################################################################\n    \n    nginx['listen_addresses'] = ['192.168.0.19']\n    nginx['losten_port'] = 1500\n    \n    \n\n    # 重启服务\n    sudo gitlab-ctl reconfigure\n    # 重启邮件服务\n    sudo /etc/init.d/postfix restart\n    # 访问\n    http://192.168.0.19:1500\n    Username: root\n    Password: 5iveL!fe\n    \n\n### github与gitlab共存\n\n    # github账户邮箱， 将id_rsa改名成id_rsa_github\n    ssh-keygen -t rsa -C \"xxxxx@gmail.com\"\n    # gitlab公司邮箱， 将id_rsa改名成id_rsa_gitlab\n    ssh-keygen -t rsa -C \"xxxxxx@work.com\"\n    # 添加私钥\n    ssh-add ~/.ssh/id_rsa_github\n    ssh-add ~/.ssh/id_rsa_gitlab\n    \n\n    #在 ~/.ssh 目录下新建一个config文件\n    touch config\n    chmod 755 conifg\n    \n\n    # 并添加以下内容\n    # gitlab\n    Host github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/id_rsa_github\n    # github\n    Host gitlib.com\n        HostName gitlib.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/id_rsa_gitlab\n    \n\n    # 将id_rsa_github.pab内容添加到github中\n    # 测试结果\n    ssh -T git@github.com\n    # 将id_rsa_gitlab.pab内容添加到gitlab中\n    \n    \n\n    cd ~/mytest\n    # 在github中测试\n    git remote add github https://github.com/zhcshine/mytest.git\n    git push -u github master\n    # 在gitlab中测试\n    git remote add gitlab http://192.168.0.19:1500/zhcshine/mytest.git\n    git push -u gitlab master","slug":"ubuntu配置Gitlab服务","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsj002uh3a46xuhkv83","content":"<pre><code># 安装相关服务 postfix为邮件服务\nsudo apt-get install curl openssh-server ca-certificates postfix\n\n\n# 安装gitlab服务包\ncurl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\nsudo apt-get install gitlab-ce\n\n\n# 配置服务\nsudo vim /etc/gitlab/gitlab.rb\n\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\nexternal_url &apos;http:/192.168.0.19:1500&apos;    # 地址\n\n.\n.\n.\n# 邮件基本设置\n### Email Settings\ngitlab_rails[&apos;gitlab_email_enabled&apos;] = true\ngitlab_rails[&apos;gitlab_email_from&apos;] = &apos;admin@uscnk.com&apos;\ngitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;Gitlab&apos;\ngitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;admin@uscnk.com&apos;\ngitlab_rails[&apos;gitlab_email_subject_suffix&apos;] = &apos;Gitlab&apos;\n\n.\n.\n.\n### GitLab email server settings\n###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n###! **Use smtp instead of sendmail/postfix.**\n\n# gitlab_rails[&apos;smtp_enable&apos;] = true\n# gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.server&quot;\n# gitlab_rails[&apos;smtp_port&apos;] = 465\n# gitlab_rails[&apos;smtp_user_name&apos;] = &quot;smtp user&quot;\n# gitlab_rails[&apos;smtp_password&apos;] = &quot;smtp password&quot;\n# gitlab_rails[&apos;smtp_domain&apos;] = &quot;example.com&quot;\n# gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;\n# gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true\n# gitlab_rails[&apos;smtp_tls&apos;] = false\n\n# 邮件服务地址\n# QQ exmail (腾讯企业邮箱)\ngitlab_rails[&apos;smtp_enable&apos;] = true\ngitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;\ngitlab_rails[&apos;smtp_port&apos;] = 465\ngitlab_rails[&apos;smtp_user_name&apos;] = &quot;admin@uscnk.com&quot;\ngitlab_rails[&apos;smtp_password&apos;] = &quot;xxxxxxxxx&quot;\ngitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;\ngitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true\ngitlab_rails[&apos;smtp_tls&apos;] = true\ngitlab_rails[&apos;gitlab_email_from&apos;] = &apos;admin@uscnk.com&apos;\n\n\n# nginx基本设置\n################################################################################\n## GitLab Nginx\n##! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html\n################################################################################\n\nnginx[&apos;listen_addresses&apos;] = [&apos;192.168.0.19&apos;]\nnginx[&apos;losten_port&apos;] = 1500\n\n\n\n# 重启服务\nsudo gitlab-ctl reconfigure\n# 重启邮件服务\nsudo /etc/init.d/postfix restart\n# 访问\nhttp://192.168.0.19:1500\nUsername: root\nPassword: 5iveL!fe</code></pre><h3 id=\"github与gitlab共存\"><a href=\"#github与gitlab共存\" class=\"headerlink\" title=\"github与gitlab共存\"></a>github与gitlab共存</h3><pre><code># github账户邮箱， 将id_rsa改名成id_rsa_github\nssh-keygen -t rsa -C &quot;xxxxx@gmail.com&quot;\n# gitlab公司邮箱， 将id_rsa改名成id_rsa_gitlab\nssh-keygen -t rsa -C &quot;xxxxxx@work.com&quot;\n# 添加私钥\nssh-add ~/.ssh/id_rsa_github\nssh-add ~/.ssh/id_rsa_gitlab\n\n\n#在 ~/.ssh 目录下新建一个config文件\ntouch config\nchmod 755 conifg\n\n\n# 并添加以下内容\n# gitlab\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_github\n# github\nHost gitlib.com\n    HostName gitlib.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_gitlab\n\n\n# 将id_rsa_github.pab内容添加到github中\n# 测试结果\nssh -T git@github.com\n# 将id_rsa_gitlab.pab内容添加到gitlab中\n\n\n\ncd ~/mytest\n# 在github中测试\ngit remote add github https://github.com/zhcshine/mytest.git\ngit push -u github master\n# 在gitlab中测试\ngit remote add gitlab http://192.168.0.19:1500/zhcshine/mytest.git\ngit push -u gitlab master</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code># 安装相关服务 postfix为邮件服务\nsudo apt-get install curl openssh-server ca-certificates postfix\n\n\n# 安装gitlab服务包\ncurl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\nsudo apt-get install gitlab-ce\n\n\n# 配置服务\nsudo vim /etc/gitlab/gitlab.rb\n\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\nexternal_url &apos;http:/192.168.0.19:1500&apos;    # 地址\n\n.\n.\n.\n# 邮件基本设置\n### Email Settings\ngitlab_rails[&apos;gitlab_email_enabled&apos;] = true\ngitlab_rails[&apos;gitlab_email_from&apos;] = &apos;admin@uscnk.com&apos;\ngitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;Gitlab&apos;\ngitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;admin@uscnk.com&apos;\ngitlab_rails[&apos;gitlab_email_subject_suffix&apos;] = &apos;Gitlab&apos;\n\n.\n.\n.\n### GitLab email server settings\n###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n###! **Use smtp instead of sendmail/postfix.**\n\n# gitlab_rails[&apos;smtp_enable&apos;] = true\n# gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.server&quot;\n# gitlab_rails[&apos;smtp_port&apos;] = 465\n# gitlab_rails[&apos;smtp_user_name&apos;] = &quot;smtp user&quot;\n# gitlab_rails[&apos;smtp_password&apos;] = &quot;smtp password&quot;\n# gitlab_rails[&apos;smtp_domain&apos;] = &quot;example.com&quot;\n# gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;\n# gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true\n# gitlab_rails[&apos;smtp_tls&apos;] = false\n\n# 邮件服务地址\n# QQ exmail (腾讯企业邮箱)\ngitlab_rails[&apos;smtp_enable&apos;] = true\ngitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;\ngitlab_rails[&apos;smtp_port&apos;] = 465\ngitlab_rails[&apos;smtp_user_name&apos;] = &quot;admin@uscnk.com&quot;\ngitlab_rails[&apos;smtp_password&apos;] = &quot;xxxxxxxxx&quot;\ngitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;\ngitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true\ngitlab_rails[&apos;smtp_tls&apos;] = true\ngitlab_rails[&apos;gitlab_email_from&apos;] = &apos;admin@uscnk.com&apos;\n\n\n# nginx基本设置\n################################################################################\n## GitLab Nginx\n##! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html\n################################################################################\n\nnginx[&apos;listen_addresses&apos;] = [&apos;192.168.0.19&apos;]\nnginx[&apos;losten_port&apos;] = 1500\n\n\n\n# 重启服务\nsudo gitlab-ctl reconfigure\n# 重启邮件服务\nsudo /etc/init.d/postfix restart\n# 访问\nhttp://192.168.0.19:1500\nUsername: root\nPassword: 5iveL!fe</code></pre><h3 id=\"github与gitlab共存\"><a href=\"#github与gitlab共存\" class=\"headerlink\" title=\"github与gitlab共存\"></a>github与gitlab共存</h3><pre><code># github账户邮箱， 将id_rsa改名成id_rsa_github\nssh-keygen -t rsa -C &quot;xxxxx@gmail.com&quot;\n# gitlab公司邮箱， 将id_rsa改名成id_rsa_gitlab\nssh-keygen -t rsa -C &quot;xxxxxx@work.com&quot;\n# 添加私钥\nssh-add ~/.ssh/id_rsa_github\nssh-add ~/.ssh/id_rsa_gitlab\n\n\n#在 ~/.ssh 目录下新建一个config文件\ntouch config\nchmod 755 conifg\n\n\n# 并添加以下内容\n# gitlab\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_github\n# github\nHost gitlib.com\n    HostName gitlib.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_gitlab\n\n\n# 将id_rsa_github.pab内容添加到github中\n# 测试结果\nssh -T git@github.com\n# 将id_rsa_gitlab.pab内容添加到gitlab中\n\n\n\ncd ~/mytest\n# 在github中测试\ngit remote add github https://github.com/zhcshine/mytest.git\ngit push -u github master\n# 在gitlab中测试\ngit remote add gitlab http://192.168.0.19:1500/zhcshine/mytest.git\ngit push -u gitlab master</code></pre>"},{"title":"关于linux环境nginx/php-fpm权限问题","url":"576.html","id":"576","comments":0,"date":"2018-11-10T05:10:28.000Z","_content":"\n#### 当前用户hanchang, nginx用户nginx\n\n    vim /etc/nginx/nginx.conf\n    user hanchang;\n    \n\n    vim /etc/php-fpm.d/www.conf \n    user = hanchang\n    group = nginx\n    listen.owner = hanchang\n    listen.group = nginx\n    listen.mode = 0660\n    \n\n#### 划重点 将当前用户加入nginx用户组\n\n    sudo usermod -a -G nginx hanchang","source":"_posts/关于linux环境nginx-php-fpm权限问题.md","raw":"---\ntitle: 关于linux环境nginx/php-fpm权限问题\nurl: 576.html\nid: 576\ncomments: false\ncategories:\n  - 运维\ndate: 2018-11-10 13:10:28\ntags:\n---\n\n#### 当前用户hanchang, nginx用户nginx\n\n    vim /etc/nginx/nginx.conf\n    user hanchang;\n    \n\n    vim /etc/php-fpm.d/www.conf \n    user = hanchang\n    group = nginx\n    listen.owner = hanchang\n    listen.group = nginx\n    listen.mode = 0660\n    \n\n#### 划重点 将当前用户加入nginx用户组\n\n    sudo usermod -a -G nginx hanchang","slug":"关于linux环境nginx-php-fpm权限问题","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsk002wh3a4n184qyes","content":"<h4 id=\"当前用户hanchang-nginx用户nginx\"><a href=\"#当前用户hanchang-nginx用户nginx\" class=\"headerlink\" title=\"当前用户hanchang, nginx用户nginx\"></a>当前用户hanchang, nginx用户nginx</h4><pre><code>vim /etc/nginx/nginx.conf\nuser hanchang;\n\n\nvim /etc/php-fpm.d/www.conf \nuser = hanchang\ngroup = nginx\nlisten.owner = hanchang\nlisten.group = nginx\nlisten.mode = 0660</code></pre><h4 id=\"划重点-将当前用户加入nginx用户组\"><a href=\"#划重点-将当前用户加入nginx用户组\" class=\"headerlink\" title=\"划重点 将当前用户加入nginx用户组\"></a>划重点 将当前用户加入nginx用户组</h4><pre><code>sudo usermod -a -G nginx hanchang</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"当前用户hanchang-nginx用户nginx\"><a href=\"#当前用户hanchang-nginx用户nginx\" class=\"headerlink\" title=\"当前用户hanchang, nginx用户nginx\"></a>当前用户hanchang, nginx用户nginx</h4><pre><code>vim /etc/nginx/nginx.conf\nuser hanchang;\n\n\nvim /etc/php-fpm.d/www.conf \nuser = hanchang\ngroup = nginx\nlisten.owner = hanchang\nlisten.group = nginx\nlisten.mode = 0660</code></pre><h4 id=\"划重点-将当前用户加入nginx用户组\"><a href=\"#划重点-将当前用户加入nginx用户组\" class=\"headerlink\" title=\"划重点 将当前用户加入nginx用户组\"></a>划重点 将当前用户加入nginx用户组</h4><pre><code>sudo usermod -a -G nginx hanchang</code></pre>"},{"title":"在bash显示git分支信息","url":"629.html","id":"629","comments":0,"date":"2018-11-17T08:43:54.000Z","_content":"\n**不推荐使用,请直接使用zsh**\n==================\n\n**linux**\n\n    vim ~/.bashrc\n    \n\n    function git_branch {\n      branch=\"`git branch 2>/dev/null | grep \"^\\*\" | sed -e \"s/^\\*\\ //\"`\"\n      if [ \"${branch}\" != \"\" ];then\n          if [ \"${branch}\" = \"(no branch)\" ];then\n              branch=\"(`git rev-parse --short HEAD`...)\"\n          fi\n          echo \" ($branch)\"\n      fi\n    }\n    export PS1='\\u@\\h \\[\\033[01;36m\\]\\W\\[\\033[01;32m\\]$(git_branch)\\[\\033[00m\\] \\$ '\n    \n\n    source ~/.bashrc\n    \n\n**mac** 1\\. 同上 2. mac启动后加载的是.bash_profile\n\n    echo \"[ -r ~/.bashrc ] && source ~/.bashrc\" >> .bash_profile\n    \n\n[或者直接使用zsh](https://ohmyz.sh/)","source":"_posts/在bash显示git分支信息.md","raw":"---\ntitle: 在bash显示git分支信息\ntags:\n  - bash\n  - git\n  - linux\nurl: 629.html\nid: 629\ncomments: false\ncategories:\n  - 前端\ndate: 2018-11-17 16:43:54\n---\n\n**不推荐使用,请直接使用zsh**\n==================\n\n**linux**\n\n    vim ~/.bashrc\n    \n\n    function git_branch {\n      branch=\"`git branch 2>/dev/null | grep \"^\\*\" | sed -e \"s/^\\*\\ //\"`\"\n      if [ \"${branch}\" != \"\" ];then\n          if [ \"${branch}\" = \"(no branch)\" ];then\n              branch=\"(`git rev-parse --short HEAD`...)\"\n          fi\n          echo \" ($branch)\"\n      fi\n    }\n    export PS1='\\u@\\h \\[\\033[01;36m\\]\\W\\[\\033[01;32m\\]$(git_branch)\\[\\033[00m\\] \\$ '\n    \n\n    source ~/.bashrc\n    \n\n**mac** 1\\. 同上 2. mac启动后加载的是.bash_profile\n\n    echo \"[ -r ~/.bashrc ] && source ~/.bashrc\" >> .bash_profile\n    \n\n[或者直接使用zsh](https://ohmyz.sh/)","slug":"在bash显示git分支信息","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsl002yh3a4wt6rk5ps","content":"<h1 id=\"不推荐使用-请直接使用zsh\"><a href=\"#不推荐使用-请直接使用zsh\" class=\"headerlink\" title=\"不推荐使用,请直接使用zsh\"></a><strong>不推荐使用,请直接使用zsh</strong></h1><p><strong>linux</strong></p>\n<pre><code>vim ~/.bashrc\n\n\nfunction git_branch {\n  branch=&quot;`git branch 2&gt;/dev/null | grep &quot;^\\*&quot; | sed -e &quot;s/^\\*\\ //&quot;`&quot;\n  if [ &quot;${branch}&quot; != &quot;&quot; ];then\n      if [ &quot;${branch}&quot; = &quot;(no branch)&quot; ];then\n          branch=&quot;(`git rev-parse --short HEAD`...)&quot;\n      fi\n      echo &quot; ($branch)&quot;\n  fi\n}\nexport PS1=&apos;\\u@\\h \\[\\033[01;36m\\]\\W\\[\\033[01;32m\\]$(git_branch)\\[\\033[00m\\] \\$ &apos;\n\n\nsource ~/.bashrc</code></pre><p><strong>mac</strong> 1. 同上 2. mac启动后加载的是.bash_profile</p>\n<pre><code>echo &quot;[ -r ~/.bashrc ] &amp;&amp; source ~/.bashrc&quot; &gt;&gt; .bash_profile</code></pre><p><a href=\"https://ohmyz.sh/\" target=\"_blank\" rel=\"noopener\">或者直接使用zsh</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"不推荐使用-请直接使用zsh\"><a href=\"#不推荐使用-请直接使用zsh\" class=\"headerlink\" title=\"不推荐使用,请直接使用zsh\"></a><strong>不推荐使用,请直接使用zsh</strong></h1><p><strong>linux</strong></p>\n<pre><code>vim ~/.bashrc\n\n\nfunction git_branch {\n  branch=&quot;`git branch 2&gt;/dev/null | grep &quot;^\\*&quot; | sed -e &quot;s/^\\*\\ //&quot;`&quot;\n  if [ &quot;${branch}&quot; != &quot;&quot; ];then\n      if [ &quot;${branch}&quot; = &quot;(no branch)&quot; ];then\n          branch=&quot;(`git rev-parse --short HEAD`...)&quot;\n      fi\n      echo &quot; ($branch)&quot;\n  fi\n}\nexport PS1=&apos;\\u@\\h \\[\\033[01;36m\\]\\W\\[\\033[01;32m\\]$(git_branch)\\[\\033[00m\\] \\$ &apos;\n\n\nsource ~/.bashrc</code></pre><p><strong>mac</strong> 1. 同上 2. mac启动后加载的是.bash_profile</p>\n<pre><code>echo &quot;[ -r ~/.bashrc ] &amp;&amp; source ~/.bashrc&quot; &gt;&gt; .bash_profile</code></pre><p><a href=\"https://ohmyz.sh/\" target=\"_blank\" rel=\"noopener\">或者直接使用zsh</a></p>\n"},{"title":"局域网部分电脑不能连接网络,局域网共享文件夹,打印机等情况","url":"24.html","id":"24","comments":0,"date":"2016-11-09T01:54:26.000Z","_content":"\n### 问题反应\n\n今天公司出现网络故障，有2个部门全部不能连接网络。\n\n### 正常问题\n\n> 一台电脑不能上网，找该台电脑的问题  \n> 一部门电脑不能上网，找该部门交换机  \n> 多部门电脑不能上网，找主交换机问题  \n> 全部不能上网，拿电脑直连路由\n\n### 问题分析\n\n公司主交换机A  \n部门分交换机B  \n测试电脑C  \n部门不能上网故障，正常情况应该是A模块出现问题。于是重启A，仍然有一个部门故障。  \n重启B，不能解决问题。  \n将C与B直连的线路连接到C，C正常。  \nA,B问题都排除，那么问题在哪？  \n继续尝试，B上只连接C，正常。B上连接该部门全部电脑，故障。  \n找到那条会导致故障的线路，换掉网线，OK.  \n确认问题原因居然是**_网线！_**\n\n### 结论\n\n子交换机上的网线问题会影响主交换。\n\n### 共享打印机安装出现0x00000709\n\n解决办法：重启打印机服务器的Print Spooler服务，重启本地计算机\n\n### 账号密码问题\n\n局域网有xp电脑可以正常访问共享电脑，排序账号密码问题。\n\n### 共享设置问题\n\nxp系统访问正常，win7系统访问显示“帐号密码错误”。于是想到共享设置问题。\n\n> 开始=>  \n> 运行=>  \n> gpedit.msc=>  \n> 本地计算机策略=>  \n> 计算机配置=>  \n> Windows设置=>  \n> 安全设置=>  \n> 本地策略=>  \n> 安全选项=>  \n> 网络安全：LAN管理器身份验证级别=>  \n> 发送LM & NTLM响应\n\n但是之前win7是可以正常访问的，所以该项设置是正确的。\n\n### 时间设置问题\n\n于是询问是什么时候不能访问的，告之电脑蓝屏重启后。那么原因自然是蓝屏导致共享电脑设置的时间出现错误。\n\n> 如果win7的系统时间和访问的共享文件夹的创建时间间隔太长的话，会出现此现象。这是win7的安全机制造成的。  \n> 将共享电脑时间设置为当前时间即可","source":"_posts/局域网部分电脑不能连接网络,局域网共享文件夹,打印机等情况.md","raw":"---\ntitle: 局域网部分电脑不能连接网络,局域网共享文件夹,打印机等情况\ntags:\n  - windows\nurl: 24.html\nid: 24\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 09:54:26\n---\n\n### 问题反应\n\n今天公司出现网络故障，有2个部门全部不能连接网络。\n\n### 正常问题\n\n> 一台电脑不能上网，找该台电脑的问题  \n> 一部门电脑不能上网，找该部门交换机  \n> 多部门电脑不能上网，找主交换机问题  \n> 全部不能上网，拿电脑直连路由\n\n### 问题分析\n\n公司主交换机A  \n部门分交换机B  \n测试电脑C  \n部门不能上网故障，正常情况应该是A模块出现问题。于是重启A，仍然有一个部门故障。  \n重启B，不能解决问题。  \n将C与B直连的线路连接到C，C正常。  \nA,B问题都排除，那么问题在哪？  \n继续尝试，B上只连接C，正常。B上连接该部门全部电脑，故障。  \n找到那条会导致故障的线路，换掉网线，OK.  \n确认问题原因居然是**_网线！_**\n\n### 结论\n\n子交换机上的网线问题会影响主交换。\n\n### 共享打印机安装出现0x00000709\n\n解决办法：重启打印机服务器的Print Spooler服务，重启本地计算机\n\n### 账号密码问题\n\n局域网有xp电脑可以正常访问共享电脑，排序账号密码问题。\n\n### 共享设置问题\n\nxp系统访问正常，win7系统访问显示“帐号密码错误”。于是想到共享设置问题。\n\n> 开始=>  \n> 运行=>  \n> gpedit.msc=>  \n> 本地计算机策略=>  \n> 计算机配置=>  \n> Windows设置=>  \n> 安全设置=>  \n> 本地策略=>  \n> 安全选项=>  \n> 网络安全：LAN管理器身份验证级别=>  \n> 发送LM & NTLM响应\n\n但是之前win7是可以正常访问的，所以该项设置是正确的。\n\n### 时间设置问题\n\n于是询问是什么时候不能访问的，告之电脑蓝屏重启后。那么原因自然是蓝屏导致共享电脑设置的时间出现错误。\n\n> 如果win7的系统时间和访问的共享文件夹的创建时间间隔太长的话，会出现此现象。这是win7的安全机制造成的。  \n> 将共享电脑时间设置为当前时间即可","slug":"局域网部分电脑不能连接网络,局域网共享文件夹,打印机等情况","published":1,"updated":"2019-07-23T06:50:41.023Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsl0030h3a4u03jexq9","content":"<h3 id=\"问题反应\"><a href=\"#问题反应\" class=\"headerlink\" title=\"问题反应\"></a>问题反应</h3><p>今天公司出现网络故障，有2个部门全部不能连接网络。</p>\n<h3 id=\"正常问题\"><a href=\"#正常问题\" class=\"headerlink\" title=\"正常问题\"></a>正常问题</h3><blockquote>\n<p>一台电脑不能上网，找该台电脑的问题<br>一部门电脑不能上网，找该部门交换机<br>多部门电脑不能上网，找主交换机问题<br>全部不能上网，拿电脑直连路由</p>\n</blockquote>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>公司主交换机A<br>部门分交换机B<br>测试电脑C<br>部门不能上网故障，正常情况应该是A模块出现问题。于是重启A，仍然有一个部门故障。<br>重启B，不能解决问题。<br>将C与B直连的线路连接到C，C正常。<br>A,B问题都排除，那么问题在哪？<br>继续尝试，B上只连接C，正常。B上连接该部门全部电脑，故障。<br>找到那条会导致故障的线路，换掉网线，OK.<br>确认问题原因居然是<strong><em>网线！</em></strong></p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>子交换机上的网线问题会影响主交换。</p>\n<h3 id=\"共享打印机安装出现0x00000709\"><a href=\"#共享打印机安装出现0x00000709\" class=\"headerlink\" title=\"共享打印机安装出现0x00000709\"></a>共享打印机安装出现0x00000709</h3><p>解决办法：重启打印机服务器的Print Spooler服务，重启本地计算机</p>\n<h3 id=\"账号密码问题\"><a href=\"#账号密码问题\" class=\"headerlink\" title=\"账号密码问题\"></a>账号密码问题</h3><p>局域网有xp电脑可以正常访问共享电脑，排序账号密码问题。</p>\n<h3 id=\"共享设置问题\"><a href=\"#共享设置问题\" class=\"headerlink\" title=\"共享设置问题\"></a>共享设置问题</h3><p>xp系统访问正常，win7系统访问显示“帐号密码错误”。于是想到共享设置问题。</p>\n<blockquote>\n<p>开始=&gt;<br>运行=&gt;<br>gpedit.msc=&gt;<br>本地计算机策略=&gt;<br>计算机配置=&gt;<br>Windows设置=&gt;<br>安全设置=&gt;<br>本地策略=&gt;<br>安全选项=&gt;<br>网络安全：LAN管理器身份验证级别=&gt;<br>发送LM &amp; NTLM响应</p>\n</blockquote>\n<p>但是之前win7是可以正常访问的，所以该项设置是正确的。</p>\n<h3 id=\"时间设置问题\"><a href=\"#时间设置问题\" class=\"headerlink\" title=\"时间设置问题\"></a>时间设置问题</h3><p>于是询问是什么时候不能访问的，告之电脑蓝屏重启后。那么原因自然是蓝屏导致共享电脑设置的时间出现错误。</p>\n<blockquote>\n<p>如果win7的系统时间和访问的共享文件夹的创建时间间隔太长的话，会出现此现象。这是win7的安全机制造成的。<br>将共享电脑时间设置为当前时间即可</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题反应\"><a href=\"#问题反应\" class=\"headerlink\" title=\"问题反应\"></a>问题反应</h3><p>今天公司出现网络故障，有2个部门全部不能连接网络。</p>\n<h3 id=\"正常问题\"><a href=\"#正常问题\" class=\"headerlink\" title=\"正常问题\"></a>正常问题</h3><blockquote>\n<p>一台电脑不能上网，找该台电脑的问题<br>一部门电脑不能上网，找该部门交换机<br>多部门电脑不能上网，找主交换机问题<br>全部不能上网，拿电脑直连路由</p>\n</blockquote>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>公司主交换机A<br>部门分交换机B<br>测试电脑C<br>部门不能上网故障，正常情况应该是A模块出现问题。于是重启A，仍然有一个部门故障。<br>重启B，不能解决问题。<br>将C与B直连的线路连接到C，C正常。<br>A,B问题都排除，那么问题在哪？<br>继续尝试，B上只连接C，正常。B上连接该部门全部电脑，故障。<br>找到那条会导致故障的线路，换掉网线，OK.<br>确认问题原因居然是<strong><em>网线！</em></strong></p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>子交换机上的网线问题会影响主交换。</p>\n<h3 id=\"共享打印机安装出现0x00000709\"><a href=\"#共享打印机安装出现0x00000709\" class=\"headerlink\" title=\"共享打印机安装出现0x00000709\"></a>共享打印机安装出现0x00000709</h3><p>解决办法：重启打印机服务器的Print Spooler服务，重启本地计算机</p>\n<h3 id=\"账号密码问题\"><a href=\"#账号密码问题\" class=\"headerlink\" title=\"账号密码问题\"></a>账号密码问题</h3><p>局域网有xp电脑可以正常访问共享电脑，排序账号密码问题。</p>\n<h3 id=\"共享设置问题\"><a href=\"#共享设置问题\" class=\"headerlink\" title=\"共享设置问题\"></a>共享设置问题</h3><p>xp系统访问正常，win7系统访问显示“帐号密码错误”。于是想到共享设置问题。</p>\n<blockquote>\n<p>开始=&gt;<br>运行=&gt;<br>gpedit.msc=&gt;<br>本地计算机策略=&gt;<br>计算机配置=&gt;<br>Windows设置=&gt;<br>安全设置=&gt;<br>本地策略=&gt;<br>安全选项=&gt;<br>网络安全：LAN管理器身份验证级别=&gt;<br>发送LM &amp; NTLM响应</p>\n</blockquote>\n<p>但是之前win7是可以正常访问的，所以该项设置是正确的。</p>\n<h3 id=\"时间设置问题\"><a href=\"#时间设置问题\" class=\"headerlink\" title=\"时间设置问题\"></a>时间设置问题</h3><p>于是询问是什么时候不能访问的，告之电脑蓝屏重启后。那么原因自然是蓝屏导致共享电脑设置的时间出现错误。</p>\n<blockquote>\n<p>如果win7的系统时间和访问的共享文件夹的创建时间间隔太长的话，会出现此现象。这是win7的安全机制造成的。<br>将共享电脑时间设置为当前时间即可</p>\n</blockquote>\n"},{"title":"微信本地开发及线上环境搭建","url":"496.html","id":"496","comments":0,"date":"2018-01-29T09:25:48.000Z","_content":"\n#### 微信开发者中心\n\nhttps://open.weixin.qq.com 1. 注册线上账号，开发者资质认证 2. 注册本地账号，开发者资质认证\n\n#### 网站应用\n\n1.  添加相关信息，并盖章认证，添加授权回调域example.com\n2.  认证通过后获取AppId, AppSecret\n\n#### 公众号应用\n\n#### 本地环境配置\n\n1.  将回调的url www.example.com 添加到host文件中","source":"_posts/微信本地开发及线上环境搭建.md","raw":"---\ntitle: 微信本地开发及线上环境搭建\ntags:\n  - 微信\nurl: 496.html\nid: 496\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2018-01-29 17:25:48\n---\n\n#### 微信开发者中心\n\nhttps://open.weixin.qq.com 1. 注册线上账号，开发者资质认证 2. 注册本地账号，开发者资质认证\n\n#### 网站应用\n\n1.  添加相关信息，并盖章认证，添加授权回调域example.com\n2.  认证通过后获取AppId, AppSecret\n\n#### 公众号应用\n\n#### 本地环境配置\n\n1.  将回调的url www.example.com 添加到host文件中","slug":"微信本地开发及线上环境搭建","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsm0033h3a4j1c2g542","content":"<h4 id=\"微信开发者中心\"><a href=\"#微信开发者中心\" class=\"headerlink\" title=\"微信开发者中心\"></a>微信开发者中心</h4><p><a href=\"https://open.weixin.qq.com\" target=\"_blank\" rel=\"noopener\">https://open.weixin.qq.com</a> 1. 注册线上账号，开发者资质认证 2. 注册本地账号，开发者资质认证</p>\n<h4 id=\"网站应用\"><a href=\"#网站应用\" class=\"headerlink\" title=\"网站应用\"></a>网站应用</h4><ol>\n<li>添加相关信息，并盖章认证，添加授权回调域example.com</li>\n<li>认证通过后获取AppId, AppSecret</li>\n</ol>\n<h4 id=\"公众号应用\"><a href=\"#公众号应用\" class=\"headerlink\" title=\"公众号应用\"></a>公众号应用</h4><h4 id=\"本地环境配置\"><a href=\"#本地环境配置\" class=\"headerlink\" title=\"本地环境配置\"></a>本地环境配置</h4><ol>\n<li>将回调的url <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 添加到host文件中</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"微信开发者中心\"><a href=\"#微信开发者中心\" class=\"headerlink\" title=\"微信开发者中心\"></a>微信开发者中心</h4><p><a href=\"https://open.weixin.qq.com\" target=\"_blank\" rel=\"noopener\">https://open.weixin.qq.com</a> 1. 注册线上账号，开发者资质认证 2. 注册本地账号，开发者资质认证</p>\n<h4 id=\"网站应用\"><a href=\"#网站应用\" class=\"headerlink\" title=\"网站应用\"></a>网站应用</h4><ol>\n<li>添加相关信息，并盖章认证，添加授权回调域example.com</li>\n<li>认证通过后获取AppId, AppSecret</li>\n</ol>\n<h4 id=\"公众号应用\"><a href=\"#公众号应用\" class=\"headerlink\" title=\"公众号应用\"></a>公众号应用</h4><h4 id=\"本地环境配置\"><a href=\"#本地环境配置\" class=\"headerlink\" title=\"本地环境配置\"></a>本地环境配置</h4><ol>\n<li>将回调的url <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 添加到host文件中</li>\n</ol>\n"},{"title":"最新在linux/ubuntu中安装qq的办法","url":"258.html","id":"258","comments":0,"date":"2017-11-22T01:49:34.000Z","_content":"\n通过docker镜像文件的方式安装qq 1, 首先需要在主机上安装docker 2, 下载镜像文件 https://hub.docker.com/r/bestwu/qq/\n\n    sudo docker pull bestwu/qq # 速度慢可以换镜像源\n    \n\n3, 编辑启动脚本\n\n    vim qq.sh\n    sudo docker run -d --name qq --device /dev/snd --net=host \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -v /home/YOURUSERNAME/TencentFiles:/TencentFiles \\ # 此处数据卷的目录填写自己的目录\n    -e DISPLAY=unix$DISPLAY \\\n    -e XMODIFIERS=@im=fcitx \\\n    -e QT_IM_MODULE=fcitx \\\n    -e GTK_IM_MODULE=fcitx \\\n    -e AUDIO_GID=63 \\\n    -e GID=1000 \\\n    -e UID=1000 \\\n    bestwu/qq:latest # 此处版本自行选择，作者提供了im (QQ) light,latest (QQLight) office (TIM)三个版本\n    \n\n4, 启动脚本\n\n    ./qq.sh\n    \n\n5, 感谢作者提供的镜像，本镜像基于深度操作系统.","source":"_posts/最新在linux-ubuntu中安装qq的办法.md","raw":"---\ntitle: 最新在linux/ubuntu中安装qq的办法\nurl: 258.html\nid: 258\ncomments: false\ncategories:\n  - 办公\n  - 运维\ndate: 2017-11-22 09:49:34\ntags:\n---\n\n通过docker镜像文件的方式安装qq 1, 首先需要在主机上安装docker 2, 下载镜像文件 https://hub.docker.com/r/bestwu/qq/\n\n    sudo docker pull bestwu/qq # 速度慢可以换镜像源\n    \n\n3, 编辑启动脚本\n\n    vim qq.sh\n    sudo docker run -d --name qq --device /dev/snd --net=host \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -v /home/YOURUSERNAME/TencentFiles:/TencentFiles \\ # 此处数据卷的目录填写自己的目录\n    -e DISPLAY=unix$DISPLAY \\\n    -e XMODIFIERS=@im=fcitx \\\n    -e QT_IM_MODULE=fcitx \\\n    -e GTK_IM_MODULE=fcitx \\\n    -e AUDIO_GID=63 \\\n    -e GID=1000 \\\n    -e UID=1000 \\\n    bestwu/qq:latest # 此处版本自行选择，作者提供了im (QQ) light,latest (QQLight) office (TIM)三个版本\n    \n\n4, 启动脚本\n\n    ./qq.sh\n    \n\n5, 感谢作者提供的镜像，本镜像基于深度操作系统.","slug":"最新在linux-ubuntu中安装qq的办法","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsn0036h3a4r3asla7w","content":"<p>通过docker镜像文件的方式安装qq 1, 首先需要在主机上安装docker 2, 下载镜像文件 <a href=\"https://hub.docker.com/r/bestwu/qq/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/bestwu/qq/</a></p>\n<pre><code>sudo docker pull bestwu/qq # 速度慢可以换镜像源</code></pre><p>3, 编辑启动脚本</p>\n<pre><code>vim qq.sh\nsudo docker run -d --name qq --device /dev/snd --net=host \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\n-v /home/YOURUSERNAME/TencentFiles:/TencentFiles \\ # 此处数据卷的目录填写自己的目录\n-e DISPLAY=unix$DISPLAY \\\n-e XMODIFIERS=@im=fcitx \\\n-e QT_IM_MODULE=fcitx \\\n-e GTK_IM_MODULE=fcitx \\\n-e AUDIO_GID=63 \\\n-e GID=1000 \\\n-e UID=1000 \\\nbestwu/qq:latest # 此处版本自行选择，作者提供了im (QQ) light,latest (QQLight) office (TIM)三个版本</code></pre><p>4, 启动脚本</p>\n<pre><code>./qq.sh</code></pre><p>5, 感谢作者提供的镜像，本镜像基于深度操作系统.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>通过docker镜像文件的方式安装qq 1, 首先需要在主机上安装docker 2, 下载镜像文件 <a href=\"https://hub.docker.com/r/bestwu/qq/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/bestwu/qq/</a></p>\n<pre><code>sudo docker pull bestwu/qq # 速度慢可以换镜像源</code></pre><p>3, 编辑启动脚本</p>\n<pre><code>vim qq.sh\nsudo docker run -d --name qq --device /dev/snd --net=host \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\n-v /home/YOURUSERNAME/TencentFiles:/TencentFiles \\ # 此处数据卷的目录填写自己的目录\n-e DISPLAY=unix$DISPLAY \\\n-e XMODIFIERS=@im=fcitx \\\n-e QT_IM_MODULE=fcitx \\\n-e GTK_IM_MODULE=fcitx \\\n-e AUDIO_GID=63 \\\n-e GID=1000 \\\n-e UID=1000 \\\nbestwu/qq:latest # 此处版本自行选择，作者提供了im (QQ) light,latest (QQLight) office (TIM)三个版本</code></pre><p>4, 启动脚本</p>\n<pre><code>./qq.sh</code></pre><p>5, 感谢作者提供的镜像，本镜像基于深度操作系统.</p>\n"},{"title":"硬链接软链接方式","url":"17.html","id":"17","comments":0,"date":"2016-11-08T08:44:53.000Z","_content":"\n### 硬链结和符号链接的区别\n\n硬连接记录的是目标的 inode,符号连接记录的是目标的 path。  \n软连接就像是快捷方式,而硬连接就像是备份!符号连接可以做跨分区的 link；而 硬连接由于 inode 的缘故，只能在本分区中做 link.所以,符号连接的使用频率要高的多。\n\n### 软链接文件\n\n软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。和win下的快捷方式差不多。链接文件甚至可以链接不存在的文件，这就产生一般称之为\"断链\"的问题(或曰“现象\")，链接文件甚至可以循环链接自己。类似于编程语言中的递归。 命令格式：\n\n    ln [-s] source_path target_path \n    \n\n### 硬链接文件\n\ninfo ln 命令告诉您，硬链接是已存在文件的另一个名字，硬连接的命令是\n\n    ln -d existfile newfile \n    \n\n硬链接文件有两个限制 1、不允许给目录创建硬链接；  \n2、只有在同一文件系统中的文件之间才能创建链接。  \n对硬链接文件进行读写和删除操作时候，结果和软链接相同。但如果我们删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了愿有的内容。这时，系统就“忘记”了它曾经是硬链接文件。而把他当成一个普通文件。修改其中一个，与其连接的文件同时被修改\n\n### Windows 下创建硬链接，只能适用于 NTFS 文件系统\n\n    fsutil hardlink create NewFileName ExistingFileName\n    \n\n### Windows 下创建软链接\n\nNTFS只支持对目录的软链接，微软把它称作 junction。但是对于文件的软链接，微软也有提供解决方案，那就是快捷方式(Shortcut，.lnk 文件)。不过软链接和快捷方式不是一个层次上的东西，前者是底层文件系统的功能，后者是应用层的功能。Windows 下目录的快捷方式用 dir 看起来是个文件。  \n命令方式\n\n    junction  LinkDirectory ExistingDirectory\n    \n\n例如\n\n    junction d:\\link c:\\winnt\n    \n\n将为c:\\\\winnt 建立一个链接目录 d:\\\\link，C和D分区都要是 NTFS 格式，在资源管理器和 dir 列示中 d:\\\\link 都以目录的面目存在的。d:\\\\link 就像是 c:\\\\winnt 的一个引用一般，删除 d:\\\\link 目录中的内容也就是删除了 c:\\\\winnt 中的内容，但删除 d:\\\\link 本身是不会影响到 c:\\\\winnt 的。\n\n### win7可以使用mklink命令\n\n    λ mklink /?\n    创建符号链接。\n    \n    MKLINK [[/D] | [/H] | [/J]] Link Target\n    \n            /D      创建目录符号链接。默认为文件\n                    符号链接。\n            /H      创建硬链接而非符号链接。\n            /J      创建目录联接。\n            Link    指定新的符号链接名称。\n            Target  指定新链接引用的路径\n                    (相对或绝对)。\n    \n\n其中\\\\D \\\\J区别如下\n\n    E:\\\n    λ mkdir SourceDir\n    E:\\\n    λ mklink /D DTargetDir\\ SourceDir\\\n    为 DTargetDir\\ <<===>> SourceDir\\ 创建的符号链接\n    E:\\\n    λ mklink /J JTargetDir\\ SourceDir\\\n    为 JTargetDir\\ <<===>> SourceDir\\ 创建的联接\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127111417.png) ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127111459.png) SourceDir,JTargetDir,DTargetDir 3个文件夹内部修改/增加/删除都会互相影响。  \n复制JTargetDir, 不会出现新的目录，文件夹文件内部复制 ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127112544.png) 这样复制会影响DTargetDir和SourceDir，慎用！ 复制DTargetDir文件夹会生成一个全新的文件夹，不会被其他文件夹影响，也不能影响其他文件夹。 复制JTargetDir的父级目录不会影响该目录，复制生成的目录下JTargetDir目录会变成独立的文件夹且文件夹内为空 ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127132448.png) !\\[\\]\\[0.048387699760496616\\] \\[0.048387699760496616\\]: http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png 删除JTargetDir,DTargetDir均不影响SourceDir  \n删除SorceDir,会使得JTargetDir和DTargetDir失效 使用mklink /D时需要保证源目录和目标目录在同一个目录下，否则创建成功但不能正常访问\n\n### linux服务器的软硬件链接\n\n软链接可以跨文件系统，硬链接不可以\n\n    ln source target # 硬链接\n    ln -s source target # 软链接\n    \n\n软链接如果跨文件夹，必须使用绝对路径,否则会出现软链接无法访问的情况\n\n    ln -s /var/www/html/Upload/product/manual/en/ /var/www/html/manual","source":"_posts/硬链接软链接方式.md","raw":"---\ntitle: 硬链接软链接方式\ntags:\n  - windows\nurl: 17.html\nid: 17\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-08 16:44:53\n---\n\n### 硬链结和符号链接的区别\n\n硬连接记录的是目标的 inode,符号连接记录的是目标的 path。  \n软连接就像是快捷方式,而硬连接就像是备份!符号连接可以做跨分区的 link；而 硬连接由于 inode 的缘故，只能在本分区中做 link.所以,符号连接的使用频率要高的多。\n\n### 软链接文件\n\n软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。和win下的快捷方式差不多。链接文件甚至可以链接不存在的文件，这就产生一般称之为\"断链\"的问题(或曰“现象\")，链接文件甚至可以循环链接自己。类似于编程语言中的递归。 命令格式：\n\n    ln [-s] source_path target_path \n    \n\n### 硬链接文件\n\ninfo ln 命令告诉您，硬链接是已存在文件的另一个名字，硬连接的命令是\n\n    ln -d existfile newfile \n    \n\n硬链接文件有两个限制 1、不允许给目录创建硬链接；  \n2、只有在同一文件系统中的文件之间才能创建链接。  \n对硬链接文件进行读写和删除操作时候，结果和软链接相同。但如果我们删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了愿有的内容。这时，系统就“忘记”了它曾经是硬链接文件。而把他当成一个普通文件。修改其中一个，与其连接的文件同时被修改\n\n### Windows 下创建硬链接，只能适用于 NTFS 文件系统\n\n    fsutil hardlink create NewFileName ExistingFileName\n    \n\n### Windows 下创建软链接\n\nNTFS只支持对目录的软链接，微软把它称作 junction。但是对于文件的软链接，微软也有提供解决方案，那就是快捷方式(Shortcut，.lnk 文件)。不过软链接和快捷方式不是一个层次上的东西，前者是底层文件系统的功能，后者是应用层的功能。Windows 下目录的快捷方式用 dir 看起来是个文件。  \n命令方式\n\n    junction  LinkDirectory ExistingDirectory\n    \n\n例如\n\n    junction d:\\link c:\\winnt\n    \n\n将为c:\\\\winnt 建立一个链接目录 d:\\\\link，C和D分区都要是 NTFS 格式，在资源管理器和 dir 列示中 d:\\\\link 都以目录的面目存在的。d:\\\\link 就像是 c:\\\\winnt 的一个引用一般，删除 d:\\\\link 目录中的内容也就是删除了 c:\\\\winnt 中的内容，但删除 d:\\\\link 本身是不会影响到 c:\\\\winnt 的。\n\n### win7可以使用mklink命令\n\n    λ mklink /?\n    创建符号链接。\n    \n    MKLINK [[/D] | [/H] | [/J]] Link Target\n    \n            /D      创建目录符号链接。默认为文件\n                    符号链接。\n            /H      创建硬链接而非符号链接。\n            /J      创建目录联接。\n            Link    指定新的符号链接名称。\n            Target  指定新链接引用的路径\n                    (相对或绝对)。\n    \n\n其中\\\\D \\\\J区别如下\n\n    E:\\\n    λ mkdir SourceDir\n    E:\\\n    λ mklink /D DTargetDir\\ SourceDir\\\n    为 DTargetDir\\ <<===>> SourceDir\\ 创建的符号链接\n    E:\\\n    λ mklink /J JTargetDir\\ SourceDir\\\n    为 JTargetDir\\ <<===>> SourceDir\\ 创建的联接\n    \n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127111417.png) ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127111459.png) SourceDir,JTargetDir,DTargetDir 3个文件夹内部修改/增加/删除都会互相影响。  \n复制JTargetDir, 不会出现新的目录，文件夹文件内部复制 ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127112544.png) 这样复制会影响DTargetDir和SourceDir，慎用！ 复制DTargetDir文件夹会生成一个全新的文件夹，不会被其他文件夹影响，也不能影响其他文件夹。 复制JTargetDir的父级目录不会影响该目录，复制生成的目录下JTargetDir目录会变成独立的文件夹且文件夹内为空 ![](http://7xq3ry.com1.z0.glb.clouddn.com/20160127132448.png) !\\[\\]\\[0.048387699760496616\\] \\[0.048387699760496616\\]: http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png 删除JTargetDir,DTargetDir均不影响SourceDir  \n删除SorceDir,会使得JTargetDir和DTargetDir失效 使用mklink /D时需要保证源目录和目标目录在同一个目录下，否则创建成功但不能正常访问\n\n### linux服务器的软硬件链接\n\n软链接可以跨文件系统，硬链接不可以\n\n    ln source target # 硬链接\n    ln -s source target # 软链接\n    \n\n软链接如果跨文件夹，必须使用绝对路径,否则会出现软链接无法访问的情况\n\n    ln -s /var/www/html/Upload/product/manual/en/ /var/www/html/manual","slug":"硬链接软链接方式","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwso0038h3a4pkwkaz52","content":"<h3 id=\"硬链结和符号链接的区别\"><a href=\"#硬链结和符号链接的区别\" class=\"headerlink\" title=\"硬链结和符号链接的区别\"></a>硬链结和符号链接的区别</h3><p>硬连接记录的是目标的 inode,符号连接记录的是目标的 path。<br>软连接就像是快捷方式,而硬连接就像是备份!符号连接可以做跨分区的 link；而 硬连接由于 inode 的缘故，只能在本分区中做 link.所以,符号连接的使用频率要高的多。</p>\n<h3 id=\"软链接文件\"><a href=\"#软链接文件\" class=\"headerlink\" title=\"软链接文件\"></a>软链接文件</h3><p>软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。和win下的快捷方式差不多。链接文件甚至可以链接不存在的文件，这就产生一般称之为”断链”的问题(或曰“现象”)，链接文件甚至可以循环链接自己。类似于编程语言中的递归。 命令格式：</p>\n<pre><code>ln [-s] source_path target_path </code></pre><h3 id=\"硬链接文件\"><a href=\"#硬链接文件\" class=\"headerlink\" title=\"硬链接文件\"></a>硬链接文件</h3><p>info ln 命令告诉您，硬链接是已存在文件的另一个名字，硬连接的命令是</p>\n<pre><code>ln -d existfile newfile </code></pre><p>硬链接文件有两个限制 1、不允许给目录创建硬链接；<br>2、只有在同一文件系统中的文件之间才能创建链接。<br>对硬链接文件进行读写和删除操作时候，结果和软链接相同。但如果我们删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了愿有的内容。这时，系统就“忘记”了它曾经是硬链接文件。而把他当成一个普通文件。修改其中一个，与其连接的文件同时被修改</p>\n<h3 id=\"Windows-下创建硬链接，只能适用于-NTFS-文件系统\"><a href=\"#Windows-下创建硬链接，只能适用于-NTFS-文件系统\" class=\"headerlink\" title=\"Windows 下创建硬链接，只能适用于 NTFS 文件系统\"></a>Windows 下创建硬链接，只能适用于 NTFS 文件系统</h3><pre><code>fsutil hardlink create NewFileName ExistingFileName</code></pre><h3 id=\"Windows-下创建软链接\"><a href=\"#Windows-下创建软链接\" class=\"headerlink\" title=\"Windows 下创建软链接\"></a>Windows 下创建软链接</h3><p>NTFS只支持对目录的软链接，微软把它称作 junction。但是对于文件的软链接，微软也有提供解决方案，那就是快捷方式(Shortcut，.lnk 文件)。不过软链接和快捷方式不是一个层次上的东西，前者是底层文件系统的功能，后者是应用层的功能。Windows 下目录的快捷方式用 dir 看起来是个文件。<br>命令方式</p>\n<pre><code>junction  LinkDirectory ExistingDirectory</code></pre><p>例如</p>\n<pre><code>junction d:\\link c:\\winnt</code></pre><p>将为c:\\winnt 建立一个链接目录 d:\\link，C和D分区都要是 NTFS 格式，在资源管理器和 dir 列示中 d:\\link 都以目录的面目存在的。d:\\link 就像是 c:\\winnt 的一个引用一般，删除 d:\\link 目录中的内容也就是删除了 c:\\winnt 中的内容，但删除 d:\\link 本身是不会影响到 c:\\winnt 的。</p>\n<h3 id=\"win7可以使用mklink命令\"><a href=\"#win7可以使用mklink命令\" class=\"headerlink\" title=\"win7可以使用mklink命令\"></a>win7可以使用mklink命令</h3><pre><code>λ mklink /?\n创建符号链接。\n\nMKLINK [[/D] | [/H] | [/J]] Link Target\n\n        /D      创建目录符号链接。默认为文件\n                符号链接。\n        /H      创建硬链接而非符号链接。\n        /J      创建目录联接。\n        Link    指定新的符号链接名称。\n        Target  指定新链接引用的路径\n                (相对或绝对)。</code></pre><p>其中\\D \\J区别如下</p>\n<pre><code>E:\\\nλ mkdir SourceDir\nE:\\\nλ mklink /D DTargetDir\\ SourceDir\\\n为 DTargetDir\\ &lt;&lt;===&gt;&gt; SourceDir\\ 创建的符号链接\nE:\\\nλ mklink /J JTargetDir\\ SourceDir\\\n为 JTargetDir\\ &lt;&lt;===&gt;&gt; SourceDir\\ 创建的联接</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127111417.png\" alt> <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127111459.png\" alt> SourceDir,JTargetDir,DTargetDir 3个文件夹内部修改/增加/删除都会互相影响。<br>复制JTargetDir, 不会出现新的目录，文件夹文件内部复制 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127112544.png\" alt> 这样复制会影响DTargetDir和SourceDir，慎用！ 复制DTargetDir文件夹会生成一个全新的文件夹，不会被其他文件夹影响，也不能影响其他文件夹。 复制JTargetDir的父级目录不会影响该目录，复制生成的目录下JTargetDir目录会变成独立的文件夹且文件夹内为空 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127132448.png\" alt> ![][0.048387699760496616] [0.048387699760496616]: <a href=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png\" target=\"_blank\" rel=\"noopener\">http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png</a> 删除JTargetDir,DTargetDir均不影响SourceDir<br>删除SorceDir,会使得JTargetDir和DTargetDir失效 使用mklink /D时需要保证源目录和目标目录在同一个目录下，否则创建成功但不能正常访问</p>\n<h3 id=\"linux服务器的软硬件链接\"><a href=\"#linux服务器的软硬件链接\" class=\"headerlink\" title=\"linux服务器的软硬件链接\"></a>linux服务器的软硬件链接</h3><p>软链接可以跨文件系统，硬链接不可以</p>\n<pre><code>ln source target # 硬链接\nln -s source target # 软链接</code></pre><p>软链接如果跨文件夹，必须使用绝对路径,否则会出现软链接无法访问的情况</p>\n<pre><code>ln -s /var/www/html/Upload/product/manual/en/ /var/www/html/manual</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"硬链结和符号链接的区别\"><a href=\"#硬链结和符号链接的区别\" class=\"headerlink\" title=\"硬链结和符号链接的区别\"></a>硬链结和符号链接的区别</h3><p>硬连接记录的是目标的 inode,符号连接记录的是目标的 path。<br>软连接就像是快捷方式,而硬连接就像是备份!符号连接可以做跨分区的 link；而 硬连接由于 inode 的缘故，只能在本分区中做 link.所以,符号连接的使用频率要高的多。</p>\n<h3 id=\"软链接文件\"><a href=\"#软链接文件\" class=\"headerlink\" title=\"软链接文件\"></a>软链接文件</h3><p>软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。和win下的快捷方式差不多。链接文件甚至可以链接不存在的文件，这就产生一般称之为”断链”的问题(或曰“现象”)，链接文件甚至可以循环链接自己。类似于编程语言中的递归。 命令格式：</p>\n<pre><code>ln [-s] source_path target_path </code></pre><h3 id=\"硬链接文件\"><a href=\"#硬链接文件\" class=\"headerlink\" title=\"硬链接文件\"></a>硬链接文件</h3><p>info ln 命令告诉您，硬链接是已存在文件的另一个名字，硬连接的命令是</p>\n<pre><code>ln -d existfile newfile </code></pre><p>硬链接文件有两个限制 1、不允许给目录创建硬链接；<br>2、只有在同一文件系统中的文件之间才能创建链接。<br>对硬链接文件进行读写和删除操作时候，结果和软链接相同。但如果我们删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了愿有的内容。这时，系统就“忘记”了它曾经是硬链接文件。而把他当成一个普通文件。修改其中一个，与其连接的文件同时被修改</p>\n<h3 id=\"Windows-下创建硬链接，只能适用于-NTFS-文件系统\"><a href=\"#Windows-下创建硬链接，只能适用于-NTFS-文件系统\" class=\"headerlink\" title=\"Windows 下创建硬链接，只能适用于 NTFS 文件系统\"></a>Windows 下创建硬链接，只能适用于 NTFS 文件系统</h3><pre><code>fsutil hardlink create NewFileName ExistingFileName</code></pre><h3 id=\"Windows-下创建软链接\"><a href=\"#Windows-下创建软链接\" class=\"headerlink\" title=\"Windows 下创建软链接\"></a>Windows 下创建软链接</h3><p>NTFS只支持对目录的软链接，微软把它称作 junction。但是对于文件的软链接，微软也有提供解决方案，那就是快捷方式(Shortcut，.lnk 文件)。不过软链接和快捷方式不是一个层次上的东西，前者是底层文件系统的功能，后者是应用层的功能。Windows 下目录的快捷方式用 dir 看起来是个文件。<br>命令方式</p>\n<pre><code>junction  LinkDirectory ExistingDirectory</code></pre><p>例如</p>\n<pre><code>junction d:\\link c:\\winnt</code></pre><p>将为c:\\winnt 建立一个链接目录 d:\\link，C和D分区都要是 NTFS 格式，在资源管理器和 dir 列示中 d:\\link 都以目录的面目存在的。d:\\link 就像是 c:\\winnt 的一个引用一般，删除 d:\\link 目录中的内容也就是删除了 c:\\winnt 中的内容，但删除 d:\\link 本身是不会影响到 c:\\winnt 的。</p>\n<h3 id=\"win7可以使用mklink命令\"><a href=\"#win7可以使用mklink命令\" class=\"headerlink\" title=\"win7可以使用mklink命令\"></a>win7可以使用mklink命令</h3><pre><code>λ mklink /?\n创建符号链接。\n\nMKLINK [[/D] | [/H] | [/J]] Link Target\n\n        /D      创建目录符号链接。默认为文件\n                符号链接。\n        /H      创建硬链接而非符号链接。\n        /J      创建目录联接。\n        Link    指定新的符号链接名称。\n        Target  指定新链接引用的路径\n                (相对或绝对)。</code></pre><p>其中\\D \\J区别如下</p>\n<pre><code>E:\\\nλ mkdir SourceDir\nE:\\\nλ mklink /D DTargetDir\\ SourceDir\\\n为 DTargetDir\\ &lt;&lt;===&gt;&gt; SourceDir\\ 创建的符号链接\nE:\\\nλ mklink /J JTargetDir\\ SourceDir\\\n为 JTargetDir\\ &lt;&lt;===&gt;&gt; SourceDir\\ 创建的联接</code></pre><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127111417.png\" alt> <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127111459.png\" alt> SourceDir,JTargetDir,DTargetDir 3个文件夹内部修改/增加/删除都会互相影响。<br>复制JTargetDir, 不会出现新的目录，文件夹文件内部复制 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127112544.png\" alt> 这样复制会影响DTargetDir和SourceDir，慎用！ 复制DTargetDir文件夹会生成一个全新的文件夹，不会被其他文件夹影响，也不能影响其他文件夹。 复制JTargetDir的父级目录不会影响该目录，复制生成的目录下JTargetDir目录会变成独立的文件夹且文件夹内为空 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127132448.png\" alt> ![][0.048387699760496616] [0.048387699760496616]: <a href=\"http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png\" target=\"_blank\" rel=\"noopener\">http://7xq3ry.com1.z0.glb.clouddn.com/20160127132633.png</a> 删除JTargetDir,DTargetDir均不影响SourceDir<br>删除SorceDir,会使得JTargetDir和DTargetDir失效 使用mklink /D时需要保证源目录和目标目录在同一个目录下，否则创建成功但不能正常访问</p>\n<h3 id=\"linux服务器的软硬件链接\"><a href=\"#linux服务器的软硬件链接\" class=\"headerlink\" title=\"linux服务器的软硬件链接\"></a>linux服务器的软硬件链接</h3><p>软链接可以跨文件系统，硬链接不可以</p>\n<pre><code>ln source target # 硬链接\nln -s source target # 软链接</code></pre><p>软链接如果跨文件夹，必须使用绝对路径,否则会出现软链接无法访问的情况</p>\n<pre><code>ln -s /var/www/html/Upload/product/manual/en/ /var/www/html/manual</code></pre>"},{"title":"ubuntu16.04安装及使用SVN","url":"570.html","id":"570","comments":0,"date":"2018-10-09T10:21:49.000Z","_content":"\n#### 服务器端安装\n\n[官方推荐](https://help.ubuntu.com/lts/serverguide/subversion.html.en/)\n\n    # 安装包\n    sudo apt install subversion apache2 libapache2-svn\n    # 创建目录及两个svn项目\n    mkdir svn\n    svnadmin create svn/doneself-app\n    svnadmin create svn/doneself-web\n    # 多个项目公用一个权限文件\n    cp -rf svn/doneself/conf/passwd snv/\n    cp -rf svn/doneself/conf/authz snv/\n    \n\n    # 编辑每个项目的配置文件\n    vim svn/doneself/conf/svnserve.conf\n    [general]   \n    # 匿名用户没有权限\n    anon-access = none\n    # 验证用户写权限\n    auth-access = write\n    # 账号密码文件路径\n    password-db = ../../passwd \n    # 权限文件路径\n    authz-db = ../../authz\n    \n\n    # 编写账号密码文件\n    vim svn/passwd\n    [users] \n    ui = ui  # 注意空格\n    \n\n    # 编写组和权限文件\n    vim svn/\n    [groups]\n    ui = ui  \n    [doneself-app:/]  \n    ui = wr\n    \n\n#### 启动svn服务器\n\n    # 启动,默认端口号3690\n    sudo svnserve -d -r /home/svn\n    # 结束\n    sudo pkill svnserve","source":"_posts/ubuntu16.04安装及使用SVN.md","raw":"---\ntitle: ubuntu16.04安装及使用SVN\nurl: 570.html\nid: 570\ncomments: false\ncategories:\n  - 办公\n  - 后端\n  - 运维\ndate: 2018-10-09 18:21:49\ntags:\n---\n\n#### 服务器端安装\n\n[官方推荐](https://help.ubuntu.com/lts/serverguide/subversion.html.en/)\n\n    # 安装包\n    sudo apt install subversion apache2 libapache2-svn\n    # 创建目录及两个svn项目\n    mkdir svn\n    svnadmin create svn/doneself-app\n    svnadmin create svn/doneself-web\n    # 多个项目公用一个权限文件\n    cp -rf svn/doneself/conf/passwd snv/\n    cp -rf svn/doneself/conf/authz snv/\n    \n\n    # 编辑每个项目的配置文件\n    vim svn/doneself/conf/svnserve.conf\n    [general]   \n    # 匿名用户没有权限\n    anon-access = none\n    # 验证用户写权限\n    auth-access = write\n    # 账号密码文件路径\n    password-db = ../../passwd \n    # 权限文件路径\n    authz-db = ../../authz\n    \n\n    # 编写账号密码文件\n    vim svn/passwd\n    [users] \n    ui = ui  # 注意空格\n    \n\n    # 编写组和权限文件\n    vim svn/\n    [groups]\n    ui = ui  \n    [doneself-app:/]  \n    ui = wr\n    \n\n#### 启动svn服务器\n\n    # 启动,默认端口号3690\n    sudo svnserve -d -r /home/svn\n    # 结束\n    sudo pkill svnserve","slug":"ubuntu16.04安装及使用SVN","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwsp003bh3a4yf41f4lr","content":"<h4 id=\"服务器端安装\"><a href=\"#服务器端安装\" class=\"headerlink\" title=\"服务器端安装\"></a>服务器端安装</h4><p><a href=\"https://help.ubuntu.com/lts/serverguide/subversion.html.en/\" target=\"_blank\" rel=\"noopener\">官方推荐</a></p>\n<pre><code># 安装包\nsudo apt install subversion apache2 libapache2-svn\n# 创建目录及两个svn项目\nmkdir svn\nsvnadmin create svn/doneself-app\nsvnadmin create svn/doneself-web\n# 多个项目公用一个权限文件\ncp -rf svn/doneself/conf/passwd snv/\ncp -rf svn/doneself/conf/authz snv/\n\n\n# 编辑每个项目的配置文件\nvim svn/doneself/conf/svnserve.conf\n[general]   \n# 匿名用户没有权限\nanon-access = none\n# 验证用户写权限\nauth-access = write\n# 账号密码文件路径\npassword-db = ../../passwd \n# 权限文件路径\nauthz-db = ../../authz\n\n\n# 编写账号密码文件\nvim svn/passwd\n[users] \nui = ui  # 注意空格\n\n\n# 编写组和权限文件\nvim svn/\n[groups]\nui = ui  \n[doneself-app:/]  \nui = wr</code></pre><h4 id=\"启动svn服务器\"><a href=\"#启动svn服务器\" class=\"headerlink\" title=\"启动svn服务器\"></a>启动svn服务器</h4><pre><code># 启动,默认端口号3690\nsudo svnserve -d -r /home/svn\n# 结束\nsudo pkill svnserve</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"服务器端安装\"><a href=\"#服务器端安装\" class=\"headerlink\" title=\"服务器端安装\"></a>服务器端安装</h4><p><a href=\"https://help.ubuntu.com/lts/serverguide/subversion.html.en/\" target=\"_blank\" rel=\"noopener\">官方推荐</a></p>\n<pre><code># 安装包\nsudo apt install subversion apache2 libapache2-svn\n# 创建目录及两个svn项目\nmkdir svn\nsvnadmin create svn/doneself-app\nsvnadmin create svn/doneself-web\n# 多个项目公用一个权限文件\ncp -rf svn/doneself/conf/passwd snv/\ncp -rf svn/doneself/conf/authz snv/\n\n\n# 编辑每个项目的配置文件\nvim svn/doneself/conf/svnserve.conf\n[general]   \n# 匿名用户没有权限\nanon-access = none\n# 验证用户写权限\nauth-access = write\n# 账号密码文件路径\npassword-db = ../../passwd \n# 权限文件路径\nauthz-db = ../../authz\n\n\n# 编写账号密码文件\nvim svn/passwd\n[users] \nui = ui  # 注意空格\n\n\n# 编写组和权限文件\nvim svn/\n[groups]\nui = ui  \n[doneself-app:/]  \nui = wr</code></pre><h4 id=\"启动svn服务器\"><a href=\"#启动svn服务器\" class=\"headerlink\" title=\"启动svn服务器\"></a>启动svn服务器</h4><pre><code># 启动,默认端口号3690\nsudo svnserve -d -r /home/svn\n# 结束\nsudo pkill svnserve</code></pre>"},{"title":"Linux开发环境常用软件","url":"36.html","id":"36","comments":0,"date":"2016-11-09T02:58:19.000Z","_content":"\n#### 显示电脑硬件信息\n\n    $ sudo add-apt-repository ppa:dawidd0811/neofetch\n    $ sudo apt-get update\n    $ sudo apt-get install neofetch\n    neofetch\n    \n\n#### 安装独立显卡驱动\n\nhttps://blog.csdn.net/ghw15221836342/article/details/79571559\n\n    # 驱动版本查询   https://www.nvidia.com/Download/index.aspx?lang=en-us\n    # 安装\n    sudo add-apt-repository ppa:graphics-drivers/ppa  \n    sudo apt-get update  \n    sudo apt-get install nvidia-390 #此处要根据上面查询到的版本适当更改\n    sudo apt-get install mesa-common-dev  \n    sudo apt-get install freeglut3-de\n    # 测试\n    nvidia-smi  #若出现电脑GPU列表，即安装成功\n    或者\n    nvidia-settings #显示你的显卡信息\n    ````\n    \n    \n    #### Chrome浏览器\n    下载地址 [百度云盘](http://pan.baidu.com/s/1hq0Nom4)\n    \n    #### 配置SS\n    \n\n安装\n==\n\napt-get install python-pip pip install s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s\n\n启动\n==\n\nsslocal -s server\\_ip -p server\\_port -l 1080 -k password -t 600 -m aes-256-cfb\n\n简写\n==\n\nsslocal -s ip -p port -k \"password\"\n\n    开机启动配置  \n    在/home下新建文件ss.sh脚本\n    \n\n#!/bin/bash #文件名:ss.sh sslocal -s ip -p port -k \"password\"\n\n    编辑开机启动文件\n    \n\nsudo vim /etc/rc.local ```\n\n    # 最后加入以下内容\n    nohup bash /home/ss.sh>/home/ss.txt &\n    \n\n代理设置\n\n    service： 127.0.0.1\n    port ： 1080\n    type： socks5\n    \n\n#### 配置proxychains\n\n    # 安装\n    sudo apt install proxychains\n    sudo vim /etc/proxychains.conf\n    ~ socks5 127.0.0.1 1080  # 最后一行加入socks代理\n    # 测试\n    proxychains wget https://www.google.com\n    \n\n#### wine qq（现在推荐docker安装qq）\n\n安装wine1.7以上版本  \n安装WineQQ7.8-20151109-Longene.deb版本  \n下载[网盘](https://pan.baidu.com/s/1bpLn0vl)\n\n#### elinks 纯文本浏览器\n\n    sudo apt-get install elinks   # 安装\n    \n\n    elinks www.zhuohc.com  # 使用\n    \n\n#### unzip / zip\n\n解决中文乱码\n\n    unzip -O CP936 xxx.zip\n    \n\n解压到指定目录\n\n    unzip -O xxx.zip -d xxx/\n    \n\n压缩文件\n\n    zip -r yasuo.zip abc.txt dir1\n    \n\n#### wps office办公\n\n显示字体确实错误 [下载字体](https://pan.baidu.com/s/1bpLn0vl)  \n将字体复制到linux字体中\n\n    sudo cp * /usr/share/fonts\n    \n\n生成字体索引信息\n\n    sudo mkfontscale\n    \n    sudo mkfontdir\n    \n\n更新字体缓存\n\n    sudo fc-cache\n    \n\n中文无法输入\n\n    $ vi /usr/bin/wps  # word文档\n    \n\n    #!/bin/bash\n    export XMODIFIERS=\"@im=fcitx\"  # 添加的内容  \n    export QT_IM_MODULE=\"fcitx\"     # 添加的内容    \n    gOpt=\n    #gOptExt=-multiply\n    gTemplateExt=(\"wpt\" \"dot\" \"dotx\")\n    \n\n    $ vi /usr/bin/et   # excel表格\n    \n\n    #!/bin/bash\n    export XMODIFIERS=\"@im=fcitx\"  # 添加的内容  \n    export QT_IM_MODULE=\"fcitx\"  # 添加的内容  \n    gOpt=\n    #gOptExt=-multiply\n    \n\n#### 输入法\n\n系统自带或者sougou输入法 ， 倬彼昊天系列皮肤\n\n#### 截屏\n\n系统设置>键盘>自定义快捷键>+>  \n名称填screenshot  \n命令\n\n    gnome-screenshot -a\n    \n\n在disabled修改快捷键\n\n#### 下载\n\n安装uget\n\n    sudo add-apt-repository ppa:plushuang-tw/uget-stable \n    sudo apt-get update \n    sudo apt-get install uget\n    \n\n安装aria2\n\n    sudo add-apt-repository ppa:t-tujikawa/ppa \n    sudo apt-get update \n    sudo apt-get install aria2\n    \n\n在uget gui里编辑插件，选择aria2\n\n#### 美化监视工具\n\n     sudo apt-get install conky  \n     sudo add-apt-repository ppa:teejee2008/ppa\n     sudo apt-get update\n     sudo apt-get install conky-manager\n     ```\n     显示桌面会自动隐藏conky的bug解决办法:  \n     编辑配置文件\n     ```\n     # own_window_type normal\n    own_window_type desktop\n    \n\n\\#### 快速搜索文件\n\n    sudo add-apt-repository ppa:synapse-core/testing\n    sudo apt-get update\n    sudo apt-get install synapse  \n    \n\n#### 卸载synapse\n\n    sudo apt-get remove synapse\n    \n\n#### 移除PPA\n\n    sudo apt-get install ppa-purge\n    sudo ppa-purge ppa:synapse-core/testing\n    \n\n#### 安装oh-my-zsh\n\n    # https://github.com/robbyrussell/oh-my-zsh\n    $ sudo apt-get install git\n    $ sudo apt-get install zsh\n    $ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n    $ chsh -s /bin/zsh # 更改默认bash\n    //或:\n    $ chsh -s `which zsh`\n    $ sudo reboot\n    \n\n#### terminator 终端管理软件\n\n安装\n\n    sudo add-apt-repository ppa:gnome-terminator\n    sudo apt-get update\n    sudo apt-get install terminator\n    \n\n基本设置方法\n\n> 右键点击终端任意区域，选择首选项\n\n设置[solarized](https://github.com/ghuntley/terminator-solarized)配色（[参考](http://blog.codinglabs.org/articles/getting-started-with-ubuntu.html)）\n\n    cd ~/.config/terminator  \n    vim config\n    \n\n覆盖以下内容\n\n    [global_config]\n        title_transmit_bg_color = \"#d30102\"\n        focus = system\n        suppress_multiple_term_dialog = True\n    [keybindings]\n    [profiles]\n        [[default]]\n            palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\"\n            copy_on_selection = True\n            background_image = None\n            background_darkness = 0.95\n            background_type = transparent\n            use_system_font = False\n            cursor_color = \"#eee8d5\"\n            foreground_color = \"#839496\"\n            show_titlebar = False\n            font = Monospace 11\n            background_color = \"#002b36\"\n        [[solarized-dark]]\n            palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\"\n            background_color = \"#002b36\"\n            background_image = None\n            cursor_color = \"#eee8d5\"\n            foreground_color = \"#839496\"\n        [[solarized-light]]\n            palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\"\n            background_color = \"#fdf6e3\"\n            background_image = None\n            cursor_color = \"#002b36\"\n            foreground_color = \"#657b83\"\n    [layouts]\n        [[default]]\n            [[[child1]]]\n                type = Terminal\n                parent = window0\n                profile = default\n            [[[window0]]]\n                type = Window\n                parent = \"\"\n    [plugins]\n    \n\n以上配置后会修改配色方案，但是没有bright色  \n[dircolors-solarized](https://github.com/seebi/dircolors-solarized)项目提供了适合于solarized的dircolors配色方案，只要选择合适的方案使用就可以了。\n\n    curl https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-dark > ~/.dircolors\n    \n\n然后在~/.bashrc中加入如下配置：\n\n    # enable color support of ls and also add handy aliases\n    if [ -x /usr/bin/dircolors ]; then\n        test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\n        alias ls='ls --color=auto'\n        #alias dir='dir --color=auto'\n        #alias vdir='vdir --color=auto'\n    \n        alias grep='grep --color=auto'\n        alias fgrep='fgrep --color=auto'\n        alias egrep='egrep --color=auto'\n    fi\n    \n    # some more ls aliases\n    alias ll='ls -alF'\n    alias la='ls -A'\n    alias l='ls -CF'\n    \n\n执行\n\n    source ~/.bashrc\n    \n\n#### tmux配合terminator使用\n\n安装\n\n    sudo apt-get install tmux\n    \n\n配置\n\n    touch .tmux.conf\n    \n\n配置内容和使用方法\n\n    # 设置前缀为Ctrl + x\n    set -g prefix C-x\n    # 解除Ctrl+b 与前缀的对应关系\n    unbind C-b\n    # 将r 设置为加载配置文件，并显示\"reloaded!\"信息\n    bind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\n    \n    \n    \n    # copy-mode 将快捷键设置为vi 模式\n    setw -g mode-keys vi\n    \n    # tmux-powerline设置\n    set-option -g status on\n    set-option -g status-interval 2\n    set-option -g status-utf8 on\n    set-option -g status-justify \"centre\"\n    set-option -g status-left-length 60\n    set-option -g status-right-length 90\n    set-option -g status-left \"#(~/.tmux/tmux-powerline/powerline.sh left)\"\n    set-option -g status-right \"#(~/.tmux/tmux-powerline/powerline.sh right)\"\n    # 将窗口列表换成 powerline的风格\n    set-window-option -g window-status-current-format \"#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀\"\n    # 设置默认bash\n    set-option -g default-shell /bin/zsh\n    \n    \n    ########## 复制模式  ##########\n    \n    # copy mode 复制模式\n    # 'prefix +  [ '进入复制模式\n    # 按space 开始复制\n    # Enter退出复制模式\n    \n\n需要安装powerline插件\n\n    https://github.com/erikw/tmux-powerline\n    \n\n显示日期的星期\n\n    vim data_day.sh\n     # date +\"%a\"改成大写\n     date +\"%A\"\n    \n\npowerline字体安装查看 http://powerline.readthedocs.io/en/latest/installation/linux.html 在terminator配置自动启动turm\n\n    首选项->配置>命令>自定义命令  \n     ([[ -f \"$TMUX\" ]] && tmux -2 -S $TMUX) || (TMUX=\"\" tmux -2)\n    \n\n自动部署多窗口任务\n\n    touch ~/development.start\n    chmod +x development.start\n    \n\n    tmux has-session -t development\n    if [ $? != 0 ]\n    then\n        tmux new-session -s development -n editor -d\n        tmux send-keys -t development 'vim' C-m\n        tmux split-window -v -t development\n        tmux select-layout -t development main-horizontal\n        tmux new-window -n bash -t development\n        tmux new-window -n ssh -t development\n        tmux new-window -n mysql -t development\n        tmux new-window -n front-end -t development\n        tmux select-window -t development:1\n    fi\n    tmux attach -t development\n    \n\n执行文件\n\n    ~/development.start\n    \n\n#### Visual Studio Code\n\n通过官方PPA来安装Ubuntu Make\n\n    sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make\n    sudo apt-get update\n    sudo apt-get install ubuntu-make\n    \n\n安装Ubuntu Make完后，接着使用下列命令安装Visual Studio Code\n\n    umake web visual-studio-code\n    \n\n卸载命令\n\n    umake web visual-studio-code --remove\n    \n\n#### wine\n\n卸载wineqq\n\n    sudo dpkg -l | grep qq  # 找到安装包名称   \n    sudo dpkg -r wine-qq7.8-longeneteam # 卸载\n    \n\n#### curl http请求\n\n    curl \"http://www.baidu.com\" # 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地  \n    curl -i \"http://www.baidu.com\" # 显示全部信息  \n    curl -l \"http://www.baidu.com\" # 只显示头部信息  \n    curl -v \"http://www.baidu.com\" # 显示get请求全过程解析    \n    curl -d \"param1=value1¶m2=value2\" \"http://www.baidu.com\" # post请求  \n    \n\n#### 安卓虚拟机genymotion\n\n前提必须安装virtualBox  \n下载地址: https://www.genymotion.com/download/  \n需要先注册,下载后执行\n\n    chmod +x genymotion-2.2.2_x64.bin\n    ./genymotion-2.2.2_x64.bin -d /home/user\n    \n\n执行home/user/genymotion/genymotion\n\n#### 安装为知笔记\n\n简易版本\n\n    http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/pool/main/w/wiznote/\n    \n\n编译安装\n\n    http://www.wiz.cn/compile-client.html\n    \n\nchrome安装扩展\n\n    https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab/related?hl=zh-CN\n    \n\n#### 安装系统状态指示器\n\n    sudo add-apt-repository ppa:indicator-multiload/stable-daily\n    \n    sudo apt-get update\n    \n    sudo apt-get install indicator-multiload\n    \n\n#### 安装albert搜索框\n\n    sudo add-apt-repository ppa:noobslab/macbuntu\n    sudo apt-get update\n    sudo apt-get install albert\n    设置快捷键Ctrl+/ 样式NUMIX\n    \n\n#### 下载特殊文件\n\n    sudo apt-get install ktorrent\n    sudo apt-get install amule","source":"_posts/Linux开发环境常用软件.md","raw":"---\ntitle: Linux开发环境常用软件\ntags:\n  - linux\n  - ubuntu\nurl: 36.html\nid: 36\ncomments: false\ncategories:\n  - 办公\n  - 运维\ndate: 2016-11-09 10:58:19\n---\n\n#### 显示电脑硬件信息\n\n    $ sudo add-apt-repository ppa:dawidd0811/neofetch\n    $ sudo apt-get update\n    $ sudo apt-get install neofetch\n    neofetch\n    \n\n#### 安装独立显卡驱动\n\nhttps://blog.csdn.net/ghw15221836342/article/details/79571559\n\n    # 驱动版本查询   https://www.nvidia.com/Download/index.aspx?lang=en-us\n    # 安装\n    sudo add-apt-repository ppa:graphics-drivers/ppa  \n    sudo apt-get update  \n    sudo apt-get install nvidia-390 #此处要根据上面查询到的版本适当更改\n    sudo apt-get install mesa-common-dev  \n    sudo apt-get install freeglut3-de\n    # 测试\n    nvidia-smi  #若出现电脑GPU列表，即安装成功\n    或者\n    nvidia-settings #显示你的显卡信息\n    ````\n    \n    \n    #### Chrome浏览器\n    下载地址 [百度云盘](http://pan.baidu.com/s/1hq0Nom4)\n    \n    #### 配置SS\n    \n\n安装\n==\n\napt-get install python-pip pip install s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s\n\n启动\n==\n\nsslocal -s server\\_ip -p server\\_port -l 1080 -k password -t 600 -m aes-256-cfb\n\n简写\n==\n\nsslocal -s ip -p port -k \"password\"\n\n    开机启动配置  \n    在/home下新建文件ss.sh脚本\n    \n\n#!/bin/bash #文件名:ss.sh sslocal -s ip -p port -k \"password\"\n\n    编辑开机启动文件\n    \n\nsudo vim /etc/rc.local ```\n\n    # 最后加入以下内容\n    nohup bash /home/ss.sh>/home/ss.txt &\n    \n\n代理设置\n\n    service： 127.0.0.1\n    port ： 1080\n    type： socks5\n    \n\n#### 配置proxychains\n\n    # 安装\n    sudo apt install proxychains\n    sudo vim /etc/proxychains.conf\n    ~ socks5 127.0.0.1 1080  # 最后一行加入socks代理\n    # 测试\n    proxychains wget https://www.google.com\n    \n\n#### wine qq（现在推荐docker安装qq）\n\n安装wine1.7以上版本  \n安装WineQQ7.8-20151109-Longene.deb版本  \n下载[网盘](https://pan.baidu.com/s/1bpLn0vl)\n\n#### elinks 纯文本浏览器\n\n    sudo apt-get install elinks   # 安装\n    \n\n    elinks www.zhuohc.com  # 使用\n    \n\n#### unzip / zip\n\n解决中文乱码\n\n    unzip -O CP936 xxx.zip\n    \n\n解压到指定目录\n\n    unzip -O xxx.zip -d xxx/\n    \n\n压缩文件\n\n    zip -r yasuo.zip abc.txt dir1\n    \n\n#### wps office办公\n\n显示字体确实错误 [下载字体](https://pan.baidu.com/s/1bpLn0vl)  \n将字体复制到linux字体中\n\n    sudo cp * /usr/share/fonts\n    \n\n生成字体索引信息\n\n    sudo mkfontscale\n    \n    sudo mkfontdir\n    \n\n更新字体缓存\n\n    sudo fc-cache\n    \n\n中文无法输入\n\n    $ vi /usr/bin/wps  # word文档\n    \n\n    #!/bin/bash\n    export XMODIFIERS=\"@im=fcitx\"  # 添加的内容  \n    export QT_IM_MODULE=\"fcitx\"     # 添加的内容    \n    gOpt=\n    #gOptExt=-multiply\n    gTemplateExt=(\"wpt\" \"dot\" \"dotx\")\n    \n\n    $ vi /usr/bin/et   # excel表格\n    \n\n    #!/bin/bash\n    export XMODIFIERS=\"@im=fcitx\"  # 添加的内容  \n    export QT_IM_MODULE=\"fcitx\"  # 添加的内容  \n    gOpt=\n    #gOptExt=-multiply\n    \n\n#### 输入法\n\n系统自带或者sougou输入法 ， 倬彼昊天系列皮肤\n\n#### 截屏\n\n系统设置>键盘>自定义快捷键>+>  \n名称填screenshot  \n命令\n\n    gnome-screenshot -a\n    \n\n在disabled修改快捷键\n\n#### 下载\n\n安装uget\n\n    sudo add-apt-repository ppa:plushuang-tw/uget-stable \n    sudo apt-get update \n    sudo apt-get install uget\n    \n\n安装aria2\n\n    sudo add-apt-repository ppa:t-tujikawa/ppa \n    sudo apt-get update \n    sudo apt-get install aria2\n    \n\n在uget gui里编辑插件，选择aria2\n\n#### 美化监视工具\n\n     sudo apt-get install conky  \n     sudo add-apt-repository ppa:teejee2008/ppa\n     sudo apt-get update\n     sudo apt-get install conky-manager\n     ```\n     显示桌面会自动隐藏conky的bug解决办法:  \n     编辑配置文件\n     ```\n     # own_window_type normal\n    own_window_type desktop\n    \n\n\\#### 快速搜索文件\n\n    sudo add-apt-repository ppa:synapse-core/testing\n    sudo apt-get update\n    sudo apt-get install synapse  \n    \n\n#### 卸载synapse\n\n    sudo apt-get remove synapse\n    \n\n#### 移除PPA\n\n    sudo apt-get install ppa-purge\n    sudo ppa-purge ppa:synapse-core/testing\n    \n\n#### 安装oh-my-zsh\n\n    # https://github.com/robbyrussell/oh-my-zsh\n    $ sudo apt-get install git\n    $ sudo apt-get install zsh\n    $ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n    $ chsh -s /bin/zsh # 更改默认bash\n    //或:\n    $ chsh -s `which zsh`\n    $ sudo reboot\n    \n\n#### terminator 终端管理软件\n\n安装\n\n    sudo add-apt-repository ppa:gnome-terminator\n    sudo apt-get update\n    sudo apt-get install terminator\n    \n\n基本设置方法\n\n> 右键点击终端任意区域，选择首选项\n\n设置[solarized](https://github.com/ghuntley/terminator-solarized)配色（[参考](http://blog.codinglabs.org/articles/getting-started-with-ubuntu.html)）\n\n    cd ~/.config/terminator  \n    vim config\n    \n\n覆盖以下内容\n\n    [global_config]\n        title_transmit_bg_color = \"#d30102\"\n        focus = system\n        suppress_multiple_term_dialog = True\n    [keybindings]\n    [profiles]\n        [[default]]\n            palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\"\n            copy_on_selection = True\n            background_image = None\n            background_darkness = 0.95\n            background_type = transparent\n            use_system_font = False\n            cursor_color = \"#eee8d5\"\n            foreground_color = \"#839496\"\n            show_titlebar = False\n            font = Monospace 11\n            background_color = \"#002b36\"\n        [[solarized-dark]]\n            palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\"\n            background_color = \"#002b36\"\n            background_image = None\n            cursor_color = \"#eee8d5\"\n            foreground_color = \"#839496\"\n        [[solarized-light]]\n            palette = \"#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3\"\n            background_color = \"#fdf6e3\"\n            background_image = None\n            cursor_color = \"#002b36\"\n            foreground_color = \"#657b83\"\n    [layouts]\n        [[default]]\n            [[[child1]]]\n                type = Terminal\n                parent = window0\n                profile = default\n            [[[window0]]]\n                type = Window\n                parent = \"\"\n    [plugins]\n    \n\n以上配置后会修改配色方案，但是没有bright色  \n[dircolors-solarized](https://github.com/seebi/dircolors-solarized)项目提供了适合于solarized的dircolors配色方案，只要选择合适的方案使用就可以了。\n\n    curl https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-dark > ~/.dircolors\n    \n\n然后在~/.bashrc中加入如下配置：\n\n    # enable color support of ls and also add handy aliases\n    if [ -x /usr/bin/dircolors ]; then\n        test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\n        alias ls='ls --color=auto'\n        #alias dir='dir --color=auto'\n        #alias vdir='vdir --color=auto'\n    \n        alias grep='grep --color=auto'\n        alias fgrep='fgrep --color=auto'\n        alias egrep='egrep --color=auto'\n    fi\n    \n    # some more ls aliases\n    alias ll='ls -alF'\n    alias la='ls -A'\n    alias l='ls -CF'\n    \n\n执行\n\n    source ~/.bashrc\n    \n\n#### tmux配合terminator使用\n\n安装\n\n    sudo apt-get install tmux\n    \n\n配置\n\n    touch .tmux.conf\n    \n\n配置内容和使用方法\n\n    # 设置前缀为Ctrl + x\n    set -g prefix C-x\n    # 解除Ctrl+b 与前缀的对应关系\n    unbind C-b\n    # 将r 设置为加载配置文件，并显示\"reloaded!\"信息\n    bind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\n    \n    \n    \n    # copy-mode 将快捷键设置为vi 模式\n    setw -g mode-keys vi\n    \n    # tmux-powerline设置\n    set-option -g status on\n    set-option -g status-interval 2\n    set-option -g status-utf8 on\n    set-option -g status-justify \"centre\"\n    set-option -g status-left-length 60\n    set-option -g status-right-length 90\n    set-option -g status-left \"#(~/.tmux/tmux-powerline/powerline.sh left)\"\n    set-option -g status-right \"#(~/.tmux/tmux-powerline/powerline.sh right)\"\n    # 将窗口列表换成 powerline的风格\n    set-window-option -g window-status-current-format \"#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀\"\n    # 设置默认bash\n    set-option -g default-shell /bin/zsh\n    \n    \n    ########## 复制模式  ##########\n    \n    # copy mode 复制模式\n    # 'prefix +  [ '进入复制模式\n    # 按space 开始复制\n    # Enter退出复制模式\n    \n\n需要安装powerline插件\n\n    https://github.com/erikw/tmux-powerline\n    \n\n显示日期的星期\n\n    vim data_day.sh\n     # date +\"%a\"改成大写\n     date +\"%A\"\n    \n\npowerline字体安装查看 http://powerline.readthedocs.io/en/latest/installation/linux.html 在terminator配置自动启动turm\n\n    首选项->配置>命令>自定义命令  \n     ([[ -f \"$TMUX\" ]] && tmux -2 -S $TMUX) || (TMUX=\"\" tmux -2)\n    \n\n自动部署多窗口任务\n\n    touch ~/development.start\n    chmod +x development.start\n    \n\n    tmux has-session -t development\n    if [ $? != 0 ]\n    then\n        tmux new-session -s development -n editor -d\n        tmux send-keys -t development 'vim' C-m\n        tmux split-window -v -t development\n        tmux select-layout -t development main-horizontal\n        tmux new-window -n bash -t development\n        tmux new-window -n ssh -t development\n        tmux new-window -n mysql -t development\n        tmux new-window -n front-end -t development\n        tmux select-window -t development:1\n    fi\n    tmux attach -t development\n    \n\n执行文件\n\n    ~/development.start\n    \n\n#### Visual Studio Code\n\n通过官方PPA来安装Ubuntu Make\n\n    sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make\n    sudo apt-get update\n    sudo apt-get install ubuntu-make\n    \n\n安装Ubuntu Make完后，接着使用下列命令安装Visual Studio Code\n\n    umake web visual-studio-code\n    \n\n卸载命令\n\n    umake web visual-studio-code --remove\n    \n\n#### wine\n\n卸载wineqq\n\n    sudo dpkg -l | grep qq  # 找到安装包名称   \n    sudo dpkg -r wine-qq7.8-longeneteam # 卸载\n    \n\n#### curl http请求\n\n    curl \"http://www.baidu.com\" # 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地  \n    curl -i \"http://www.baidu.com\" # 显示全部信息  \n    curl -l \"http://www.baidu.com\" # 只显示头部信息  \n    curl -v \"http://www.baidu.com\" # 显示get请求全过程解析    \n    curl -d \"param1=value1¶m2=value2\" \"http://www.baidu.com\" # post请求  \n    \n\n#### 安卓虚拟机genymotion\n\n前提必须安装virtualBox  \n下载地址: https://www.genymotion.com/download/  \n需要先注册,下载后执行\n\n    chmod +x genymotion-2.2.2_x64.bin\n    ./genymotion-2.2.2_x64.bin -d /home/user\n    \n\n执行home/user/genymotion/genymotion\n\n#### 安装为知笔记\n\n简易版本\n\n    http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/pool/main/w/wiznote/\n    \n\n编译安装\n\n    http://www.wiz.cn/compile-client.html\n    \n\nchrome安装扩展\n\n    https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab/related?hl=zh-CN\n    \n\n#### 安装系统状态指示器\n\n    sudo add-apt-repository ppa:indicator-multiload/stable-daily\n    \n    sudo apt-get update\n    \n    sudo apt-get install indicator-multiload\n    \n\n#### 安装albert搜索框\n\n    sudo add-apt-repository ppa:noobslab/macbuntu\n    sudo apt-get update\n    sudo apt-get install albert\n    设置快捷键Ctrl+/ 样式NUMIX\n    \n\n#### 下载特殊文件\n\n    sudo apt-get install ktorrent\n    sudo apt-get install amule","slug":"Linux开发环境常用软件","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt00041h3a4ank1fbe3","content":"<h4 id=\"显示电脑硬件信息\"><a href=\"#显示电脑硬件信息\" class=\"headerlink\" title=\"显示电脑硬件信息\"></a>显示电脑硬件信息</h4><pre><code>$ sudo add-apt-repository ppa:dawidd0811/neofetch\n$ sudo apt-get update\n$ sudo apt-get install neofetch\nneofetch</code></pre><h4 id=\"安装独立显卡驱动\"><a href=\"#安装独立显卡驱动\" class=\"headerlink\" title=\"安装独立显卡驱动\"></a>安装独立显卡驱动</h4><p><a href=\"https://blog.csdn.net/ghw15221836342/article/details/79571559\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ghw15221836342/article/details/79571559</a></p>\n<pre><code># 驱动版本查询   https://www.nvidia.com/Download/index.aspx?lang=en-us\n# 安装\nsudo add-apt-repository ppa:graphics-drivers/ppa  \nsudo apt-get update  \nsudo apt-get install nvidia-390 #此处要根据上面查询到的版本适当更改\nsudo apt-get install mesa-common-dev  \nsudo apt-get install freeglut3-de\n# 测试\nnvidia-smi  #若出现电脑GPU列表，即安装成功\n或者\nnvidia-settings #显示你的显卡信息\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    #### Chrome浏览器</span><br><span class=\"line\">    下载地址 [百度云盘](http://pan.baidu.com/s/1hq0Nom4)</span><br><span class=\"line\">    </span><br><span class=\"line\">    #### 配置SS</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">安装</span><br><span class=\"line\">==</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install python-pip pip install s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s</span><br><span class=\"line\"></span><br><span class=\"line\">启动</span><br><span class=\"line\">==</span><br><span class=\"line\"></span><br><span class=\"line\">sslocal -s server\\_ip -p server\\_port -l 1080 -k password -t 600 -m aes-256-cfb</span><br><span class=\"line\"></span><br><span class=\"line\">简写</span><br><span class=\"line\">==</span><br><span class=\"line\"></span><br><span class=\"line\">sslocal -s ip -p port -k &quot;password&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    开机启动配置  </span><br><span class=\"line\">    在/home下新建文件ss.sh脚本</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash #文件名:ss.sh sslocal -s ip -p port -k &quot;password&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    编辑开机启动文件</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n# 最后加入以下内容\nnohup bash /home/ss.sh&gt;/home/ss.txt &amp;</code></pre><p>代理设置</p>\n<pre><code>service： 127.0.0.1\nport ： 1080\ntype： socks5</code></pre><h4 id=\"配置proxychains\"><a href=\"#配置proxychains\" class=\"headerlink\" title=\"配置proxychains\"></a>配置proxychains</h4><pre><code># 安装\nsudo apt install proxychains\nsudo vim /etc/proxychains.conf\n~ socks5 127.0.0.1 1080  # 最后一行加入socks代理\n# 测试\nproxychains wget https://www.google.com</code></pre><h4 id=\"wine-qq（现在推荐docker安装qq）\"><a href=\"#wine-qq（现在推荐docker安装qq）\" class=\"headerlink\" title=\"wine qq（现在推荐docker安装qq）\"></a>wine qq（现在推荐docker安装qq）</h4><p>安装wine1.7以上版本<br>安装WineQQ7.8-20151109-Longene.deb版本<br>下载<a href=\"https://pan.baidu.com/s/1bpLn0vl\" target=\"_blank\" rel=\"noopener\">网盘</a></p>\n<h4 id=\"elinks-纯文本浏览器\"><a href=\"#elinks-纯文本浏览器\" class=\"headerlink\" title=\"elinks 纯文本浏览器\"></a>elinks 纯文本浏览器</h4><pre><code>sudo apt-get install elinks   # 安装\n\n\nelinks www.zhuohc.com  # 使用</code></pre><h4 id=\"unzip-zip\"><a href=\"#unzip-zip\" class=\"headerlink\" title=\"unzip / zip\"></a>unzip / zip</h4><p>解决中文乱码</p>\n<pre><code>unzip -O CP936 xxx.zip</code></pre><p>解压到指定目录</p>\n<pre><code>unzip -O xxx.zip -d xxx/</code></pre><p>压缩文件</p>\n<pre><code>zip -r yasuo.zip abc.txt dir1</code></pre><h4 id=\"wps-office办公\"><a href=\"#wps-office办公\" class=\"headerlink\" title=\"wps office办公\"></a>wps office办公</h4><p>显示字体确实错误 <a href=\"https://pan.baidu.com/s/1bpLn0vl\" target=\"_blank\" rel=\"noopener\">下载字体</a><br>将字体复制到linux字体中</p>\n<pre><code>sudo cp * /usr/share/fonts</code></pre><p>生成字体索引信息</p>\n<pre><code>sudo mkfontscale\n\nsudo mkfontdir</code></pre><p>更新字体缓存</p>\n<pre><code>sudo fc-cache</code></pre><p>中文无法输入</p>\n<pre><code>$ vi /usr/bin/wps  # word文档\n\n\n#!/bin/bash\nexport XMODIFIERS=&quot;@im=fcitx&quot;  # 添加的内容  \nexport QT_IM_MODULE=&quot;fcitx&quot;     # 添加的内容    \ngOpt=\n#gOptExt=-multiply\ngTemplateExt=(&quot;wpt&quot; &quot;dot&quot; &quot;dotx&quot;)\n\n\n$ vi /usr/bin/et   # excel表格\n\n\n#!/bin/bash\nexport XMODIFIERS=&quot;@im=fcitx&quot;  # 添加的内容  \nexport QT_IM_MODULE=&quot;fcitx&quot;  # 添加的内容  \ngOpt=\n#gOptExt=-multiply</code></pre><h4 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h4><p>系统自带或者sougou输入法 ， 倬彼昊天系列皮肤</p>\n<h4 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h4><p>系统设置&gt;键盘&gt;自定义快捷键&gt;+&gt;<br>名称填screenshot<br>命令</p>\n<pre><code>gnome-screenshot -a</code></pre><p>在disabled修改快捷键</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p>安装uget</p>\n<pre><code>sudo add-apt-repository ppa:plushuang-tw/uget-stable \nsudo apt-get update \nsudo apt-get install uget</code></pre><p>安装aria2</p>\n<pre><code>sudo add-apt-repository ppa:t-tujikawa/ppa \nsudo apt-get update \nsudo apt-get install aria2</code></pre><p>在uget gui里编辑插件，选择aria2</p>\n<h4 id=\"美化监视工具\"><a href=\"#美化监视工具\" class=\"headerlink\" title=\"美化监视工具\"></a>美化监视工具</h4><pre><code> sudo apt-get install conky  \n sudo add-apt-repository ppa:teejee2008/ppa\n sudo apt-get update\n sudo apt-get install conky-manager\n <figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示桌面会自动隐藏conky的bug解决办法:  </span><br><span class=\"line\">编辑配置文件</span><br></pre></td></tr></table></figure>\n\n # own_window_type normal\nown_window_type desktop</code></pre><p>#### 快速搜索文件</p>\n<pre><code>sudo add-apt-repository ppa:synapse-core/testing\nsudo apt-get update\nsudo apt-get install synapse  </code></pre><h4 id=\"卸载synapse\"><a href=\"#卸载synapse\" class=\"headerlink\" title=\"卸载synapse\"></a>卸载synapse</h4><pre><code>sudo apt-get remove synapse</code></pre><h4 id=\"移除PPA\"><a href=\"#移除PPA\" class=\"headerlink\" title=\"移除PPA\"></a>移除PPA</h4><pre><code>sudo apt-get install ppa-purge\nsudo ppa-purge ppa:synapse-core/testing</code></pre><h4 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装oh-my-zsh</h4><pre><code># https://github.com/robbyrussell/oh-my-zsh\n$ sudo apt-get install git\n$ sudo apt-get install zsh\n$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n$ chsh -s /bin/zsh # 更改默认bash\n//或:\n$ chsh -s `which zsh`\n$ sudo reboot</code></pre><h4 id=\"terminator-终端管理软件\"><a href=\"#terminator-终端管理软件\" class=\"headerlink\" title=\"terminator 终端管理软件\"></a>terminator 终端管理软件</h4><p>安装</p>\n<pre><code>sudo add-apt-repository ppa:gnome-terminator\nsudo apt-get update\nsudo apt-get install terminator</code></pre><p>基本设置方法</p>\n<blockquote>\n<p>右键点击终端任意区域，选择首选项</p>\n</blockquote>\n<p>设置<a href=\"https://github.com/ghuntley/terminator-solarized\" target=\"_blank\" rel=\"noopener\">solarized</a>配色（<a href=\"http://blog.codinglabs.org/articles/getting-started-with-ubuntu.html\" target=\"_blank\" rel=\"noopener\">参考</a>）</p>\n<pre><code>cd ~/.config/terminator  \nvim config</code></pre><p>覆盖以下内容</p>\n<pre><code>[global_config]\n    title_transmit_bg_color = &quot;#d30102&quot;\n    focus = system\n    suppress_multiple_term_dialog = True\n[keybindings]\n[profiles]\n    [[default]]\n        palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;\n        copy_on_selection = True\n        background_image = None\n        background_darkness = 0.95\n        background_type = transparent\n        use_system_font = False\n        cursor_color = &quot;#eee8d5&quot;\n        foreground_color = &quot;#839496&quot;\n        show_titlebar = False\n        font = Monospace 11\n        background_color = &quot;#002b36&quot;\n    [[solarized-dark]]\n        palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;\n        background_color = &quot;#002b36&quot;\n        background_image = None\n        cursor_color = &quot;#eee8d5&quot;\n        foreground_color = &quot;#839496&quot;\n    [[solarized-light]]\n        palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;\n        background_color = &quot;#fdf6e3&quot;\n        background_image = None\n        cursor_color = &quot;#002b36&quot;\n        foreground_color = &quot;#657b83&quot;\n[layouts]\n    [[default]]\n        [[[child1]]]\n            type = Terminal\n            parent = window0\n            profile = default\n        [[[window0]]]\n            type = Window\n            parent = &quot;&quot;\n[plugins]</code></pre><p>以上配置后会修改配色方案，但是没有bright色<br><a href=\"https://github.com/seebi/dircolors-solarized\" target=\"_blank\" rel=\"noopener\">dircolors-solarized</a>项目提供了适合于solarized的dircolors配色方案，只要选择合适的方案使用就可以了。</p>\n<pre><code>curl https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-dark &gt; ~/.dircolors</code></pre><p>然后在~/.bashrc中加入如下配置：</p>\n<pre><code># enable color support of ls and also add handy aliases\nif [ -x /usr/bin/dircolors ]; then\n    test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;\n    alias ls=&apos;ls --color=auto&apos;\n    #alias dir=&apos;dir --color=auto&apos;\n    #alias vdir=&apos;vdir --color=auto&apos;\n\n    alias grep=&apos;grep --color=auto&apos;\n    alias fgrep=&apos;fgrep --color=auto&apos;\n    alias egrep=&apos;egrep --color=auto&apos;\nfi\n\n# some more ls aliases\nalias ll=&apos;ls -alF&apos;\nalias la=&apos;ls -A&apos;\nalias l=&apos;ls -CF&apos;</code></pre><p>执行</p>\n<pre><code>source ~/.bashrc</code></pre><h4 id=\"tmux配合terminator使用\"><a href=\"#tmux配合terminator使用\" class=\"headerlink\" title=\"tmux配合terminator使用\"></a>tmux配合terminator使用</h4><p>安装</p>\n<pre><code>sudo apt-get install tmux</code></pre><p>配置</p>\n<pre><code>touch .tmux.conf</code></pre><p>配置内容和使用方法</p>\n<pre><code># 设置前缀为Ctrl + x\nset -g prefix C-x\n# 解除Ctrl+b 与前缀的对应关系\nunbind C-b\n# 将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息\nbind r source-file ~/.tmux.conf \\; display &quot;Reloaded!&quot;\n\n\n\n# copy-mode 将快捷键设置为vi 模式\nsetw -g mode-keys vi\n\n# tmux-powerline设置\nset-option -g status on\nset-option -g status-interval 2\nset-option -g status-utf8 on\nset-option -g status-justify &quot;centre&quot;\nset-option -g status-left-length 60\nset-option -g status-right-length 90\nset-option -g status-left &quot;#(~/.tmux/tmux-powerline/powerline.sh left)&quot;\nset-option -g status-right &quot;#(~/.tmux/tmux-powerline/powerline.sh right)&quot;\n# 将窗口列表换成 powerline的风格\nset-window-option -g window-status-current-format &quot;#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀&quot;\n# 设置默认bash\nset-option -g default-shell /bin/zsh\n\n\n########## 复制模式  ##########\n\n# copy mode 复制模式\n# &apos;prefix +  [ &apos;进入复制模式\n# 按space 开始复制\n# Enter退出复制模式</code></pre><p>需要安装powerline插件</p>\n<pre><code>https://github.com/erikw/tmux-powerline</code></pre><p>显示日期的星期</p>\n<pre><code>vim data_day.sh\n # date +&quot;%a&quot;改成大写\n date +&quot;%A&quot;</code></pre><p>powerline字体安装查看 <a href=\"http://powerline.readthedocs.io/en/latest/installation/linux.html\" target=\"_blank\" rel=\"noopener\">http://powerline.readthedocs.io/en/latest/installation/linux.html</a> 在terminator配置自动启动turm</p>\n<pre><code>首选项-&gt;配置&gt;命令&gt;自定义命令  \n ([[ -f &quot;$TMUX&quot; ]] &amp;&amp; tmux -2 -S $TMUX) || (TMUX=&quot;&quot; tmux -2)</code></pre><p>自动部署多窗口任务</p>\n<pre><code>touch ~/development.start\nchmod +x development.start\n\n\ntmux has-session -t development\nif [ $? != 0 ]\nthen\n    tmux new-session -s development -n editor -d\n    tmux send-keys -t development &apos;vim&apos; C-m\n    tmux split-window -v -t development\n    tmux select-layout -t development main-horizontal\n    tmux new-window -n bash -t development\n    tmux new-window -n ssh -t development\n    tmux new-window -n mysql -t development\n    tmux new-window -n front-end -t development\n    tmux select-window -t development:1\nfi\ntmux attach -t development</code></pre><p>执行文件</p>\n<pre><code>~/development.start</code></pre><h4 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h4><p>通过官方PPA来安装Ubuntu Make</p>\n<pre><code>sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make\nsudo apt-get update\nsudo apt-get install ubuntu-make</code></pre><p>安装Ubuntu Make完后，接着使用下列命令安装Visual Studio Code</p>\n<pre><code>umake web visual-studio-code</code></pre><p>卸载命令</p>\n<pre><code>umake web visual-studio-code --remove</code></pre><h4 id=\"wine\"><a href=\"#wine\" class=\"headerlink\" title=\"wine\"></a>wine</h4><p>卸载wineqq</p>\n<pre><code>sudo dpkg -l | grep qq  # 找到安装包名称   \nsudo dpkg -r wine-qq7.8-longeneteam # 卸载</code></pre><h4 id=\"curl-http请求\"><a href=\"#curl-http请求\" class=\"headerlink\" title=\"curl http请求\"></a>curl http请求</h4><pre><code>curl &quot;http://www.baidu.com&quot; # 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地  \ncurl -i &quot;http://www.baidu.com&quot; # 显示全部信息  \ncurl -l &quot;http://www.baidu.com&quot; # 只显示头部信息  \ncurl -v &quot;http://www.baidu.com&quot; # 显示get请求全过程解析    \ncurl -d &quot;param1=value1¶m2=value2&quot; &quot;http://www.baidu.com&quot; # post请求  </code></pre><h4 id=\"安卓虚拟机genymotion\"><a href=\"#安卓虚拟机genymotion\" class=\"headerlink\" title=\"安卓虚拟机genymotion\"></a>安卓虚拟机genymotion</h4><p>前提必须安装virtualBox<br>下载地址: <a href=\"https://www.genymotion.com/download/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/download/</a><br>需要先注册,下载后执行</p>\n<pre><code>chmod +x genymotion-2.2.2_x64.bin\n./genymotion-2.2.2_x64.bin -d /home/user</code></pre><p>执行home/user/genymotion/genymotion</p>\n<h4 id=\"安装为知笔记\"><a href=\"#安装为知笔记\" class=\"headerlink\" title=\"安装为知笔记\"></a>安装为知笔记</h4><p>简易版本</p>\n<pre><code>http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/pool/main/w/wiznote/</code></pre><p>编译安装</p>\n<pre><code>http://www.wiz.cn/compile-client.html</code></pre><p>chrome安装扩展</p>\n<pre><code>https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab/related?hl=zh-CN</code></pre><h4 id=\"安装系统状态指示器\"><a href=\"#安装系统状态指示器\" class=\"headerlink\" title=\"安装系统状态指示器\"></a>安装系统状态指示器</h4><pre><code>sudo add-apt-repository ppa:indicator-multiload/stable-daily\n\nsudo apt-get update\n\nsudo apt-get install indicator-multiload</code></pre><h4 id=\"安装albert搜索框\"><a href=\"#安装albert搜索框\" class=\"headerlink\" title=\"安装albert搜索框\"></a>安装albert搜索框</h4><pre><code>sudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt-get update\nsudo apt-get install albert\n设置快捷键Ctrl+/ 样式NUMIX</code></pre><h4 id=\"下载特殊文件\"><a href=\"#下载特殊文件\" class=\"headerlink\" title=\"下载特殊文件\"></a>下载特殊文件</h4><pre><code>sudo apt-get install ktorrent\nsudo apt-get install amule</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"显示电脑硬件信息\"><a href=\"#显示电脑硬件信息\" class=\"headerlink\" title=\"显示电脑硬件信息\"></a>显示电脑硬件信息</h4><pre><code>$ sudo add-apt-repository ppa:dawidd0811/neofetch\n$ sudo apt-get update\n$ sudo apt-get install neofetch\nneofetch</code></pre><h4 id=\"安装独立显卡驱动\"><a href=\"#安装独立显卡驱动\" class=\"headerlink\" title=\"安装独立显卡驱动\"></a>安装独立显卡驱动</h4><p><a href=\"https://blog.csdn.net/ghw15221836342/article/details/79571559\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ghw15221836342/article/details/79571559</a></p>\n<pre><code># 驱动版本查询   https://www.nvidia.com/Download/index.aspx?lang=en-us\n# 安装\nsudo add-apt-repository ppa:graphics-drivers/ppa  \nsudo apt-get update  \nsudo apt-get install nvidia-390 #此处要根据上面查询到的版本适当更改\nsudo apt-get install mesa-common-dev  \nsudo apt-get install freeglut3-de\n# 测试\nnvidia-smi  #若出现电脑GPU列表，即安装成功\n或者\nnvidia-settings #显示你的显卡信息\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    #### Chrome浏览器</span><br><span class=\"line\">    下载地址 [百度云盘](http://pan.baidu.com/s/1hq0Nom4)</span><br><span class=\"line\">    </span><br><span class=\"line\">    #### 配置SS</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">安装</span><br><span class=\"line\">==</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install python-pip pip install s\\_h\\_a\\_d\\_o\\_w\\_s\\_o\\_c\\_k\\_s</span><br><span class=\"line\"></span><br><span class=\"line\">启动</span><br><span class=\"line\">==</span><br><span class=\"line\"></span><br><span class=\"line\">sslocal -s server\\_ip -p server\\_port -l 1080 -k password -t 600 -m aes-256-cfb</span><br><span class=\"line\"></span><br><span class=\"line\">简写</span><br><span class=\"line\">==</span><br><span class=\"line\"></span><br><span class=\"line\">sslocal -s ip -p port -k &quot;password&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    开机启动配置  </span><br><span class=\"line\">    在/home下新建文件ss.sh脚本</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash #文件名:ss.sh sslocal -s ip -p port -k &quot;password&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    编辑开机启动文件</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n# 最后加入以下内容\nnohup bash /home/ss.sh&gt;/home/ss.txt &amp;</code></pre><p>代理设置</p>\n<pre><code>service： 127.0.0.1\nport ： 1080\ntype： socks5</code></pre><h4 id=\"配置proxychains\"><a href=\"#配置proxychains\" class=\"headerlink\" title=\"配置proxychains\"></a>配置proxychains</h4><pre><code># 安装\nsudo apt install proxychains\nsudo vim /etc/proxychains.conf\n~ socks5 127.0.0.1 1080  # 最后一行加入socks代理\n# 测试\nproxychains wget https://www.google.com</code></pre><h4 id=\"wine-qq（现在推荐docker安装qq）\"><a href=\"#wine-qq（现在推荐docker安装qq）\" class=\"headerlink\" title=\"wine qq（现在推荐docker安装qq）\"></a>wine qq（现在推荐docker安装qq）</h4><p>安装wine1.7以上版本<br>安装WineQQ7.8-20151109-Longene.deb版本<br>下载<a href=\"https://pan.baidu.com/s/1bpLn0vl\" target=\"_blank\" rel=\"noopener\">网盘</a></p>\n<h4 id=\"elinks-纯文本浏览器\"><a href=\"#elinks-纯文本浏览器\" class=\"headerlink\" title=\"elinks 纯文本浏览器\"></a>elinks 纯文本浏览器</h4><pre><code>sudo apt-get install elinks   # 安装\n\n\nelinks www.zhuohc.com  # 使用</code></pre><h4 id=\"unzip-zip\"><a href=\"#unzip-zip\" class=\"headerlink\" title=\"unzip / zip\"></a>unzip / zip</h4><p>解决中文乱码</p>\n<pre><code>unzip -O CP936 xxx.zip</code></pre><p>解压到指定目录</p>\n<pre><code>unzip -O xxx.zip -d xxx/</code></pre><p>压缩文件</p>\n<pre><code>zip -r yasuo.zip abc.txt dir1</code></pre><h4 id=\"wps-office办公\"><a href=\"#wps-office办公\" class=\"headerlink\" title=\"wps office办公\"></a>wps office办公</h4><p>显示字体确实错误 <a href=\"https://pan.baidu.com/s/1bpLn0vl\" target=\"_blank\" rel=\"noopener\">下载字体</a><br>将字体复制到linux字体中</p>\n<pre><code>sudo cp * /usr/share/fonts</code></pre><p>生成字体索引信息</p>\n<pre><code>sudo mkfontscale\n\nsudo mkfontdir</code></pre><p>更新字体缓存</p>\n<pre><code>sudo fc-cache</code></pre><p>中文无法输入</p>\n<pre><code>$ vi /usr/bin/wps  # word文档\n\n\n#!/bin/bash\nexport XMODIFIERS=&quot;@im=fcitx&quot;  # 添加的内容  \nexport QT_IM_MODULE=&quot;fcitx&quot;     # 添加的内容    \ngOpt=\n#gOptExt=-multiply\ngTemplateExt=(&quot;wpt&quot; &quot;dot&quot; &quot;dotx&quot;)\n\n\n$ vi /usr/bin/et   # excel表格\n\n\n#!/bin/bash\nexport XMODIFIERS=&quot;@im=fcitx&quot;  # 添加的内容  \nexport QT_IM_MODULE=&quot;fcitx&quot;  # 添加的内容  \ngOpt=\n#gOptExt=-multiply</code></pre><h4 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h4><p>系统自带或者sougou输入法 ， 倬彼昊天系列皮肤</p>\n<h4 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h4><p>系统设置&gt;键盘&gt;自定义快捷键&gt;+&gt;<br>名称填screenshot<br>命令</p>\n<pre><code>gnome-screenshot -a</code></pre><p>在disabled修改快捷键</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p>安装uget</p>\n<pre><code>sudo add-apt-repository ppa:plushuang-tw/uget-stable \nsudo apt-get update \nsudo apt-get install uget</code></pre><p>安装aria2</p>\n<pre><code>sudo add-apt-repository ppa:t-tujikawa/ppa \nsudo apt-get update \nsudo apt-get install aria2</code></pre><p>在uget gui里编辑插件，选择aria2</p>\n<h4 id=\"美化监视工具\"><a href=\"#美化监视工具\" class=\"headerlink\" title=\"美化监视工具\"></a>美化监视工具</h4><pre><code> sudo apt-get install conky  \n sudo add-apt-repository ppa:teejee2008/ppa\n sudo apt-get update\n sudo apt-get install conky-manager\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示桌面会自动隐藏conky的bug解决办法:  </span><br><span class=\"line\">编辑配置文件</span><br></pre></td></tr></table></figure>\n\n # own_window_type normal\nown_window_type desktop</code></pre><p>#### 快速搜索文件</p>\n<pre><code>sudo add-apt-repository ppa:synapse-core/testing\nsudo apt-get update\nsudo apt-get install synapse  </code></pre><h4 id=\"卸载synapse\"><a href=\"#卸载synapse\" class=\"headerlink\" title=\"卸载synapse\"></a>卸载synapse</h4><pre><code>sudo apt-get remove synapse</code></pre><h4 id=\"移除PPA\"><a href=\"#移除PPA\" class=\"headerlink\" title=\"移除PPA\"></a>移除PPA</h4><pre><code>sudo apt-get install ppa-purge\nsudo ppa-purge ppa:synapse-core/testing</code></pre><h4 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装oh-my-zsh</h4><pre><code># https://github.com/robbyrussell/oh-my-zsh\n$ sudo apt-get install git\n$ sudo apt-get install zsh\n$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n$ chsh -s /bin/zsh # 更改默认bash\n//或:\n$ chsh -s `which zsh`\n$ sudo reboot</code></pre><h4 id=\"terminator-终端管理软件\"><a href=\"#terminator-终端管理软件\" class=\"headerlink\" title=\"terminator 终端管理软件\"></a>terminator 终端管理软件</h4><p>安装</p>\n<pre><code>sudo add-apt-repository ppa:gnome-terminator\nsudo apt-get update\nsudo apt-get install terminator</code></pre><p>基本设置方法</p>\n<blockquote>\n<p>右键点击终端任意区域，选择首选项</p>\n</blockquote>\n<p>设置<a href=\"https://github.com/ghuntley/terminator-solarized\" target=\"_blank\" rel=\"noopener\">solarized</a>配色（<a href=\"http://blog.codinglabs.org/articles/getting-started-with-ubuntu.html\" target=\"_blank\" rel=\"noopener\">参考</a>）</p>\n<pre><code>cd ~/.config/terminator  \nvim config</code></pre><p>覆盖以下内容</p>\n<pre><code>[global_config]\n    title_transmit_bg_color = &quot;#d30102&quot;\n    focus = system\n    suppress_multiple_term_dialog = True\n[keybindings]\n[profiles]\n    [[default]]\n        palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;\n        copy_on_selection = True\n        background_image = None\n        background_darkness = 0.95\n        background_type = transparent\n        use_system_font = False\n        cursor_color = &quot;#eee8d5&quot;\n        foreground_color = &quot;#839496&quot;\n        show_titlebar = False\n        font = Monospace 11\n        background_color = &quot;#002b36&quot;\n    [[solarized-dark]]\n        palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;\n        background_color = &quot;#002b36&quot;\n        background_image = None\n        cursor_color = &quot;#eee8d5&quot;\n        foreground_color = &quot;#839496&quot;\n    [[solarized-light]]\n        palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;\n        background_color = &quot;#fdf6e3&quot;\n        background_image = None\n        cursor_color = &quot;#002b36&quot;\n        foreground_color = &quot;#657b83&quot;\n[layouts]\n    [[default]]\n        [[[child1]]]\n            type = Terminal\n            parent = window0\n            profile = default\n        [[[window0]]]\n            type = Window\n            parent = &quot;&quot;\n[plugins]</code></pre><p>以上配置后会修改配色方案，但是没有bright色<br><a href=\"https://github.com/seebi/dircolors-solarized\" target=\"_blank\" rel=\"noopener\">dircolors-solarized</a>项目提供了适合于solarized的dircolors配色方案，只要选择合适的方案使用就可以了。</p>\n<pre><code>curl https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-dark &gt; ~/.dircolors</code></pre><p>然后在~/.bashrc中加入如下配置：</p>\n<pre><code># enable color support of ls and also add handy aliases\nif [ -x /usr/bin/dircolors ]; then\n    test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;\n    alias ls=&apos;ls --color=auto&apos;\n    #alias dir=&apos;dir --color=auto&apos;\n    #alias vdir=&apos;vdir --color=auto&apos;\n\n    alias grep=&apos;grep --color=auto&apos;\n    alias fgrep=&apos;fgrep --color=auto&apos;\n    alias egrep=&apos;egrep --color=auto&apos;\nfi\n\n# some more ls aliases\nalias ll=&apos;ls -alF&apos;\nalias la=&apos;ls -A&apos;\nalias l=&apos;ls -CF&apos;</code></pre><p>执行</p>\n<pre><code>source ~/.bashrc</code></pre><h4 id=\"tmux配合terminator使用\"><a href=\"#tmux配合terminator使用\" class=\"headerlink\" title=\"tmux配合terminator使用\"></a>tmux配合terminator使用</h4><p>安装</p>\n<pre><code>sudo apt-get install tmux</code></pre><p>配置</p>\n<pre><code>touch .tmux.conf</code></pre><p>配置内容和使用方法</p>\n<pre><code># 设置前缀为Ctrl + x\nset -g prefix C-x\n# 解除Ctrl+b 与前缀的对应关系\nunbind C-b\n# 将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息\nbind r source-file ~/.tmux.conf \\; display &quot;Reloaded!&quot;\n\n\n\n# copy-mode 将快捷键设置为vi 模式\nsetw -g mode-keys vi\n\n# tmux-powerline设置\nset-option -g status on\nset-option -g status-interval 2\nset-option -g status-utf8 on\nset-option -g status-justify &quot;centre&quot;\nset-option -g status-left-length 60\nset-option -g status-right-length 90\nset-option -g status-left &quot;#(~/.tmux/tmux-powerline/powerline.sh left)&quot;\nset-option -g status-right &quot;#(~/.tmux/tmux-powerline/powerline.sh right)&quot;\n# 将窗口列表换成 powerline的风格\nset-window-option -g window-status-current-format &quot;#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀&quot;\n# 设置默认bash\nset-option -g default-shell /bin/zsh\n\n\n########## 复制模式  ##########\n\n# copy mode 复制模式\n# &apos;prefix +  [ &apos;进入复制模式\n# 按space 开始复制\n# Enter退出复制模式</code></pre><p>需要安装powerline插件</p>\n<pre><code>https://github.com/erikw/tmux-powerline</code></pre><p>显示日期的星期</p>\n<pre><code>vim data_day.sh\n # date +&quot;%a&quot;改成大写\n date +&quot;%A&quot;</code></pre><p>powerline字体安装查看 <a href=\"http://powerline.readthedocs.io/en/latest/installation/linux.html\" target=\"_blank\" rel=\"noopener\">http://powerline.readthedocs.io/en/latest/installation/linux.html</a> 在terminator配置自动启动turm</p>\n<pre><code>首选项-&gt;配置&gt;命令&gt;自定义命令  \n ([[ -f &quot;$TMUX&quot; ]] &amp;&amp; tmux -2 -S $TMUX) || (TMUX=&quot;&quot; tmux -2)</code></pre><p>自动部署多窗口任务</p>\n<pre><code>touch ~/development.start\nchmod +x development.start\n\n\ntmux has-session -t development\nif [ $? != 0 ]\nthen\n    tmux new-session -s development -n editor -d\n    tmux send-keys -t development &apos;vim&apos; C-m\n    tmux split-window -v -t development\n    tmux select-layout -t development main-horizontal\n    tmux new-window -n bash -t development\n    tmux new-window -n ssh -t development\n    tmux new-window -n mysql -t development\n    tmux new-window -n front-end -t development\n    tmux select-window -t development:1\nfi\ntmux attach -t development</code></pre><p>执行文件</p>\n<pre><code>~/development.start</code></pre><h4 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h4><p>通过官方PPA来安装Ubuntu Make</p>\n<pre><code>sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make\nsudo apt-get update\nsudo apt-get install ubuntu-make</code></pre><p>安装Ubuntu Make完后，接着使用下列命令安装Visual Studio Code</p>\n<pre><code>umake web visual-studio-code</code></pre><p>卸载命令</p>\n<pre><code>umake web visual-studio-code --remove</code></pre><h4 id=\"wine\"><a href=\"#wine\" class=\"headerlink\" title=\"wine\"></a>wine</h4><p>卸载wineqq</p>\n<pre><code>sudo dpkg -l | grep qq  # 找到安装包名称   \nsudo dpkg -r wine-qq7.8-longeneteam # 卸载</code></pre><h4 id=\"curl-http请求\"><a href=\"#curl-http请求\" class=\"headerlink\" title=\"curl http请求\"></a>curl http请求</h4><pre><code>curl &quot;http://www.baidu.com&quot; # 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地  \ncurl -i &quot;http://www.baidu.com&quot; # 显示全部信息  \ncurl -l &quot;http://www.baidu.com&quot; # 只显示头部信息  \ncurl -v &quot;http://www.baidu.com&quot; # 显示get请求全过程解析    \ncurl -d &quot;param1=value1¶m2=value2&quot; &quot;http://www.baidu.com&quot; # post请求  </code></pre><h4 id=\"安卓虚拟机genymotion\"><a href=\"#安卓虚拟机genymotion\" class=\"headerlink\" title=\"安卓虚拟机genymotion\"></a>安卓虚拟机genymotion</h4><p>前提必须安装virtualBox<br>下载地址: <a href=\"https://www.genymotion.com/download/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/download/</a><br>需要先注册,下载后执行</p>\n<pre><code>chmod +x genymotion-2.2.2_x64.bin\n./genymotion-2.2.2_x64.bin -d /home/user</code></pre><p>执行home/user/genymotion/genymotion</p>\n<h4 id=\"安装为知笔记\"><a href=\"#安装为知笔记\" class=\"headerlink\" title=\"安装为知笔记\"></a>安装为知笔记</h4><p>简易版本</p>\n<pre><code>http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/pool/main/w/wiznote/</code></pre><p>编译安装</p>\n<pre><code>http://www.wiz.cn/compile-client.html</code></pre><p>chrome安装扩展</p>\n<pre><code>https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab/related?hl=zh-CN</code></pre><h4 id=\"安装系统状态指示器\"><a href=\"#安装系统状态指示器\" class=\"headerlink\" title=\"安装系统状态指示器\"></a>安装系统状态指示器</h4><pre><code>sudo add-apt-repository ppa:indicator-multiload/stable-daily\n\nsudo apt-get update\n\nsudo apt-get install indicator-multiload</code></pre><h4 id=\"安装albert搜索框\"><a href=\"#安装albert搜索框\" class=\"headerlink\" title=\"安装albert搜索框\"></a>安装albert搜索框</h4><pre><code>sudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt-get update\nsudo apt-get install albert\n设置快捷键Ctrl+/ 样式NUMIX</code></pre><h4 id=\"下载特殊文件\"><a href=\"#下载特殊文件\" class=\"headerlink\" title=\"下载特殊文件\"></a>下载特殊文件</h4><pre><code>sudo apt-get install ktorrent\nsudo apt-get install amule</code></pre>"},{"title":"Rsync同步web服务器","url":"39.html","id":"39","comments":0,"date":"2016-11-09T03:05:34.000Z","_content":"\n### 测试环境\n\n服务端安装 WIN2008R2 ip:192.168.0.160  \n客户端安装 WIN2003 ip:192.168.0.206\n\n### 程序下载\n\n新版已经开始收费，这里使用旧版4.0.5,百度网盘下载http://pan.baidu.com/s/1kTNyk1h\n\n### 服务端安装\n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync.png) 一路直接下一步，这里会创建一个用户，创建的默认密码可以不需要修改，直接下一步。 ![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync1.png) 创建的用户 ![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync2.png) 创建的服务改为自动启动\n\n### 客户端安装\n\n一路下一步直到完成。\n\n### 配置服务端\n\n    use chroot = false\n    # 不验证用户密码\n    strict modes = false\n    lock file = rsyncd.lock \n    hosts allow = 192.168.0.206\n    max connections = 5\n    # 默认端口\n    port = 873\n    \n    # 指定匿名访问\n    uid = 0\n    gid = 0\n    \n    \n    log file = rsyncd.log\n    \n    # Module definitions\n    # Remember cygwin naming conventions : c:\\work becomes /cygdrive/c/work\n    \n    [web]\n    path = /cygdrive/C/WEB\n    # 下面两行是配置用户名密码的\n    # auth users = dbbackuper\n    # secrets file = /cygdrive/e/Setting/Rsync/rsync_db.ps\n    # 只允许客户端下载，不允许客户端上传\n    read only = true\n    transfer logging = yes\n    \n\n防火墙设置允许配置的端口通过  \n查看端口配置是否错误\n\n    telnet 192.168.0.160 873  \n    @RSYNCD: 30.0\n    \n\n服务器端配置测试文件目录 ![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync3.png) 其中targetDir为联接文件\n\n    C:\\>mklink /J WEB\\targetDir\\ source\\\n    为 WEB\\targetDir\\ <<===>> source\\ 创建的联接\n    \n\n### 配置客户端\n\n在安装目录下使用如下命令\n\n    C:\\Program Files\\cwRsync\\bin>rsync --port=873 -vzrtopg --progress --delete 192.168.0.160::web /cygdrive/C/WEB\n    receiving incremental file list\n    skipping non-regular file \"targetDir\"\n    ./\n    TEST4/\n    test3/\n    \n    sent 39 bytes  received 163 bytes  134.67 bytes/sec\n    total size is 19  speedup is 0.09\n    \n\n查看客户端文件目录\n\n    test3\n    TEST4\n    \n\n提示skipping non-regular file 'targetDir'忽略软链接解决办法  \n参数-L:--copy-links 像对待常规文件一样处理软链结\n\n    C:\\Program Files\\cwRsync\\bin>rsync --port=873 -vzrtopgL --progress --delete 192.\n    168.0.160::web /cygdrive/C/WEB\n    receiving incremental file list\n    deleting test5/adda.txt\n    deleting test5/\n    ./\n    TEST4/\n    targetDir/\n    targetDir/HAFA/\n    targetDir/pdf/\n    targetDir/pdf/TARGE.txt\n               0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=1/8)\n    test3/\n    \n    sent 70 bytes  received 272 bytes  97.71 bytes/sec\n    total size is 0  speedup is 0.00\n    \n\n### 实现客户端定时任务\n\n1，要添加环境变量到系统中  \n2，上传脚本文件到客户端sync_client.bat\n\n    rsync --port=873 -vzrtopgL --progress --delete 192.168.0.160::web /cygdrive/C/WEB\n    \n\n3,在系统中添加定时任务，并指定更新时间\n\n### 具体参数详解\n\nrsync参数的具体解释如下： -v, --verbose 详细模式输出  \n-q, --quiet 精简输出模式  \n-c, --checksum 打开校验开关，强制对文件传输进行校验  \n-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD  \n-r, --recursive 对子目录以递归模式处理  \n-R, --relative 使用相对路径信息  \n-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。  \n--backup-dir 将备份文件(如~filename)存放在在目录下。  \n-suffix=SUFFIX 定义备份文件前缀  \n-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)  \n-l, --links 保留软链结  \n-L, --copy-links 想对待常规文件一样处理软链结  \n--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结  \n--safe-links 忽略指向SRC路径目录树以外的链结  \n-H, --hard-links 保留硬链结  \n-p, --perms 保持文件权限  \n-o, --owner 保持文件属主信息  \n-g, --group 保持文件属组信息  \n-D, --devices 保持设备文件信息  \n-t, --times 保持文件时间信息  \n-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间  \n-n, --dry-run现实哪些文件将被传输  \n-W, --whole-file 拷贝文件，不进行增量检测  \n-x, --one-file-system 不要跨越文件系统边界  \n-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节  \n-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步  \n--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息  \n-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件  \n--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件  \n--delete 删除那些DST中SRC没有的文件  \n--delete-excluded 同样删除接收端那些被该选项指定排除的文件  \n--delete-after 传输结束以后再删除  \n--ignore-errors 及时出现IO错误也进行删除  \n--max-delete=NUM 最多删除NUM个文件  \n--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输  \n--force 强制删除目录，即使不为空  \n--numeric-ids 不将数字的用户和组ID匹配为用户名和组名  \n--timeout=TIME IP超时时间，单位为秒  \n-I, --ignore-times 不跳过那些有同样的时间和长度的文件  \n--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间  \n--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0  \n-T --temp-dir=DIR 在DIR中创建临时文件  \n--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份  \n-P 等同于 --partial  \n--progress 显示备份过程  \n-z, --compress 对备份的文件在传输时进行压缩处理  \n--exclude=PATTERN 指定排除不需要传输的文件模式  \n--include=PATTERN 指定不排除而需要传输的文件模式  \n--exclude-from=FILE 排除FILE中指定模式的文件  \n--include-from=FILE 不排除FILE指定模式匹配的文件  \n--version 打印版本信息  \n--address 绑定到特定的地址  \n--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件  \n--port=PORT 指定其他的rsync服务端口  \n--blocking-io 对远程shell使用阻塞IO  \n-stats 给出某些文件的传输状态  \n--progress 在传输时现实传输过程  \n--log-format=formAT 指定日志文件格式  \n--password-file=FILE 从FILE中得到密码  \n--bwlimit=KBPS 限制I/O带宽，KBytes per second  \n-h, --help 显示帮助信息\n\n### 部分错误的解决办法\n\n1.'rsync' 不是内部或外部命令，也不是可运行的程序或批处理文件。  \n加环境变量 path = C:\\\\Program Files (x86)\\\\cwRsync\\\\bin 2.rsync: failed to connect to 192.168.1.82: Connection timed out (116) rsync error: error in socket IO (code 10) at clientserver.c(122) \\[Receiver=3.0.7\\]  \n网络通畅，服务器端允许访问端口 873 3.@ERROR: invalid uid nobody  \nrsync error: error starting client-server protocol (code 5) at main.c(1506) \\[Receiver=3.0.7\\]  \n指定uid gid  \nuid = 0  \ngid = 0 4.@ERROR: chdir failed  \nrsync error: error starting client-server protocol (code 5) at main.c(1506) \\[Receiver=3.0.7\\]  \npath目录配置的正确，得存在  \n解决：服务器端同步目录没有权限，cwrsync默认用户是Svcwrsync。为同步目录添加用户Svcwrsync权限。  \n也可以通过 菜单--cwRsyncServer--02. Prep a Dir for Upload 配置目录权限 除完全控制和特殊权限外的所有权限 5.@ERROR: auth failed on module test  \nrsync error: error starting client-server protocol (code 5) at main.c(1506) \\[Receiver=3.0.7\\]  \n客户端设置  \na.在命令上要指定好用户名  \nb.密码文件只写密码  \nrsyncd.secrets文件  \nrsyncpass  \nc.用户名密码都要正确 6.Unexpected local arg: /cygdrive/d/rsyncBackup  \nIf arg is a remote file/dir, prefix it with a colon (:).  \nrsync error: syntax or usage error (code 1) at main.c(1218) \\[Receiver=3.0.7\\]  \n不一定是这个路径有问题，可能是--password-file路径中有空格，服务器端没问题，客户端好像不行 7.password file must be owned by root when running as root  \ncontinuing without password file  \nPassword:  \n设置密码访问权限chown.exe可从服务器端拷贝过来  \nchmod -c 600 /cygdrive/c/etc/rsyncd.secrets  \nchown administrator /cygdrive/c/etc/rsyncd.secrets  \n服务器端不设也可以 8.当出现rsync: chown “” failed: Invalid argument (22)错误时，是因为参数中有o，即保留文件的owner信息，而window服务端无法完成chown操作，解决办法是去掉参数o。另外有些可能还会出现rsync: chgrp “” failed: Invalid argument (22)，原因类似，只要去掉参数中的g即可。","source":"_posts/Rsync同步web服务器.md","raw":"---\ntitle: Rsync同步web服务器\ntags:\n  - windows\nurl: 39.html\nid: 39\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-09 11:05:34\n---\n\n### 测试环境\n\n服务端安装 WIN2008R2 ip:192.168.0.160  \n客户端安装 WIN2003 ip:192.168.0.206\n\n### 程序下载\n\n新版已经开始收费，这里使用旧版4.0.5,百度网盘下载http://pan.baidu.com/s/1kTNyk1h\n\n### 服务端安装\n\n![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync.png) 一路直接下一步，这里会创建一个用户，创建的默认密码可以不需要修改，直接下一步。 ![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync1.png) 创建的用户 ![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync2.png) 创建的服务改为自动启动\n\n### 客户端安装\n\n一路下一步直到完成。\n\n### 配置服务端\n\n    use chroot = false\n    # 不验证用户密码\n    strict modes = false\n    lock file = rsyncd.lock \n    hosts allow = 192.168.0.206\n    max connections = 5\n    # 默认端口\n    port = 873\n    \n    # 指定匿名访问\n    uid = 0\n    gid = 0\n    \n    \n    log file = rsyncd.log\n    \n    # Module definitions\n    # Remember cygwin naming conventions : c:\\work becomes /cygdrive/c/work\n    \n    [web]\n    path = /cygdrive/C/WEB\n    # 下面两行是配置用户名密码的\n    # auth users = dbbackuper\n    # secrets file = /cygdrive/e/Setting/Rsync/rsync_db.ps\n    # 只允许客户端下载，不允许客户端上传\n    read only = true\n    transfer logging = yes\n    \n\n防火墙设置允许配置的端口通过  \n查看端口配置是否错误\n\n    telnet 192.168.0.160 873  \n    @RSYNCD: 30.0\n    \n\n服务器端配置测试文件目录 ![](http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync3.png) 其中targetDir为联接文件\n\n    C:\\>mklink /J WEB\\targetDir\\ source\\\n    为 WEB\\targetDir\\ <<===>> source\\ 创建的联接\n    \n\n### 配置客户端\n\n在安装目录下使用如下命令\n\n    C:\\Program Files\\cwRsync\\bin>rsync --port=873 -vzrtopg --progress --delete 192.168.0.160::web /cygdrive/C/WEB\n    receiving incremental file list\n    skipping non-regular file \"targetDir\"\n    ./\n    TEST4/\n    test3/\n    \n    sent 39 bytes  received 163 bytes  134.67 bytes/sec\n    total size is 19  speedup is 0.09\n    \n\n查看客户端文件目录\n\n    test3\n    TEST4\n    \n\n提示skipping non-regular file 'targetDir'忽略软链接解决办法  \n参数-L:--copy-links 像对待常规文件一样处理软链结\n\n    C:\\Program Files\\cwRsync\\bin>rsync --port=873 -vzrtopgL --progress --delete 192.\n    168.0.160::web /cygdrive/C/WEB\n    receiving incremental file list\n    deleting test5/adda.txt\n    deleting test5/\n    ./\n    TEST4/\n    targetDir/\n    targetDir/HAFA/\n    targetDir/pdf/\n    targetDir/pdf/TARGE.txt\n               0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=1/8)\n    test3/\n    \n    sent 70 bytes  received 272 bytes  97.71 bytes/sec\n    total size is 0  speedup is 0.00\n    \n\n### 实现客户端定时任务\n\n1，要添加环境变量到系统中  \n2，上传脚本文件到客户端sync_client.bat\n\n    rsync --port=873 -vzrtopgL --progress --delete 192.168.0.160::web /cygdrive/C/WEB\n    \n\n3,在系统中添加定时任务，并指定更新时间\n\n### 具体参数详解\n\nrsync参数的具体解释如下： -v, --verbose 详细模式输出  \n-q, --quiet 精简输出模式  \n-c, --checksum 打开校验开关，强制对文件传输进行校验  \n-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD  \n-r, --recursive 对子目录以递归模式处理  \n-R, --relative 使用相对路径信息  \n-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。  \n--backup-dir 将备份文件(如~filename)存放在在目录下。  \n-suffix=SUFFIX 定义备份文件前缀  \n-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)  \n-l, --links 保留软链结  \n-L, --copy-links 想对待常规文件一样处理软链结  \n--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结  \n--safe-links 忽略指向SRC路径目录树以外的链结  \n-H, --hard-links 保留硬链结  \n-p, --perms 保持文件权限  \n-o, --owner 保持文件属主信息  \n-g, --group 保持文件属组信息  \n-D, --devices 保持设备文件信息  \n-t, --times 保持文件时间信息  \n-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间  \n-n, --dry-run现实哪些文件将被传输  \n-W, --whole-file 拷贝文件，不进行增量检测  \n-x, --one-file-system 不要跨越文件系统边界  \n-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节  \n-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步  \n--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息  \n-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件  \n--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件  \n--delete 删除那些DST中SRC没有的文件  \n--delete-excluded 同样删除接收端那些被该选项指定排除的文件  \n--delete-after 传输结束以后再删除  \n--ignore-errors 及时出现IO错误也进行删除  \n--max-delete=NUM 最多删除NUM个文件  \n--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输  \n--force 强制删除目录，即使不为空  \n--numeric-ids 不将数字的用户和组ID匹配为用户名和组名  \n--timeout=TIME IP超时时间，单位为秒  \n-I, --ignore-times 不跳过那些有同样的时间和长度的文件  \n--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间  \n--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0  \n-T --temp-dir=DIR 在DIR中创建临时文件  \n--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份  \n-P 等同于 --partial  \n--progress 显示备份过程  \n-z, --compress 对备份的文件在传输时进行压缩处理  \n--exclude=PATTERN 指定排除不需要传输的文件模式  \n--include=PATTERN 指定不排除而需要传输的文件模式  \n--exclude-from=FILE 排除FILE中指定模式的文件  \n--include-from=FILE 不排除FILE指定模式匹配的文件  \n--version 打印版本信息  \n--address 绑定到特定的地址  \n--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件  \n--port=PORT 指定其他的rsync服务端口  \n--blocking-io 对远程shell使用阻塞IO  \n-stats 给出某些文件的传输状态  \n--progress 在传输时现实传输过程  \n--log-format=formAT 指定日志文件格式  \n--password-file=FILE 从FILE中得到密码  \n--bwlimit=KBPS 限制I/O带宽，KBytes per second  \n-h, --help 显示帮助信息\n\n### 部分错误的解决办法\n\n1.'rsync' 不是内部或外部命令，也不是可运行的程序或批处理文件。  \n加环境变量 path = C:\\\\Program Files (x86)\\\\cwRsync\\\\bin 2.rsync: failed to connect to 192.168.1.82: Connection timed out (116) rsync error: error in socket IO (code 10) at clientserver.c(122) \\[Receiver=3.0.7\\]  \n网络通畅，服务器端允许访问端口 873 3.@ERROR: invalid uid nobody  \nrsync error: error starting client-server protocol (code 5) at main.c(1506) \\[Receiver=3.0.7\\]  \n指定uid gid  \nuid = 0  \ngid = 0 4.@ERROR: chdir failed  \nrsync error: error starting client-server protocol (code 5) at main.c(1506) \\[Receiver=3.0.7\\]  \npath目录配置的正确，得存在  \n解决：服务器端同步目录没有权限，cwrsync默认用户是Svcwrsync。为同步目录添加用户Svcwrsync权限。  \n也可以通过 菜单--cwRsyncServer--02. Prep a Dir for Upload 配置目录权限 除完全控制和特殊权限外的所有权限 5.@ERROR: auth failed on module test  \nrsync error: error starting client-server protocol (code 5) at main.c(1506) \\[Receiver=3.0.7\\]  \n客户端设置  \na.在命令上要指定好用户名  \nb.密码文件只写密码  \nrsyncd.secrets文件  \nrsyncpass  \nc.用户名密码都要正确 6.Unexpected local arg: /cygdrive/d/rsyncBackup  \nIf arg is a remote file/dir, prefix it with a colon (:).  \nrsync error: syntax or usage error (code 1) at main.c(1218) \\[Receiver=3.0.7\\]  \n不一定是这个路径有问题，可能是--password-file路径中有空格，服务器端没问题，客户端好像不行 7.password file must be owned by root when running as root  \ncontinuing without password file  \nPassword:  \n设置密码访问权限chown.exe可从服务器端拷贝过来  \nchmod -c 600 /cygdrive/c/etc/rsyncd.secrets  \nchown administrator /cygdrive/c/etc/rsyncd.secrets  \n服务器端不设也可以 8.当出现rsync: chown “” failed: Invalid argument (22)错误时，是因为参数中有o，即保留文件的owner信息，而window服务端无法完成chown操作，解决办法是去掉参数o。另外有些可能还会出现rsync: chgrp “” failed: Invalid argument (22)，原因类似，只要去掉参数中的g即可。","slug":"Rsync同步web服务器","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt10042h3a42cxz3h03","content":"<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>服务端安装 WIN2008R2 ip:192.168.0.160<br>客户端安装 WIN2003 ip:192.168.0.206</p>\n<h3 id=\"程序下载\"><a href=\"#程序下载\" class=\"headerlink\" title=\"程序下载\"></a>程序下载</h3><p>新版已经开始收费，这里使用旧版4.0.5,百度网盘下载<a href=\"http://pan.baidu.com/s/1kTNyk1h\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1kTNyk1h</a></p>\n<h3 id=\"服务端安装\"><a href=\"#服务端安装\" class=\"headerlink\" title=\"服务端安装\"></a>服务端安装</h3><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync.png\" alt> 一路直接下一步，这里会创建一个用户，创建的默认密码可以不需要修改，直接下一步。 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync1.png\" alt> 创建的用户 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync2.png\" alt> 创建的服务改为自动启动</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><p>一路下一步直到完成。</p>\n<h3 id=\"配置服务端\"><a href=\"#配置服务端\" class=\"headerlink\" title=\"配置服务端\"></a>配置服务端</h3><pre><code>use chroot = false\n# 不验证用户密码\nstrict modes = false\nlock file = rsyncd.lock \nhosts allow = 192.168.0.206\nmax connections = 5\n# 默认端口\nport = 873\n\n# 指定匿名访问\nuid = 0\ngid = 0\n\n\nlog file = rsyncd.log\n\n# Module definitions\n# Remember cygwin naming conventions : c:\\work becomes /cygdrive/c/work\n\n[web]\npath = /cygdrive/C/WEB\n# 下面两行是配置用户名密码的\n# auth users = dbbackuper\n# secrets file = /cygdrive/e/Setting/Rsync/rsync_db.ps\n# 只允许客户端下载，不允许客户端上传\nread only = true\ntransfer logging = yes</code></pre><p>防火墙设置允许配置的端口通过<br>查看端口配置是否错误</p>\n<pre><code>telnet 192.168.0.160 873  \n@RSYNCD: 30.0</code></pre><p>服务器端配置测试文件目录 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync3.png\" alt> 其中targetDir为联接文件</p>\n<pre><code>C:\\&gt;mklink /J WEB\\targetDir\\ source\\\n为 WEB\\targetDir\\ &lt;&lt;===&gt;&gt; source\\ 创建的联接</code></pre><h3 id=\"配置客户端\"><a href=\"#配置客户端\" class=\"headerlink\" title=\"配置客户端\"></a>配置客户端</h3><p>在安装目录下使用如下命令</p>\n<pre><code>C:\\Program Files\\cwRsync\\bin&gt;rsync --port=873 -vzrtopg --progress --delete 192.168.0.160::web /cygdrive/C/WEB\nreceiving incremental file list\nskipping non-regular file &quot;targetDir&quot;\n./\nTEST4/\ntest3/\n\nsent 39 bytes  received 163 bytes  134.67 bytes/sec\ntotal size is 19  speedup is 0.09</code></pre><p>查看客户端文件目录</p>\n<pre><code>test3\nTEST4</code></pre><p>提示skipping non-regular file ‘targetDir’忽略软链接解决办法<br>参数-L:–copy-links 像对待常规文件一样处理软链结</p>\n<pre><code>C:\\Program Files\\cwRsync\\bin&gt;rsync --port=873 -vzrtopgL --progress --delete 192.\n168.0.160::web /cygdrive/C/WEB\nreceiving incremental file list\ndeleting test5/adda.txt\ndeleting test5/\n./\nTEST4/\ntargetDir/\ntargetDir/HAFA/\ntargetDir/pdf/\ntargetDir/pdf/TARGE.txt\n           0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=1/8)\ntest3/\n\nsent 70 bytes  received 272 bytes  97.71 bytes/sec\ntotal size is 0  speedup is 0.00</code></pre><h3 id=\"实现客户端定时任务\"><a href=\"#实现客户端定时任务\" class=\"headerlink\" title=\"实现客户端定时任务\"></a>实现客户端定时任务</h3><p>1，要添加环境变量到系统中<br>2，上传脚本文件到客户端sync_client.bat</p>\n<pre><code>rsync --port=873 -vzrtopgL --progress --delete 192.168.0.160::web /cygdrive/C/WEB</code></pre><p>3,在系统中添加定时任务，并指定更新时间</p>\n<h3 id=\"具体参数详解\"><a href=\"#具体参数详解\" class=\"headerlink\" title=\"具体参数详解\"></a>具体参数详解</h3><p>rsync参数的具体解释如下： -v, –verbose 详细模式输出<br>-q, –quiet 精简输出模式<br>-c, –checksum 打开校验开关，强制对文件传输进行校验<br>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD<br>-r, –recursive 对子目录以递归模式处理<br>-R, –relative 使用相对路径信息<br>-b, –backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为<del>filename。可以使用–suffix选项来指定不同的备份文件前缀。<br>–backup-dir 将备份文件(如</del>filename)存放在在目录下。<br>-suffix=SUFFIX 定义备份文件前缀<br>-u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)<br>-l, –links 保留软链结<br>-L, –copy-links 想对待常规文件一样处理软链结<br>–copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结<br>–safe-links 忽略指向SRC路径目录树以外的链结<br>-H, –hard-links 保留硬链结<br>-p, –perms 保持文件权限<br>-o, –owner 保持文件属主信息<br>-g, –group 保持文件属组信息<br>-D, –devices 保持设备文件信息<br>-t, –times 保持文件时间信息<br>-S, –sparse 对稀疏文件进行特殊处理以节省DST的空间<br>-n, –dry-run现实哪些文件将被传输<br>-W, –whole-file 拷贝文件，不进行增量检测<br>-x, –one-file-system 不要跨越文件系统边界<br>-B, –block-size=SIZE 检验算法使用的块尺寸，默认是700字节<br>-e, –rsh=COMMAND 指定使用rsh、ssh方式进行数据同步<br>–rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息<br>-C, –cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件<br>–existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件<br>–delete 删除那些DST中SRC没有的文件<br>–delete-excluded 同样删除接收端那些被该选项指定排除的文件<br>–delete-after 传输结束以后再删除<br>–ignore-errors 及时出现IO错误也进行删除<br>–max-delete=NUM 最多删除NUM个文件<br>–partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输<br>–force 强制删除目录，即使不为空<br>–numeric-ids 不将数字的用户和组ID匹配为用户名和组名<br>–timeout=TIME IP超时时间，单位为秒<br>-I, –ignore-times 不跳过那些有同样的时间和长度的文件<br>–size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间<br>–modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0<br>-T –temp-dir=DIR 在DIR中创建临时文件<br>–compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份<br>-P 等同于 –partial<br>–progress 显示备份过程<br>-z, –compress 对备份的文件在传输时进行压缩处理<br>–exclude=PATTERN 指定排除不需要传输的文件模式<br>–include=PATTERN 指定不排除而需要传输的文件模式<br>–exclude-from=FILE 排除FILE中指定模式的文件<br>–include-from=FILE 不排除FILE指定模式匹配的文件<br>–version 打印版本信息<br>–address 绑定到特定的地址<br>–config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件<br>–port=PORT 指定其他的rsync服务端口<br>–blocking-io 对远程shell使用阻塞IO<br>-stats 给出某些文件的传输状态<br>–progress 在传输时现实传输过程<br>–log-format=formAT 指定日志文件格式<br>–password-file=FILE 从FILE中得到密码<br>–bwlimit=KBPS 限制I/O带宽，KBytes per second<br>-h, –help 显示帮助信息</p>\n<h3 id=\"部分错误的解决办法\"><a href=\"#部分错误的解决办法\" class=\"headerlink\" title=\"部分错误的解决办法\"></a>部分错误的解决办法</h3><p>1.’rsync’ 不是内部或外部命令，也不是可运行的程序或批处理文件。<br>加环境变量 path = C:\\Program Files (x86)\\cwRsync\\bin 2.rsync: failed to connect to 192.168.1.82: Connection timed out (116) rsync error: error in socket IO (code 10) at clientserver.c(122) [Receiver=3.0.7]<br>网络通畅，服务器端允许访问端口 873 3.@ERROR: invalid uid nobody<br>rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7]<br>指定uid gid<br>uid = 0<br>gid = 0 4.@ERROR: chdir failed<br>rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7]<br>path目录配置的正确，得存在<br>解决：服务器端同步目录没有权限，cwrsync默认用户是Svcwrsync。为同步目录添加用户Svcwrsync权限。<br>也可以通过 菜单–cwRsyncServer–02. Prep a Dir for Upload 配置目录权限 除完全控制和特殊权限外的所有权限 5.@ERROR: auth failed on module test<br>rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7]<br>客户端设置<br>a.在命令上要指定好用户名<br>b.密码文件只写密码<br>rsyncd.secrets文件<br>rsyncpass<br>c.用户名密码都要正确 6.Unexpected local arg: /cygdrive/d/rsyncBackup<br>If arg is a remote file/dir, prefix it with a colon (:).<br>rsync error: syntax or usage error (code 1) at main.c(1218) [Receiver=3.0.7]<br>不一定是这个路径有问题，可能是–password-file路径中有空格，服务器端没问题，客户端好像不行 7.password file must be owned by root when running as root<br>continuing without password file<br>Password:<br>设置密码访问权限chown.exe可从服务器端拷贝过来<br>chmod -c 600 /cygdrive/c/etc/rsyncd.secrets<br>chown administrator /cygdrive/c/etc/rsyncd.secrets<br>服务器端不设也可以 8.当出现rsync: chown “” failed: Invalid argument (22)错误时，是因为参数中有o，即保留文件的owner信息，而window服务端无法完成chown操作，解决办法是去掉参数o。另外有些可能还会出现rsync: chgrp “” failed: Invalid argument (22)，原因类似，只要去掉参数中的g即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>服务端安装 WIN2008R2 ip:192.168.0.160<br>客户端安装 WIN2003 ip:192.168.0.206</p>\n<h3 id=\"程序下载\"><a href=\"#程序下载\" class=\"headerlink\" title=\"程序下载\"></a>程序下载</h3><p>新版已经开始收费，这里使用旧版4.0.5,百度网盘下载<a href=\"http://pan.baidu.com/s/1kTNyk1h\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1kTNyk1h</a></p>\n<h3 id=\"服务端安装\"><a href=\"#服务端安装\" class=\"headerlink\" title=\"服务端安装\"></a>服务端安装</h3><p><img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync.png\" alt> 一路直接下一步，这里会创建一个用户，创建的默认密码可以不需要修改，直接下一步。 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync1.png\" alt> 创建的用户 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync2.png\" alt> 创建的服务改为自动启动</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><p>一路下一步直到完成。</p>\n<h3 id=\"配置服务端\"><a href=\"#配置服务端\" class=\"headerlink\" title=\"配置服务端\"></a>配置服务端</h3><pre><code>use chroot = false\n# 不验证用户密码\nstrict modes = false\nlock file = rsyncd.lock \nhosts allow = 192.168.0.206\nmax connections = 5\n# 默认端口\nport = 873\n\n# 指定匿名访问\nuid = 0\ngid = 0\n\n\nlog file = rsyncd.log\n\n# Module definitions\n# Remember cygwin naming conventions : c:\\work becomes /cygdrive/c/work\n\n[web]\npath = /cygdrive/C/WEB\n# 下面两行是配置用户名密码的\n# auth users = dbbackuper\n# secrets file = /cygdrive/e/Setting/Rsync/rsync_db.ps\n# 只允许客户端下载，不允许客户端上传\nread only = true\ntransfer logging = yes</code></pre><p>防火墙设置允许配置的端口通过<br>查看端口配置是否错误</p>\n<pre><code>telnet 192.168.0.160 873  \n@RSYNCD: 30.0</code></pre><p>服务器端配置测试文件目录 <img src=\"http://7xq3ry.com1.z0.glb.clouddn.com/cwrsync3.png\" alt> 其中targetDir为联接文件</p>\n<pre><code>C:\\&gt;mklink /J WEB\\targetDir\\ source\\\n为 WEB\\targetDir\\ &lt;&lt;===&gt;&gt; source\\ 创建的联接</code></pre><h3 id=\"配置客户端\"><a href=\"#配置客户端\" class=\"headerlink\" title=\"配置客户端\"></a>配置客户端</h3><p>在安装目录下使用如下命令</p>\n<pre><code>C:\\Program Files\\cwRsync\\bin&gt;rsync --port=873 -vzrtopg --progress --delete 192.168.0.160::web /cygdrive/C/WEB\nreceiving incremental file list\nskipping non-regular file &quot;targetDir&quot;\n./\nTEST4/\ntest3/\n\nsent 39 bytes  received 163 bytes  134.67 bytes/sec\ntotal size is 19  speedup is 0.09</code></pre><p>查看客户端文件目录</p>\n<pre><code>test3\nTEST4</code></pre><p>提示skipping non-regular file ‘targetDir’忽略软链接解决办法<br>参数-L:–copy-links 像对待常规文件一样处理软链结</p>\n<pre><code>C:\\Program Files\\cwRsync\\bin&gt;rsync --port=873 -vzrtopgL --progress --delete 192.\n168.0.160::web /cygdrive/C/WEB\nreceiving incremental file list\ndeleting test5/adda.txt\ndeleting test5/\n./\nTEST4/\ntargetDir/\ntargetDir/HAFA/\ntargetDir/pdf/\ntargetDir/pdf/TARGE.txt\n           0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=1/8)\ntest3/\n\nsent 70 bytes  received 272 bytes  97.71 bytes/sec\ntotal size is 0  speedup is 0.00</code></pre><h3 id=\"实现客户端定时任务\"><a href=\"#实现客户端定时任务\" class=\"headerlink\" title=\"实现客户端定时任务\"></a>实现客户端定时任务</h3><p>1，要添加环境变量到系统中<br>2，上传脚本文件到客户端sync_client.bat</p>\n<pre><code>rsync --port=873 -vzrtopgL --progress --delete 192.168.0.160::web /cygdrive/C/WEB</code></pre><p>3,在系统中添加定时任务，并指定更新时间</p>\n<h3 id=\"具体参数详解\"><a href=\"#具体参数详解\" class=\"headerlink\" title=\"具体参数详解\"></a>具体参数详解</h3><p>rsync参数的具体解释如下： -v, –verbose 详细模式输出<br>-q, –quiet 精简输出模式<br>-c, –checksum 打开校验开关，强制对文件传输进行校验<br>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD<br>-r, –recursive 对子目录以递归模式处理<br>-R, –relative 使用相对路径信息<br>-b, –backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为<del>filename。可以使用–suffix选项来指定不同的备份文件前缀。<br>–backup-dir 将备份文件(如</del>filename)存放在在目录下。<br>-suffix=SUFFIX 定义备份文件前缀<br>-u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)<br>-l, –links 保留软链结<br>-L, –copy-links 想对待常规文件一样处理软链结<br>–copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结<br>–safe-links 忽略指向SRC路径目录树以外的链结<br>-H, –hard-links 保留硬链结<br>-p, –perms 保持文件权限<br>-o, –owner 保持文件属主信息<br>-g, –group 保持文件属组信息<br>-D, –devices 保持设备文件信息<br>-t, –times 保持文件时间信息<br>-S, –sparse 对稀疏文件进行特殊处理以节省DST的空间<br>-n, –dry-run现实哪些文件将被传输<br>-W, –whole-file 拷贝文件，不进行增量检测<br>-x, –one-file-system 不要跨越文件系统边界<br>-B, –block-size=SIZE 检验算法使用的块尺寸，默认是700字节<br>-e, –rsh=COMMAND 指定使用rsh、ssh方式进行数据同步<br>–rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息<br>-C, –cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件<br>–existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件<br>–delete 删除那些DST中SRC没有的文件<br>–delete-excluded 同样删除接收端那些被该选项指定排除的文件<br>–delete-after 传输结束以后再删除<br>–ignore-errors 及时出现IO错误也进行删除<br>–max-delete=NUM 最多删除NUM个文件<br>–partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输<br>–force 强制删除目录，即使不为空<br>–numeric-ids 不将数字的用户和组ID匹配为用户名和组名<br>–timeout=TIME IP超时时间，单位为秒<br>-I, –ignore-times 不跳过那些有同样的时间和长度的文件<br>–size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间<br>–modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0<br>-T –temp-dir=DIR 在DIR中创建临时文件<br>–compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份<br>-P 等同于 –partial<br>–progress 显示备份过程<br>-z, –compress 对备份的文件在传输时进行压缩处理<br>–exclude=PATTERN 指定排除不需要传输的文件模式<br>–include=PATTERN 指定不排除而需要传输的文件模式<br>–exclude-from=FILE 排除FILE中指定模式的文件<br>–include-from=FILE 不排除FILE指定模式匹配的文件<br>–version 打印版本信息<br>–address 绑定到特定的地址<br>–config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件<br>–port=PORT 指定其他的rsync服务端口<br>–blocking-io 对远程shell使用阻塞IO<br>-stats 给出某些文件的传输状态<br>–progress 在传输时现实传输过程<br>–log-format=formAT 指定日志文件格式<br>–password-file=FILE 从FILE中得到密码<br>–bwlimit=KBPS 限制I/O带宽，KBytes per second<br>-h, –help 显示帮助信息</p>\n<h3 id=\"部分错误的解决办法\"><a href=\"#部分错误的解决办法\" class=\"headerlink\" title=\"部分错误的解决办法\"></a>部分错误的解决办法</h3><p>1.’rsync’ 不是内部或外部命令，也不是可运行的程序或批处理文件。<br>加环境变量 path = C:\\Program Files (x86)\\cwRsync\\bin 2.rsync: failed to connect to 192.168.1.82: Connection timed out (116) rsync error: error in socket IO (code 10) at clientserver.c(122) [Receiver=3.0.7]<br>网络通畅，服务器端允许访问端口 873 3.@ERROR: invalid uid nobody<br>rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7]<br>指定uid gid<br>uid = 0<br>gid = 0 4.@ERROR: chdir failed<br>rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7]<br>path目录配置的正确，得存在<br>解决：服务器端同步目录没有权限，cwrsync默认用户是Svcwrsync。为同步目录添加用户Svcwrsync权限。<br>也可以通过 菜单–cwRsyncServer–02. Prep a Dir for Upload 配置目录权限 除完全控制和特殊权限外的所有权限 5.@ERROR: auth failed on module test<br>rsync error: error starting client-server protocol (code 5) at main.c(1506) [Receiver=3.0.7]<br>客户端设置<br>a.在命令上要指定好用户名<br>b.密码文件只写密码<br>rsyncd.secrets文件<br>rsyncpass<br>c.用户名密码都要正确 6.Unexpected local arg: /cygdrive/d/rsyncBackup<br>If arg is a remote file/dir, prefix it with a colon (:).<br>rsync error: syntax or usage error (code 1) at main.c(1218) [Receiver=3.0.7]<br>不一定是这个路径有问题，可能是–password-file路径中有空格，服务器端没问题，客户端好像不行 7.password file must be owned by root when running as root<br>continuing without password file<br>Password:<br>设置密码访问权限chown.exe可从服务器端拷贝过来<br>chmod -c 600 /cygdrive/c/etc/rsyncd.secrets<br>chown administrator /cygdrive/c/etc/rsyncd.secrets<br>服务器端不设也可以 8.当出现rsync: chown “” failed: Invalid argument (22)错误时，是因为参数中有o，即保留文件的owner信息，而window服务端无法完成chown操作，解决办法是去掉参数o。另外有些可能还会出现rsync: chgrp “” failed: Invalid argument (22)，原因类似，只要去掉参数中的g即可。</p>\n"},{"title":"Selenium基础入门","url":"115.html","id":"115","comments":0,"date":"2016-11-30T01:37:47.000Z","_content":"\n#### 安装及基本操作\n\n    # -*- coding:utf-8 -*-\n    # 环境: ubuntu14.04\n    # pip install seleninum\n    # firefox\n    # https://github.com/mozilla/geckodriver/releases 下载对应版本放在$PATH目录下\n    # google\n    # https://sites.google.com/a/chromium.org/chromedriver/downloads 下载对应版本放在$PATH目录下\n    # http://www.seleniumhq.org/download/    其他浏览器参考\n    # sudo apt-get install phantomjs  安装无界面webkit浏览器引擎\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    \n    driver = webdriver.Firefox()\n    # driver = webdriver.Chrome()\n    # driver =  webdriver.PhantomJS(executable_path='/usr/bin/phantomjs')\n    driver.get('http://www.baidu.com')\n    \n    # 定位元素\n    # 根据id定位\n    find_id = driver.find_element_by_id('wrapper')\n    find_id = driver.find_element(By.ID, 'wrapper')\n    # 根据name属性定位\n    find_name = driver.find_element_by_name('wd')\n    find_name = driver.find_element(By.NAME, 'wd')\n    # 根据class定位\n    find_class = driver.find_element_by_class_name('head_wrapper')\n    find_class = driver.find_element(By.CLASS_NAME, 'head_wrapper')\n    # 根据标签名称定位\n    find_tag = driver.find_element_by_tag_name('div')\n    find_tag = driver.find_element(By.TAG_NAME, 'div')\n    # 根据链接文本定位\n    find_a_text = driver.find_element_by_link_text('hao123')\n    find_a_text = driver.find_element(By.LINK_TEXT, 'hao123')\n    # 根据部分链接文本定位\n    find_a_text = driver.find_element_by_partial_link_text('hao')\n    find_a_text = driver.find_element(By.PARTIAL_LINK_TEXT, 'hao')\n    # 根据绝对位置定位\n    find_x_path = driver.find_elements_by_xpath('/html/body/div')\n    find_x_path = driver.find_element(By.XPATH, '/html/body/div')\n    # 支持层级，属性，逻辑运算符结合使用\n    find_x_path = driver.find_element_by_xpath(\"//input[@id='kw']\")  # // 当前目录下的某个目录下\n    # Css定位\n    find_css = driver.find_elements_by_css_selector('.s_ipt')\n    find_css = driver.find_element(By.CSS_SELECTOR, '.s_ipt')\n    \n    # 设置浏览器宽高\n    driver.set_window_size(480, 800)\n    driver.get('http://www.126.com')\n    # 控制浏览器前进倒退\n    driver.back()\n    driver.forward()\n    # 刷新浏览器(F5)\n    driver.refresh()\n    # 当前页面\n    print driver.current_url()\n    # 元素操作\n    # dom = driver.find_element(By.ID, 'kw')\n    # dom.clear()  # 清除文本\n    # dom.send_keys()  # 模拟键盘输入\n    # dom.click()  # 点击元素\n    # dom.submit()  # 模拟表单提交\n    # dom.size()  # 返回元素的尺寸\n    # dom.text()  # 返回元素的文本\n    # dom.get_attribute(name)  # 返回元素的属性值\n    # dom.is_displayed()  # 设置该元素是否可见\n    \n    # 鼠标操作\n    from selenium.webdriver.common.action_chains import ActionChains\n    driver.get('http://www.baidu.com')\n    # context_click 鼠标右键点击\n    right_click = driver.find_element_by_id('xx')\n    # perform 执行所有ActionChains中存储的动作\n    ActionChains(driver).context_click(right_click).perform()\n    # above 鼠标悬停\n    above = driver.find_element_by_id('xxx')\n    ActionChains(driver).move_to_element(above).perform()\n    # double_click 鼠标双击\n    # drag_and_drop(source, target) 鼠标拖放\n    \n    \n    # 键盘事件\n    from selenium.webdriver.common.keys import Keys\n    find_id.send_keys(Keys.BACK_SPACE) # 删除键\n    find_id.send_keys(Keys.SPACE)  # 空格键\n    find_id.send_keys(Keys.TAB)  # tab键\n    find_id.send_keys(Keys.ESCAPE)  # ESC\n    find_id.send_keys(Keys.ENTER)  # 回车键\n    find_id.send_keys(Keys.CONTROL, 'c')  # 复制\n    find_id.send_keys(Keys.CONTROL, 'v')  # 剪贴\n    find_id.send_keys(Keys.F1) # F1\n    \n    # driver.quit()\n    \n    \n\n#### webdriver原理\n\n    # -*- coding:utf-8 -*-\n    from selenium import webdriver\n    import logging\n    \n    logging.basicConfig(level=logging.DEBUG)\n    driver = webdriver.Firefox()\n    driver.get('http://www.baidu.com')\n    driver.find_element_by_id('kw').send_keys('selenium')\n    driver.find_element_by_id('su').click()\n    driver.quit()\n    \n\n#### 显示等待\n\n    # -*- coding:utf-8 -*-\n    # 显示等待\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    from selenium.webdriver.support.ui import WebDriverWait\n    from selenium.webdriver.support import expected_conditions as EC\n    \n    driver = webdriver.Firefox()\n    driver.get('http://www.baidu.com')\n    # 显示等待\n    # 参数driver： 浏览器驱动\n    # 参数timeout： 最大超时时间，单位秒\n    # 参数poll_frequency： 检测的间隔时间，默认为0.5秒\n    # 参数ignored_exceptions: 超时异常信息，默认为NoSuchElementException\n    # WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)\n    # until(method, message='') 调用该方法提供的驱动程序作为参数，直到返回True\n    # until_not(method, message='') 调用该方法提供的驱动程序作为参数，直到返回False\n    # EC.title_is 判断当前页面的标题是否是否等于预期\n    # EC.title_contains 判断当前页面的标题是否包含预期的字符串\n    # EC.presence_of_element_located 判断元素是否被加载在DOM树中，并不代表当前元素可见\n    # EC.visibility_of_element_located 判断元素是否可见（可见并非代表元素非隐藏，并且元素的宽和高均不等于0）\n    # EC.visibility_of 与visibility_of_element_located相同，该方法接受的参数为定位后的元素\n    # EC.presence_of_all_elements_located 判断是否至少有一个元素存在与DOM树中\n    # EC.text_to_be_present_in_element 判断某个元素的text是否包含预期的字符串\n    # EC.text_to_be_present_in_element_value 判断某个元素的vaule属性是否包含了预期的字符串\n    # EC.frame_to_be_available_and_switch_to_it 判断该表单是否可以切换进去，如果可以，返回True并switch进去，否则返回false\n    # EC.invisibility_of_element_located 判断某个元素是否不存在于DOM树中或者不可见\n    # EC.element_to_be_clickable 判断某个元素是否可以点击\n    # EC.staleness_of 等到一个元素从DOM树中移除\n    # EC.element_to_be_selected 判断某个元素是否被选中，一般用于下拉菜单\n    # EC.element_selection_state_to_be 判断某个元素的选中状态是否符合预期, 参数为定位后的元素\n    # EC.element_located_selection_state_to_be 判断某个元素的选中状态是否符合预期,该方法接受的参数为定位\n    # EC.alert_is_present 判断页面上是否有alert\n    # driver.find_element_by_id().is_displayed() 判断元素是否可见\n    element = WebDriverWait(driver, 5, 0.5).until(EC.presence_of_element_located((By.ID, 'kw')))\n    element.send_keys('selenium')\n    # driver.quit()\n    \n    \n\n#### 隐式等待\n\n    # -*- coding:utf-8 -*-\n    # 隐式等待\n    from selenium import webdriver\n    from selenium.common.exceptions import NoSuchElementException\n    from time import ctime\n    from time import sleep\n    driver = webdriver.Firefox()\n    # sleep(10)\n    driver.implicitly_wait(10)\n    driver.get('http://www.baidu.com')\n    print ctime()\n    try:\n        driver.find_element_by_id('kw22').send_keys('selenium')\n    except NoSuchElementException as e:\n        print e\n    finally:\n        print ctime()\n    \n\n#### 执行js代码\n\n    # -*- coding:utf-8 -*-\n    # 执行js代码\n    from selenium import webdriver\n    from time import sleep\n    \n    # 访问百度\n    driver = webdriver.Firefox()\n    driver.get('http://www.baidu.com')\n    driver.set_window_size(600, 600)\n    driver.find_element_by_id('kw').send_keys('selenium')\n    driver.find_element_by_id('su').click()\n    sleep(2)\n    \n    js = 'window.scrollTo(100, 450);'\n    driver.execute_script(js)\n    sleep(3)\n    \n    # driver.quit()\n    \n\n#### 处理cookie\n\n    # -*- coding:utf-8 -*-\n    # cookie处理\n    from selenium import webdriver\n    driver = webdriver.Firefox()\n    driver.get('http://www.youdao.com')\n    driver.add_cookie({'name': 'name-a', 'value': 'value-b'})\n    # 获取cookie信息\n    cookies = driver.get_cookies()\n    print cookies\n    for cookie in cookies:\n        print cookie\n        print '{} -> {}'.format(cookie['name'], cookie['value'])\n    driver.quit()\n    \n\n#### 截图\n\n    # -*- coding:utf-8 -*-\n    # 窗口截图\n    from selenium import webdriver\n    from time import sleep\n    \n    # driver = webdriver.Firefox()\n    driver =  webdriver.PhantomJS(executable_path='/usr/bin/phantomjs')\n    driver.get('http://www.baidu.com')\n    \n    driver.find_element_by_id('kw').send_keys('selenium')\n    driver.find_element_by_id('su').click()\n    sleep(2)\n    \n    driver.get_screenshot_as_file('./screen.png')\n    driver.quit()\n    \n\n#### 播放视频\n\n    # -*- coding:utf-8 -*-\n    from selenium import webdriver\n    from time import sleep\n    \n    driver = webdriver.Firefox()\n    driver.get('http://videojs.com')\n    \n    video = driver.find_element_by_xpath('body/Setion[1]/div/video')\n    # 返回播放文件地址\n    url = driver.execute_script('return arguments[0].currentSrc;', video)\n    print url\n    \n    # 播放视频\n    print 'start'\n    driver.execute_script('return arguments[0].play()', video)\n    \n    # 播放15秒\n    sleep(15)\n    \n    # 暂停播放\n    print 'stop'\n    driver.execute_script('arguments[0].pause()', video)\n    \n    # driver.quit()","source":"_posts/Selenium基础入门.md","raw":"---\ntitle: Selenium基础入门\ntags:\n  - python\nurl: 115.html\nid: 115\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-30 09:37:47\n---\n\n#### 安装及基本操作\n\n    # -*- coding:utf-8 -*-\n    # 环境: ubuntu14.04\n    # pip install seleninum\n    # firefox\n    # https://github.com/mozilla/geckodriver/releases 下载对应版本放在$PATH目录下\n    # google\n    # https://sites.google.com/a/chromium.org/chromedriver/downloads 下载对应版本放在$PATH目录下\n    # http://www.seleniumhq.org/download/    其他浏览器参考\n    # sudo apt-get install phantomjs  安装无界面webkit浏览器引擎\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    \n    driver = webdriver.Firefox()\n    # driver = webdriver.Chrome()\n    # driver =  webdriver.PhantomJS(executable_path='/usr/bin/phantomjs')\n    driver.get('http://www.baidu.com')\n    \n    # 定位元素\n    # 根据id定位\n    find_id = driver.find_element_by_id('wrapper')\n    find_id = driver.find_element(By.ID, 'wrapper')\n    # 根据name属性定位\n    find_name = driver.find_element_by_name('wd')\n    find_name = driver.find_element(By.NAME, 'wd')\n    # 根据class定位\n    find_class = driver.find_element_by_class_name('head_wrapper')\n    find_class = driver.find_element(By.CLASS_NAME, 'head_wrapper')\n    # 根据标签名称定位\n    find_tag = driver.find_element_by_tag_name('div')\n    find_tag = driver.find_element(By.TAG_NAME, 'div')\n    # 根据链接文本定位\n    find_a_text = driver.find_element_by_link_text('hao123')\n    find_a_text = driver.find_element(By.LINK_TEXT, 'hao123')\n    # 根据部分链接文本定位\n    find_a_text = driver.find_element_by_partial_link_text('hao')\n    find_a_text = driver.find_element(By.PARTIAL_LINK_TEXT, 'hao')\n    # 根据绝对位置定位\n    find_x_path = driver.find_elements_by_xpath('/html/body/div')\n    find_x_path = driver.find_element(By.XPATH, '/html/body/div')\n    # 支持层级，属性，逻辑运算符结合使用\n    find_x_path = driver.find_element_by_xpath(\"//input[@id='kw']\")  # // 当前目录下的某个目录下\n    # Css定位\n    find_css = driver.find_elements_by_css_selector('.s_ipt')\n    find_css = driver.find_element(By.CSS_SELECTOR, '.s_ipt')\n    \n    # 设置浏览器宽高\n    driver.set_window_size(480, 800)\n    driver.get('http://www.126.com')\n    # 控制浏览器前进倒退\n    driver.back()\n    driver.forward()\n    # 刷新浏览器(F5)\n    driver.refresh()\n    # 当前页面\n    print driver.current_url()\n    # 元素操作\n    # dom = driver.find_element(By.ID, 'kw')\n    # dom.clear()  # 清除文本\n    # dom.send_keys()  # 模拟键盘输入\n    # dom.click()  # 点击元素\n    # dom.submit()  # 模拟表单提交\n    # dom.size()  # 返回元素的尺寸\n    # dom.text()  # 返回元素的文本\n    # dom.get_attribute(name)  # 返回元素的属性值\n    # dom.is_displayed()  # 设置该元素是否可见\n    \n    # 鼠标操作\n    from selenium.webdriver.common.action_chains import ActionChains\n    driver.get('http://www.baidu.com')\n    # context_click 鼠标右键点击\n    right_click = driver.find_element_by_id('xx')\n    # perform 执行所有ActionChains中存储的动作\n    ActionChains(driver).context_click(right_click).perform()\n    # above 鼠标悬停\n    above = driver.find_element_by_id('xxx')\n    ActionChains(driver).move_to_element(above).perform()\n    # double_click 鼠标双击\n    # drag_and_drop(source, target) 鼠标拖放\n    \n    \n    # 键盘事件\n    from selenium.webdriver.common.keys import Keys\n    find_id.send_keys(Keys.BACK_SPACE) # 删除键\n    find_id.send_keys(Keys.SPACE)  # 空格键\n    find_id.send_keys(Keys.TAB)  # tab键\n    find_id.send_keys(Keys.ESCAPE)  # ESC\n    find_id.send_keys(Keys.ENTER)  # 回车键\n    find_id.send_keys(Keys.CONTROL, 'c')  # 复制\n    find_id.send_keys(Keys.CONTROL, 'v')  # 剪贴\n    find_id.send_keys(Keys.F1) # F1\n    \n    # driver.quit()\n    \n    \n\n#### webdriver原理\n\n    # -*- coding:utf-8 -*-\n    from selenium import webdriver\n    import logging\n    \n    logging.basicConfig(level=logging.DEBUG)\n    driver = webdriver.Firefox()\n    driver.get('http://www.baidu.com')\n    driver.find_element_by_id('kw').send_keys('selenium')\n    driver.find_element_by_id('su').click()\n    driver.quit()\n    \n\n#### 显示等待\n\n    # -*- coding:utf-8 -*-\n    # 显示等待\n    from selenium import webdriver\n    from selenium.webdriver.common.by import By\n    from selenium.webdriver.support.ui import WebDriverWait\n    from selenium.webdriver.support import expected_conditions as EC\n    \n    driver = webdriver.Firefox()\n    driver.get('http://www.baidu.com')\n    # 显示等待\n    # 参数driver： 浏览器驱动\n    # 参数timeout： 最大超时时间，单位秒\n    # 参数poll_frequency： 检测的间隔时间，默认为0.5秒\n    # 参数ignored_exceptions: 超时异常信息，默认为NoSuchElementException\n    # WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)\n    # until(method, message='') 调用该方法提供的驱动程序作为参数，直到返回True\n    # until_not(method, message='') 调用该方法提供的驱动程序作为参数，直到返回False\n    # EC.title_is 判断当前页面的标题是否是否等于预期\n    # EC.title_contains 判断当前页面的标题是否包含预期的字符串\n    # EC.presence_of_element_located 判断元素是否被加载在DOM树中，并不代表当前元素可见\n    # EC.visibility_of_element_located 判断元素是否可见（可见并非代表元素非隐藏，并且元素的宽和高均不等于0）\n    # EC.visibility_of 与visibility_of_element_located相同，该方法接受的参数为定位后的元素\n    # EC.presence_of_all_elements_located 判断是否至少有一个元素存在与DOM树中\n    # EC.text_to_be_present_in_element 判断某个元素的text是否包含预期的字符串\n    # EC.text_to_be_present_in_element_value 判断某个元素的vaule属性是否包含了预期的字符串\n    # EC.frame_to_be_available_and_switch_to_it 判断该表单是否可以切换进去，如果可以，返回True并switch进去，否则返回false\n    # EC.invisibility_of_element_located 判断某个元素是否不存在于DOM树中或者不可见\n    # EC.element_to_be_clickable 判断某个元素是否可以点击\n    # EC.staleness_of 等到一个元素从DOM树中移除\n    # EC.element_to_be_selected 判断某个元素是否被选中，一般用于下拉菜单\n    # EC.element_selection_state_to_be 判断某个元素的选中状态是否符合预期, 参数为定位后的元素\n    # EC.element_located_selection_state_to_be 判断某个元素的选中状态是否符合预期,该方法接受的参数为定位\n    # EC.alert_is_present 判断页面上是否有alert\n    # driver.find_element_by_id().is_displayed() 判断元素是否可见\n    element = WebDriverWait(driver, 5, 0.5).until(EC.presence_of_element_located((By.ID, 'kw')))\n    element.send_keys('selenium')\n    # driver.quit()\n    \n    \n\n#### 隐式等待\n\n    # -*- coding:utf-8 -*-\n    # 隐式等待\n    from selenium import webdriver\n    from selenium.common.exceptions import NoSuchElementException\n    from time import ctime\n    from time import sleep\n    driver = webdriver.Firefox()\n    # sleep(10)\n    driver.implicitly_wait(10)\n    driver.get('http://www.baidu.com')\n    print ctime()\n    try:\n        driver.find_element_by_id('kw22').send_keys('selenium')\n    except NoSuchElementException as e:\n        print e\n    finally:\n        print ctime()\n    \n\n#### 执行js代码\n\n    # -*- coding:utf-8 -*-\n    # 执行js代码\n    from selenium import webdriver\n    from time import sleep\n    \n    # 访问百度\n    driver = webdriver.Firefox()\n    driver.get('http://www.baidu.com')\n    driver.set_window_size(600, 600)\n    driver.find_element_by_id('kw').send_keys('selenium')\n    driver.find_element_by_id('su').click()\n    sleep(2)\n    \n    js = 'window.scrollTo(100, 450);'\n    driver.execute_script(js)\n    sleep(3)\n    \n    # driver.quit()\n    \n\n#### 处理cookie\n\n    # -*- coding:utf-8 -*-\n    # cookie处理\n    from selenium import webdriver\n    driver = webdriver.Firefox()\n    driver.get('http://www.youdao.com')\n    driver.add_cookie({'name': 'name-a', 'value': 'value-b'})\n    # 获取cookie信息\n    cookies = driver.get_cookies()\n    print cookies\n    for cookie in cookies:\n        print cookie\n        print '{} -> {}'.format(cookie['name'], cookie['value'])\n    driver.quit()\n    \n\n#### 截图\n\n    # -*- coding:utf-8 -*-\n    # 窗口截图\n    from selenium import webdriver\n    from time import sleep\n    \n    # driver = webdriver.Firefox()\n    driver =  webdriver.PhantomJS(executable_path='/usr/bin/phantomjs')\n    driver.get('http://www.baidu.com')\n    \n    driver.find_element_by_id('kw').send_keys('selenium')\n    driver.find_element_by_id('su').click()\n    sleep(2)\n    \n    driver.get_screenshot_as_file('./screen.png')\n    driver.quit()\n    \n\n#### 播放视频\n\n    # -*- coding:utf-8 -*-\n    from selenium import webdriver\n    from time import sleep\n    \n    driver = webdriver.Firefox()\n    driver.get('http://videojs.com')\n    \n    video = driver.find_element_by_xpath('body/Setion[1]/div/video')\n    # 返回播放文件地址\n    url = driver.execute_script('return arguments[0].currentSrc;', video)\n    print url\n    \n    # 播放视频\n    print 'start'\n    driver.execute_script('return arguments[0].play()', video)\n    \n    # 播放15秒\n    sleep(15)\n    \n    # 暂停播放\n    print 'stop'\n    driver.execute_script('arguments[0].pause()', video)\n    \n    # driver.quit()","slug":"Selenium基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt20044h3a4hb0ogrsb","content":"<h4 id=\"安装及基本操作\"><a href=\"#安装及基本操作\" class=\"headerlink\" title=\"安装及基本操作\"></a>安装及基本操作</h4><pre><code># -*- coding:utf-8 -*-\n# 环境: ubuntu14.04\n# pip install seleninum\n# firefox\n# https://github.com/mozilla/geckodriver/releases 下载对应版本放在$PATH目录下\n# google\n# https://sites.google.com/a/chromium.org/chromedriver/downloads 下载对应版本放在$PATH目录下\n# http://www.seleniumhq.org/download/    其他浏览器参考\n# sudo apt-get install phantomjs  安装无界面webkit浏览器引擎\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\n# driver = webdriver.Chrome()\n# driver =  webdriver.PhantomJS(executable_path=&apos;/usr/bin/phantomjs&apos;)\ndriver.get(&apos;http://www.baidu.com&apos;)\n\n# 定位元素\n# 根据id定位\nfind_id = driver.find_element_by_id(&apos;wrapper&apos;)\nfind_id = driver.find_element(By.ID, &apos;wrapper&apos;)\n# 根据name属性定位\nfind_name = driver.find_element_by_name(&apos;wd&apos;)\nfind_name = driver.find_element(By.NAME, &apos;wd&apos;)\n# 根据class定位\nfind_class = driver.find_element_by_class_name(&apos;head_wrapper&apos;)\nfind_class = driver.find_element(By.CLASS_NAME, &apos;head_wrapper&apos;)\n# 根据标签名称定位\nfind_tag = driver.find_element_by_tag_name(&apos;div&apos;)\nfind_tag = driver.find_element(By.TAG_NAME, &apos;div&apos;)\n# 根据链接文本定位\nfind_a_text = driver.find_element_by_link_text(&apos;hao123&apos;)\nfind_a_text = driver.find_element(By.LINK_TEXT, &apos;hao123&apos;)\n# 根据部分链接文本定位\nfind_a_text = driver.find_element_by_partial_link_text(&apos;hao&apos;)\nfind_a_text = driver.find_element(By.PARTIAL_LINK_TEXT, &apos;hao&apos;)\n# 根据绝对位置定位\nfind_x_path = driver.find_elements_by_xpath(&apos;/html/body/div&apos;)\nfind_x_path = driver.find_element(By.XPATH, &apos;/html/body/div&apos;)\n# 支持层级，属性，逻辑运算符结合使用\nfind_x_path = driver.find_element_by_xpath(&quot;//input[@id=&apos;kw&apos;]&quot;)  # // 当前目录下的某个目录下\n# Css定位\nfind_css = driver.find_elements_by_css_selector(&apos;.s_ipt&apos;)\nfind_css = driver.find_element(By.CSS_SELECTOR, &apos;.s_ipt&apos;)\n\n# 设置浏览器宽高\ndriver.set_window_size(480, 800)\ndriver.get(&apos;http://www.126.com&apos;)\n# 控制浏览器前进倒退\ndriver.back()\ndriver.forward()\n# 刷新浏览器(F5)\ndriver.refresh()\n# 当前页面\nprint driver.current_url()\n# 元素操作\n# dom = driver.find_element(By.ID, &apos;kw&apos;)\n# dom.clear()  # 清除文本\n# dom.send_keys()  # 模拟键盘输入\n# dom.click()  # 点击元素\n# dom.submit()  # 模拟表单提交\n# dom.size()  # 返回元素的尺寸\n# dom.text()  # 返回元素的文本\n# dom.get_attribute(name)  # 返回元素的属性值\n# dom.is_displayed()  # 设置该元素是否可见\n\n# 鼠标操作\nfrom selenium.webdriver.common.action_chains import ActionChains\ndriver.get(&apos;http://www.baidu.com&apos;)\n# context_click 鼠标右键点击\nright_click = driver.find_element_by_id(&apos;xx&apos;)\n# perform 执行所有ActionChains中存储的动作\nActionChains(driver).context_click(right_click).perform()\n# above 鼠标悬停\nabove = driver.find_element_by_id(&apos;xxx&apos;)\nActionChains(driver).move_to_element(above).perform()\n# double_click 鼠标双击\n# drag_and_drop(source, target) 鼠标拖放\n\n\n# 键盘事件\nfrom selenium.webdriver.common.keys import Keys\nfind_id.send_keys(Keys.BACK_SPACE) # 删除键\nfind_id.send_keys(Keys.SPACE)  # 空格键\nfind_id.send_keys(Keys.TAB)  # tab键\nfind_id.send_keys(Keys.ESCAPE)  # ESC\nfind_id.send_keys(Keys.ENTER)  # 回车键\nfind_id.send_keys(Keys.CONTROL, &apos;c&apos;)  # 复制\nfind_id.send_keys(Keys.CONTROL, &apos;v&apos;)  # 剪贴\nfind_id.send_keys(Keys.F1) # F1\n\n# driver.quit()</code></pre><h4 id=\"webdriver原理\"><a href=\"#webdriver原理\" class=\"headerlink\" title=\"webdriver原理\"></a>webdriver原理</h4><pre><code># -*- coding:utf-8 -*-\nfrom selenium import webdriver\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.baidu.com&apos;)\ndriver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)\ndriver.find_element_by_id(&apos;su&apos;).click()\ndriver.quit()</code></pre><h4 id=\"显示等待\"><a href=\"#显示等待\" class=\"headerlink\" title=\"显示等待\"></a>显示等待</h4><pre><code># -*- coding:utf-8 -*-\n# 显示等待\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.baidu.com&apos;)\n# 显示等待\n# 参数driver： 浏览器驱动\n# 参数timeout： 最大超时时间，单位秒\n# 参数poll_frequency： 检测的间隔时间，默认为0.5秒\n# 参数ignored_exceptions: 超时异常信息，默认为NoSuchElementException\n# WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)\n# until(method, message=&apos;&apos;) 调用该方法提供的驱动程序作为参数，直到返回True\n# until_not(method, message=&apos;&apos;) 调用该方法提供的驱动程序作为参数，直到返回False\n# EC.title_is 判断当前页面的标题是否是否等于预期\n# EC.title_contains 判断当前页面的标题是否包含预期的字符串\n# EC.presence_of_element_located 判断元素是否被加载在DOM树中，并不代表当前元素可见\n# EC.visibility_of_element_located 判断元素是否可见（可见并非代表元素非隐藏，并且元素的宽和高均不等于0）\n# EC.visibility_of 与visibility_of_element_located相同，该方法接受的参数为定位后的元素\n# EC.presence_of_all_elements_located 判断是否至少有一个元素存在与DOM树中\n# EC.text_to_be_present_in_element 判断某个元素的text是否包含预期的字符串\n# EC.text_to_be_present_in_element_value 判断某个元素的vaule属性是否包含了预期的字符串\n# EC.frame_to_be_available_and_switch_to_it 判断该表单是否可以切换进去，如果可以，返回True并switch进去，否则返回false\n# EC.invisibility_of_element_located 判断某个元素是否不存在于DOM树中或者不可见\n# EC.element_to_be_clickable 判断某个元素是否可以点击\n# EC.staleness_of 等到一个元素从DOM树中移除\n# EC.element_to_be_selected 判断某个元素是否被选中，一般用于下拉菜单\n# EC.element_selection_state_to_be 判断某个元素的选中状态是否符合预期, 参数为定位后的元素\n# EC.element_located_selection_state_to_be 判断某个元素的选中状态是否符合预期,该方法接受的参数为定位\n# EC.alert_is_present 判断页面上是否有alert\n# driver.find_element_by_id().is_displayed() 判断元素是否可见\nelement = WebDriverWait(driver, 5, 0.5).until(EC.presence_of_element_located((By.ID, &apos;kw&apos;)))\nelement.send_keys(&apos;selenium&apos;)\n# driver.quit()</code></pre><h4 id=\"隐式等待\"><a href=\"#隐式等待\" class=\"headerlink\" title=\"隐式等待\"></a>隐式等待</h4><pre><code># -*- coding:utf-8 -*-\n# 隐式等待\nfrom selenium import webdriver\nfrom selenium.common.exceptions import NoSuchElementException\nfrom time import ctime\nfrom time import sleep\ndriver = webdriver.Firefox()\n# sleep(10)\ndriver.implicitly_wait(10)\ndriver.get(&apos;http://www.baidu.com&apos;)\nprint ctime()\ntry:\n    driver.find_element_by_id(&apos;kw22&apos;).send_keys(&apos;selenium&apos;)\nexcept NoSuchElementException as e:\n    print e\nfinally:\n    print ctime()</code></pre><h4 id=\"执行js代码\"><a href=\"#执行js代码\" class=\"headerlink\" title=\"执行js代码\"></a>执行js代码</h4><pre><code># -*- coding:utf-8 -*-\n# 执行js代码\nfrom selenium import webdriver\nfrom time import sleep\n\n# 访问百度\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.baidu.com&apos;)\ndriver.set_window_size(600, 600)\ndriver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)\ndriver.find_element_by_id(&apos;su&apos;).click()\nsleep(2)\n\njs = &apos;window.scrollTo(100, 450);&apos;\ndriver.execute_script(js)\nsleep(3)\n\n# driver.quit()</code></pre><h4 id=\"处理cookie\"><a href=\"#处理cookie\" class=\"headerlink\" title=\"处理cookie\"></a>处理cookie</h4><pre><code># -*- coding:utf-8 -*-\n# cookie处理\nfrom selenium import webdriver\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.youdao.com&apos;)\ndriver.add_cookie({&apos;name&apos;: &apos;name-a&apos;, &apos;value&apos;: &apos;value-b&apos;})\n# 获取cookie信息\ncookies = driver.get_cookies()\nprint cookies\nfor cookie in cookies:\n    print cookie\n    print &apos;{} -&gt; {}&apos;.format(cookie[&apos;name&apos;], cookie[&apos;value&apos;])\ndriver.quit()</code></pre><h4 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h4><pre><code># -*- coding:utf-8 -*-\n# 窗口截图\nfrom selenium import webdriver\nfrom time import sleep\n\n# driver = webdriver.Firefox()\ndriver =  webdriver.PhantomJS(executable_path=&apos;/usr/bin/phantomjs&apos;)\ndriver.get(&apos;http://www.baidu.com&apos;)\n\ndriver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)\ndriver.find_element_by_id(&apos;su&apos;).click()\nsleep(2)\n\ndriver.get_screenshot_as_file(&apos;./screen.png&apos;)\ndriver.quit()</code></pre><h4 id=\"播放视频\"><a href=\"#播放视频\" class=\"headerlink\" title=\"播放视频\"></a>播放视频</h4><pre><code># -*- coding:utf-8 -*-\nfrom selenium import webdriver\nfrom time import sleep\n\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://videojs.com&apos;)\n\nvideo = driver.find_element_by_xpath(&apos;body/Setion[1]/div/video&apos;)\n# 返回播放文件地址\nurl = driver.execute_script(&apos;return arguments[0].currentSrc;&apos;, video)\nprint url\n\n# 播放视频\nprint &apos;start&apos;\ndriver.execute_script(&apos;return arguments[0].play()&apos;, video)\n\n# 播放15秒\nsleep(15)\n\n# 暂停播放\nprint &apos;stop&apos;\ndriver.execute_script(&apos;arguments[0].pause()&apos;, video)\n\n# driver.quit()</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装及基本操作\"><a href=\"#安装及基本操作\" class=\"headerlink\" title=\"安装及基本操作\"></a>安装及基本操作</h4><pre><code># -*- coding:utf-8 -*-\n# 环境: ubuntu14.04\n# pip install seleninum\n# firefox\n# https://github.com/mozilla/geckodriver/releases 下载对应版本放在$PATH目录下\n# google\n# https://sites.google.com/a/chromium.org/chromedriver/downloads 下载对应版本放在$PATH目录下\n# http://www.seleniumhq.org/download/    其他浏览器参考\n# sudo apt-get install phantomjs  安装无界面webkit浏览器引擎\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\n# driver = webdriver.Chrome()\n# driver =  webdriver.PhantomJS(executable_path=&apos;/usr/bin/phantomjs&apos;)\ndriver.get(&apos;http://www.baidu.com&apos;)\n\n# 定位元素\n# 根据id定位\nfind_id = driver.find_element_by_id(&apos;wrapper&apos;)\nfind_id = driver.find_element(By.ID, &apos;wrapper&apos;)\n# 根据name属性定位\nfind_name = driver.find_element_by_name(&apos;wd&apos;)\nfind_name = driver.find_element(By.NAME, &apos;wd&apos;)\n# 根据class定位\nfind_class = driver.find_element_by_class_name(&apos;head_wrapper&apos;)\nfind_class = driver.find_element(By.CLASS_NAME, &apos;head_wrapper&apos;)\n# 根据标签名称定位\nfind_tag = driver.find_element_by_tag_name(&apos;div&apos;)\nfind_tag = driver.find_element(By.TAG_NAME, &apos;div&apos;)\n# 根据链接文本定位\nfind_a_text = driver.find_element_by_link_text(&apos;hao123&apos;)\nfind_a_text = driver.find_element(By.LINK_TEXT, &apos;hao123&apos;)\n# 根据部分链接文本定位\nfind_a_text = driver.find_element_by_partial_link_text(&apos;hao&apos;)\nfind_a_text = driver.find_element(By.PARTIAL_LINK_TEXT, &apos;hao&apos;)\n# 根据绝对位置定位\nfind_x_path = driver.find_elements_by_xpath(&apos;/html/body/div&apos;)\nfind_x_path = driver.find_element(By.XPATH, &apos;/html/body/div&apos;)\n# 支持层级，属性，逻辑运算符结合使用\nfind_x_path = driver.find_element_by_xpath(&quot;//input[@id=&apos;kw&apos;]&quot;)  # // 当前目录下的某个目录下\n# Css定位\nfind_css = driver.find_elements_by_css_selector(&apos;.s_ipt&apos;)\nfind_css = driver.find_element(By.CSS_SELECTOR, &apos;.s_ipt&apos;)\n\n# 设置浏览器宽高\ndriver.set_window_size(480, 800)\ndriver.get(&apos;http://www.126.com&apos;)\n# 控制浏览器前进倒退\ndriver.back()\ndriver.forward()\n# 刷新浏览器(F5)\ndriver.refresh()\n# 当前页面\nprint driver.current_url()\n# 元素操作\n# dom = driver.find_element(By.ID, &apos;kw&apos;)\n# dom.clear()  # 清除文本\n# dom.send_keys()  # 模拟键盘输入\n# dom.click()  # 点击元素\n# dom.submit()  # 模拟表单提交\n# dom.size()  # 返回元素的尺寸\n# dom.text()  # 返回元素的文本\n# dom.get_attribute(name)  # 返回元素的属性值\n# dom.is_displayed()  # 设置该元素是否可见\n\n# 鼠标操作\nfrom selenium.webdriver.common.action_chains import ActionChains\ndriver.get(&apos;http://www.baidu.com&apos;)\n# context_click 鼠标右键点击\nright_click = driver.find_element_by_id(&apos;xx&apos;)\n# perform 执行所有ActionChains中存储的动作\nActionChains(driver).context_click(right_click).perform()\n# above 鼠标悬停\nabove = driver.find_element_by_id(&apos;xxx&apos;)\nActionChains(driver).move_to_element(above).perform()\n# double_click 鼠标双击\n# drag_and_drop(source, target) 鼠标拖放\n\n\n# 键盘事件\nfrom selenium.webdriver.common.keys import Keys\nfind_id.send_keys(Keys.BACK_SPACE) # 删除键\nfind_id.send_keys(Keys.SPACE)  # 空格键\nfind_id.send_keys(Keys.TAB)  # tab键\nfind_id.send_keys(Keys.ESCAPE)  # ESC\nfind_id.send_keys(Keys.ENTER)  # 回车键\nfind_id.send_keys(Keys.CONTROL, &apos;c&apos;)  # 复制\nfind_id.send_keys(Keys.CONTROL, &apos;v&apos;)  # 剪贴\nfind_id.send_keys(Keys.F1) # F1\n\n# driver.quit()</code></pre><h4 id=\"webdriver原理\"><a href=\"#webdriver原理\" class=\"headerlink\" title=\"webdriver原理\"></a>webdriver原理</h4><pre><code># -*- coding:utf-8 -*-\nfrom selenium import webdriver\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.baidu.com&apos;)\ndriver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)\ndriver.find_element_by_id(&apos;su&apos;).click()\ndriver.quit()</code></pre><h4 id=\"显示等待\"><a href=\"#显示等待\" class=\"headerlink\" title=\"显示等待\"></a>显示等待</h4><pre><code># -*- coding:utf-8 -*-\n# 显示等待\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.baidu.com&apos;)\n# 显示等待\n# 参数driver： 浏览器驱动\n# 参数timeout： 最大超时时间，单位秒\n# 参数poll_frequency： 检测的间隔时间，默认为0.5秒\n# 参数ignored_exceptions: 超时异常信息，默认为NoSuchElementException\n# WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)\n# until(method, message=&apos;&apos;) 调用该方法提供的驱动程序作为参数，直到返回True\n# until_not(method, message=&apos;&apos;) 调用该方法提供的驱动程序作为参数，直到返回False\n# EC.title_is 判断当前页面的标题是否是否等于预期\n# EC.title_contains 判断当前页面的标题是否包含预期的字符串\n# EC.presence_of_element_located 判断元素是否被加载在DOM树中，并不代表当前元素可见\n# EC.visibility_of_element_located 判断元素是否可见（可见并非代表元素非隐藏，并且元素的宽和高均不等于0）\n# EC.visibility_of 与visibility_of_element_located相同，该方法接受的参数为定位后的元素\n# EC.presence_of_all_elements_located 判断是否至少有一个元素存在与DOM树中\n# EC.text_to_be_present_in_element 判断某个元素的text是否包含预期的字符串\n# EC.text_to_be_present_in_element_value 判断某个元素的vaule属性是否包含了预期的字符串\n# EC.frame_to_be_available_and_switch_to_it 判断该表单是否可以切换进去，如果可以，返回True并switch进去，否则返回false\n# EC.invisibility_of_element_located 判断某个元素是否不存在于DOM树中或者不可见\n# EC.element_to_be_clickable 判断某个元素是否可以点击\n# EC.staleness_of 等到一个元素从DOM树中移除\n# EC.element_to_be_selected 判断某个元素是否被选中，一般用于下拉菜单\n# EC.element_selection_state_to_be 判断某个元素的选中状态是否符合预期, 参数为定位后的元素\n# EC.element_located_selection_state_to_be 判断某个元素的选中状态是否符合预期,该方法接受的参数为定位\n# EC.alert_is_present 判断页面上是否有alert\n# driver.find_element_by_id().is_displayed() 判断元素是否可见\nelement = WebDriverWait(driver, 5, 0.5).until(EC.presence_of_element_located((By.ID, &apos;kw&apos;)))\nelement.send_keys(&apos;selenium&apos;)\n# driver.quit()</code></pre><h4 id=\"隐式等待\"><a href=\"#隐式等待\" class=\"headerlink\" title=\"隐式等待\"></a>隐式等待</h4><pre><code># -*- coding:utf-8 -*-\n# 隐式等待\nfrom selenium import webdriver\nfrom selenium.common.exceptions import NoSuchElementException\nfrom time import ctime\nfrom time import sleep\ndriver = webdriver.Firefox()\n# sleep(10)\ndriver.implicitly_wait(10)\ndriver.get(&apos;http://www.baidu.com&apos;)\nprint ctime()\ntry:\n    driver.find_element_by_id(&apos;kw22&apos;).send_keys(&apos;selenium&apos;)\nexcept NoSuchElementException as e:\n    print e\nfinally:\n    print ctime()</code></pre><h4 id=\"执行js代码\"><a href=\"#执行js代码\" class=\"headerlink\" title=\"执行js代码\"></a>执行js代码</h4><pre><code># -*- coding:utf-8 -*-\n# 执行js代码\nfrom selenium import webdriver\nfrom time import sleep\n\n# 访问百度\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.baidu.com&apos;)\ndriver.set_window_size(600, 600)\ndriver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)\ndriver.find_element_by_id(&apos;su&apos;).click()\nsleep(2)\n\njs = &apos;window.scrollTo(100, 450);&apos;\ndriver.execute_script(js)\nsleep(3)\n\n# driver.quit()</code></pre><h4 id=\"处理cookie\"><a href=\"#处理cookie\" class=\"headerlink\" title=\"处理cookie\"></a>处理cookie</h4><pre><code># -*- coding:utf-8 -*-\n# cookie处理\nfrom selenium import webdriver\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://www.youdao.com&apos;)\ndriver.add_cookie({&apos;name&apos;: &apos;name-a&apos;, &apos;value&apos;: &apos;value-b&apos;})\n# 获取cookie信息\ncookies = driver.get_cookies()\nprint cookies\nfor cookie in cookies:\n    print cookie\n    print &apos;{} -&gt; {}&apos;.format(cookie[&apos;name&apos;], cookie[&apos;value&apos;])\ndriver.quit()</code></pre><h4 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h4><pre><code># -*- coding:utf-8 -*-\n# 窗口截图\nfrom selenium import webdriver\nfrom time import sleep\n\n# driver = webdriver.Firefox()\ndriver =  webdriver.PhantomJS(executable_path=&apos;/usr/bin/phantomjs&apos;)\ndriver.get(&apos;http://www.baidu.com&apos;)\n\ndriver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)\ndriver.find_element_by_id(&apos;su&apos;).click()\nsleep(2)\n\ndriver.get_screenshot_as_file(&apos;./screen.png&apos;)\ndriver.quit()</code></pre><h4 id=\"播放视频\"><a href=\"#播放视频\" class=\"headerlink\" title=\"播放视频\"></a>播放视频</h4><pre><code># -*- coding:utf-8 -*-\nfrom selenium import webdriver\nfrom time import sleep\n\ndriver = webdriver.Firefox()\ndriver.get(&apos;http://videojs.com&apos;)\n\nvideo = driver.find_element_by_xpath(&apos;body/Setion[1]/div/video&apos;)\n# 返回播放文件地址\nurl = driver.execute_script(&apos;return arguments[0].currentSrc;&apos;, video)\nprint url\n\n# 播放视频\nprint &apos;start&apos;\ndriver.execute_script(&apos;return arguments[0].play()&apos;, video)\n\n# 播放15秒\nsleep(15)\n\n# 暂停播放\nprint &apos;stop&apos;\ndriver.execute_script(&apos;arguments[0].pause()&apos;, video)\n\n# driver.quit()</code></pre>"},{"title":"Ubuntu14.04服务器基础配置","url":"95.html","id":"95","comments":0,"date":"2016-11-10T02:49:23.000Z","_content":"\n#### 登陆ssh\n\n    ssh root@ipaddress \n    password:\n    \n\n#### 首次登陆出现的错误\n\n    perl: warning: Setting locale failed.\n    perl: warning: Please check that your locale settings:\n    \n\n    # 安装 localepurge 管理语言文件\n    sudo apt-get install localepurge\n    # 或者之后自行配置\n    sudo dpkg-reconfigure localepurge\n    # 生成自己需要的语言\n    sudo locale-gen zh_CN.UTF-8 en_US.UTF-8\n    # 打印结果\n    locale\n    # ssh连接时候指定语言\n    LC_ALL=en_US.UTF-8 ssh <host>\n    \n\n#### 创建用户\n\n    adduser hanchang\n    password:\n    retry password:\n    \n\n#### 将用户添加到sudo用户组\n\n错误提示\n\n    username is not in the sudoers file.\n    \n\n    su -\n    password：\n    chmod u+w /etc/sudoers   # 添加文件写权限\n    root ALL=(ALL) ALL 下面添加以下代码\n    hanchang ALL=(ALL) NOPASSWD: ALL\n    :wq 退出\n    chmod u-w /etc/sudoers  # 取消文件写权限\n    \n\n修改root密码\n\n    sudo passwd\n    password:\n    retry password:\n    \n\n#### 禁止root用户远程登陆ssh\n\n    cd /e   tc/ssh/\n    sudo vim sshd_config\n    PermitRootLogin yes改成PermitRootLogin no\n    service sshd restart    或者 /etc/init.d/sshd restart（ssh服务器重启）\n    \n\n#### 指定IP地址登陆\n\n    vim  /etc/hosts.allow\n    sshd:192.168.220.164:allow  # 最后添加\n    \n    vim /etc/hosts.deny\n    sshd:ALL #最后添加\n    \n\n#### 避免sshd连接超时\n\n修改客户端\n\n    sudo vim /etc/ssh/ssh_config\n    # 添加\n    ServerAliveInterval 30   # 每30秒向服务器发起心跳\n    ServerAliveCountMax 6 # 允许6次无响应\n    \n\n或者修改服务器端\n\n    # 打开\n    sudo vim /etc/ssh/sshd_config\n    # 添加\n    ClientAliveInterval 30\n    ClientAliveCountMax 6\n    \n\n#### 流量监控\n\n    # 安装监控软件\n    sudo apt-get install vnstat\n    \n\n    # 安装好后运行以下命令初始化数据库\n    # eth0可以通过ifconfig查看\n    sudo vnstat -u -i eth1\n    \n\n    # 修改配置文件\n    sudo vim /etc/vnstat.conf\n    Interface \"eth1\" #此处修改需要监控的网卡\n    \n\n    # 启动守护进程\n    sudo /etc/init.d/vnstat start\n    # 默认开机启动\n    sudo update-rc.d vnstat enable\n    \n\n#### 查看是否安装iptables\n\n    iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz #表示已经安装iptables\n    apt-get install iptables #如果默认没有安装，请运行此命令安装防火墙\n    \n\n编辑iptables配置文件\n\n    sudo vi /etc/iptables.rules\n    *filter\n    :INPUT DROP [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    :syn-flood - [0:0]\n    -A INPUT -i lo -j ACCEPT\n    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n    -A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n    -A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\n    -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n    -A INPUT -j REJECT --reject-with icmp-host-prohibited\n    -A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n    -A syn-flood -j REJECT --reject-with icmp-port-unreachable\n    COMMIT\n    \n\n    # sudo iptables-restore < /etc/iptables.rules #使防火墙规则生效，重启主机执行此命令\n    \n\n    # 重启主机会使以上配置失效，以下内容为如何配置开机自动启动防火墙\n    # vi /etc/network/if-pre-up.d/iptables #创建文件，添加以下内容，使防火墙开机启动\n    #!/bin/bash\n    iptables-restore < /etc/iptables.rules\n    \n\n    # chmod +x /etc/network/if-pre-up.d/iptables #添加执行权限\n    # sudo iptables -L -n查看规则是否生效.\n    \n\n#### 挂载新的硬盘\n\n    fdisk -l\n    如果出现\n    Disk /dev/sdb doesn't contain a valid partition table\n    说明没有分区,需要处理\n    fdisk /dev/sdb\n    Command (m for help):  m为查看选项，这里我们输入n表示创建一个新的分区\n    选中默认，在分区大小中填写分区大小 +500G\n    \n\n第二步：使新创建的分区在系统中立即生效 root#partprobe 第三步：格式化新创建的分区\n\n    mkfs.ext3 /dev/hdb1\n    \n\n第四步：使新创建的分区挂载/mnt/ssd_one 目录下\n\n    mount /dev/hda1 /mnt/rhce01\n    \n\n查看已经挂载的信息\n\n    sudo vim /etc/mtab\n    \n\n第五步：开机自动挂载\n\n    sudo vim /etc/fstab\n    # 底部添加\n    /dev/sdb1              /mnt/hdd_one              ext3    defaults        0 0\n    \n\n查看现在的硬盘信息\n\n    root@m1095:~# df -hl\n    Filesystem      Size  Used Avail Use% Mounted on\n    udev             12G  4.0K   12G   1% /dev\n    tmpfs           2.4G  632K  2.4G   1% /run\n    /dev/sda2        71G  1.2G   66G   2% /\n    none            4.0K     0  4.0K   0% /sys/fs/cgroup\n    none            5.0M     0  5.0M   0% /run/lock\n    none             12G     0   12G   0% /run/shm\n    none            100M     0  100M   0% /run/user\n    /dev/sda1       226M   35M  175M  17% /boot\n    /dev/sdb1       493G   70M  467G   1% /mnt/hdd_one\n    \n\n#### ftp服务器搭建\n\n    sudo apt-get install vsftpd\n    \n\n编辑配置文件\n\n    sudo vim /etc/vsftpd.conf\n    \n\n    anonymous_enable=NO   # 禁止匿名用户\n    local_enable=YES   # 允许本地用户\n    write_enable=YES # 允许写入\n    chroot_local_user=YES  # 登陆用户被限制在自己的home目录下\n    allow_writeable_chroot=YES # 配合chroot_local_user=YES使用\n    # 当chroot_local_user=YES表示chroot_list为可以访问其他目录的用户\n    # 当chroot_local_user=NO表示chroot_list为不可以访问其他目录的用户，\n    # chroot_list_enable=YES  \n    # chroot_list_file=/etc/vsftpd.chroot_list\n    \n    # 以下内容为添加内容\n    # 设置为YES表示开启用户登陆过滤，设置为NO表示不开启用户过滤，所有用户都可以访问\n    userlist_enable=YES\n    # 在userlist_enable=YES的前提下，设置是否阻扯user_list文件中的用户登录FTP服务器\n    # YES表示user_list为黑名单，在文件中的用户不能访问，不在文件中的用户可以访问\n    # NO表示user_list 为白名单，在文件中的用户可以访问，不在文件中的用户不能访问\n    userlist_deny=YES\n    \n\n    sudo vim /etc/vsftpd.user_list\n    添加root到文件中\n    \n\n出现500 OOPS: vsftpd: refusing to run with writable root inside chroot()错误的时候 原因：chroot设置为yes的时候，需要取消ftp根目录的写权限\n\n    #### 在配置文件中添加此设置\n    allow_writeable_chroot=YES \n    \n\n#### 开启防火墙后vsftpd连接错误处理\n\n载入以下2个模块\n\n    sudo modprobe ip_nat_ftp\n    sudo modprobe ip_conntrack_ftp\n    \n\n    sudo vi /etc/modules\n    \n    # Add these lines:\n    ip_nat_ftp\n    ip_conntrack_ftp\n    \n\n重启vsftpd服务\n\n#### 安装lamp服务\n\n安装apache\n\n    sudo apt-get install apache2\n    # 将用户添加到apache用户组中\n    sudo usermod -a -G www-data username # www-data 为apache用户组名，username为登陆用户名\n    # apache2安装rewrite\n    sudo a2enmod rewrite\n    sudo service apache2 restart\n    # 删除显示的版本信息\n    ServerTokens Prod\n    ServerSignature Off \n    \n\n配置虚拟主机\n\n    sudo vim /etc/apache.2/apache2.conf\n    # 添加以下内容\n    <Directory /home/zhc/www/>\n            Options FollowSymLinks　#　不要加Index\n            AllowOverride All\n            Require all granted\n    </Directory>\n    \n\n安装mysql\n\n    sudo apt-get install mysql-server php5-mysql\n    ＃配置mysql\n    sudo mysql_secure_installation\n    \n\n查看mysql是否开启慢查询日志\n\n    mysql> show variables like '%slow%';\n    +---------------------------+---------------------------------------+\n    | Variable_name             | Value                                 |\n    +---------------------------+---------------------------------------+\n    | log_slow_admin_statements | OFF                                   |\n    | log_slow_slave_statements | OFF                                   |\n    | slow_launch_time          | 2                                     |\n    | slow_query_log            | OFF                                   |\n    | slow_query_log_file       | /var/lib/mysql/NC-PH-1551-49-slow.log |\n    +---------------------------+---------------------------------------+\n    5 rows in set (0.00 sec)\n    \n\n    #开启慢查询\n    mysql> set global log_slow_queries  = 'ON';\n    mysql> show variables like '%slow%';\n    \n\n    #开启常规查询\n    vim /etc/myql/mysql.conf.d/mysqld.conf\n    general_log_file        = /var/log/mysql/mysql.log\n    general_log             = 1\n    #开启错误查询\n    log_error = /var/log/mysql/error.log\n    #　防止innodb ibdata1文件过大\n    innodb_file_per_table=1　\n    \n\n安装php\n\n    sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt\n    #ubuntu16.04安装方法\n    # Add the PPA\n    apt-get install software-properties-common #如果提示没有 add-apt-repository，需要执行此命令安装\n    sudo add-apt-repository ppa:ondrej/php\n    # If you get add-apt-repository: command not found run the following command first :\n    sudo apt-get install software-properties-common\n    sudo apt-get update\n    sudo apt-get install php5.6\n    sudo apt-get install php5.6-*\n    \n\n配置php\n\n    vim /etc/php/5.6/apache/php.ini\n    expose_php = Off # 隐藏php版本信息\n    \n\n#### 静态文件同步\n\n定时任务 crontab -e # 编辑当前用户的定时任务 crontab -u hanchang -e # 编辑指定用户的定时任务\n\n    # m h  dom mon dow   command\n    # 分钟 小时 日期 月份 星期 命令\n    0 0 * * * /bin/sh /home/hanchang/www/scripts/rsyncHK.sh","source":"_posts/Ubuntu14.04服务器基础配置.md","raw":"---\ntitle: Ubuntu14.04服务器基础配置\ntags:\n  - ubuntu\nurl: 95.html\nid: 95\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-10 10:49:23\n---\n\n#### 登陆ssh\n\n    ssh root@ipaddress \n    password:\n    \n\n#### 首次登陆出现的错误\n\n    perl: warning: Setting locale failed.\n    perl: warning: Please check that your locale settings:\n    \n\n    # 安装 localepurge 管理语言文件\n    sudo apt-get install localepurge\n    # 或者之后自行配置\n    sudo dpkg-reconfigure localepurge\n    # 生成自己需要的语言\n    sudo locale-gen zh_CN.UTF-8 en_US.UTF-8\n    # 打印结果\n    locale\n    # ssh连接时候指定语言\n    LC_ALL=en_US.UTF-8 ssh <host>\n    \n\n#### 创建用户\n\n    adduser hanchang\n    password:\n    retry password:\n    \n\n#### 将用户添加到sudo用户组\n\n错误提示\n\n    username is not in the sudoers file.\n    \n\n    su -\n    password：\n    chmod u+w /etc/sudoers   # 添加文件写权限\n    root ALL=(ALL) ALL 下面添加以下代码\n    hanchang ALL=(ALL) NOPASSWD: ALL\n    :wq 退出\n    chmod u-w /etc/sudoers  # 取消文件写权限\n    \n\n修改root密码\n\n    sudo passwd\n    password:\n    retry password:\n    \n\n#### 禁止root用户远程登陆ssh\n\n    cd /e   tc/ssh/\n    sudo vim sshd_config\n    PermitRootLogin yes改成PermitRootLogin no\n    service sshd restart    或者 /etc/init.d/sshd restart（ssh服务器重启）\n    \n\n#### 指定IP地址登陆\n\n    vim  /etc/hosts.allow\n    sshd:192.168.220.164:allow  # 最后添加\n    \n    vim /etc/hosts.deny\n    sshd:ALL #最后添加\n    \n\n#### 避免sshd连接超时\n\n修改客户端\n\n    sudo vim /etc/ssh/ssh_config\n    # 添加\n    ServerAliveInterval 30   # 每30秒向服务器发起心跳\n    ServerAliveCountMax 6 # 允许6次无响应\n    \n\n或者修改服务器端\n\n    # 打开\n    sudo vim /etc/ssh/sshd_config\n    # 添加\n    ClientAliveInterval 30\n    ClientAliveCountMax 6\n    \n\n#### 流量监控\n\n    # 安装监控软件\n    sudo apt-get install vnstat\n    \n\n    # 安装好后运行以下命令初始化数据库\n    # eth0可以通过ifconfig查看\n    sudo vnstat -u -i eth1\n    \n\n    # 修改配置文件\n    sudo vim /etc/vnstat.conf\n    Interface \"eth1\" #此处修改需要监控的网卡\n    \n\n    # 启动守护进程\n    sudo /etc/init.d/vnstat start\n    # 默认开机启动\n    sudo update-rc.d vnstat enable\n    \n\n#### 查看是否安装iptables\n\n    iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz #表示已经安装iptables\n    apt-get install iptables #如果默认没有安装，请运行此命令安装防火墙\n    \n\n编辑iptables配置文件\n\n    sudo vi /etc/iptables.rules\n    *filter\n    :INPUT DROP [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    :syn-flood - [0:0]\n    -A INPUT -i lo -j ACCEPT\n    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n    -A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n    -A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\n    -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n    -A INPUT -j REJECT --reject-with icmp-host-prohibited\n    -A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n    -A syn-flood -j REJECT --reject-with icmp-port-unreachable\n    COMMIT\n    \n\n    # sudo iptables-restore < /etc/iptables.rules #使防火墙规则生效，重启主机执行此命令\n    \n\n    # 重启主机会使以上配置失效，以下内容为如何配置开机自动启动防火墙\n    # vi /etc/network/if-pre-up.d/iptables #创建文件，添加以下内容，使防火墙开机启动\n    #!/bin/bash\n    iptables-restore < /etc/iptables.rules\n    \n\n    # chmod +x /etc/network/if-pre-up.d/iptables #添加执行权限\n    # sudo iptables -L -n查看规则是否生效.\n    \n\n#### 挂载新的硬盘\n\n    fdisk -l\n    如果出现\n    Disk /dev/sdb doesn't contain a valid partition table\n    说明没有分区,需要处理\n    fdisk /dev/sdb\n    Command (m for help):  m为查看选项，这里我们输入n表示创建一个新的分区\n    选中默认，在分区大小中填写分区大小 +500G\n    \n\n第二步：使新创建的分区在系统中立即生效 root#partprobe 第三步：格式化新创建的分区\n\n    mkfs.ext3 /dev/hdb1\n    \n\n第四步：使新创建的分区挂载/mnt/ssd_one 目录下\n\n    mount /dev/hda1 /mnt/rhce01\n    \n\n查看已经挂载的信息\n\n    sudo vim /etc/mtab\n    \n\n第五步：开机自动挂载\n\n    sudo vim /etc/fstab\n    # 底部添加\n    /dev/sdb1              /mnt/hdd_one              ext3    defaults        0 0\n    \n\n查看现在的硬盘信息\n\n    root@m1095:~# df -hl\n    Filesystem      Size  Used Avail Use% Mounted on\n    udev             12G  4.0K   12G   1% /dev\n    tmpfs           2.4G  632K  2.4G   1% /run\n    /dev/sda2        71G  1.2G   66G   2% /\n    none            4.0K     0  4.0K   0% /sys/fs/cgroup\n    none            5.0M     0  5.0M   0% /run/lock\n    none             12G     0   12G   0% /run/shm\n    none            100M     0  100M   0% /run/user\n    /dev/sda1       226M   35M  175M  17% /boot\n    /dev/sdb1       493G   70M  467G   1% /mnt/hdd_one\n    \n\n#### ftp服务器搭建\n\n    sudo apt-get install vsftpd\n    \n\n编辑配置文件\n\n    sudo vim /etc/vsftpd.conf\n    \n\n    anonymous_enable=NO   # 禁止匿名用户\n    local_enable=YES   # 允许本地用户\n    write_enable=YES # 允许写入\n    chroot_local_user=YES  # 登陆用户被限制在自己的home目录下\n    allow_writeable_chroot=YES # 配合chroot_local_user=YES使用\n    # 当chroot_local_user=YES表示chroot_list为可以访问其他目录的用户\n    # 当chroot_local_user=NO表示chroot_list为不可以访问其他目录的用户，\n    # chroot_list_enable=YES  \n    # chroot_list_file=/etc/vsftpd.chroot_list\n    \n    # 以下内容为添加内容\n    # 设置为YES表示开启用户登陆过滤，设置为NO表示不开启用户过滤，所有用户都可以访问\n    userlist_enable=YES\n    # 在userlist_enable=YES的前提下，设置是否阻扯user_list文件中的用户登录FTP服务器\n    # YES表示user_list为黑名单，在文件中的用户不能访问，不在文件中的用户可以访问\n    # NO表示user_list 为白名单，在文件中的用户可以访问，不在文件中的用户不能访问\n    userlist_deny=YES\n    \n\n    sudo vim /etc/vsftpd.user_list\n    添加root到文件中\n    \n\n出现500 OOPS: vsftpd: refusing to run with writable root inside chroot()错误的时候 原因：chroot设置为yes的时候，需要取消ftp根目录的写权限\n\n    #### 在配置文件中添加此设置\n    allow_writeable_chroot=YES \n    \n\n#### 开启防火墙后vsftpd连接错误处理\n\n载入以下2个模块\n\n    sudo modprobe ip_nat_ftp\n    sudo modprobe ip_conntrack_ftp\n    \n\n    sudo vi /etc/modules\n    \n    # Add these lines:\n    ip_nat_ftp\n    ip_conntrack_ftp\n    \n\n重启vsftpd服务\n\n#### 安装lamp服务\n\n安装apache\n\n    sudo apt-get install apache2\n    # 将用户添加到apache用户组中\n    sudo usermod -a -G www-data username # www-data 为apache用户组名，username为登陆用户名\n    # apache2安装rewrite\n    sudo a2enmod rewrite\n    sudo service apache2 restart\n    # 删除显示的版本信息\n    ServerTokens Prod\n    ServerSignature Off \n    \n\n配置虚拟主机\n\n    sudo vim /etc/apache.2/apache2.conf\n    # 添加以下内容\n    <Directory /home/zhc/www/>\n            Options FollowSymLinks　#　不要加Index\n            AllowOverride All\n            Require all granted\n    </Directory>\n    \n\n安装mysql\n\n    sudo apt-get install mysql-server php5-mysql\n    ＃配置mysql\n    sudo mysql_secure_installation\n    \n\n查看mysql是否开启慢查询日志\n\n    mysql> show variables like '%slow%';\n    +---------------------------+---------------------------------------+\n    | Variable_name             | Value                                 |\n    +---------------------------+---------------------------------------+\n    | log_slow_admin_statements | OFF                                   |\n    | log_slow_slave_statements | OFF                                   |\n    | slow_launch_time          | 2                                     |\n    | slow_query_log            | OFF                                   |\n    | slow_query_log_file       | /var/lib/mysql/NC-PH-1551-49-slow.log |\n    +---------------------------+---------------------------------------+\n    5 rows in set (0.00 sec)\n    \n\n    #开启慢查询\n    mysql> set global log_slow_queries  = 'ON';\n    mysql> show variables like '%slow%';\n    \n\n    #开启常规查询\n    vim /etc/myql/mysql.conf.d/mysqld.conf\n    general_log_file        = /var/log/mysql/mysql.log\n    general_log             = 1\n    #开启错误查询\n    log_error = /var/log/mysql/error.log\n    #　防止innodb ibdata1文件过大\n    innodb_file_per_table=1　\n    \n\n安装php\n\n    sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt\n    #ubuntu16.04安装方法\n    # Add the PPA\n    apt-get install software-properties-common #如果提示没有 add-apt-repository，需要执行此命令安装\n    sudo add-apt-repository ppa:ondrej/php\n    # If you get add-apt-repository: command not found run the following command first :\n    sudo apt-get install software-properties-common\n    sudo apt-get update\n    sudo apt-get install php5.6\n    sudo apt-get install php5.6-*\n    \n\n配置php\n\n    vim /etc/php/5.6/apache/php.ini\n    expose_php = Off # 隐藏php版本信息\n    \n\n#### 静态文件同步\n\n定时任务 crontab -e # 编辑当前用户的定时任务 crontab -u hanchang -e # 编辑指定用户的定时任务\n\n    # m h  dom mon dow   command\n    # 分钟 小时 日期 月份 星期 命令\n    0 0 * * * /bin/sh /home/hanchang/www/scripts/rsyncHK.sh","slug":"Ubuntu14.04服务器基础配置","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt30046h3a4wrusypfk","content":"<h4 id=\"登陆ssh\"><a href=\"#登陆ssh\" class=\"headerlink\" title=\"登陆ssh\"></a>登陆ssh</h4><pre><code>ssh root@ipaddress \npassword:</code></pre><h4 id=\"首次登陆出现的错误\"><a href=\"#首次登陆出现的错误\" class=\"headerlink\" title=\"首次登陆出现的错误\"></a>首次登陆出现的错误</h4><pre><code>perl: warning: Setting locale failed.\nperl: warning: Please check that your locale settings:\n\n\n# 安装 localepurge 管理语言文件\nsudo apt-get install localepurge\n# 或者之后自行配置\nsudo dpkg-reconfigure localepurge\n# 生成自己需要的语言\nsudo locale-gen zh_CN.UTF-8 en_US.UTF-8\n# 打印结果\nlocale\n# ssh连接时候指定语言\nLC_ALL=en_US.UTF-8 ssh &lt;host&gt;</code></pre><h4 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h4><pre><code>adduser hanchang\npassword:\nretry password:</code></pre><h4 id=\"将用户添加到sudo用户组\"><a href=\"#将用户添加到sudo用户组\" class=\"headerlink\" title=\"将用户添加到sudo用户组\"></a>将用户添加到sudo用户组</h4><p>错误提示</p>\n<pre><code>username is not in the sudoers file.\n\n\nsu -\npassword：\nchmod u+w /etc/sudoers   # 添加文件写权限\nroot ALL=(ALL) ALL 下面添加以下代码\nhanchang ALL=(ALL) NOPASSWD: ALL\n:wq 退出\nchmod u-w /etc/sudoers  # 取消文件写权限</code></pre><p>修改root密码</p>\n<pre><code>sudo passwd\npassword:\nretry password:</code></pre><h4 id=\"禁止root用户远程登陆ssh\"><a href=\"#禁止root用户远程登陆ssh\" class=\"headerlink\" title=\"禁止root用户远程登陆ssh\"></a>禁止root用户远程登陆ssh</h4><pre><code>cd /e   tc/ssh/\nsudo vim sshd_config\nPermitRootLogin yes改成PermitRootLogin no\nservice sshd restart    或者 /etc/init.d/sshd restart（ssh服务器重启）</code></pre><h4 id=\"指定IP地址登陆\"><a href=\"#指定IP地址登陆\" class=\"headerlink\" title=\"指定IP地址登陆\"></a>指定IP地址登陆</h4><pre><code>vim  /etc/hosts.allow\nsshd:192.168.220.164:allow  # 最后添加\n\nvim /etc/hosts.deny\nsshd:ALL #最后添加</code></pre><h4 id=\"避免sshd连接超时\"><a href=\"#避免sshd连接超时\" class=\"headerlink\" title=\"避免sshd连接超时\"></a>避免sshd连接超时</h4><p>修改客户端</p>\n<pre><code>sudo vim /etc/ssh/ssh_config\n# 添加\nServerAliveInterval 30   # 每30秒向服务器发起心跳\nServerAliveCountMax 6 # 允许6次无响应</code></pre><p>或者修改服务器端</p>\n<pre><code># 打开\nsudo vim /etc/ssh/sshd_config\n# 添加\nClientAliveInterval 30\nClientAliveCountMax 6</code></pre><h4 id=\"流量监控\"><a href=\"#流量监控\" class=\"headerlink\" title=\"流量监控\"></a>流量监控</h4><pre><code># 安装监控软件\nsudo apt-get install vnstat\n\n\n# 安装好后运行以下命令初始化数据库\n# eth0可以通过ifconfig查看\nsudo vnstat -u -i eth1\n\n\n# 修改配置文件\nsudo vim /etc/vnstat.conf\nInterface &quot;eth1&quot; #此处修改需要监控的网卡\n\n\n# 启动守护进程\nsudo /etc/init.d/vnstat start\n# 默认开机启动\nsudo update-rc.d vnstat enable</code></pre><h4 id=\"查看是否安装iptables\"><a href=\"#查看是否安装iptables\" class=\"headerlink\" title=\"查看是否安装iptables\"></a>查看是否安装iptables</h4><pre><code>iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz #表示已经安装iptables\napt-get install iptables #如果默认没有安装，请运行此命令安装防火墙</code></pre><p>编辑iptables配置文件</p>\n<pre><code>sudo vi /etc/iptables.rules\n*filter\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:syn-flood - [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n\n\n# sudo iptables-restore &lt; /etc/iptables.rules #使防火墙规则生效，重启主机执行此命令\n\n\n# 重启主机会使以上配置失效，以下内容为如何配置开机自动启动防火墙\n# vi /etc/network/if-pre-up.d/iptables #创建文件，添加以下内容，使防火墙开机启动\n#!/bin/bash\niptables-restore &lt; /etc/iptables.rules\n\n\n# chmod +x /etc/network/if-pre-up.d/iptables #添加执行权限\n# sudo iptables -L -n查看规则是否生效.</code></pre><h4 id=\"挂载新的硬盘\"><a href=\"#挂载新的硬盘\" class=\"headerlink\" title=\"挂载新的硬盘\"></a>挂载新的硬盘</h4><pre><code>fdisk -l\n如果出现\nDisk /dev/sdb doesn&apos;t contain a valid partition table\n说明没有分区,需要处理\nfdisk /dev/sdb\nCommand (m for help):  m为查看选项，这里我们输入n表示创建一个新的分区\n选中默认，在分区大小中填写分区大小 +500G</code></pre><p>第二步：使新创建的分区在系统中立即生效 root#partprobe 第三步：格式化新创建的分区</p>\n<pre><code>mkfs.ext3 /dev/hdb1</code></pre><p>第四步：使新创建的分区挂载/mnt/ssd_one 目录下</p>\n<pre><code>mount /dev/hda1 /mnt/rhce01</code></pre><p>查看已经挂载的信息</p>\n<pre><code>sudo vim /etc/mtab</code></pre><p>第五步：开机自动挂载</p>\n<pre><code>sudo vim /etc/fstab\n# 底部添加\n/dev/sdb1              /mnt/hdd_one              ext3    defaults        0 0</code></pre><p>查看现在的硬盘信息</p>\n<pre><code>root@m1095:~# df -hl\nFilesystem      Size  Used Avail Use% Mounted on\nudev             12G  4.0K   12G   1% /dev\ntmpfs           2.4G  632K  2.4G   1% /run\n/dev/sda2        71G  1.2G   66G   2% /\nnone            4.0K     0  4.0K   0% /sys/fs/cgroup\nnone            5.0M     0  5.0M   0% /run/lock\nnone             12G     0   12G   0% /run/shm\nnone            100M     0  100M   0% /run/user\n/dev/sda1       226M   35M  175M  17% /boot\n/dev/sdb1       493G   70M  467G   1% /mnt/hdd_one</code></pre><h4 id=\"ftp服务器搭建\"><a href=\"#ftp服务器搭建\" class=\"headerlink\" title=\"ftp服务器搭建\"></a>ftp服务器搭建</h4><pre><code>sudo apt-get install vsftpd</code></pre><p>编辑配置文件</p>\n<pre><code>sudo vim /etc/vsftpd.conf\n\n\nanonymous_enable=NO   # 禁止匿名用户\nlocal_enable=YES   # 允许本地用户\nwrite_enable=YES # 允许写入\nchroot_local_user=YES  # 登陆用户被限制在自己的home目录下\nallow_writeable_chroot=YES # 配合chroot_local_user=YES使用\n# 当chroot_local_user=YES表示chroot_list为可以访问其他目录的用户\n# 当chroot_local_user=NO表示chroot_list为不可以访问其他目录的用户，\n# chroot_list_enable=YES  \n# chroot_list_file=/etc/vsftpd.chroot_list\n\n# 以下内容为添加内容\n# 设置为YES表示开启用户登陆过滤，设置为NO表示不开启用户过滤，所有用户都可以访问\nuserlist_enable=YES\n# 在userlist_enable=YES的前提下，设置是否阻扯user_list文件中的用户登录FTP服务器\n# YES表示user_list为黑名单，在文件中的用户不能访问，不在文件中的用户可以访问\n# NO表示user_list 为白名单，在文件中的用户可以访问，不在文件中的用户不能访问\nuserlist_deny=YES\n\n\nsudo vim /etc/vsftpd.user_list\n添加root到文件中</code></pre><p>出现500 OOPS: vsftpd: refusing to run with writable root inside chroot()错误的时候 原因：chroot设置为yes的时候，需要取消ftp根目录的写权限</p>\n<pre><code>#### 在配置文件中添加此设置\nallow_writeable_chroot=YES </code></pre><h4 id=\"开启防火墙后vsftpd连接错误处理\"><a href=\"#开启防火墙后vsftpd连接错误处理\" class=\"headerlink\" title=\"开启防火墙后vsftpd连接错误处理\"></a>开启防火墙后vsftpd连接错误处理</h4><p>载入以下2个模块</p>\n<pre><code>sudo modprobe ip_nat_ftp\nsudo modprobe ip_conntrack_ftp\n\n\nsudo vi /etc/modules\n\n# Add these lines:\nip_nat_ftp\nip_conntrack_ftp</code></pre><p>重启vsftpd服务</p>\n<h4 id=\"安装lamp服务\"><a href=\"#安装lamp服务\" class=\"headerlink\" title=\"安装lamp服务\"></a>安装lamp服务</h4><p>安装apache</p>\n<pre><code>sudo apt-get install apache2\n# 将用户添加到apache用户组中\nsudo usermod -a -G www-data username # www-data 为apache用户组名，username为登陆用户名\n# apache2安装rewrite\nsudo a2enmod rewrite\nsudo service apache2 restart\n# 删除显示的版本信息\nServerTokens Prod\nServerSignature Off </code></pre><p>配置虚拟主机</p>\n<pre><code>sudo vim /etc/apache.2/apache2.conf\n# 添加以下内容\n&lt;Directory /home/zhc/www/&gt;\n        Options FollowSymLinks　#　不要加Index\n        AllowOverride All\n        Require all granted\n&lt;/Directory&gt;</code></pre><p>安装mysql</p>\n<pre><code>sudo apt-get install mysql-server php5-mysql\n＃配置mysql\nsudo mysql_secure_installation</code></pre><p>查看mysql是否开启慢查询日志</p>\n<pre><code>mysql&gt; show variables like &apos;%slow%&apos;;\n+---------------------------+---------------------------------------+\n| Variable_name             | Value                                 |\n+---------------------------+---------------------------------------+\n| log_slow_admin_statements | OFF                                   |\n| log_slow_slave_statements | OFF                                   |\n| slow_launch_time          | 2                                     |\n| slow_query_log            | OFF                                   |\n| slow_query_log_file       | /var/lib/mysql/NC-PH-1551-49-slow.log |\n+---------------------------+---------------------------------------+\n5 rows in set (0.00 sec)\n\n\n#开启慢查询\nmysql&gt; set global log_slow_queries  = &apos;ON&apos;;\nmysql&gt; show variables like &apos;%slow%&apos;;\n\n\n#开启常规查询\nvim /etc/myql/mysql.conf.d/mysqld.conf\ngeneral_log_file        = /var/log/mysql/mysql.log\ngeneral_log             = 1\n#开启错误查询\nlog_error = /var/log/mysql/error.log\n#　防止innodb ibdata1文件过大\ninnodb_file_per_table=1　</code></pre><p>安装php</p>\n<pre><code>sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt\n#ubuntu16.04安装方法\n# Add the PPA\napt-get install software-properties-common #如果提示没有 add-apt-repository，需要执行此命令安装\nsudo add-apt-repository ppa:ondrej/php\n# If you get add-apt-repository: command not found run the following command first :\nsudo apt-get install software-properties-common\nsudo apt-get update\nsudo apt-get install php5.6\nsudo apt-get install php5.6-*</code></pre><p>配置php</p>\n<pre><code>vim /etc/php/5.6/apache/php.ini\nexpose_php = Off # 隐藏php版本信息</code></pre><h4 id=\"静态文件同步\"><a href=\"#静态文件同步\" class=\"headerlink\" title=\"静态文件同步\"></a>静态文件同步</h4><p>定时任务 crontab -e # 编辑当前用户的定时任务 crontab -u hanchang -e # 编辑指定用户的定时任务</p>\n<pre><code># m h  dom mon dow   command\n# 分钟 小时 日期 月份 星期 命令\n0 0 * * * /bin/sh /home/hanchang/www/scripts/rsyncHK.sh</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"登陆ssh\"><a href=\"#登陆ssh\" class=\"headerlink\" title=\"登陆ssh\"></a>登陆ssh</h4><pre><code>ssh root@ipaddress \npassword:</code></pre><h4 id=\"首次登陆出现的错误\"><a href=\"#首次登陆出现的错误\" class=\"headerlink\" title=\"首次登陆出现的错误\"></a>首次登陆出现的错误</h4><pre><code>perl: warning: Setting locale failed.\nperl: warning: Please check that your locale settings:\n\n\n# 安装 localepurge 管理语言文件\nsudo apt-get install localepurge\n# 或者之后自行配置\nsudo dpkg-reconfigure localepurge\n# 生成自己需要的语言\nsudo locale-gen zh_CN.UTF-8 en_US.UTF-8\n# 打印结果\nlocale\n# ssh连接时候指定语言\nLC_ALL=en_US.UTF-8 ssh &lt;host&gt;</code></pre><h4 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h4><pre><code>adduser hanchang\npassword:\nretry password:</code></pre><h4 id=\"将用户添加到sudo用户组\"><a href=\"#将用户添加到sudo用户组\" class=\"headerlink\" title=\"将用户添加到sudo用户组\"></a>将用户添加到sudo用户组</h4><p>错误提示</p>\n<pre><code>username is not in the sudoers file.\n\n\nsu -\npassword：\nchmod u+w /etc/sudoers   # 添加文件写权限\nroot ALL=(ALL) ALL 下面添加以下代码\nhanchang ALL=(ALL) NOPASSWD: ALL\n:wq 退出\nchmod u-w /etc/sudoers  # 取消文件写权限</code></pre><p>修改root密码</p>\n<pre><code>sudo passwd\npassword:\nretry password:</code></pre><h4 id=\"禁止root用户远程登陆ssh\"><a href=\"#禁止root用户远程登陆ssh\" class=\"headerlink\" title=\"禁止root用户远程登陆ssh\"></a>禁止root用户远程登陆ssh</h4><pre><code>cd /e   tc/ssh/\nsudo vim sshd_config\nPermitRootLogin yes改成PermitRootLogin no\nservice sshd restart    或者 /etc/init.d/sshd restart（ssh服务器重启）</code></pre><h4 id=\"指定IP地址登陆\"><a href=\"#指定IP地址登陆\" class=\"headerlink\" title=\"指定IP地址登陆\"></a>指定IP地址登陆</h4><pre><code>vim  /etc/hosts.allow\nsshd:192.168.220.164:allow  # 最后添加\n\nvim /etc/hosts.deny\nsshd:ALL #最后添加</code></pre><h4 id=\"避免sshd连接超时\"><a href=\"#避免sshd连接超时\" class=\"headerlink\" title=\"避免sshd连接超时\"></a>避免sshd连接超时</h4><p>修改客户端</p>\n<pre><code>sudo vim /etc/ssh/ssh_config\n# 添加\nServerAliveInterval 30   # 每30秒向服务器发起心跳\nServerAliveCountMax 6 # 允许6次无响应</code></pre><p>或者修改服务器端</p>\n<pre><code># 打开\nsudo vim /etc/ssh/sshd_config\n# 添加\nClientAliveInterval 30\nClientAliveCountMax 6</code></pre><h4 id=\"流量监控\"><a href=\"#流量监控\" class=\"headerlink\" title=\"流量监控\"></a>流量监控</h4><pre><code># 安装监控软件\nsudo apt-get install vnstat\n\n\n# 安装好后运行以下命令初始化数据库\n# eth0可以通过ifconfig查看\nsudo vnstat -u -i eth1\n\n\n# 修改配置文件\nsudo vim /etc/vnstat.conf\nInterface &quot;eth1&quot; #此处修改需要监控的网卡\n\n\n# 启动守护进程\nsudo /etc/init.d/vnstat start\n# 默认开机启动\nsudo update-rc.d vnstat enable</code></pre><h4 id=\"查看是否安装iptables\"><a href=\"#查看是否安装iptables\" class=\"headerlink\" title=\"查看是否安装iptables\"></a>查看是否安装iptables</h4><pre><code>iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz #表示已经安装iptables\napt-get install iptables #如果默认没有安装，请运行此命令安装防火墙</code></pre><p>编辑iptables配置文件</p>\n<pre><code>sudo vi /etc/iptables.rules\n*filter\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:syn-flood - [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n\n\n# sudo iptables-restore &lt; /etc/iptables.rules #使防火墙规则生效，重启主机执行此命令\n\n\n# 重启主机会使以上配置失效，以下内容为如何配置开机自动启动防火墙\n# vi /etc/network/if-pre-up.d/iptables #创建文件，添加以下内容，使防火墙开机启动\n#!/bin/bash\niptables-restore &lt; /etc/iptables.rules\n\n\n# chmod +x /etc/network/if-pre-up.d/iptables #添加执行权限\n# sudo iptables -L -n查看规则是否生效.</code></pre><h4 id=\"挂载新的硬盘\"><a href=\"#挂载新的硬盘\" class=\"headerlink\" title=\"挂载新的硬盘\"></a>挂载新的硬盘</h4><pre><code>fdisk -l\n如果出现\nDisk /dev/sdb doesn&apos;t contain a valid partition table\n说明没有分区,需要处理\nfdisk /dev/sdb\nCommand (m for help):  m为查看选项，这里我们输入n表示创建一个新的分区\n选中默认，在分区大小中填写分区大小 +500G</code></pre><p>第二步：使新创建的分区在系统中立即生效 root#partprobe 第三步：格式化新创建的分区</p>\n<pre><code>mkfs.ext3 /dev/hdb1</code></pre><p>第四步：使新创建的分区挂载/mnt/ssd_one 目录下</p>\n<pre><code>mount /dev/hda1 /mnt/rhce01</code></pre><p>查看已经挂载的信息</p>\n<pre><code>sudo vim /etc/mtab</code></pre><p>第五步：开机自动挂载</p>\n<pre><code>sudo vim /etc/fstab\n# 底部添加\n/dev/sdb1              /mnt/hdd_one              ext3    defaults        0 0</code></pre><p>查看现在的硬盘信息</p>\n<pre><code>root@m1095:~# df -hl\nFilesystem      Size  Used Avail Use% Mounted on\nudev             12G  4.0K   12G   1% /dev\ntmpfs           2.4G  632K  2.4G   1% /run\n/dev/sda2        71G  1.2G   66G   2% /\nnone            4.0K     0  4.0K   0% /sys/fs/cgroup\nnone            5.0M     0  5.0M   0% /run/lock\nnone             12G     0   12G   0% /run/shm\nnone            100M     0  100M   0% /run/user\n/dev/sda1       226M   35M  175M  17% /boot\n/dev/sdb1       493G   70M  467G   1% /mnt/hdd_one</code></pre><h4 id=\"ftp服务器搭建\"><a href=\"#ftp服务器搭建\" class=\"headerlink\" title=\"ftp服务器搭建\"></a>ftp服务器搭建</h4><pre><code>sudo apt-get install vsftpd</code></pre><p>编辑配置文件</p>\n<pre><code>sudo vim /etc/vsftpd.conf\n\n\nanonymous_enable=NO   # 禁止匿名用户\nlocal_enable=YES   # 允许本地用户\nwrite_enable=YES # 允许写入\nchroot_local_user=YES  # 登陆用户被限制在自己的home目录下\nallow_writeable_chroot=YES # 配合chroot_local_user=YES使用\n# 当chroot_local_user=YES表示chroot_list为可以访问其他目录的用户\n# 当chroot_local_user=NO表示chroot_list为不可以访问其他目录的用户，\n# chroot_list_enable=YES  \n# chroot_list_file=/etc/vsftpd.chroot_list\n\n# 以下内容为添加内容\n# 设置为YES表示开启用户登陆过滤，设置为NO表示不开启用户过滤，所有用户都可以访问\nuserlist_enable=YES\n# 在userlist_enable=YES的前提下，设置是否阻扯user_list文件中的用户登录FTP服务器\n# YES表示user_list为黑名单，在文件中的用户不能访问，不在文件中的用户可以访问\n# NO表示user_list 为白名单，在文件中的用户可以访问，不在文件中的用户不能访问\nuserlist_deny=YES\n\n\nsudo vim /etc/vsftpd.user_list\n添加root到文件中</code></pre><p>出现500 OOPS: vsftpd: refusing to run with writable root inside chroot()错误的时候 原因：chroot设置为yes的时候，需要取消ftp根目录的写权限</p>\n<pre><code>#### 在配置文件中添加此设置\nallow_writeable_chroot=YES </code></pre><h4 id=\"开启防火墙后vsftpd连接错误处理\"><a href=\"#开启防火墙后vsftpd连接错误处理\" class=\"headerlink\" title=\"开启防火墙后vsftpd连接错误处理\"></a>开启防火墙后vsftpd连接错误处理</h4><p>载入以下2个模块</p>\n<pre><code>sudo modprobe ip_nat_ftp\nsudo modprobe ip_conntrack_ftp\n\n\nsudo vi /etc/modules\n\n# Add these lines:\nip_nat_ftp\nip_conntrack_ftp</code></pre><p>重启vsftpd服务</p>\n<h4 id=\"安装lamp服务\"><a href=\"#安装lamp服务\" class=\"headerlink\" title=\"安装lamp服务\"></a>安装lamp服务</h4><p>安装apache</p>\n<pre><code>sudo apt-get install apache2\n# 将用户添加到apache用户组中\nsudo usermod -a -G www-data username # www-data 为apache用户组名，username为登陆用户名\n# apache2安装rewrite\nsudo a2enmod rewrite\nsudo service apache2 restart\n# 删除显示的版本信息\nServerTokens Prod\nServerSignature Off </code></pre><p>配置虚拟主机</p>\n<pre><code>sudo vim /etc/apache.2/apache2.conf\n# 添加以下内容\n&lt;Directory /home/zhc/www/&gt;\n        Options FollowSymLinks　#　不要加Index\n        AllowOverride All\n        Require all granted\n&lt;/Directory&gt;</code></pre><p>安装mysql</p>\n<pre><code>sudo apt-get install mysql-server php5-mysql\n＃配置mysql\nsudo mysql_secure_installation</code></pre><p>查看mysql是否开启慢查询日志</p>\n<pre><code>mysql&gt; show variables like &apos;%slow%&apos;;\n+---------------------------+---------------------------------------+\n| Variable_name             | Value                                 |\n+---------------------------+---------------------------------------+\n| log_slow_admin_statements | OFF                                   |\n| log_slow_slave_statements | OFF                                   |\n| slow_launch_time          | 2                                     |\n| slow_query_log            | OFF                                   |\n| slow_query_log_file       | /var/lib/mysql/NC-PH-1551-49-slow.log |\n+---------------------------+---------------------------------------+\n5 rows in set (0.00 sec)\n\n\n#开启慢查询\nmysql&gt; set global log_slow_queries  = &apos;ON&apos;;\nmysql&gt; show variables like &apos;%slow%&apos;;\n\n\n#开启常规查询\nvim /etc/myql/mysql.conf.d/mysqld.conf\ngeneral_log_file        = /var/log/mysql/mysql.log\ngeneral_log             = 1\n#开启错误查询\nlog_error = /var/log/mysql/error.log\n#　防止innodb ibdata1文件过大\ninnodb_file_per_table=1　</code></pre><p>安装php</p>\n<pre><code>sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt\n#ubuntu16.04安装方法\n# Add the PPA\napt-get install software-properties-common #如果提示没有 add-apt-repository，需要执行此命令安装\nsudo add-apt-repository ppa:ondrej/php\n# If you get add-apt-repository: command not found run the following command first :\nsudo apt-get install software-properties-common\nsudo apt-get update\nsudo apt-get install php5.6\nsudo apt-get install php5.6-*</code></pre><p>配置php</p>\n<pre><code>vim /etc/php/5.6/apache/php.ini\nexpose_php = Off # 隐藏php版本信息</code></pre><h4 id=\"静态文件同步\"><a href=\"#静态文件同步\" class=\"headerlink\" title=\"静态文件同步\"></a>静态文件同步</h4><p>定时任务 crontab -e # 编辑当前用户的定时任务 crontab -u hanchang -e # 编辑指定用户的定时任务</p>\n<pre><code># m h  dom mon dow   command\n# 分钟 小时 日期 月份 星期 命令\n0 0 * * * /bin/sh /home/hanchang/www/scripts/rsyncHK.sh</code></pre>"},{"title":"Window常用软件及其使用方法","url":"21.html","id":"21","comments":0,"date":"2016-11-08T09:04:39.000Z","_content":"\n### 压缩软件7-zip\n\n终端命令(需要将安装目录添加到环境变量)\n\n> 7z a file.zip filefold #添加文件压缩  \n> 7z e file.zip filefold #释放文件解压\n\n### 电脑清理ccleaner\n\n电脑清理工具：清理注册表，系统垃圾文件 下载地址 [http://pan.baidu.com/s/1c0G34re](http://pan.baidu.com/s/1c0G34re)  \n断网后注册，可用注册码\n\n> 注册名： R J. van der Linden  \n> 注册码：CBEW-ZZJA-84DT-VZQG-SRJC  \n> 注册名：Registered User  \n> 注册码：CBB4-FJN4-EPC6-G5P6-QT4C\n\n### 卸载软件Total Uninstall\n\n电脑清理工具：卸载软件  \n破解版v6.16.0下载地址[http://pan.baidu.com/s/1mgwAta4](http://pan.baidu.com/s/1mgwAta4)\n\n### 驱动管理工具DriverDownloader\n\n下载地址 [http://pan.baidu.com/s/1qW9tPF2](http://pan.baidu.com/s/1qW9tPF2)  \n需要使用代理更新驱动，在Settings设置(前提是设置了代理上网)\n\n> proxy 127.0.0.1  \n> port 1080\n\n注册码\n\n> DF12-2RM2-JDPE-1009\n\n如果提示its usage limit 将1009改成逐渐+1，改成1010，1011等等等等\n\n### 下载工具IDM(Internet Download Manager)6.25版\n\n下载地址  \n[官网](http://www.internetdownloadmanager.com/download.html)  \n[官网下载版](http://pan.baidu.com/s/1c0Be5Bq)  \n[破解版](http://pan.baidu.com/s/1eQfmv8e)  \n注册码(断网注册)\n\n    DBNJC-D4R59-YPAGA-T3S1Q  #已经失效  \n    F9TZ9-P6IGF-SME74-2WP21  \n    CJA0S-K6CO4-R4NPJ-EKNRK  \n    F9TZ9-P6IGF-SME74-2WP21  \n    CJA0S-K6CO4-R4NPJ-EKNRK  \n    N0Z90-KJTTW-7TZO4-I27A1  \n    629U7-XLT5H-6SCGJ-2CENZ  \n    XONF7-PMUOL-HU7P4-D1QQX  \n    N0Z90-KJTTW-7TZO4-I27A1  \n    L67GT-CE6TR-DFT1D-XWVCM \n    \n\n或者使用host修改办法  \nhost文件添加\n\n    127.0.0.1 registeridm.com\n    127.0.0.1 www.registeridm.com\n    127.0.0.1 www.internetdownloadmanager.com\n    \n\n打开IDM，注册，注册码如下：\n\n    OS5HG-K90NH-SXOGT-7JYEZ\n    R2C1T-O0KQO-JAVU2-4MMYP\n    M2A16-47AAW-6NLYP-V1E0J\n    IZO7M-360FW-QY1XP-AWLPN\n    46YFS-S9G7H-QZFWI-QQBQB\n    TUTR2-I2NHO-GQBC6-ZECWH\n    \n\n### 终端管理工具Cmder\n\n下载地址[官方](http://cmder.net/)\n\n### 文件图片批量处理软件\n\nBulk Rename Utility  \n下载地址[官方](http://www.bulkrenameutility.co.uk/Main_Intro.php)[云盘](http://pan.baidu.com/s/1sjpaa1R)\n\n### 文件资源管理器Total Commander\n\n[破解版下载](http://pan.baidu.com/s/1dEvQm5b)  \n快捷键\n\n> F3——查看文件  \n> F4——编辑文件  \n> F5——拷贝文件  \n> F6——重命名、移动文件  \n> F7——新建文件夹  \n> F8——删除文件、文件夹  \n> F10——菜单条激活开关  \n> ALT  \n> Alt+F1——改变左边窗口的驱动器  \n> Alt+F2——改变右边窗口的驱动器  \n> Alt+Shift+F3——使用内部查看程序浏览文件  \n> Alt+F5——压缩文件/文件夹  \n> Alt+Shift+F5——压缩文件/文件夹，并删除原文件/文件夹  \n> Alt+F7——查找文件/文件夹  \n> Alt+F9——文件解压缩  \n> Alt+left/right——切换至上次进入的前一个/后一个文件夹  \n> Alt+down——显示历史访问地址列表  \n> SHIFT  \n> Shift+F4——用外部编辑器（UltraEdit）创建新文件  \n> Shift+F5——复制（重命名）文件/文件夹到当前文件夹  \n> Shift+Ctrl+F5——创建所选对象的快捷方式  \n> Shift+F6——重命名文件/文件夹  \n> Shift+ESC——Total Commander最小化  \n> NUM  \n> NUM + ——选择属性相同的一组文件  \n> NUM — ——清除所选文件中属性相同的一组文件  \n> NUM * ——反向选择  \n> NUM / ——恢复选择  \n> CTRL+NUM + ——全部选择  \n> CTRL+NUM - ——清除全部选择  \n> Alt+NUM + ——选择与当前光标选中的文件扩展名相同的一组文件  \n> CTRL  \n> Ctrl+PgUP——回上一级目录  \n> Ctrl+left/right——在左边/右边文件窗口中显示当前文件夹列表  \n> CTRL+/——返回根目录  \n> CTRL+SHIFT+F1——缩略图视图（图片预览）  \n> CTRL+F2——显示文件/文件夹详细资料  \n> CTRL+F3——以名称排序  \n> CTRL+F4——以扩展名排序  \n> CTRL+F5——以文件的创建时间排序  \n> CTRL+F6——以文件的大小排序  \n> CTRL+F8——显示目录结构  \n> CTRL+F9——打印当前光标处的文件  \n> CTRL+F10——显示所有文件  \n> CTRL+F11——显示所有可执行文件/隐藏非执行文件  \n> CTRL+ENTER——将当前文件名复制到TC的命令行  \n> CTRL+SHIFT+ENTER——将当前完整路径及文件名复制到TC的命令行  \n> CTRL+D——打开常用文件夹列表（可作书签用）  \n> CTRL+F——连接到FTP服务器  \n> CTRL+SHIFT+F——断开与FTP服务器的连接  \n> CTRL+Q——打开/关闭快速查看  \n> CTRL+U——切换左右文件窗口显示内容  \n> CTRL+W——关闭当前目录标签  \n> CTRL+SHIFT+W——关闭所有目录标签  \n> CTRL+Y——清空命令行输入框并置光标于命令行  \n> ESC——清空命令行输入框并置光标于文件窗口  \n> INSERT——选择文件/目录  \n> SPACE——选择文件/目录  \n> SHIFT+ENTER——  \n> 1.当命令行输入框有字符串命令：运行命令行的字符串命令  \n> 2.当光标位于压缩文件用相应的压缩工具打开压缩文件  \n> 3.位于压缩文件内：将所选中的文件解到临时文件目录，并试图将其做压缩文件的解压处理  \n> ALT+ENTER——显示所选文件属性  \n> Total Commander常用快捷键  \n> 显示编辑文件：  \n> F3：这个恐怕是使用程度最高的快捷键了，专门用来查看文件。需要说明的是，默认安装的TC 5.5版只能查看文本及一些关联的影像文件，图片只支持BMP等很少的种类。如需要查看更多类型的文件，还需要安装插件。  \n> Ctrl + Q：快速预览。  \n> F4：主要用来编辑文本文件。可以设置外部程序来编辑文本(我设置的是Editplus)。  \n> Shift + F4： 新建文本文件，调用记事本编辑（自定义编辑器）。  \n> Ctrl + Z： 编辑文件/文件夹的说明。  \n> Ctlt + Enter：查看文件或文件夹属性。  \n> 空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。  \n> Shift + 空格： 选中光标所在，不计算文件夹的容量。  \n> Alt + Shift + Enter：计算当前窗格下所有文件夹的占用空间，设置后再点击顶栏的“大小”可使文件夹参与排序，迅速找到占用空间最大的文件夹。  \n> Ctrl+Shift+Enter获取光标所在处文件/文件夹的绝对路径并显示在命令行里。 操作复制文件  \n> F5：复制文件，这个也是最常用的快捷键之一。TC分为左、右两个窗口，我们把光标选中的文件拷贝到另一个窗口。另外，TC也支持以鼠标拖拽方式复制文件，两者哪个更方便完全由你的个人喜好决定。  \n> Shift + F5： 同目录复制  \n> F6：移动文件，将光标选中的文件移动到另一个窗口。  \n> shift+Ins TC中的块拷贝  \n> SHIFT + F6 重命名文件（F2修改版）  \n> Ctrl + M： 批量更改文件名。  \n> 空格 选择文件/文件夹(如同 INSERT)。如果光标处文件夹还未选中，按空格键后，计算其占用空间（含子文件夹）并用字节数代替\n> \n> （详细资料显示方式下）。通过 '配置' \\- '选项' \\- '操作' \\- '用空格键选择' 可禁用该特性。 右键长按 在NC风格下这是调用 Windows 风格下的右键菜单  \n> Shift + F10——显示关联试菜单，类似于鼠标右键的效果  \n> 新建  \n> SHIFT + F4 新建文本文件，加载到编辑器(自定义）  \n> F7：新建一个或多层文件夹。可以像DOS那样新建多层的目录，比如c:/file/a/b/c 删除  \n> F8 / Del：删除文件。与Windows一样，按住Shift + Delete，则直接删除而不放到回收站中。  \n> 搜索定位  \n> Alt + Ctrl + 任意字母 或 Alt+任意字母 或 任意字母 ：快速定位文件 \\[菜单：配置--选项--快速搜索 中设置\\]  \n> Alt + F7：搜索。有了TC之后，我再没用过Windows系统自带的搜索。TC的搜索简单，而且速度快，功能全，非常好用。  \n> Ctrl + D：常用文件夹列表。按下会弹出浮动窗口，能够快速跳转到设定好的文件夹中。(非常好用）  \n> ctrl + s: 快速搜索只显示所选文件  \n> Alt + ↓：历史文件夹列表，可以快速回溯到你曾经到过的某个文件夹。  \n> Alt + ← 或 →：快速后退或前进历史目录。  \n> Tab： 左右窗口间切换。  \n> Alt + Tab： 窗口标签间切换。  \n> 空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。  \n> _(小键盘星号键)：反向选择。  \n> +(小键盘加号键)：选择全部或指定类型的文件。  \n> -(小键盘加号键)：取消选择全部或指定类型的文件。  \n> Ctrl + A：全选当前窗口所有文件。与Windows资源管理器不同，按下此快捷键并不选中文件夹。  \n> Shift + ↓ 和 Shift + ↑：选择或取消选择文件或文件夹。  \n> Ctrl+↑： 在当前窗口的新标签中打开光标处文件夹  \n> Ctrl+↓： 在对面窗口的新标签中打开光标处文件夹  \n> Ctrl + ←/→：如果光标在窗格顶部，将左/右窗格的显示内容调整为一样的；如果光标所在处是一个文件夹，在左/右窗格打开此文件夹；如果光标所在处是一个压缩文件，在左/右窗格打开此文件。  \n> Ctrl + num_ 锁定/解锁当前标签。  \n> ALT+F1 改变左侧窗口的驱动器  \n> ALT+F2 改变右侧窗口的驱动器  \n> 压缩文件  \n> Alt + F5：压缩选中的文件。按下回车，生成后的压缩包将会出现另一个目的窗口中。  \n> Alt + F6 解压缩文件  \n> 显示方式  \n> Ctrl + B： 显示当前文件夹及子文件夹下的所有文件。  \n> Ctrl + R： 刷新  \n> Ctrl + F1-8、10-12 不同方式在窗口显示文件列表\n\n### 翻译软件 灵格斯\n\n下载地址[http://www.lingoes.cn/](http://www.lingoes.cn/)\n\n### CorelDRAWX7破解版\n\n下载地址\\[百度网盘\\]（http://pan.baidu.com/s/1ntVwlgH）  \n断网注册\n\n### XMIND7破解版\n\n下载地址[百度网盘](http://pan.baidu.com/s/1i3OdeVr)","source":"_posts/Window常用软件及其使用方法.md","raw":"---\ntitle: Window常用软件及其使用方法\ntags:\n  - windows\nurl: 21.html\nid: 21\ncomments: false\ncategories:\n  - 办公\ndate: 2016-11-08 17:04:39\n---\n\n### 压缩软件7-zip\n\n终端命令(需要将安装目录添加到环境变量)\n\n> 7z a file.zip filefold #添加文件压缩  \n> 7z e file.zip filefold #释放文件解压\n\n### 电脑清理ccleaner\n\n电脑清理工具：清理注册表，系统垃圾文件 下载地址 [http://pan.baidu.com/s/1c0G34re](http://pan.baidu.com/s/1c0G34re)  \n断网后注册，可用注册码\n\n> 注册名： R J. van der Linden  \n> 注册码：CBEW-ZZJA-84DT-VZQG-SRJC  \n> 注册名：Registered User  \n> 注册码：CBB4-FJN4-EPC6-G5P6-QT4C\n\n### 卸载软件Total Uninstall\n\n电脑清理工具：卸载软件  \n破解版v6.16.0下载地址[http://pan.baidu.com/s/1mgwAta4](http://pan.baidu.com/s/1mgwAta4)\n\n### 驱动管理工具DriverDownloader\n\n下载地址 [http://pan.baidu.com/s/1qW9tPF2](http://pan.baidu.com/s/1qW9tPF2)  \n需要使用代理更新驱动，在Settings设置(前提是设置了代理上网)\n\n> proxy 127.0.0.1  \n> port 1080\n\n注册码\n\n> DF12-2RM2-JDPE-1009\n\n如果提示its usage limit 将1009改成逐渐+1，改成1010，1011等等等等\n\n### 下载工具IDM(Internet Download Manager)6.25版\n\n下载地址  \n[官网](http://www.internetdownloadmanager.com/download.html)  \n[官网下载版](http://pan.baidu.com/s/1c0Be5Bq)  \n[破解版](http://pan.baidu.com/s/1eQfmv8e)  \n注册码(断网注册)\n\n    DBNJC-D4R59-YPAGA-T3S1Q  #已经失效  \n    F9TZ9-P6IGF-SME74-2WP21  \n    CJA0S-K6CO4-R4NPJ-EKNRK  \n    F9TZ9-P6IGF-SME74-2WP21  \n    CJA0S-K6CO4-R4NPJ-EKNRK  \n    N0Z90-KJTTW-7TZO4-I27A1  \n    629U7-XLT5H-6SCGJ-2CENZ  \n    XONF7-PMUOL-HU7P4-D1QQX  \n    N0Z90-KJTTW-7TZO4-I27A1  \n    L67GT-CE6TR-DFT1D-XWVCM \n    \n\n或者使用host修改办法  \nhost文件添加\n\n    127.0.0.1 registeridm.com\n    127.0.0.1 www.registeridm.com\n    127.0.0.1 www.internetdownloadmanager.com\n    \n\n打开IDM，注册，注册码如下：\n\n    OS5HG-K90NH-SXOGT-7JYEZ\n    R2C1T-O0KQO-JAVU2-4MMYP\n    M2A16-47AAW-6NLYP-V1E0J\n    IZO7M-360FW-QY1XP-AWLPN\n    46YFS-S9G7H-QZFWI-QQBQB\n    TUTR2-I2NHO-GQBC6-ZECWH\n    \n\n### 终端管理工具Cmder\n\n下载地址[官方](http://cmder.net/)\n\n### 文件图片批量处理软件\n\nBulk Rename Utility  \n下载地址[官方](http://www.bulkrenameutility.co.uk/Main_Intro.php)[云盘](http://pan.baidu.com/s/1sjpaa1R)\n\n### 文件资源管理器Total Commander\n\n[破解版下载](http://pan.baidu.com/s/1dEvQm5b)  \n快捷键\n\n> F3——查看文件  \n> F4——编辑文件  \n> F5——拷贝文件  \n> F6——重命名、移动文件  \n> F7——新建文件夹  \n> F8——删除文件、文件夹  \n> F10——菜单条激活开关  \n> ALT  \n> Alt+F1——改变左边窗口的驱动器  \n> Alt+F2——改变右边窗口的驱动器  \n> Alt+Shift+F3——使用内部查看程序浏览文件  \n> Alt+F5——压缩文件/文件夹  \n> Alt+Shift+F5——压缩文件/文件夹，并删除原文件/文件夹  \n> Alt+F7——查找文件/文件夹  \n> Alt+F9——文件解压缩  \n> Alt+left/right——切换至上次进入的前一个/后一个文件夹  \n> Alt+down——显示历史访问地址列表  \n> SHIFT  \n> Shift+F4——用外部编辑器（UltraEdit）创建新文件  \n> Shift+F5——复制（重命名）文件/文件夹到当前文件夹  \n> Shift+Ctrl+F5——创建所选对象的快捷方式  \n> Shift+F6——重命名文件/文件夹  \n> Shift+ESC——Total Commander最小化  \n> NUM  \n> NUM + ——选择属性相同的一组文件  \n> NUM — ——清除所选文件中属性相同的一组文件  \n> NUM * ——反向选择  \n> NUM / ——恢复选择  \n> CTRL+NUM + ——全部选择  \n> CTRL+NUM - ——清除全部选择  \n> Alt+NUM + ——选择与当前光标选中的文件扩展名相同的一组文件  \n> CTRL  \n> Ctrl+PgUP——回上一级目录  \n> Ctrl+left/right——在左边/右边文件窗口中显示当前文件夹列表  \n> CTRL+/——返回根目录  \n> CTRL+SHIFT+F1——缩略图视图（图片预览）  \n> CTRL+F2——显示文件/文件夹详细资料  \n> CTRL+F3——以名称排序  \n> CTRL+F4——以扩展名排序  \n> CTRL+F5——以文件的创建时间排序  \n> CTRL+F6——以文件的大小排序  \n> CTRL+F8——显示目录结构  \n> CTRL+F9——打印当前光标处的文件  \n> CTRL+F10——显示所有文件  \n> CTRL+F11——显示所有可执行文件/隐藏非执行文件  \n> CTRL+ENTER——将当前文件名复制到TC的命令行  \n> CTRL+SHIFT+ENTER——将当前完整路径及文件名复制到TC的命令行  \n> CTRL+D——打开常用文件夹列表（可作书签用）  \n> CTRL+F——连接到FTP服务器  \n> CTRL+SHIFT+F——断开与FTP服务器的连接  \n> CTRL+Q——打开/关闭快速查看  \n> CTRL+U——切换左右文件窗口显示内容  \n> CTRL+W——关闭当前目录标签  \n> CTRL+SHIFT+W——关闭所有目录标签  \n> CTRL+Y——清空命令行输入框并置光标于命令行  \n> ESC——清空命令行输入框并置光标于文件窗口  \n> INSERT——选择文件/目录  \n> SPACE——选择文件/目录  \n> SHIFT+ENTER——  \n> 1.当命令行输入框有字符串命令：运行命令行的字符串命令  \n> 2.当光标位于压缩文件用相应的压缩工具打开压缩文件  \n> 3.位于压缩文件内：将所选中的文件解到临时文件目录，并试图将其做压缩文件的解压处理  \n> ALT+ENTER——显示所选文件属性  \n> Total Commander常用快捷键  \n> 显示编辑文件：  \n> F3：这个恐怕是使用程度最高的快捷键了，专门用来查看文件。需要说明的是，默认安装的TC 5.5版只能查看文本及一些关联的影像文件，图片只支持BMP等很少的种类。如需要查看更多类型的文件，还需要安装插件。  \n> Ctrl + Q：快速预览。  \n> F4：主要用来编辑文本文件。可以设置外部程序来编辑文本(我设置的是Editplus)。  \n> Shift + F4： 新建文本文件，调用记事本编辑（自定义编辑器）。  \n> Ctrl + Z： 编辑文件/文件夹的说明。  \n> Ctlt + Enter：查看文件或文件夹属性。  \n> 空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。  \n> Shift + 空格： 选中光标所在，不计算文件夹的容量。  \n> Alt + Shift + Enter：计算当前窗格下所有文件夹的占用空间，设置后再点击顶栏的“大小”可使文件夹参与排序，迅速找到占用空间最大的文件夹。  \n> Ctrl+Shift+Enter获取光标所在处文件/文件夹的绝对路径并显示在命令行里。 操作复制文件  \n> F5：复制文件，这个也是最常用的快捷键之一。TC分为左、右两个窗口，我们把光标选中的文件拷贝到另一个窗口。另外，TC也支持以鼠标拖拽方式复制文件，两者哪个更方便完全由你的个人喜好决定。  \n> Shift + F5： 同目录复制  \n> F6：移动文件，将光标选中的文件移动到另一个窗口。  \n> shift+Ins TC中的块拷贝  \n> SHIFT + F6 重命名文件（F2修改版）  \n> Ctrl + M： 批量更改文件名。  \n> 空格 选择文件/文件夹(如同 INSERT)。如果光标处文件夹还未选中，按空格键后，计算其占用空间（含子文件夹）并用字节数代替\n> \n> （详细资料显示方式下）。通过 '配置' \\- '选项' \\- '操作' \\- '用空格键选择' 可禁用该特性。 右键长按 在NC风格下这是调用 Windows 风格下的右键菜单  \n> Shift + F10——显示关联试菜单，类似于鼠标右键的效果  \n> 新建  \n> SHIFT + F4 新建文本文件，加载到编辑器(自定义）  \n> F7：新建一个或多层文件夹。可以像DOS那样新建多层的目录，比如c:/file/a/b/c 删除  \n> F8 / Del：删除文件。与Windows一样，按住Shift + Delete，则直接删除而不放到回收站中。  \n> 搜索定位  \n> Alt + Ctrl + 任意字母 或 Alt+任意字母 或 任意字母 ：快速定位文件 \\[菜单：配置--选项--快速搜索 中设置\\]  \n> Alt + F7：搜索。有了TC之后，我再没用过Windows系统自带的搜索。TC的搜索简单，而且速度快，功能全，非常好用。  \n> Ctrl + D：常用文件夹列表。按下会弹出浮动窗口，能够快速跳转到设定好的文件夹中。(非常好用）  \n> ctrl + s: 快速搜索只显示所选文件  \n> Alt + ↓：历史文件夹列表，可以快速回溯到你曾经到过的某个文件夹。  \n> Alt + ← 或 →：快速后退或前进历史目录。  \n> Tab： 左右窗口间切换。  \n> Alt + Tab： 窗口标签间切换。  \n> 空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。  \n> _(小键盘星号键)：反向选择。  \n> +(小键盘加号键)：选择全部或指定类型的文件。  \n> -(小键盘加号键)：取消选择全部或指定类型的文件。  \n> Ctrl + A：全选当前窗口所有文件。与Windows资源管理器不同，按下此快捷键并不选中文件夹。  \n> Shift + ↓ 和 Shift + ↑：选择或取消选择文件或文件夹。  \n> Ctrl+↑： 在当前窗口的新标签中打开光标处文件夹  \n> Ctrl+↓： 在对面窗口的新标签中打开光标处文件夹  \n> Ctrl + ←/→：如果光标在窗格顶部，将左/右窗格的显示内容调整为一样的；如果光标所在处是一个文件夹，在左/右窗格打开此文件夹；如果光标所在处是一个压缩文件，在左/右窗格打开此文件。  \n> Ctrl + num_ 锁定/解锁当前标签。  \n> ALT+F1 改变左侧窗口的驱动器  \n> ALT+F2 改变右侧窗口的驱动器  \n> 压缩文件  \n> Alt + F5：压缩选中的文件。按下回车，生成后的压缩包将会出现另一个目的窗口中。  \n> Alt + F6 解压缩文件  \n> 显示方式  \n> Ctrl + B： 显示当前文件夹及子文件夹下的所有文件。  \n> Ctrl + R： 刷新  \n> Ctrl + F1-8、10-12 不同方式在窗口显示文件列表\n\n### 翻译软件 灵格斯\n\n下载地址[http://www.lingoes.cn/](http://www.lingoes.cn/)\n\n### CorelDRAWX7破解版\n\n下载地址\\[百度网盘\\]（http://pan.baidu.com/s/1ntVwlgH）  \n断网注册\n\n### XMIND7破解版\n\n下载地址[百度网盘](http://pan.baidu.com/s/1i3OdeVr)","slug":"Window常用软件及其使用方法","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt40049h3a4suwgquny","content":"<h3 id=\"压缩软件7-zip\"><a href=\"#压缩软件7-zip\" class=\"headerlink\" title=\"压缩软件7-zip\"></a>压缩软件7-zip</h3><p>终端命令(需要将安装目录添加到环境变量)</p>\n<blockquote>\n<p>7z a file.zip filefold #添加文件压缩<br>7z e file.zip filefold #释放文件解压</p>\n</blockquote>\n<h3 id=\"电脑清理ccleaner\"><a href=\"#电脑清理ccleaner\" class=\"headerlink\" title=\"电脑清理ccleaner\"></a>电脑清理ccleaner</h3><p>电脑清理工具：清理注册表，系统垃圾文件 下载地址 <a href=\"http://pan.baidu.com/s/1c0G34re\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1c0G34re</a><br>断网后注册，可用注册码</p>\n<blockquote>\n<p>注册名： R J. van der Linden<br>注册码：CBEW-ZZJA-84DT-VZQG-SRJC<br>注册名：Registered User<br>注册码：CBB4-FJN4-EPC6-G5P6-QT4C</p>\n</blockquote>\n<h3 id=\"卸载软件Total-Uninstall\"><a href=\"#卸载软件Total-Uninstall\" class=\"headerlink\" title=\"卸载软件Total Uninstall\"></a>卸载软件Total Uninstall</h3><p>电脑清理工具：卸载软件<br>破解版v6.16.0下载地址<a href=\"http://pan.baidu.com/s/1mgwAta4\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mgwAta4</a></p>\n<h3 id=\"驱动管理工具DriverDownloader\"><a href=\"#驱动管理工具DriverDownloader\" class=\"headerlink\" title=\"驱动管理工具DriverDownloader\"></a>驱动管理工具DriverDownloader</h3><p>下载地址 <a href=\"http://pan.baidu.com/s/1qW9tPF2\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1qW9tPF2</a><br>需要使用代理更新驱动，在Settings设置(前提是设置了代理上网)</p>\n<blockquote>\n<p>proxy 127.0.0.1<br>port 1080</p>\n</blockquote>\n<p>注册码</p>\n<blockquote>\n<p>DF12-2RM2-JDPE-1009</p>\n</blockquote>\n<p>如果提示its usage limit 将1009改成逐渐+1，改成1010，1011等等等等</p>\n<h3 id=\"下载工具IDM-Internet-Download-Manager-6-25版\"><a href=\"#下载工具IDM-Internet-Download-Manager-6-25版\" class=\"headerlink\" title=\"下载工具IDM(Internet Download Manager)6.25版\"></a>下载工具IDM(Internet Download Manager)6.25版</h3><p>下载地址<br><a href=\"http://www.internetdownloadmanager.com/download.html\" target=\"_blank\" rel=\"noopener\">官网</a><br><a href=\"http://pan.baidu.com/s/1c0Be5Bq\" target=\"_blank\" rel=\"noopener\">官网下载版</a><br><a href=\"http://pan.baidu.com/s/1eQfmv8e\" target=\"_blank\" rel=\"noopener\">破解版</a><br>注册码(断网注册)</p>\n<pre><code>DBNJC-D4R59-YPAGA-T3S1Q  #已经失效  \nF9TZ9-P6IGF-SME74-2WP21  \nCJA0S-K6CO4-R4NPJ-EKNRK  \nF9TZ9-P6IGF-SME74-2WP21  \nCJA0S-K6CO4-R4NPJ-EKNRK  \nN0Z90-KJTTW-7TZO4-I27A1  \n629U7-XLT5H-6SCGJ-2CENZ  \nXONF7-PMUOL-HU7P4-D1QQX  \nN0Z90-KJTTW-7TZO4-I27A1  \nL67GT-CE6TR-DFT1D-XWVCM </code></pre><p>或者使用host修改办法<br>host文件添加</p>\n<pre><code>127.0.0.1 registeridm.com\n127.0.0.1 www.registeridm.com\n127.0.0.1 www.internetdownloadmanager.com</code></pre><p>打开IDM，注册，注册码如下：</p>\n<pre><code>OS5HG-K90NH-SXOGT-7JYEZ\nR2C1T-O0KQO-JAVU2-4MMYP\nM2A16-47AAW-6NLYP-V1E0J\nIZO7M-360FW-QY1XP-AWLPN\n46YFS-S9G7H-QZFWI-QQBQB\nTUTR2-I2NHO-GQBC6-ZECWH</code></pre><h3 id=\"终端管理工具Cmder\"><a href=\"#终端管理工具Cmder\" class=\"headerlink\" title=\"终端管理工具Cmder\"></a>终端管理工具Cmder</h3><p>下载地址<a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">官方</a></p>\n<h3 id=\"文件图片批量处理软件\"><a href=\"#文件图片批量处理软件\" class=\"headerlink\" title=\"文件图片批量处理软件\"></a>文件图片批量处理软件</h3><p>Bulk Rename Utility<br>下载地址<a href=\"http://www.bulkrenameutility.co.uk/Main_Intro.php\" target=\"_blank\" rel=\"noopener\">官方</a><a href=\"http://pan.baidu.com/s/1sjpaa1R\" target=\"_blank\" rel=\"noopener\">云盘</a></p>\n<h3 id=\"文件资源管理器Total-Commander\"><a href=\"#文件资源管理器Total-Commander\" class=\"headerlink\" title=\"文件资源管理器Total Commander\"></a>文件资源管理器Total Commander</h3><p><a href=\"http://pan.baidu.com/s/1dEvQm5b\" target=\"_blank\" rel=\"noopener\">破解版下载</a><br>快捷键</p>\n<blockquote>\n<p>F3——查看文件<br>F4——编辑文件<br>F5——拷贝文件<br>F6——重命名、移动文件<br>F7——新建文件夹<br>F8——删除文件、文件夹<br>F10——菜单条激活开关<br>ALT<br>Alt+F1——改变左边窗口的驱动器<br>Alt+F2——改变右边窗口的驱动器<br>Alt+Shift+F3——使用内部查看程序浏览文件<br>Alt+F5——压缩文件/文件夹<br>Alt+Shift+F5——压缩文件/文件夹，并删除原文件/文件夹<br>Alt+F7——查找文件/文件夹<br>Alt+F9——文件解压缩<br>Alt+left/right——切换至上次进入的前一个/后一个文件夹<br>Alt+down——显示历史访问地址列表<br>SHIFT<br>Shift+F4——用外部编辑器（UltraEdit）创建新文件<br>Shift+F5——复制（重命名）文件/文件夹到当前文件夹<br>Shift+Ctrl+F5——创建所选对象的快捷方式<br>Shift+F6——重命名文件/文件夹<br>Shift+ESC——Total Commander最小化<br>NUM<br>NUM + ——选择属性相同的一组文件<br>NUM — ——清除所选文件中属性相同的一组文件<br>NUM * ——反向选择<br>NUM / ——恢复选择<br>CTRL+NUM + ——全部选择<br>CTRL+NUM - ——清除全部选择<br>Alt+NUM + ——选择与当前光标选中的文件扩展名相同的一组文件<br>CTRL<br>Ctrl+PgUP——回上一级目录<br>Ctrl+left/right——在左边/右边文件窗口中显示当前文件夹列表<br>CTRL+/——返回根目录<br>CTRL+SHIFT+F1——缩略图视图（图片预览）<br>CTRL+F2——显示文件/文件夹详细资料<br>CTRL+F3——以名称排序<br>CTRL+F4——以扩展名排序<br>CTRL+F5——以文件的创建时间排序<br>CTRL+F6——以文件的大小排序<br>CTRL+F8——显示目录结构<br>CTRL+F9——打印当前光标处的文件<br>CTRL+F10——显示所有文件<br>CTRL+F11——显示所有可执行文件/隐藏非执行文件<br>CTRL+ENTER——将当前文件名复制到TC的命令行<br>CTRL+SHIFT+ENTER——将当前完整路径及文件名复制到TC的命令行<br>CTRL+D——打开常用文件夹列表（可作书签用）<br>CTRL+F——连接到FTP服务器<br>CTRL+SHIFT+F——断开与FTP服务器的连接<br>CTRL+Q——打开/关闭快速查看<br>CTRL+U——切换左右文件窗口显示内容<br>CTRL+W——关闭当前目录标签<br>CTRL+SHIFT+W——关闭所有目录标签<br>CTRL+Y——清空命令行输入框并置光标于命令行<br>ESC——清空命令行输入框并置光标于文件窗口<br>INSERT——选择文件/目录<br>SPACE——选择文件/目录<br>SHIFT+ENTER——<br>1.当命令行输入框有字符串命令：运行命令行的字符串命令<br>2.当光标位于压缩文件用相应的压缩工具打开压缩文件<br>3.位于压缩文件内：将所选中的文件解到临时文件目录，并试图将其做压缩文件的解压处理<br>ALT+ENTER——显示所选文件属性<br>Total Commander常用快捷键<br>显示编辑文件：<br>F3：这个恐怕是使用程度最高的快捷键了，专门用来查看文件。需要说明的是，默认安装的TC 5.5版只能查看文本及一些关联的影像文件，图片只支持BMP等很少的种类。如需要查看更多类型的文件，还需要安装插件。<br>Ctrl + Q：快速预览。<br>F4：主要用来编辑文本文件。可以设置外部程序来编辑文本(我设置的是Editplus)。<br>Shift + F4： 新建文本文件，调用记事本编辑（自定义编辑器）。<br>Ctrl + Z： 编辑文件/文件夹的说明。<br>Ctlt + Enter：查看文件或文件夹属性。<br>空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。<br>Shift + 空格： 选中光标所在，不计算文件夹的容量。<br>Alt + Shift + Enter：计算当前窗格下所有文件夹的占用空间，设置后再点击顶栏的“大小”可使文件夹参与排序，迅速找到占用空间最大的文件夹。<br>Ctrl+Shift+Enter获取光标所在处文件/文件夹的绝对路径并显示在命令行里。 操作复制文件<br>F5：复制文件，这个也是最常用的快捷键之一。TC分为左、右两个窗口，我们把光标选中的文件拷贝到另一个窗口。另外，TC也支持以鼠标拖拽方式复制文件，两者哪个更方便完全由你的个人喜好决定。<br>Shift + F5： 同目录复制<br>F6：移动文件，将光标选中的文件移动到另一个窗口。<br>shift+Ins TC中的块拷贝<br>SHIFT + F6 重命名文件（F2修改版）<br>Ctrl + M： 批量更改文件名。<br>空格 选择文件/文件夹(如同 INSERT)。如果光标处文件夹还未选中，按空格键后，计算其占用空间（含子文件夹）并用字节数代替</p>\n<p>（详细资料显示方式下）。通过 ‘配置’ - ‘选项’ - ‘操作’ - ‘用空格键选择’ 可禁用该特性。 右键长按 在NC风格下这是调用 Windows 风格下的右键菜单<br>Shift + F10——显示关联试菜单，类似于鼠标右键的效果<br>新建<br>SHIFT + F4 新建文本文件，加载到编辑器(自定义）<br>F7：新建一个或多层文件夹。可以像DOS那样新建多层的目录，比如c:/file/a/b/c 删除<br>F8 / Del：删除文件。与Windows一样，按住Shift + Delete，则直接删除而不放到回收站中。<br>搜索定位<br>Alt + Ctrl + 任意字母 或 Alt+任意字母 或 任意字母 ：快速定位文件 [菜单：配置–选项–快速搜索 中设置]<br>Alt + F7：搜索。有了TC之后，我再没用过Windows系统自带的搜索。TC的搜索简单，而且速度快，功能全，非常好用。<br>Ctrl + D：常用文件夹列表。按下会弹出浮动窗口，能够快速跳转到设定好的文件夹中。(非常好用）<br>ctrl + s: 快速搜索只显示所选文件<br>Alt + ↓：历史文件夹列表，可以快速回溯到你曾经到过的某个文件夹。<br>Alt + ← 或 →：快速后退或前进历史目录。<br>Tab： 左右窗口间切换。<br>Alt + Tab： 窗口标签间切换。<br>空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。<br><em>(小键盘星号键)：反向选择。<br>+(小键盘加号键)：选择全部或指定类型的文件。<br>-(小键盘加号键)：取消选择全部或指定类型的文件。<br>Ctrl + A：全选当前窗口所有文件。与Windows资源管理器不同，按下此快捷键并不选中文件夹。<br>Shift + ↓ 和 Shift + ↑：选择或取消选择文件或文件夹。<br>Ctrl+↑： 在当前窗口的新标签中打开光标处文件夹<br>Ctrl+↓： 在对面窗口的新标签中打开光标处文件夹<br>Ctrl + ←/→：如果光标在窗格顶部，将左/右窗格的显示内容调整为一样的；如果光标所在处是一个文件夹，在左/右窗格打开此文件夹；如果光标所在处是一个压缩文件，在左/右窗格打开此文件。<br>Ctrl + num</em> 锁定/解锁当前标签。<br>ALT+F1 改变左侧窗口的驱动器<br>ALT+F2 改变右侧窗口的驱动器<br>压缩文件<br>Alt + F5：压缩选中的文件。按下回车，生成后的压缩包将会出现另一个目的窗口中。<br>Alt + F6 解压缩文件<br>显示方式<br>Ctrl + B： 显示当前文件夹及子文件夹下的所有文件。<br>Ctrl + R： 刷新<br>Ctrl + F1-8、10-12 不同方式在窗口显示文件列表</p>\n</blockquote>\n<h3 id=\"翻译软件-灵格斯\"><a href=\"#翻译软件-灵格斯\" class=\"headerlink\" title=\"翻译软件 灵格斯\"></a>翻译软件 灵格斯</h3><p>下载地址<a href=\"http://www.lingoes.cn/\" target=\"_blank\" rel=\"noopener\">http://www.lingoes.cn/</a></p>\n<h3 id=\"CorelDRAWX7破解版\"><a href=\"#CorelDRAWX7破解版\" class=\"headerlink\" title=\"CorelDRAWX7破解版\"></a>CorelDRAWX7破解版</h3><p>下载地址[百度网盘]（<a href=\"http://pan.baidu.com/s/1ntVwlgH）\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1ntVwlgH）</a><br>断网注册</p>\n<h3 id=\"XMIND7破解版\"><a href=\"#XMIND7破解版\" class=\"headerlink\" title=\"XMIND7破解版\"></a>XMIND7破解版</h3><p>下载地址<a href=\"http://pan.baidu.com/s/1i3OdeVr\" target=\"_blank\" rel=\"noopener\">百度网盘</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"压缩软件7-zip\"><a href=\"#压缩软件7-zip\" class=\"headerlink\" title=\"压缩软件7-zip\"></a>压缩软件7-zip</h3><p>终端命令(需要将安装目录添加到环境变量)</p>\n<blockquote>\n<p>7z a file.zip filefold #添加文件压缩<br>7z e file.zip filefold #释放文件解压</p>\n</blockquote>\n<h3 id=\"电脑清理ccleaner\"><a href=\"#电脑清理ccleaner\" class=\"headerlink\" title=\"电脑清理ccleaner\"></a>电脑清理ccleaner</h3><p>电脑清理工具：清理注册表，系统垃圾文件 下载地址 <a href=\"http://pan.baidu.com/s/1c0G34re\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1c0G34re</a><br>断网后注册，可用注册码</p>\n<blockquote>\n<p>注册名： R J. van der Linden<br>注册码：CBEW-ZZJA-84DT-VZQG-SRJC<br>注册名：Registered User<br>注册码：CBB4-FJN4-EPC6-G5P6-QT4C</p>\n</blockquote>\n<h3 id=\"卸载软件Total-Uninstall\"><a href=\"#卸载软件Total-Uninstall\" class=\"headerlink\" title=\"卸载软件Total Uninstall\"></a>卸载软件Total Uninstall</h3><p>电脑清理工具：卸载软件<br>破解版v6.16.0下载地址<a href=\"http://pan.baidu.com/s/1mgwAta4\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mgwAta4</a></p>\n<h3 id=\"驱动管理工具DriverDownloader\"><a href=\"#驱动管理工具DriverDownloader\" class=\"headerlink\" title=\"驱动管理工具DriverDownloader\"></a>驱动管理工具DriverDownloader</h3><p>下载地址 <a href=\"http://pan.baidu.com/s/1qW9tPF2\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1qW9tPF2</a><br>需要使用代理更新驱动，在Settings设置(前提是设置了代理上网)</p>\n<blockquote>\n<p>proxy 127.0.0.1<br>port 1080</p>\n</blockquote>\n<p>注册码</p>\n<blockquote>\n<p>DF12-2RM2-JDPE-1009</p>\n</blockquote>\n<p>如果提示its usage limit 将1009改成逐渐+1，改成1010，1011等等等等</p>\n<h3 id=\"下载工具IDM-Internet-Download-Manager-6-25版\"><a href=\"#下载工具IDM-Internet-Download-Manager-6-25版\" class=\"headerlink\" title=\"下载工具IDM(Internet Download Manager)6.25版\"></a>下载工具IDM(Internet Download Manager)6.25版</h3><p>下载地址<br><a href=\"http://www.internetdownloadmanager.com/download.html\" target=\"_blank\" rel=\"noopener\">官网</a><br><a href=\"http://pan.baidu.com/s/1c0Be5Bq\" target=\"_blank\" rel=\"noopener\">官网下载版</a><br><a href=\"http://pan.baidu.com/s/1eQfmv8e\" target=\"_blank\" rel=\"noopener\">破解版</a><br>注册码(断网注册)</p>\n<pre><code>DBNJC-D4R59-YPAGA-T3S1Q  #已经失效  \nF9TZ9-P6IGF-SME74-2WP21  \nCJA0S-K6CO4-R4NPJ-EKNRK  \nF9TZ9-P6IGF-SME74-2WP21  \nCJA0S-K6CO4-R4NPJ-EKNRK  \nN0Z90-KJTTW-7TZO4-I27A1  \n629U7-XLT5H-6SCGJ-2CENZ  \nXONF7-PMUOL-HU7P4-D1QQX  \nN0Z90-KJTTW-7TZO4-I27A1  \nL67GT-CE6TR-DFT1D-XWVCM </code></pre><p>或者使用host修改办法<br>host文件添加</p>\n<pre><code>127.0.0.1 registeridm.com\n127.0.0.1 www.registeridm.com\n127.0.0.1 www.internetdownloadmanager.com</code></pre><p>打开IDM，注册，注册码如下：</p>\n<pre><code>OS5HG-K90NH-SXOGT-7JYEZ\nR2C1T-O0KQO-JAVU2-4MMYP\nM2A16-47AAW-6NLYP-V1E0J\nIZO7M-360FW-QY1XP-AWLPN\n46YFS-S9G7H-QZFWI-QQBQB\nTUTR2-I2NHO-GQBC6-ZECWH</code></pre><h3 id=\"终端管理工具Cmder\"><a href=\"#终端管理工具Cmder\" class=\"headerlink\" title=\"终端管理工具Cmder\"></a>终端管理工具Cmder</h3><p>下载地址<a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">官方</a></p>\n<h3 id=\"文件图片批量处理软件\"><a href=\"#文件图片批量处理软件\" class=\"headerlink\" title=\"文件图片批量处理软件\"></a>文件图片批量处理软件</h3><p>Bulk Rename Utility<br>下载地址<a href=\"http://www.bulkrenameutility.co.uk/Main_Intro.php\" target=\"_blank\" rel=\"noopener\">官方</a><a href=\"http://pan.baidu.com/s/1sjpaa1R\" target=\"_blank\" rel=\"noopener\">云盘</a></p>\n<h3 id=\"文件资源管理器Total-Commander\"><a href=\"#文件资源管理器Total-Commander\" class=\"headerlink\" title=\"文件资源管理器Total Commander\"></a>文件资源管理器Total Commander</h3><p><a href=\"http://pan.baidu.com/s/1dEvQm5b\" target=\"_blank\" rel=\"noopener\">破解版下载</a><br>快捷键</p>\n<blockquote>\n<p>F3——查看文件<br>F4——编辑文件<br>F5——拷贝文件<br>F6——重命名、移动文件<br>F7——新建文件夹<br>F8——删除文件、文件夹<br>F10——菜单条激活开关<br>ALT<br>Alt+F1——改变左边窗口的驱动器<br>Alt+F2——改变右边窗口的驱动器<br>Alt+Shift+F3——使用内部查看程序浏览文件<br>Alt+F5——压缩文件/文件夹<br>Alt+Shift+F5——压缩文件/文件夹，并删除原文件/文件夹<br>Alt+F7——查找文件/文件夹<br>Alt+F9——文件解压缩<br>Alt+left/right——切换至上次进入的前一个/后一个文件夹<br>Alt+down——显示历史访问地址列表<br>SHIFT<br>Shift+F4——用外部编辑器（UltraEdit）创建新文件<br>Shift+F5——复制（重命名）文件/文件夹到当前文件夹<br>Shift+Ctrl+F5——创建所选对象的快捷方式<br>Shift+F6——重命名文件/文件夹<br>Shift+ESC——Total Commander最小化<br>NUM<br>NUM + ——选择属性相同的一组文件<br>NUM — ——清除所选文件中属性相同的一组文件<br>NUM * ——反向选择<br>NUM / ——恢复选择<br>CTRL+NUM + ——全部选择<br>CTRL+NUM - ——清除全部选择<br>Alt+NUM + ——选择与当前光标选中的文件扩展名相同的一组文件<br>CTRL<br>Ctrl+PgUP——回上一级目录<br>Ctrl+left/right——在左边/右边文件窗口中显示当前文件夹列表<br>CTRL+/——返回根目录<br>CTRL+SHIFT+F1——缩略图视图（图片预览）<br>CTRL+F2——显示文件/文件夹详细资料<br>CTRL+F3——以名称排序<br>CTRL+F4——以扩展名排序<br>CTRL+F5——以文件的创建时间排序<br>CTRL+F6——以文件的大小排序<br>CTRL+F8——显示目录结构<br>CTRL+F9——打印当前光标处的文件<br>CTRL+F10——显示所有文件<br>CTRL+F11——显示所有可执行文件/隐藏非执行文件<br>CTRL+ENTER——将当前文件名复制到TC的命令行<br>CTRL+SHIFT+ENTER——将当前完整路径及文件名复制到TC的命令行<br>CTRL+D——打开常用文件夹列表（可作书签用）<br>CTRL+F——连接到FTP服务器<br>CTRL+SHIFT+F——断开与FTP服务器的连接<br>CTRL+Q——打开/关闭快速查看<br>CTRL+U——切换左右文件窗口显示内容<br>CTRL+W——关闭当前目录标签<br>CTRL+SHIFT+W——关闭所有目录标签<br>CTRL+Y——清空命令行输入框并置光标于命令行<br>ESC——清空命令行输入框并置光标于文件窗口<br>INSERT——选择文件/目录<br>SPACE——选择文件/目录<br>SHIFT+ENTER——<br>1.当命令行输入框有字符串命令：运行命令行的字符串命令<br>2.当光标位于压缩文件用相应的压缩工具打开压缩文件<br>3.位于压缩文件内：将所选中的文件解到临时文件目录，并试图将其做压缩文件的解压处理<br>ALT+ENTER——显示所选文件属性<br>Total Commander常用快捷键<br>显示编辑文件：<br>F3：这个恐怕是使用程度最高的快捷键了，专门用来查看文件。需要说明的是，默认安装的TC 5.5版只能查看文本及一些关联的影像文件，图片只支持BMP等很少的种类。如需要查看更多类型的文件，还需要安装插件。<br>Ctrl + Q：快速预览。<br>F4：主要用来编辑文本文件。可以设置外部程序来编辑文本(我设置的是Editplus)。<br>Shift + F4： 新建文本文件，调用记事本编辑（自定义编辑器）。<br>Ctrl + Z： 编辑文件/文件夹的说明。<br>Ctlt + Enter：查看文件或文件夹属性。<br>空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。<br>Shift + 空格： 选中光标所在，不计算文件夹的容量。<br>Alt + Shift + Enter：计算当前窗格下所有文件夹的占用空间，设置后再点击顶栏的“大小”可使文件夹参与排序，迅速找到占用空间最大的文件夹。<br>Ctrl+Shift+Enter获取光标所在处文件/文件夹的绝对路径并显示在命令行里。 操作复制文件<br>F5：复制文件，这个也是最常用的快捷键之一。TC分为左、右两个窗口，我们把光标选中的文件拷贝到另一个窗口。另外，TC也支持以鼠标拖拽方式复制文件，两者哪个更方便完全由你的个人喜好决定。<br>Shift + F5： 同目录复制<br>F6：移动文件，将光标选中的文件移动到另一个窗口。<br>shift+Ins TC中的块拷贝<br>SHIFT + F6 重命名文件（F2修改版）<br>Ctrl + M： 批量更改文件名。<br>空格 选择文件/文件夹(如同 INSERT)。如果光标处文件夹还未选中，按空格键后，计算其占用空间（含子文件夹）并用字节数代替</p>\n<p>（详细资料显示方式下）。通过 ‘配置’ - ‘选项’ - ‘操作’ - ‘用空格键选择’ 可禁用该特性。 右键长按 在NC风格下这是调用 Windows 风格下的右键菜单<br>Shift + F10——显示关联试菜单，类似于鼠标右键的效果<br>新建<br>SHIFT + F4 新建文本文件，加载到编辑器(自定义）<br>F7：新建一个或多层文件夹。可以像DOS那样新建多层的目录，比如c:/file/a/b/c 删除<br>F8 / Del：删除文件。与Windows一样，按住Shift + Delete，则直接删除而不放到回收站中。<br>搜索定位<br>Alt + Ctrl + 任意字母 或 Alt+任意字母 或 任意字母 ：快速定位文件 [菜单：配置–选项–快速搜索 中设置]<br>Alt + F7：搜索。有了TC之后，我再没用过Windows系统自带的搜索。TC的搜索简单，而且速度快，功能全，非常好用。<br>Ctrl + D：常用文件夹列表。按下会弹出浮动窗口，能够快速跳转到设定好的文件夹中。(非常好用）<br>ctrl + s: 快速搜索只显示所选文件<br>Alt + ↓：历史文件夹列表，可以快速回溯到你曾经到过的某个文件夹。<br>Alt + ← 或 →：快速后退或前进历史目录。<br>Tab： 左右窗口间切换。<br>Alt + Tab： 窗口标签间切换。<br>空格键：选择或取消选择文件，如在文件夹按下，则计算该文件夹占用空间。<br><em>(小键盘星号键)：反向选择。<br>+(小键盘加号键)：选择全部或指定类型的文件。<br>-(小键盘加号键)：取消选择全部或指定类型的文件。<br>Ctrl + A：全选当前窗口所有文件。与Windows资源管理器不同，按下此快捷键并不选中文件夹。<br>Shift + ↓ 和 Shift + ↑：选择或取消选择文件或文件夹。<br>Ctrl+↑： 在当前窗口的新标签中打开光标处文件夹<br>Ctrl+↓： 在对面窗口的新标签中打开光标处文件夹<br>Ctrl + ←/→：如果光标在窗格顶部，将左/右窗格的显示内容调整为一样的；如果光标所在处是一个文件夹，在左/右窗格打开此文件夹；如果光标所在处是一个压缩文件，在左/右窗格打开此文件。<br>Ctrl + num</em> 锁定/解锁当前标签。<br>ALT+F1 改变左侧窗口的驱动器<br>ALT+F2 改变右侧窗口的驱动器<br>压缩文件<br>Alt + F5：压缩选中的文件。按下回车，生成后的压缩包将会出现另一个目的窗口中。<br>Alt + F6 解压缩文件<br>显示方式<br>Ctrl + B： 显示当前文件夹及子文件夹下的所有文件。<br>Ctrl + R： 刷新<br>Ctrl + F1-8、10-12 不同方式在窗口显示文件列表</p>\n</blockquote>\n<h3 id=\"翻译软件-灵格斯\"><a href=\"#翻译软件-灵格斯\" class=\"headerlink\" title=\"翻译软件 灵格斯\"></a>翻译软件 灵格斯</h3><p>下载地址<a href=\"http://www.lingoes.cn/\" target=\"_blank\" rel=\"noopener\">http://www.lingoes.cn/</a></p>\n<h3 id=\"CorelDRAWX7破解版\"><a href=\"#CorelDRAWX7破解版\" class=\"headerlink\" title=\"CorelDRAWX7破解版\"></a>CorelDRAWX7破解版</h3><p>下载地址[百度网盘]（<a href=\"http://pan.baidu.com/s/1ntVwlgH）\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1ntVwlgH）</a><br>断网注册</p>\n<h3 id=\"XMIND7破解版\"><a href=\"#XMIND7破解版\" class=\"headerlink\" title=\"XMIND7破解版\"></a>XMIND7破解版</h3><p>下载地址<a href=\"http://pan.baidu.com/s/1i3OdeVr\" target=\"_blank\" rel=\"noopener\">百度网盘</a></p>\n"},{"title":"利用Python从EXCEL导出数据并批量替换WORD文档内容","url":"26.html","id":"26","comments":0,"date":"2016-11-09T02:07:56.000Z","_content":"\n### 老外的代码\n\n第一个是操作word，第二个是操作excel\n\n    from win32com.client import constants, Dispatch\n    import pythoncom\n    wdStory = 6\n    class WordDocument(object):\n      \"\"\"\n      Some convenience methods for Word documents accessed\n      through COM.\n      \"\"\"\n    \n      def __init__(self, visible=False):\n        self.app = Dispatch(\"Word.Application\")\n        self.app.Visible = visible\n    \n      def new(self, filename=None):\n        \"\"\"\n        Create a new Word document. If 'filename' specified,\n        use the file as a template.\n        \"\"\"\n        self.app.Documents.Add(filename)\n    \n      def open(self, filename):\n        \"\"\"\n        Open an existing Word document for editing.\n        \"\"\"\n        self.app.Documents.Open(filename)\n    \n      def save(self, filename=None):\n        \"\"\"\n        Save the active document. If 'filename' is given,\n        do a Save As.\n        \"\"\"\n        if filename:\n          self.app.ActiveDocument.SaveAs(filename)\n        else:\n          self.app.ActiveDocument.Save()\n    \n      def save_as(self, filename):\n        return self.save(filename)\n    \n      def print_out(self):\n        \"\"\"\n        Print the active document.\n        \"\"\"\n        self.app.Application.PrintOut()\n    \n      def close(self):\n        \"\"\"\n        Close the active document.\n        \"\"\"\n        self.app.ActiveDocument.Close()\n    \n      def quit(self):\n        \"\"\"\n        Quit Word.\n        \"\"\"\n        return self.app.Quit()\n    \n      def find_and_replace(self, find_str, replace_str):\n        \"\"\"\n        Find all occurances of 'find_str' and replace with 'replace_str'\n        in the active document.\n        \"\"\"\n        self.app.Selection.HomeKey(Unit=wdStory)\n        find = self.app.Selection.Find\n        find.Text = find_str\n        while self.app.Selection.Find.Execute():\n          self.app.Selection.TypeText(Text=replace_str)\n    \n\n    from win32com.client import constants, Dispatch\n    import pythoncom\n    import os\n    borderTop = 3\n    borderBottom = 4\n    borderLeft = 1\n    borderRight = 2\n    borderSolid = 1\n    borderDashed = 2\n    borderDotted = 3\n    colorBlack = 1\n    directionUp = -4162\n    directionDown = -4121\n    directionLeft = -4131\n    directionRight = -4152\n    class ExcelDocument(object):\n      \"\"\"\n      Some convenience methods for Excel documents accessed\n      through COM.\n      \"\"\"\n      def __init__(self, visible=False):\n        self.app = Dispatch(\"Excel.Application\")\n        self.app.Visible = visible\n        self.sheet = 1\n      def new(self, filename=None):\n        \"\"\"\n        Create a new Excel workbook. If 'filename' specified,\n        use the file as a template.\n        \"\"\"\n        self.app.Workbooks.Add(filename)\n      def open(self, filename):\n        \"\"\"\n        Open an existing Excel workbook for editing.\n        \"\"\"\n        self.app.Workbooks.Open(filename)\n      def set_sheet(self, sheet):\n        \"\"\"\n        Set the active worksheet.\n        \"\"\"\n        self.sheet = sheet\n      def get_range(self, range):\n        \"\"\"\n        Get a range object for the specified range or single cell.\n        \"\"\"\n        return self.app.ActiveWorkbook.Sheets(self.sheet).Range(range)\n      def set_value(self, cell, value=''):\n        \"\"\"\n        Set the value of 'cell' to 'value'.\n        \"\"\"\n        self.get_range(cell).Value = value\n      def get_value(self, cell):\n        \"\"\"\n        Get the value of 'cell'.\n        \"\"\"\n        value = self.get_range(cell).Value\n        if isinstance(value, tuple):\n          value = [v[0] for v in value]\n        return value\n      def set_border(self, range, side, line_style=borderSolid, color=colorBlack):\n        \"\"\"\n        Set a border on the specified range of cells or single cell.\n        'range' = range of cells or single cell\n        'side' = one of borderTop, borderBottom, borderLeft, borderRight\n        'line_style' = one of borderSolid, borderDashed, borderDotted, others?\n        'color' = one of colorBlack, others?\n        \"\"\"\n        range = self.get_range(range).Borders(side)\n        range.LineStyle = line_style\n        range.Color = color\n      def sort(self, range, key_cell):\n        \"\"\"\n        Sort the specified 'range' of the activeworksheet by the\n        specified 'key_cell'.\n        \"\"\"\n        range.Sort(Key1=self.get_range(key_cell), Order1=1, Header=0, OrderCustom=1, MatchCase=False, Orientation=1)\n      def hide_row(self, row, hide=True):\n        \"\"\"\n        Hide the specified 'row'.\n        Specify hide=False to show the row.\n        \"\"\"\n        self.get_range('a%s' % row).EntireRow.Hidden = hide\n      def hide_column(self, column, hide=True):\n        \"\"\"\n        Hide the specified 'column'.\n        Specify hide=False to show the column.\n        \"\"\"\n        self.get_range('%s1' % column).EntireColumn.Hidden = hide\n      def delete_row(self, row, shift=directionUp):\n        \"\"\"\n        Delete the entire 'row'.\n        \"\"\"\n        self.get_range('a%s' % row).EntireRow.Delete(Shift=shift)\n      def delete_column(self, column, shift=directionLeft):\n        \"\"\"\n        Delete the entire 'column'.\n        \"\"\"\n        self.get_range('%s1' % column).EntireColumn.Delete(Shift=shift)\n      def fit_column(self, column):\n        \"\"\"\n        Resize the specified 'column' to fit all its contents.\n        \"\"\"\n        self.get_range('%s1' % column).EntireColumn.AutoFit()\n      def save(self):\n        \"\"\"\n        Save the active workbook.\n        \"\"\"\n        self.app.ActiveWorkbook.Save()\n      def save_as(self, filename, delete_existing=False):\n        \"\"\"\n        Save the active workbook as a different filename.\n        If 'delete_existing' is specified and the file already\n        exists, it will be deleted before saving.\n        \"\"\"\n        if delete_existing and os.path.exists(filename):\n          os.remove(filename)\n        self.app.ActiveWorkbook.SaveAs(filename)\n      def print_out(self):\n        \"\"\"\n        Print the active workbook.\n        \"\"\"\n        self.app.Application.PrintOut()\n      def close(self):\n        \"\"\"\n        Close the active workbook.\n        \"\"\"\n        self.app.ActiveWorkbook.Close()\n      def quit(self):\n        \"\"\"\n        Quit Excel.\n        \"\"\"\n        return self.app.Quit()\n    \n\n### 基本使用方法\n\n    # -*- encoding: utf8 -*-\n    \n    # 配置项\n    import os\n    import shutil\n    import re\n    import time\n    import win32com\n    from win32com.client import constants\n    import xlrd\n    XlsFile = 'default.xls'                  # 需要的数据\n    OldStrs = ['#CatalogNumber#',\n               '#ProductName#',\n               '#OSpecies#',\n               '#Short#',\n               '#Organism#',\n               '#Fragment#',\n               '#PROTEIN#',\n               '#Tag#'\n               ]\n    \n    # 确认模板类型\n    DefaultFile = raw_input('Want to use ihc.jpg,input \\'Y\\',or input \\'N\\':\\n')\n    if DefaultFile == 'N':\n        DocFile = os.path.abspath('default_noihc.doc')\n        print DocFile\n    elif DefaultFile == 'Y':\n        DocFile = os.path.abspath('default.doc')\n        print DocFile\n    else:\n        raise\n    filepath = 'D:/Py/CreateAntibodyWord/NewFile'    # 生成文件目录\n    \n    \n    # 获取括号内容的正则表达式\n    patt = re.compile(r\"\\((.*?)\\)\", re.I | re.X)\n    \n    # 打开初始化word文档\n    w = win32com.client.Dispatch('Word.Application')\n    w.Visible = 0\n    w.DisplayAlerts = 0\n    \n    # 从excel表格中导入数据\n    \n    data = xlrd.open_workbook(XlsFile) \n    table = data.sheets()[0]\n    nrows = table.nrows\n    \n    # 循环表格中的内容\n    for i in range(1, nrows):\n        try:\n            # 获取新的数据\n            CatalogNumber = table.row_values(i)[0]\n            ProductName = table.row_values(i)[1]\n            OrganismSpecies = table.row_values(i)[2]\n            Tag = table.row_values(i)[3]\n            Fragment = table.row_values(i)[4]\n            Short = patt.findall(ProductName)[0]\n            # 获取对应蛋白的货号\n            ProteinNumber = re.sub(r'^PA', r'RP', CatalogNumber)\n            # Ge多物种没有缩写，用General替代\n            Organism = patt.findall(OrganismSpecies)\n            if len(Organism) > 0:\n                Organism = Organism[0]\n            else:\n                Organism = 'General'\n            # 没有氨基酸片段信息的用原始值替代\n            Fragment = patt.findall(Fragment)\n            if len(Fragment) > 0:\n                Fragment = Fragment[0]\n            else:\n                Fragment = '#Fragment#'\n            NewStrs = [CatalogNumber,\n                       ProductName,\n                       OrganismSpecies,\n                       Short,\n                       Organism,\n                       Fragment,\n                       ProteinNumber,\n                       Tag\n                       ]\n    \n            # 打开复制的文件\n            NewFileName = CatalogNumber + '-e.doc'                                        # 命名新的文件\n            shutil.copyfile(DocFile, filepath + '/' + NewFileName)                        # 复制新的文件\n            CopyFile = os.path.abspath(filepath + '/' + NewFileName)                      # 新的文件目录\n            doc = w.Documents.Open(FileName=CopyFile)                                     # 打开文件\n    \n            # 文本框处理\n            canvas = doc.Shapes[2]\n            canvas.TextFrame.TextRange.Find.Execute(OldStrs[3], False, False, False, False, False, True, 1, True, NewStrs[3], 2)\n            canvas.TextFrame.TextRange.Find.Execute(OldStrs[4], False, False, False, False, False, True, 1, True, NewStrs[4], 2)\n    \n            # 正文文字处理\n            w.Selection.Find.ClearFormatting()\n            w.Selection.Find.Replacement.ClearFormatting()\n            for j in range(len(NewStrs)):\n                w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)\n    \n            # 获取属性信息并修改,参考https://msdn.microsoft.com/en-us/library/microsoft.office.tools.excel.workbook.builtindocumentproperties(v=vs.120).aspx?cs-save-lang=1&cs-lang=vb#code-snippet-1\n            doc.BuiltInDocumentProperties('Title').Value = ProductName\n            doc.BuiltInDocumentProperties('Subject').Value = 'Instruction manual (Catalog No.' + CatalogNumber + ')'\n            doc.BuiltInDocumentProperties('Keywords').Value = ProductName\n            doc.BuiltInDocumentProperties('Category').Value = OrganismSpecies\n    \n            # 保存文件并关闭\n            doc.Save()\n            doc.Close()\n            print CatalogNumber + ' create word success!'\n    \n        # 捕获异常并写入log文件中\n        except Exception, e:\n            print CatalogNumber + ' create word error!'\n            print e\n            errorfile = open(filepath + '/errorlog.txt', 'a')\n            try:\n                errorfile.write(CatalogNumber + ' create word error! ' + time.strftime('%Y-%m-%d %H:%M:%S') + '\\n')\n            except Exception, e:\n                doc.Close()\n                w.Quit()\n                raise e\n            finally:\n                errorfile.close()\n    w.Quit()        \n    \n    \n\n### 替换Word文档属性里的详细信息\n\n            doc.BuiltInDocumentProperties('Title').Value = ProductName\n            doc.BuiltInDocumentProperties('Subject').Value = 'Instruction manual (Catalog No.' + CatalogNumber + ')'\n            doc.BuiltInDocumentProperties('Keywords').Value = ProductName\n            doc.BuiltInDocumentProperties('Category').Value = Ospecies\n    \n\n参考[微软官方说明](http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box)\n\n### 替换Word长文本\n\n使用以下语句替换长文本会报错\"字符串过长\"\n\n    w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)\n    \n\n使用以下语句\n\n    find = w.Selection.Find\n    find.Text = '#SEQUENCE#'\n    while w.Selection.Find.Execute():\n        w.Selection.TypeText(Text=SEQUENCE)\n    \n\n### 替换Word文本框内容\n\n参考以下代码 [http://stackoverflow.com/](http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box)\n\n    import win32com.client\n    \n    word = win32com.client.Dispatch(\"Word.Application\")\n    canvas = word.ActiveDocument.Shapes[0]\n    for item in canvas.CanvasItems:\n        print item.TextFrame.TextRange.Text\n    \n\n或者\n\n    find = shp.TextFrame.TextRange.Find\n    find.Text = source\n    find.Replacement.Text = target\n    find.Execute(Replace=1, Forward=True)","source":"_posts/利用Python从EXCEL导出数据并批量替换WORD文档内容.md","raw":"---\ntitle: 利用Python从EXCEL导出数据并批量替换WORD文档内容\ntags:\n  - python\nurl: 26.html\nid: 26\ncomments: false\ncategories:\n  - 办公\n  - 运维\ndate: 2016-11-09 10:07:56\n---\n\n### 老外的代码\n\n第一个是操作word，第二个是操作excel\n\n    from win32com.client import constants, Dispatch\n    import pythoncom\n    wdStory = 6\n    class WordDocument(object):\n      \"\"\"\n      Some convenience methods for Word documents accessed\n      through COM.\n      \"\"\"\n    \n      def __init__(self, visible=False):\n        self.app = Dispatch(\"Word.Application\")\n        self.app.Visible = visible\n    \n      def new(self, filename=None):\n        \"\"\"\n        Create a new Word document. If 'filename' specified,\n        use the file as a template.\n        \"\"\"\n        self.app.Documents.Add(filename)\n    \n      def open(self, filename):\n        \"\"\"\n        Open an existing Word document for editing.\n        \"\"\"\n        self.app.Documents.Open(filename)\n    \n      def save(self, filename=None):\n        \"\"\"\n        Save the active document. If 'filename' is given,\n        do a Save As.\n        \"\"\"\n        if filename:\n          self.app.ActiveDocument.SaveAs(filename)\n        else:\n          self.app.ActiveDocument.Save()\n    \n      def save_as(self, filename):\n        return self.save(filename)\n    \n      def print_out(self):\n        \"\"\"\n        Print the active document.\n        \"\"\"\n        self.app.Application.PrintOut()\n    \n      def close(self):\n        \"\"\"\n        Close the active document.\n        \"\"\"\n        self.app.ActiveDocument.Close()\n    \n      def quit(self):\n        \"\"\"\n        Quit Word.\n        \"\"\"\n        return self.app.Quit()\n    \n      def find_and_replace(self, find_str, replace_str):\n        \"\"\"\n        Find all occurances of 'find_str' and replace with 'replace_str'\n        in the active document.\n        \"\"\"\n        self.app.Selection.HomeKey(Unit=wdStory)\n        find = self.app.Selection.Find\n        find.Text = find_str\n        while self.app.Selection.Find.Execute():\n          self.app.Selection.TypeText(Text=replace_str)\n    \n\n    from win32com.client import constants, Dispatch\n    import pythoncom\n    import os\n    borderTop = 3\n    borderBottom = 4\n    borderLeft = 1\n    borderRight = 2\n    borderSolid = 1\n    borderDashed = 2\n    borderDotted = 3\n    colorBlack = 1\n    directionUp = -4162\n    directionDown = -4121\n    directionLeft = -4131\n    directionRight = -4152\n    class ExcelDocument(object):\n      \"\"\"\n      Some convenience methods for Excel documents accessed\n      through COM.\n      \"\"\"\n      def __init__(self, visible=False):\n        self.app = Dispatch(\"Excel.Application\")\n        self.app.Visible = visible\n        self.sheet = 1\n      def new(self, filename=None):\n        \"\"\"\n        Create a new Excel workbook. If 'filename' specified,\n        use the file as a template.\n        \"\"\"\n        self.app.Workbooks.Add(filename)\n      def open(self, filename):\n        \"\"\"\n        Open an existing Excel workbook for editing.\n        \"\"\"\n        self.app.Workbooks.Open(filename)\n      def set_sheet(self, sheet):\n        \"\"\"\n        Set the active worksheet.\n        \"\"\"\n        self.sheet = sheet\n      def get_range(self, range):\n        \"\"\"\n        Get a range object for the specified range or single cell.\n        \"\"\"\n        return self.app.ActiveWorkbook.Sheets(self.sheet).Range(range)\n      def set_value(self, cell, value=''):\n        \"\"\"\n        Set the value of 'cell' to 'value'.\n        \"\"\"\n        self.get_range(cell).Value = value\n      def get_value(self, cell):\n        \"\"\"\n        Get the value of 'cell'.\n        \"\"\"\n        value = self.get_range(cell).Value\n        if isinstance(value, tuple):\n          value = [v[0] for v in value]\n        return value\n      def set_border(self, range, side, line_style=borderSolid, color=colorBlack):\n        \"\"\"\n        Set a border on the specified range of cells or single cell.\n        'range' = range of cells or single cell\n        'side' = one of borderTop, borderBottom, borderLeft, borderRight\n        'line_style' = one of borderSolid, borderDashed, borderDotted, others?\n        'color' = one of colorBlack, others?\n        \"\"\"\n        range = self.get_range(range).Borders(side)\n        range.LineStyle = line_style\n        range.Color = color\n      def sort(self, range, key_cell):\n        \"\"\"\n        Sort the specified 'range' of the activeworksheet by the\n        specified 'key_cell'.\n        \"\"\"\n        range.Sort(Key1=self.get_range(key_cell), Order1=1, Header=0, OrderCustom=1, MatchCase=False, Orientation=1)\n      def hide_row(self, row, hide=True):\n        \"\"\"\n        Hide the specified 'row'.\n        Specify hide=False to show the row.\n        \"\"\"\n        self.get_range('a%s' % row).EntireRow.Hidden = hide\n      def hide_column(self, column, hide=True):\n        \"\"\"\n        Hide the specified 'column'.\n        Specify hide=False to show the column.\n        \"\"\"\n        self.get_range('%s1' % column).EntireColumn.Hidden = hide\n      def delete_row(self, row, shift=directionUp):\n        \"\"\"\n        Delete the entire 'row'.\n        \"\"\"\n        self.get_range('a%s' % row).EntireRow.Delete(Shift=shift)\n      def delete_column(self, column, shift=directionLeft):\n        \"\"\"\n        Delete the entire 'column'.\n        \"\"\"\n        self.get_range('%s1' % column).EntireColumn.Delete(Shift=shift)\n      def fit_column(self, column):\n        \"\"\"\n        Resize the specified 'column' to fit all its contents.\n        \"\"\"\n        self.get_range('%s1' % column).EntireColumn.AutoFit()\n      def save(self):\n        \"\"\"\n        Save the active workbook.\n        \"\"\"\n        self.app.ActiveWorkbook.Save()\n      def save_as(self, filename, delete_existing=False):\n        \"\"\"\n        Save the active workbook as a different filename.\n        If 'delete_existing' is specified and the file already\n        exists, it will be deleted before saving.\n        \"\"\"\n        if delete_existing and os.path.exists(filename):\n          os.remove(filename)\n        self.app.ActiveWorkbook.SaveAs(filename)\n      def print_out(self):\n        \"\"\"\n        Print the active workbook.\n        \"\"\"\n        self.app.Application.PrintOut()\n      def close(self):\n        \"\"\"\n        Close the active workbook.\n        \"\"\"\n        self.app.ActiveWorkbook.Close()\n      def quit(self):\n        \"\"\"\n        Quit Excel.\n        \"\"\"\n        return self.app.Quit()\n    \n\n### 基本使用方法\n\n    # -*- encoding: utf8 -*-\n    \n    # 配置项\n    import os\n    import shutil\n    import re\n    import time\n    import win32com\n    from win32com.client import constants\n    import xlrd\n    XlsFile = 'default.xls'                  # 需要的数据\n    OldStrs = ['#CatalogNumber#',\n               '#ProductName#',\n               '#OSpecies#',\n               '#Short#',\n               '#Organism#',\n               '#Fragment#',\n               '#PROTEIN#',\n               '#Tag#'\n               ]\n    \n    # 确认模板类型\n    DefaultFile = raw_input('Want to use ihc.jpg,input \\'Y\\',or input \\'N\\':\\n')\n    if DefaultFile == 'N':\n        DocFile = os.path.abspath('default_noihc.doc')\n        print DocFile\n    elif DefaultFile == 'Y':\n        DocFile = os.path.abspath('default.doc')\n        print DocFile\n    else:\n        raise\n    filepath = 'D:/Py/CreateAntibodyWord/NewFile'    # 生成文件目录\n    \n    \n    # 获取括号内容的正则表达式\n    patt = re.compile(r\"\\((.*?)\\)\", re.I | re.X)\n    \n    # 打开初始化word文档\n    w = win32com.client.Dispatch('Word.Application')\n    w.Visible = 0\n    w.DisplayAlerts = 0\n    \n    # 从excel表格中导入数据\n    \n    data = xlrd.open_workbook(XlsFile) \n    table = data.sheets()[0]\n    nrows = table.nrows\n    \n    # 循环表格中的内容\n    for i in range(1, nrows):\n        try:\n            # 获取新的数据\n            CatalogNumber = table.row_values(i)[0]\n            ProductName = table.row_values(i)[1]\n            OrganismSpecies = table.row_values(i)[2]\n            Tag = table.row_values(i)[3]\n            Fragment = table.row_values(i)[4]\n            Short = patt.findall(ProductName)[0]\n            # 获取对应蛋白的货号\n            ProteinNumber = re.sub(r'^PA', r'RP', CatalogNumber)\n            # Ge多物种没有缩写，用General替代\n            Organism = patt.findall(OrganismSpecies)\n            if len(Organism) > 0:\n                Organism = Organism[0]\n            else:\n                Organism = 'General'\n            # 没有氨基酸片段信息的用原始值替代\n            Fragment = patt.findall(Fragment)\n            if len(Fragment) > 0:\n                Fragment = Fragment[0]\n            else:\n                Fragment = '#Fragment#'\n            NewStrs = [CatalogNumber,\n                       ProductName,\n                       OrganismSpecies,\n                       Short,\n                       Organism,\n                       Fragment,\n                       ProteinNumber,\n                       Tag\n                       ]\n    \n            # 打开复制的文件\n            NewFileName = CatalogNumber + '-e.doc'                                        # 命名新的文件\n            shutil.copyfile(DocFile, filepath + '/' + NewFileName)                        # 复制新的文件\n            CopyFile = os.path.abspath(filepath + '/' + NewFileName)                      # 新的文件目录\n            doc = w.Documents.Open(FileName=CopyFile)                                     # 打开文件\n    \n            # 文本框处理\n            canvas = doc.Shapes[2]\n            canvas.TextFrame.TextRange.Find.Execute(OldStrs[3], False, False, False, False, False, True, 1, True, NewStrs[3], 2)\n            canvas.TextFrame.TextRange.Find.Execute(OldStrs[4], False, False, False, False, False, True, 1, True, NewStrs[4], 2)\n    \n            # 正文文字处理\n            w.Selection.Find.ClearFormatting()\n            w.Selection.Find.Replacement.ClearFormatting()\n            for j in range(len(NewStrs)):\n                w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)\n    \n            # 获取属性信息并修改,参考https://msdn.microsoft.com/en-us/library/microsoft.office.tools.excel.workbook.builtindocumentproperties(v=vs.120).aspx?cs-save-lang=1&cs-lang=vb#code-snippet-1\n            doc.BuiltInDocumentProperties('Title').Value = ProductName\n            doc.BuiltInDocumentProperties('Subject').Value = 'Instruction manual (Catalog No.' + CatalogNumber + ')'\n            doc.BuiltInDocumentProperties('Keywords').Value = ProductName\n            doc.BuiltInDocumentProperties('Category').Value = OrganismSpecies\n    \n            # 保存文件并关闭\n            doc.Save()\n            doc.Close()\n            print CatalogNumber + ' create word success!'\n    \n        # 捕获异常并写入log文件中\n        except Exception, e:\n            print CatalogNumber + ' create word error!'\n            print e\n            errorfile = open(filepath + '/errorlog.txt', 'a')\n            try:\n                errorfile.write(CatalogNumber + ' create word error! ' + time.strftime('%Y-%m-%d %H:%M:%S') + '\\n')\n            except Exception, e:\n                doc.Close()\n                w.Quit()\n                raise e\n            finally:\n                errorfile.close()\n    w.Quit()        \n    \n    \n\n### 替换Word文档属性里的详细信息\n\n            doc.BuiltInDocumentProperties('Title').Value = ProductName\n            doc.BuiltInDocumentProperties('Subject').Value = 'Instruction manual (Catalog No.' + CatalogNumber + ')'\n            doc.BuiltInDocumentProperties('Keywords').Value = ProductName\n            doc.BuiltInDocumentProperties('Category').Value = Ospecies\n    \n\n参考[微软官方说明](http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box)\n\n### 替换Word长文本\n\n使用以下语句替换长文本会报错\"字符串过长\"\n\n    w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)\n    \n\n使用以下语句\n\n    find = w.Selection.Find\n    find.Text = '#SEQUENCE#'\n    while w.Selection.Find.Execute():\n        w.Selection.TypeText(Text=SEQUENCE)\n    \n\n### 替换Word文本框内容\n\n参考以下代码 [http://stackoverflow.com/](http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box)\n\n    import win32com.client\n    \n    word = win32com.client.Dispatch(\"Word.Application\")\n    canvas = word.ActiveDocument.Shapes[0]\n    for item in canvas.CanvasItems:\n        print item.TextFrame.TextRange.Text\n    \n\n或者\n\n    find = shp.TextFrame.TextRange.Find\n    find.Text = source\n    find.Replacement.Text = target\n    find.Execute(Replace=1, Forward=True)","slug":"利用Python从EXCEL导出数据并批量替换WORD文档内容","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt5004ch3a4e6unh94h","content":"<h3 id=\"老外的代码\"><a href=\"#老外的代码\" class=\"headerlink\" title=\"老外的代码\"></a>老外的代码</h3><p>第一个是操作word，第二个是操作excel</p>\n<pre><code>from win32com.client import constants, Dispatch\nimport pythoncom\nwdStory = 6\nclass WordDocument(object):\n  &quot;&quot;&quot;\n  Some convenience methods for Word documents accessed\n  through COM.\n  &quot;&quot;&quot;\n\n  def __init__(self, visible=False):\n    self.app = Dispatch(&quot;Word.Application&quot;)\n    self.app.Visible = visible\n\n  def new(self, filename=None):\n    &quot;&quot;&quot;\n    Create a new Word document. If &apos;filename&apos; specified,\n    use the file as a template.\n    &quot;&quot;&quot;\n    self.app.Documents.Add(filename)\n\n  def open(self, filename):\n    &quot;&quot;&quot;\n    Open an existing Word document for editing.\n    &quot;&quot;&quot;\n    self.app.Documents.Open(filename)\n\n  def save(self, filename=None):\n    &quot;&quot;&quot;\n    Save the active document. If &apos;filename&apos; is given,\n    do a Save As.\n    &quot;&quot;&quot;\n    if filename:\n      self.app.ActiveDocument.SaveAs(filename)\n    else:\n      self.app.ActiveDocument.Save()\n\n  def save_as(self, filename):\n    return self.save(filename)\n\n  def print_out(self):\n    &quot;&quot;&quot;\n    Print the active document.\n    &quot;&quot;&quot;\n    self.app.Application.PrintOut()\n\n  def close(self):\n    &quot;&quot;&quot;\n    Close the active document.\n    &quot;&quot;&quot;\n    self.app.ActiveDocument.Close()\n\n  def quit(self):\n    &quot;&quot;&quot;\n    Quit Word.\n    &quot;&quot;&quot;\n    return self.app.Quit()\n\n  def find_and_replace(self, find_str, replace_str):\n    &quot;&quot;&quot;\n    Find all occurances of &apos;find_str&apos; and replace with &apos;replace_str&apos;\n    in the active document.\n    &quot;&quot;&quot;\n    self.app.Selection.HomeKey(Unit=wdStory)\n    find = self.app.Selection.Find\n    find.Text = find_str\n    while self.app.Selection.Find.Execute():\n      self.app.Selection.TypeText(Text=replace_str)\n\n\nfrom win32com.client import constants, Dispatch\nimport pythoncom\nimport os\nborderTop = 3\nborderBottom = 4\nborderLeft = 1\nborderRight = 2\nborderSolid = 1\nborderDashed = 2\nborderDotted = 3\ncolorBlack = 1\ndirectionUp = -4162\ndirectionDown = -4121\ndirectionLeft = -4131\ndirectionRight = -4152\nclass ExcelDocument(object):\n  &quot;&quot;&quot;\n  Some convenience methods for Excel documents accessed\n  through COM.\n  &quot;&quot;&quot;\n  def __init__(self, visible=False):\n    self.app = Dispatch(&quot;Excel.Application&quot;)\n    self.app.Visible = visible\n    self.sheet = 1\n  def new(self, filename=None):\n    &quot;&quot;&quot;\n    Create a new Excel workbook. If &apos;filename&apos; specified,\n    use the file as a template.\n    &quot;&quot;&quot;\n    self.app.Workbooks.Add(filename)\n  def open(self, filename):\n    &quot;&quot;&quot;\n    Open an existing Excel workbook for editing.\n    &quot;&quot;&quot;\n    self.app.Workbooks.Open(filename)\n  def set_sheet(self, sheet):\n    &quot;&quot;&quot;\n    Set the active worksheet.\n    &quot;&quot;&quot;\n    self.sheet = sheet\n  def get_range(self, range):\n    &quot;&quot;&quot;\n    Get a range object for the specified range or single cell.\n    &quot;&quot;&quot;\n    return self.app.ActiveWorkbook.Sheets(self.sheet).Range(range)\n  def set_value(self, cell, value=&apos;&apos;):\n    &quot;&quot;&quot;\n    Set the value of &apos;cell&apos; to &apos;value&apos;.\n    &quot;&quot;&quot;\n    self.get_range(cell).Value = value\n  def get_value(self, cell):\n    &quot;&quot;&quot;\n    Get the value of &apos;cell&apos;.\n    &quot;&quot;&quot;\n    value = self.get_range(cell).Value\n    if isinstance(value, tuple):\n      value = [v[0] for v in value]\n    return value\n  def set_border(self, range, side, line_style=borderSolid, color=colorBlack):\n    &quot;&quot;&quot;\n    Set a border on the specified range of cells or single cell.\n    &apos;range&apos; = range of cells or single cell\n    &apos;side&apos; = one of borderTop, borderBottom, borderLeft, borderRight\n    &apos;line_style&apos; = one of borderSolid, borderDashed, borderDotted, others?\n    &apos;color&apos; = one of colorBlack, others?\n    &quot;&quot;&quot;\n    range = self.get_range(range).Borders(side)\n    range.LineStyle = line_style\n    range.Color = color\n  def sort(self, range, key_cell):\n    &quot;&quot;&quot;\n    Sort the specified &apos;range&apos; of the activeworksheet by the\n    specified &apos;key_cell&apos;.\n    &quot;&quot;&quot;\n    range.Sort(Key1=self.get_range(key_cell), Order1=1, Header=0, OrderCustom=1, MatchCase=False, Orientation=1)\n  def hide_row(self, row, hide=True):\n    &quot;&quot;&quot;\n    Hide the specified &apos;row&apos;.\n    Specify hide=False to show the row.\n    &quot;&quot;&quot;\n    self.get_range(&apos;a%s&apos; % row).EntireRow.Hidden = hide\n  def hide_column(self, column, hide=True):\n    &quot;&quot;&quot;\n    Hide the specified &apos;column&apos;.\n    Specify hide=False to show the column.\n    &quot;&quot;&quot;\n    self.get_range(&apos;%s1&apos; % column).EntireColumn.Hidden = hide\n  def delete_row(self, row, shift=directionUp):\n    &quot;&quot;&quot;\n    Delete the entire &apos;row&apos;.\n    &quot;&quot;&quot;\n    self.get_range(&apos;a%s&apos; % row).EntireRow.Delete(Shift=shift)\n  def delete_column(self, column, shift=directionLeft):\n    &quot;&quot;&quot;\n    Delete the entire &apos;column&apos;.\n    &quot;&quot;&quot;\n    self.get_range(&apos;%s1&apos; % column).EntireColumn.Delete(Shift=shift)\n  def fit_column(self, column):\n    &quot;&quot;&quot;\n    Resize the specified &apos;column&apos; to fit all its contents.\n    &quot;&quot;&quot;\n    self.get_range(&apos;%s1&apos; % column).EntireColumn.AutoFit()\n  def save(self):\n    &quot;&quot;&quot;\n    Save the active workbook.\n    &quot;&quot;&quot;\n    self.app.ActiveWorkbook.Save()\n  def save_as(self, filename, delete_existing=False):\n    &quot;&quot;&quot;\n    Save the active workbook as a different filename.\n    If &apos;delete_existing&apos; is specified and the file already\n    exists, it will be deleted before saving.\n    &quot;&quot;&quot;\n    if delete_existing and os.path.exists(filename):\n      os.remove(filename)\n    self.app.ActiveWorkbook.SaveAs(filename)\n  def print_out(self):\n    &quot;&quot;&quot;\n    Print the active workbook.\n    &quot;&quot;&quot;\n    self.app.Application.PrintOut()\n  def close(self):\n    &quot;&quot;&quot;\n    Close the active workbook.\n    &quot;&quot;&quot;\n    self.app.ActiveWorkbook.Close()\n  def quit(self):\n    &quot;&quot;&quot;\n    Quit Excel.\n    &quot;&quot;&quot;\n    return self.app.Quit()</code></pre><h3 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h3><pre><code># -*- encoding: utf8 -*-\n\n# 配置项\nimport os\nimport shutil\nimport re\nimport time\nimport win32com\nfrom win32com.client import constants\nimport xlrd\nXlsFile = &apos;default.xls&apos;                  # 需要的数据\nOldStrs = [&apos;#CatalogNumber#&apos;,\n           &apos;#ProductName#&apos;,\n           &apos;#OSpecies#&apos;,\n           &apos;#Short#&apos;,\n           &apos;#Organism#&apos;,\n           &apos;#Fragment#&apos;,\n           &apos;#PROTEIN#&apos;,\n           &apos;#Tag#&apos;\n           ]\n\n# 确认模板类型\nDefaultFile = raw_input(&apos;Want to use ihc.jpg,input \\&apos;Y\\&apos;,or input \\&apos;N\\&apos;:\\n&apos;)\nif DefaultFile == &apos;N&apos;:\n    DocFile = os.path.abspath(&apos;default_noihc.doc&apos;)\n    print DocFile\nelif DefaultFile == &apos;Y&apos;:\n    DocFile = os.path.abspath(&apos;default.doc&apos;)\n    print DocFile\nelse:\n    raise\nfilepath = &apos;D:/Py/CreateAntibodyWord/NewFile&apos;    # 生成文件目录\n\n\n# 获取括号内容的正则表达式\npatt = re.compile(r&quot;\\((.*?)\\)&quot;, re.I | re.X)\n\n# 打开初始化word文档\nw = win32com.client.Dispatch(&apos;Word.Application&apos;)\nw.Visible = 0\nw.DisplayAlerts = 0\n\n# 从excel表格中导入数据\n\ndata = xlrd.open_workbook(XlsFile) \ntable = data.sheets()[0]\nnrows = table.nrows\n\n# 循环表格中的内容\nfor i in range(1, nrows):\n    try:\n        # 获取新的数据\n        CatalogNumber = table.row_values(i)[0]\n        ProductName = table.row_values(i)[1]\n        OrganismSpecies = table.row_values(i)[2]\n        Tag = table.row_values(i)[3]\n        Fragment = table.row_values(i)[4]\n        Short = patt.findall(ProductName)[0]\n        # 获取对应蛋白的货号\n        ProteinNumber = re.sub(r&apos;^PA&apos;, r&apos;RP&apos;, CatalogNumber)\n        # Ge多物种没有缩写，用General替代\n        Organism = patt.findall(OrganismSpecies)\n        if len(Organism) &gt; 0:\n            Organism = Organism[0]\n        else:\n            Organism = &apos;General&apos;\n        # 没有氨基酸片段信息的用原始值替代\n        Fragment = patt.findall(Fragment)\n        if len(Fragment) &gt; 0:\n            Fragment = Fragment[0]\n        else:\n            Fragment = &apos;#Fragment#&apos;\n        NewStrs = [CatalogNumber,\n                   ProductName,\n                   OrganismSpecies,\n                   Short,\n                   Organism,\n                   Fragment,\n                   ProteinNumber,\n                   Tag\n                   ]\n\n        # 打开复制的文件\n        NewFileName = CatalogNumber + &apos;-e.doc&apos;                                        # 命名新的文件\n        shutil.copyfile(DocFile, filepath + &apos;/&apos; + NewFileName)                        # 复制新的文件\n        CopyFile = os.path.abspath(filepath + &apos;/&apos; + NewFileName)                      # 新的文件目录\n        doc = w.Documents.Open(FileName=CopyFile)                                     # 打开文件\n\n        # 文本框处理\n        canvas = doc.Shapes[2]\n        canvas.TextFrame.TextRange.Find.Execute(OldStrs[3], False, False, False, False, False, True, 1, True, NewStrs[3], 2)\n        canvas.TextFrame.TextRange.Find.Execute(OldStrs[4], False, False, False, False, False, True, 1, True, NewStrs[4], 2)\n\n        # 正文文字处理\n        w.Selection.Find.ClearFormatting()\n        w.Selection.Find.Replacement.ClearFormatting()\n        for j in range(len(NewStrs)):\n            w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)\n\n        # 获取属性信息并修改,参考https://msdn.microsoft.com/en-us/library/microsoft.office.tools.excel.workbook.builtindocumentproperties(v=vs.120).aspx?cs-save-lang=1&amp;cs-lang=vb#code-snippet-1\n        doc.BuiltInDocumentProperties(&apos;Title&apos;).Value = ProductName\n        doc.BuiltInDocumentProperties(&apos;Subject&apos;).Value = &apos;Instruction manual (Catalog No.&apos; + CatalogNumber + &apos;)&apos;\n        doc.BuiltInDocumentProperties(&apos;Keywords&apos;).Value = ProductName\n        doc.BuiltInDocumentProperties(&apos;Category&apos;).Value = OrganismSpecies\n\n        # 保存文件并关闭\n        doc.Save()\n        doc.Close()\n        print CatalogNumber + &apos; create word success!&apos;\n\n    # 捕获异常并写入log文件中\n    except Exception, e:\n        print CatalogNumber + &apos; create word error!&apos;\n        print e\n        errorfile = open(filepath + &apos;/errorlog.txt&apos;, &apos;a&apos;)\n        try:\n            errorfile.write(CatalogNumber + &apos; create word error! &apos; + time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) + &apos;\\n&apos;)\n        except Exception, e:\n            doc.Close()\n            w.Quit()\n            raise e\n        finally:\n            errorfile.close()\nw.Quit()        </code></pre><h3 id=\"替换Word文档属性里的详细信息\"><a href=\"#替换Word文档属性里的详细信息\" class=\"headerlink\" title=\"替换Word文档属性里的详细信息\"></a>替换Word文档属性里的详细信息</h3><pre><code>doc.BuiltInDocumentProperties(&apos;Title&apos;).Value = ProductName\ndoc.BuiltInDocumentProperties(&apos;Subject&apos;).Value = &apos;Instruction manual (Catalog No.&apos; + CatalogNumber + &apos;)&apos;\ndoc.BuiltInDocumentProperties(&apos;Keywords&apos;).Value = ProductName\ndoc.BuiltInDocumentProperties(&apos;Category&apos;).Value = Ospecies</code></pre><p>参考<a href=\"http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box\" target=\"_blank\" rel=\"noopener\">微软官方说明</a></p>\n<h3 id=\"替换Word长文本\"><a href=\"#替换Word长文本\" class=\"headerlink\" title=\"替换Word长文本\"></a>替换Word长文本</h3><p>使用以下语句替换长文本会报错”字符串过长”</p>\n<pre><code>w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)</code></pre><p>使用以下语句</p>\n<pre><code>find = w.Selection.Find\nfind.Text = &apos;#SEQUENCE#&apos;\nwhile w.Selection.Find.Execute():\n    w.Selection.TypeText(Text=SEQUENCE)</code></pre><h3 id=\"替换Word文本框内容\"><a href=\"#替换Word文本框内容\" class=\"headerlink\" title=\"替换Word文本框内容\"></a>替换Word文本框内容</h3><p>参考以下代码 <a href=\"http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/</a></p>\n<pre><code>import win32com.client\n\nword = win32com.client.Dispatch(&quot;Word.Application&quot;)\ncanvas = word.ActiveDocument.Shapes[0]\nfor item in canvas.CanvasItems:\n    print item.TextFrame.TextRange.Text</code></pre><p>或者</p>\n<pre><code>find = shp.TextFrame.TextRange.Find\nfind.Text = source\nfind.Replacement.Text = target\nfind.Execute(Replace=1, Forward=True)</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"老外的代码\"><a href=\"#老外的代码\" class=\"headerlink\" title=\"老外的代码\"></a>老外的代码</h3><p>第一个是操作word，第二个是操作excel</p>\n<pre><code>from win32com.client import constants, Dispatch\nimport pythoncom\nwdStory = 6\nclass WordDocument(object):\n  &quot;&quot;&quot;\n  Some convenience methods for Word documents accessed\n  through COM.\n  &quot;&quot;&quot;\n\n  def __init__(self, visible=False):\n    self.app = Dispatch(&quot;Word.Application&quot;)\n    self.app.Visible = visible\n\n  def new(self, filename=None):\n    &quot;&quot;&quot;\n    Create a new Word document. If &apos;filename&apos; specified,\n    use the file as a template.\n    &quot;&quot;&quot;\n    self.app.Documents.Add(filename)\n\n  def open(self, filename):\n    &quot;&quot;&quot;\n    Open an existing Word document for editing.\n    &quot;&quot;&quot;\n    self.app.Documents.Open(filename)\n\n  def save(self, filename=None):\n    &quot;&quot;&quot;\n    Save the active document. If &apos;filename&apos; is given,\n    do a Save As.\n    &quot;&quot;&quot;\n    if filename:\n      self.app.ActiveDocument.SaveAs(filename)\n    else:\n      self.app.ActiveDocument.Save()\n\n  def save_as(self, filename):\n    return self.save(filename)\n\n  def print_out(self):\n    &quot;&quot;&quot;\n    Print the active document.\n    &quot;&quot;&quot;\n    self.app.Application.PrintOut()\n\n  def close(self):\n    &quot;&quot;&quot;\n    Close the active document.\n    &quot;&quot;&quot;\n    self.app.ActiveDocument.Close()\n\n  def quit(self):\n    &quot;&quot;&quot;\n    Quit Word.\n    &quot;&quot;&quot;\n    return self.app.Quit()\n\n  def find_and_replace(self, find_str, replace_str):\n    &quot;&quot;&quot;\n    Find all occurances of &apos;find_str&apos; and replace with &apos;replace_str&apos;\n    in the active document.\n    &quot;&quot;&quot;\n    self.app.Selection.HomeKey(Unit=wdStory)\n    find = self.app.Selection.Find\n    find.Text = find_str\n    while self.app.Selection.Find.Execute():\n      self.app.Selection.TypeText(Text=replace_str)\n\n\nfrom win32com.client import constants, Dispatch\nimport pythoncom\nimport os\nborderTop = 3\nborderBottom = 4\nborderLeft = 1\nborderRight = 2\nborderSolid = 1\nborderDashed = 2\nborderDotted = 3\ncolorBlack = 1\ndirectionUp = -4162\ndirectionDown = -4121\ndirectionLeft = -4131\ndirectionRight = -4152\nclass ExcelDocument(object):\n  &quot;&quot;&quot;\n  Some convenience methods for Excel documents accessed\n  through COM.\n  &quot;&quot;&quot;\n  def __init__(self, visible=False):\n    self.app = Dispatch(&quot;Excel.Application&quot;)\n    self.app.Visible = visible\n    self.sheet = 1\n  def new(self, filename=None):\n    &quot;&quot;&quot;\n    Create a new Excel workbook. If &apos;filename&apos; specified,\n    use the file as a template.\n    &quot;&quot;&quot;\n    self.app.Workbooks.Add(filename)\n  def open(self, filename):\n    &quot;&quot;&quot;\n    Open an existing Excel workbook for editing.\n    &quot;&quot;&quot;\n    self.app.Workbooks.Open(filename)\n  def set_sheet(self, sheet):\n    &quot;&quot;&quot;\n    Set the active worksheet.\n    &quot;&quot;&quot;\n    self.sheet = sheet\n  def get_range(self, range):\n    &quot;&quot;&quot;\n    Get a range object for the specified range or single cell.\n    &quot;&quot;&quot;\n    return self.app.ActiveWorkbook.Sheets(self.sheet).Range(range)\n  def set_value(self, cell, value=&apos;&apos;):\n    &quot;&quot;&quot;\n    Set the value of &apos;cell&apos; to &apos;value&apos;.\n    &quot;&quot;&quot;\n    self.get_range(cell).Value = value\n  def get_value(self, cell):\n    &quot;&quot;&quot;\n    Get the value of &apos;cell&apos;.\n    &quot;&quot;&quot;\n    value = self.get_range(cell).Value\n    if isinstance(value, tuple):\n      value = [v[0] for v in value]\n    return value\n  def set_border(self, range, side, line_style=borderSolid, color=colorBlack):\n    &quot;&quot;&quot;\n    Set a border on the specified range of cells or single cell.\n    &apos;range&apos; = range of cells or single cell\n    &apos;side&apos; = one of borderTop, borderBottom, borderLeft, borderRight\n    &apos;line_style&apos; = one of borderSolid, borderDashed, borderDotted, others?\n    &apos;color&apos; = one of colorBlack, others?\n    &quot;&quot;&quot;\n    range = self.get_range(range).Borders(side)\n    range.LineStyle = line_style\n    range.Color = color\n  def sort(self, range, key_cell):\n    &quot;&quot;&quot;\n    Sort the specified &apos;range&apos; of the activeworksheet by the\n    specified &apos;key_cell&apos;.\n    &quot;&quot;&quot;\n    range.Sort(Key1=self.get_range(key_cell), Order1=1, Header=0, OrderCustom=1, MatchCase=False, Orientation=1)\n  def hide_row(self, row, hide=True):\n    &quot;&quot;&quot;\n    Hide the specified &apos;row&apos;.\n    Specify hide=False to show the row.\n    &quot;&quot;&quot;\n    self.get_range(&apos;a%s&apos; % row).EntireRow.Hidden = hide\n  def hide_column(self, column, hide=True):\n    &quot;&quot;&quot;\n    Hide the specified &apos;column&apos;.\n    Specify hide=False to show the column.\n    &quot;&quot;&quot;\n    self.get_range(&apos;%s1&apos; % column).EntireColumn.Hidden = hide\n  def delete_row(self, row, shift=directionUp):\n    &quot;&quot;&quot;\n    Delete the entire &apos;row&apos;.\n    &quot;&quot;&quot;\n    self.get_range(&apos;a%s&apos; % row).EntireRow.Delete(Shift=shift)\n  def delete_column(self, column, shift=directionLeft):\n    &quot;&quot;&quot;\n    Delete the entire &apos;column&apos;.\n    &quot;&quot;&quot;\n    self.get_range(&apos;%s1&apos; % column).EntireColumn.Delete(Shift=shift)\n  def fit_column(self, column):\n    &quot;&quot;&quot;\n    Resize the specified &apos;column&apos; to fit all its contents.\n    &quot;&quot;&quot;\n    self.get_range(&apos;%s1&apos; % column).EntireColumn.AutoFit()\n  def save(self):\n    &quot;&quot;&quot;\n    Save the active workbook.\n    &quot;&quot;&quot;\n    self.app.ActiveWorkbook.Save()\n  def save_as(self, filename, delete_existing=False):\n    &quot;&quot;&quot;\n    Save the active workbook as a different filename.\n    If &apos;delete_existing&apos; is specified and the file already\n    exists, it will be deleted before saving.\n    &quot;&quot;&quot;\n    if delete_existing and os.path.exists(filename):\n      os.remove(filename)\n    self.app.ActiveWorkbook.SaveAs(filename)\n  def print_out(self):\n    &quot;&quot;&quot;\n    Print the active workbook.\n    &quot;&quot;&quot;\n    self.app.Application.PrintOut()\n  def close(self):\n    &quot;&quot;&quot;\n    Close the active workbook.\n    &quot;&quot;&quot;\n    self.app.ActiveWorkbook.Close()\n  def quit(self):\n    &quot;&quot;&quot;\n    Quit Excel.\n    &quot;&quot;&quot;\n    return self.app.Quit()</code></pre><h3 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h3><pre><code># -*- encoding: utf8 -*-\n\n# 配置项\nimport os\nimport shutil\nimport re\nimport time\nimport win32com\nfrom win32com.client import constants\nimport xlrd\nXlsFile = &apos;default.xls&apos;                  # 需要的数据\nOldStrs = [&apos;#CatalogNumber#&apos;,\n           &apos;#ProductName#&apos;,\n           &apos;#OSpecies#&apos;,\n           &apos;#Short#&apos;,\n           &apos;#Organism#&apos;,\n           &apos;#Fragment#&apos;,\n           &apos;#PROTEIN#&apos;,\n           &apos;#Tag#&apos;\n           ]\n\n# 确认模板类型\nDefaultFile = raw_input(&apos;Want to use ihc.jpg,input \\&apos;Y\\&apos;,or input \\&apos;N\\&apos;:\\n&apos;)\nif DefaultFile == &apos;N&apos;:\n    DocFile = os.path.abspath(&apos;default_noihc.doc&apos;)\n    print DocFile\nelif DefaultFile == &apos;Y&apos;:\n    DocFile = os.path.abspath(&apos;default.doc&apos;)\n    print DocFile\nelse:\n    raise\nfilepath = &apos;D:/Py/CreateAntibodyWord/NewFile&apos;    # 生成文件目录\n\n\n# 获取括号内容的正则表达式\npatt = re.compile(r&quot;\\((.*?)\\)&quot;, re.I | re.X)\n\n# 打开初始化word文档\nw = win32com.client.Dispatch(&apos;Word.Application&apos;)\nw.Visible = 0\nw.DisplayAlerts = 0\n\n# 从excel表格中导入数据\n\ndata = xlrd.open_workbook(XlsFile) \ntable = data.sheets()[0]\nnrows = table.nrows\n\n# 循环表格中的内容\nfor i in range(1, nrows):\n    try:\n        # 获取新的数据\n        CatalogNumber = table.row_values(i)[0]\n        ProductName = table.row_values(i)[1]\n        OrganismSpecies = table.row_values(i)[2]\n        Tag = table.row_values(i)[3]\n        Fragment = table.row_values(i)[4]\n        Short = patt.findall(ProductName)[0]\n        # 获取对应蛋白的货号\n        ProteinNumber = re.sub(r&apos;^PA&apos;, r&apos;RP&apos;, CatalogNumber)\n        # Ge多物种没有缩写，用General替代\n        Organism = patt.findall(OrganismSpecies)\n        if len(Organism) &gt; 0:\n            Organism = Organism[0]\n        else:\n            Organism = &apos;General&apos;\n        # 没有氨基酸片段信息的用原始值替代\n        Fragment = patt.findall(Fragment)\n        if len(Fragment) &gt; 0:\n            Fragment = Fragment[0]\n        else:\n            Fragment = &apos;#Fragment#&apos;\n        NewStrs = [CatalogNumber,\n                   ProductName,\n                   OrganismSpecies,\n                   Short,\n                   Organism,\n                   Fragment,\n                   ProteinNumber,\n                   Tag\n                   ]\n\n        # 打开复制的文件\n        NewFileName = CatalogNumber + &apos;-e.doc&apos;                                        # 命名新的文件\n        shutil.copyfile(DocFile, filepath + &apos;/&apos; + NewFileName)                        # 复制新的文件\n        CopyFile = os.path.abspath(filepath + &apos;/&apos; + NewFileName)                      # 新的文件目录\n        doc = w.Documents.Open(FileName=CopyFile)                                     # 打开文件\n\n        # 文本框处理\n        canvas = doc.Shapes[2]\n        canvas.TextFrame.TextRange.Find.Execute(OldStrs[3], False, False, False, False, False, True, 1, True, NewStrs[3], 2)\n        canvas.TextFrame.TextRange.Find.Execute(OldStrs[4], False, False, False, False, False, True, 1, True, NewStrs[4], 2)\n\n        # 正文文字处理\n        w.Selection.Find.ClearFormatting()\n        w.Selection.Find.Replacement.ClearFormatting()\n        for j in range(len(NewStrs)):\n            w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)\n\n        # 获取属性信息并修改,参考https://msdn.microsoft.com/en-us/library/microsoft.office.tools.excel.workbook.builtindocumentproperties(v=vs.120).aspx?cs-save-lang=1&amp;cs-lang=vb#code-snippet-1\n        doc.BuiltInDocumentProperties(&apos;Title&apos;).Value = ProductName\n        doc.BuiltInDocumentProperties(&apos;Subject&apos;).Value = &apos;Instruction manual (Catalog No.&apos; + CatalogNumber + &apos;)&apos;\n        doc.BuiltInDocumentProperties(&apos;Keywords&apos;).Value = ProductName\n        doc.BuiltInDocumentProperties(&apos;Category&apos;).Value = OrganismSpecies\n\n        # 保存文件并关闭\n        doc.Save()\n        doc.Close()\n        print CatalogNumber + &apos; create word success!&apos;\n\n    # 捕获异常并写入log文件中\n    except Exception, e:\n        print CatalogNumber + &apos; create word error!&apos;\n        print e\n        errorfile = open(filepath + &apos;/errorlog.txt&apos;, &apos;a&apos;)\n        try:\n            errorfile.write(CatalogNumber + &apos; create word error! &apos; + time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) + &apos;\\n&apos;)\n        except Exception, e:\n            doc.Close()\n            w.Quit()\n            raise e\n        finally:\n            errorfile.close()\nw.Quit()        </code></pre><h3 id=\"替换Word文档属性里的详细信息\"><a href=\"#替换Word文档属性里的详细信息\" class=\"headerlink\" title=\"替换Word文档属性里的详细信息\"></a>替换Word文档属性里的详细信息</h3><pre><code>doc.BuiltInDocumentProperties(&apos;Title&apos;).Value = ProductName\ndoc.BuiltInDocumentProperties(&apos;Subject&apos;).Value = &apos;Instruction manual (Catalog No.&apos; + CatalogNumber + &apos;)&apos;\ndoc.BuiltInDocumentProperties(&apos;Keywords&apos;).Value = ProductName\ndoc.BuiltInDocumentProperties(&apos;Category&apos;).Value = Ospecies</code></pre><p>参考<a href=\"http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box\" target=\"_blank\" rel=\"noopener\">微软官方说明</a></p>\n<h3 id=\"替换Word长文本\"><a href=\"#替换Word长文本\" class=\"headerlink\" title=\"替换Word长文本\"></a>替换Word长文本</h3><p>使用以下语句替换长文本会报错”字符串过长”</p>\n<pre><code>w.Selection.Find.Execute(OldStrs[j], False, False, False, False, False, True, 1, True, NewStrs[j], 2)</code></pre><p>使用以下语句</p>\n<pre><code>find = w.Selection.Find\nfind.Text = &apos;#SEQUENCE#&apos;\nwhile w.Selection.Find.Execute():\n    w.Selection.TypeText(Text=SEQUENCE)</code></pre><h3 id=\"替换Word文本框内容\"><a href=\"#替换Word文本框内容\" class=\"headerlink\" title=\"替换Word文本框内容\"></a>替换Word文本框内容</h3><p>参考以下代码 <a href=\"http://stackoverflow.com/questions/3022898/python-win32com-automating-word-how-to-replace-text-in-a-text-box\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/</a></p>\n<pre><code>import win32com.client\n\nword = win32com.client.Dispatch(&quot;Word.Application&quot;)\ncanvas = word.ActiveDocument.Shapes[0]\nfor item in canvas.CanvasItems:\n    print item.TextFrame.TextRange.Text</code></pre><p>或者</p>\n<pre><code>find = shp.TextFrame.TextRange.Find\nfind.Text = source\nfind.Replacement.Text = target\nfind.Execute(Replace=1, Forward=True)</code></pre>"},{"title":"ubuntu16.04安装及使用docker(一)","url":"245.html","id":"245","comments":0,"date":"2017-11-20T03:45:42.000Z","_content":"\n### 删除旧版本\n\n    sudo apt-get remove docker docker-engine docker.io\n    \n\n### 安装\n\n    $ sudo apt-get update\n    # 安装依赖\n    $ sudo apt-get install  apt-transport-https ca-certificates curl software-properties-common\n    # 添加官方key\n    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n    # 查找key\n    $ sudo apt-key fingerprint 0EBFCD88\n    pub   4096R/0EBFCD88 2017-02-22\n          Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\n    uid                  Docker Release (CE deb) <docker@docker.com>\n    sub   4096R/F273FCD8 2017-02-22\n    # 获取资源\n    sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n    # 查找合适的版本\n    $ apt-cache madison docker-ce\n    docker-ce | 17.09.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages\n    # 安装\n    $ sudo apt-get install docker-ce=<VERSION>\n    # 打印安装结果\n    $ sudo docker version\n    Client:\n     Version:      17.09.0-ce\n     API version:  1.32\n     Go version:   go1.8.3\n     Git commit:   afdb6d4\n     Built:        Tue Sep 26 22:42:18 2017\n     OS/Arch:      linux/amd64\n    \n    Server:\n     Version:      17.09.0-ce\n     API version:  1.32 (minimum version 1.12)\n     Go version:   go1.8.3\n     Git commit:   afdb6d4\n     Built:        Tue Sep 26 22:40:56 2017\n     OS/Arch:      linux/amd64\n     Experimental: false\n    \n    \n\n### 将用户加入docker用户组，这样不需要输入sudo\n\n    1. sudo cat /etc/group | grep docker \n    2. 如果不存在docker组，可以添加sudo groupadd docker \n    3. 添加当前用户到docker组，sudo usermod -aG  docker $USER \n    4. 重启docker服务,sudo systemctl restart docker \n    5. 如果权限不够，sudo chmod a+rw /var/run/docker.sock　\n    6. sudo chown -R $USER ~/.docker\n    \n\n### 启动测试\n\n    $ sudo  docker run hello-world\n    Unable to find image 'hello-world:latest' locally\n    \n    latest: Pulling from library/hello-world\n    9a0669468bf7: Pull complete\n    Digest: sha256:0e06ef5e1945a718b02a8c319e15bae44f47039005530bc617a5d071190ed3fc\n    Status: Downloaded newer image for hello-world:latest\n    \n    Hello from Docker!\n    This message shows that your installation appears to be working correctly.\n    \n    To generate this message, Docker took the following steps:\n     1. The Docker client contacted the Docker daemon.\n     2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n     3. The Docker daemon created a new container from that image which runs the\n        executable that produces the output you are currently reading.\n     4. The Docker daemon streamed that output to the Docker client, which sent it\n        to your terminal.\n    \n    To try something more ambitious, you can run an Ubuntu container with:\n     $ docker run -it ubuntu bash\n    \n    Share images, automate workflows, and more with a free Docker ID:\n     https://cloud.docker.com/\n    \n    For more examples and ideas, visit:\n     https://docs.docker.com/engine/userguide/\n    \n\n### 更换镜像源\n\n    # 可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值,没有就创建一个\n    \n    {\n      \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\n    }\n    \n\n### 安装ctop查看容器状态\n\n    # https://github.com/bcicen/ctop\n    $ sudo wget https://github.com/bcicen/ctop/releases/download/v0.6.1/ctop-0.6.1-linux-amd64 -O /usr/local/bin/ctop\n    $ sudo chmod +x /usr/local/bin/ctop\n    \n\n### 第一个实例\n\n    # 第一次使用会下载debian的镜像文件\n    $ sudo docker run debian echo 'hello world'\n    > Unable to find image 'debian' locally\n    > ......\n    \n\n    # -i -t 表示进行交互会话\n    $ sudo docker run -i -t debian /user/bash\n    root@622ac5689680:/#  echo 'hello world'\n    > hello world\n    root@622ac5689680:/# exit\n    > exit\n    \n\n    # 基本命令\n    $ sudo docker run -h container -i -t debian /bin/bash #-h表示主机名称\n    $ sudo docker ps  # 查看当前运行的主机\n    $ sudo docker ps -a # 查看全部的主机\n    $sudo docker events  # 查看守护进程\n    $ sudo docker inspect HOST_NAME 　# 查看HOST_NAME的信息\n    $ sudo docker port HOST_NAME # 查看端口映射信息\n    $ sudo docker diff HOST_NAME　# 查看更改的信息\n    $ sudo docker logs HOST_NAME   # 打印log信息\n    $ sudo docker rm HOST_NAME  # 删除\n    $ sudo docker pull redis  # 拉取镜像\n    $ sudo docker create redis # 创建容器\n    $ sudo docker start zen_brown # 开启容器（kitematic是绿色波浪线）\n    $ sudo docker stop zen_brown # 停止容器（kitematic是灰色直线）\n    $ sudo docker pause zen_brown  # 暂停容器kitematic是灰色波浪线）\n    $ sudo docker commit zen_brown # 将容器变成镜像\n    $ sudo docker run redis /bin/bash\n    $ sudo docker attach zen_brown # 查看容器内进程\n    $ sudo docker cp # 在容器和主机之间复制内容\n    $ sudo docker exec # 在容器中运行命令\n    $ sudo docker kill # 容器立即退出\n    \n\n### 创建dockerfile镜像\n\n    # 创建项目\n    $ mkdir cowsay\n    $ cd cowsay\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ :wq\n    # 创建\n    $ sudo docker build -t test/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run test/cowsay-dockerfile /usr/games/cowsay 'Moo'\n    \n\n    # 使用entrypoint指令\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ ENTRYPOINTER [\"/usr/games/cowsay\"]\n    ~ :wq \n    # 创建\n    $ sudo docker build -t test/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run test/cowsay-dockerfile  'Moo'\n    \n\n    # 使用脚本解决entrypoint\n    $ vim entrypoint.sh\n    ~ #! /bin/bash\n    ~ if [ $# -eq 0 ]; then\n    ~      /usr/games/fortune | /usr/games/cowsay\n    ~  else\n    ~     /usr/games/cowsay \"$@\"\n    ~   fi\n    ~ :wq\n    $ chmod +x entrypoint.sh\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ COPY entrypoint.sh /\n    ~ ENTRYPOINTER [\"/entrypoint.sh\"]\n    ~ :wq \n    # 创建\n    $ sudo docker build -t test/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run test/cowsay-dockerfile 'Moo'\n    \n\n### 使用在线仓库\n\n在线注册地址：　https://cloud.docker.com\n\n    # 登陆\n    $ sudo docker login\n    $ username:\n    $ password:\n    # 填写作者信息\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ MAINTAINER username <username@mail.com>\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ COPY entrypoint.sh /\n    ~ ENTRYPOINTER [\"/entrypoint.sh\"]\n    ~ :wq \n    # 创建\n    $ sudo docker build -t username/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run username/cowsay-dockerfile  'Moo'\n    # 上传\n    $ sudo docker push \n    \n\n### 容器连接\n\n    $ sudo docker run --name myredis -d redis # -d表示后台运行\n    ~ a1696406326aaaa6c28931e886b8dd664d191b083de4aed464d584b4720d57b1\n    $ docker run --rm -it --link myredis:redis redis /bin/bash\n    > root@9c914447f5e1:/data# redis-cli -h redis -p 6379\n    > redis:6379> ping\n    > PONG\n    > redis:6379> set \"abc\" 123\n    > OK\n    > redis:6379> get \"abc\"\n    > \"123\"\n    > redis:6379> exit\n    > root@9c914447f5e1:/data# exit\n    > exit\n    \n\n### 容器的备份\n\n    # 查看所有的容器\n    $ docker ps -a\n    CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n    a1696406326a        redis               \"docker-entrypoint...\"   13 minutes ago      Up 13 minutes       6379/tcp            myredis\n    # 备份指定的id\n    $ docker commit -p a1696406326a redis-backup\n    # 查看镜像\n    $ docker images\n    REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\n    redis-backup                 latest              fb9d896b3a39        11 seconds ago      107MB\n    # 上传镜像(docker login && docker push)\n    # 或者打包\n    $ docker save -o ./redis-backup.tar redis-backup\n    # 恢复容器\n    $ docker pull ****\n    # 或者使用包\n    $ docker load -i ./redis-backup.tar\n    \n\n### 让docker容器连接互联网\n\n    # -p 8000:80 表示将主机的8000端口转发至容器的80端口\n    $ docker run -d -p 8000:80 nginx \n    \n    # 容器互联\n    $ docker run -d --name myredis redis\n    $ docker run --link myredis:redis debian env  # --link 目标容器:目标容器在主容器内的简称\n    ~ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    ~ HOSTNAME=69df45e6f92d\n    ~ REDIS_PORT=tcp://172.17.0.2:6379\n    ~ REDIS_PORT_6379_TCP=tcp://172.17.0.2:6379\n    ~ REDIS_PORT_6379_TCP_ADDR=172.17.0.2\n    ~ REDIS_PORT_6379_TCP_PORT=6379\n    ~ REDIS_PORT_6379_TCP_PROTO=tcp\n    ~ REDIS_NAME=/stupefied_chandrasekhar/redis\n    ~ REDIS_ENV_GOSU_VERSION=1.10\n    ~ REDIS_ENV_REDIS_VERSION=4.0.2\n    ~ REDIS_ENV_REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-4.0.2.tar.gz\n    ~ REDIS_ENV_REDIS_DOWNLOAD_SHA=b1a0915dbc91b979d06df1977fe594c3fa9b189f1f3d38743a2948c9f7634813\n    ~ HOME=/root\n    \n\n### 数据卷\n\n    #  -v指定数据卷\n    $ docker run -it --name container-test -h container -v /ddata debian /bin/bash\n    # 查看数据卷在本机的位置\n    $ docker inspect -f { {.Mounts}} container-test  \n    [{volume 4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9 /var/lib/docker/volumes/4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9/_data /ddata local  true }]\n    # 可以在本机中添加文件并在容器中查看修改结果\n    \n\n    ### 在dockerfile中设置数据卷\n    FROM debian:wheezy\n    RUN useradd foo\n    # VOLUME /ddata # 此处添加无效果，因为touch chown是在一个临时容器内的数据卷中执行的\n    RUN touch /data/x\n    RUN CHOWN -R foo:foo /data\n    # VOLUME /ddata # 此处添加可以\n    \n\n    # docker run -v 指定到特定数据卷\n    $ docker run -v /home/adrian/data:./data debian ls /data\n    \n\n    # 数据容器\n    $ docker run --name dbdata postgres echo 'data-only container for postage' # 创建一个postgreSQL的容器\n    # 使用--volumes-from参数，使其他容器也可以使用这个数据卷\n    $ docker run -d --volumes-from dbdata --name db1 postgres\n    \n\n### 如何在开发中使用docker,以python flask为例\n\n    # 创建项目\n    $ tree identidock\n    .\n    ├── app\n    │   └── identidock.py\n    └── Dockerfile\n    \n\n    # 编辑flask文件\n    $ vim app/identidock.py\n    from flask import Flask\n    app = Flask(__name__)\n    \n    @app.route('/')\n    def hello_world():\n        return 'hello world'\n    \n    if __name__ == '__main__':\n        app.run(debug=True, host='0.0.0.0')\n    \n\n    # 编辑dockerfile文件\n    $ vim Dockerfile\n    FROM python:3.4\n    \n    RUN pip install Flask==0.10.1\n    WORKDIR /app\n    COPY app /app\n    CMD [\"python\", \"identidock.py\"]\n    \n\n    # 创建镜像并使用容器\n    $ docker build -t identidock .\n    ...\n    $ docker run -d -p 5000:5000 identidock # 后台运行并将主机的5000端口转发到docker\n    $ curl localhost:5000\n    ~ hello world\n    \n    # 将开发的代码目录挂载到docker上，这样就不必每次更改代码都需要重新bulid一次．\n    $ docker run -d -p 5000:5000 -v \"$PWD\"/app:/app identidock  # -v \"$PWD\"/app:/app把位于主机的./app目录挂载到容器内，覆盖容器/app目录下的内容\n    # 可以修改app目录下的文件查看改动情况\n    \n    # 以wsgi服务器运行flask并且修改设置用户\n    $ vim Dockerfile\n    FROM python:3.4\n    \n    RUN groupadd -r uwsgi && useradd -r -g uwsgi uwsgi # 创建用户组和用户\n    RUN pip install Flask==0.10.1 uWSGI==2.0.8\n    WORKDIR /app\n    COPY app /app\n    \n    EXPOSE 9090 9191  # 声明主机和其他容器可以访问的端口号\n    USER uwsgi #使用用户运行以下代码，默认docker是以root用户运行的，不安全\n    CMD [\"uwsgi\", \"--http\", \"0.0.0.0:9090\", \"--wsgi-file\", \"/app/identidock.py\", \"--callable\", \"app\", \"--stats\", \"0.0.0.0:9191\"]\n    \n\n### 使用配置文件配置开发环境和生产环境\n\n    # 创建脚本文件cmd.sh\n    $ tree\n    .\n    ├── app\n    │   └── identidock.py\n    ├── cmd.sh\n    └── Dockerfile\n    \n    $ vim cmd.sh\n    #! /bin/bash\n    set -e\n    \n    if [ \"$ENV\" = 'DEV' ]; then\n      echo \"Running Development Server\"\n      exec python \"identidock.py\"\n    else\n      echo \"Running Production Server\"\n      exec uwsgi --http 0.0.0.0:9090 --wsgi-file /app/identidock.py --callable app --stats 0.0.0.0:9191\n    fi\n    \n    $ chmod +x cmd.sh\n    $ vim Dockerfile\n    FROM python:3.4\n    \n    RUN groupadd -r uwsgi && useradd -r -g uwsgi uwsgi\n    RUN pip install Flask==0.10.1 uWSGI==2.0.8\n    WORKDIR /app\n    COPY app /app\n    COPY cmd.sh /\n    \n    EXPOSE 9090 9191\n    USER uwsgi\n    CMD [\"/cmd.sh\"]\n    \n    $ docker build -t identidock .\n    $ docker run -e \"ENV=DEV\" -p 5000:5000 identidock # 开发环境\n    $ docker run -d -P identidock\n    \n\n### 使用compose自动化安装创建运行docker环境\n\n    # 安装环境\n    # https://docs.docker.com/compose/install/\n    $ sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n    $ sudo chmod +x /usr/local/bin/docker-compose\n    $ docker-compose --version\n    \n\n    # 配置文件\n    tree\n    .\n    ├── app\n    │   └── identidock.py\n    ├── cmd.sh\n    ├── docker-compose.yml\n    └── Dockerfile\n    # 编辑docker-compose文件\n    $ vim docker-compose.yml\n    identidock:\n      build: .\n      ports:\n        - \"5000:5000\"\n      environment:\n        ENV: DEV\n      volumes:\n        - ./app:/app\n    ~                    \n    \n\n    # 使用方法\n    $ docker-compose up # 如果有镜像则直接运行，如果没有镜像则先build\n    $ docker-compose build # 重新构建镜像\n    $ docker-compose ps 获取由compose管理的容器状态\n    $ docker-compose logs 输出日志\n    $ docker-stop 停止容器，但不会删除他们","source":"_posts/ubuntu16.04安装及使用docker(一).md","raw":"---\ntitle: ubuntu16.04安装及使用docker(一)\nurl: 245.html\nid: 245\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2017-11-20 11:45:42\ntags:\n---\n\n### 删除旧版本\n\n    sudo apt-get remove docker docker-engine docker.io\n    \n\n### 安装\n\n    $ sudo apt-get update\n    # 安装依赖\n    $ sudo apt-get install  apt-transport-https ca-certificates curl software-properties-common\n    # 添加官方key\n    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n    # 查找key\n    $ sudo apt-key fingerprint 0EBFCD88\n    pub   4096R/0EBFCD88 2017-02-22\n          Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\n    uid                  Docker Release (CE deb) <docker@docker.com>\n    sub   4096R/F273FCD8 2017-02-22\n    # 获取资源\n    sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n    # 查找合适的版本\n    $ apt-cache madison docker-ce\n    docker-ce | 17.09.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages\n    # 安装\n    $ sudo apt-get install docker-ce=<VERSION>\n    # 打印安装结果\n    $ sudo docker version\n    Client:\n     Version:      17.09.0-ce\n     API version:  1.32\n     Go version:   go1.8.3\n     Git commit:   afdb6d4\n     Built:        Tue Sep 26 22:42:18 2017\n     OS/Arch:      linux/amd64\n    \n    Server:\n     Version:      17.09.0-ce\n     API version:  1.32 (minimum version 1.12)\n     Go version:   go1.8.3\n     Git commit:   afdb6d4\n     Built:        Tue Sep 26 22:40:56 2017\n     OS/Arch:      linux/amd64\n     Experimental: false\n    \n    \n\n### 将用户加入docker用户组，这样不需要输入sudo\n\n    1. sudo cat /etc/group | grep docker \n    2. 如果不存在docker组，可以添加sudo groupadd docker \n    3. 添加当前用户到docker组，sudo usermod -aG  docker $USER \n    4. 重启docker服务,sudo systemctl restart docker \n    5. 如果权限不够，sudo chmod a+rw /var/run/docker.sock　\n    6. sudo chown -R $USER ~/.docker\n    \n\n### 启动测试\n\n    $ sudo  docker run hello-world\n    Unable to find image 'hello-world:latest' locally\n    \n    latest: Pulling from library/hello-world\n    9a0669468bf7: Pull complete\n    Digest: sha256:0e06ef5e1945a718b02a8c319e15bae44f47039005530bc617a5d071190ed3fc\n    Status: Downloaded newer image for hello-world:latest\n    \n    Hello from Docker!\n    This message shows that your installation appears to be working correctly.\n    \n    To generate this message, Docker took the following steps:\n     1. The Docker client contacted the Docker daemon.\n     2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n     3. The Docker daemon created a new container from that image which runs the\n        executable that produces the output you are currently reading.\n     4. The Docker daemon streamed that output to the Docker client, which sent it\n        to your terminal.\n    \n    To try something more ambitious, you can run an Ubuntu container with:\n     $ docker run -it ubuntu bash\n    \n    Share images, automate workflows, and more with a free Docker ID:\n     https://cloud.docker.com/\n    \n    For more examples and ideas, visit:\n     https://docs.docker.com/engine/userguide/\n    \n\n### 更换镜像源\n\n    # 可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值,没有就创建一个\n    \n    {\n      \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\n    }\n    \n\n### 安装ctop查看容器状态\n\n    # https://github.com/bcicen/ctop\n    $ sudo wget https://github.com/bcicen/ctop/releases/download/v0.6.1/ctop-0.6.1-linux-amd64 -O /usr/local/bin/ctop\n    $ sudo chmod +x /usr/local/bin/ctop\n    \n\n### 第一个实例\n\n    # 第一次使用会下载debian的镜像文件\n    $ sudo docker run debian echo 'hello world'\n    > Unable to find image 'debian' locally\n    > ......\n    \n\n    # -i -t 表示进行交互会话\n    $ sudo docker run -i -t debian /user/bash\n    root@622ac5689680:/#  echo 'hello world'\n    > hello world\n    root@622ac5689680:/# exit\n    > exit\n    \n\n    # 基本命令\n    $ sudo docker run -h container -i -t debian /bin/bash #-h表示主机名称\n    $ sudo docker ps  # 查看当前运行的主机\n    $ sudo docker ps -a # 查看全部的主机\n    $sudo docker events  # 查看守护进程\n    $ sudo docker inspect HOST_NAME 　# 查看HOST_NAME的信息\n    $ sudo docker port HOST_NAME # 查看端口映射信息\n    $ sudo docker diff HOST_NAME　# 查看更改的信息\n    $ sudo docker logs HOST_NAME   # 打印log信息\n    $ sudo docker rm HOST_NAME  # 删除\n    $ sudo docker pull redis  # 拉取镜像\n    $ sudo docker create redis # 创建容器\n    $ sudo docker start zen_brown # 开启容器（kitematic是绿色波浪线）\n    $ sudo docker stop zen_brown # 停止容器（kitematic是灰色直线）\n    $ sudo docker pause zen_brown  # 暂停容器kitematic是灰色波浪线）\n    $ sudo docker commit zen_brown # 将容器变成镜像\n    $ sudo docker run redis /bin/bash\n    $ sudo docker attach zen_brown # 查看容器内进程\n    $ sudo docker cp # 在容器和主机之间复制内容\n    $ sudo docker exec # 在容器中运行命令\n    $ sudo docker kill # 容器立即退出\n    \n\n### 创建dockerfile镜像\n\n    # 创建项目\n    $ mkdir cowsay\n    $ cd cowsay\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ :wq\n    # 创建\n    $ sudo docker build -t test/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run test/cowsay-dockerfile /usr/games/cowsay 'Moo'\n    \n\n    # 使用entrypoint指令\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ ENTRYPOINTER [\"/usr/games/cowsay\"]\n    ~ :wq \n    # 创建\n    $ sudo docker build -t test/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run test/cowsay-dockerfile  'Moo'\n    \n\n    # 使用脚本解决entrypoint\n    $ vim entrypoint.sh\n    ~ #! /bin/bash\n    ~ if [ $# -eq 0 ]; then\n    ~      /usr/games/fortune | /usr/games/cowsay\n    ~  else\n    ~     /usr/games/cowsay \"$@\"\n    ~   fi\n    ~ :wq\n    $ chmod +x entrypoint.sh\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ COPY entrypoint.sh /\n    ~ ENTRYPOINTER [\"/entrypoint.sh\"]\n    ~ :wq \n    # 创建\n    $ sudo docker build -t test/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run test/cowsay-dockerfile 'Moo'\n    \n\n### 使用在线仓库\n\n在线注册地址：　https://cloud.docker.com\n\n    # 登陆\n    $ sudo docker login\n    $ username:\n    $ password:\n    # 填写作者信息\n    $ vim Dockerfile\n    ~ FROM debian:wheezy\n    ~ MAINTAINER username <username@mail.com>\n    ~ RUN apt-get update && apt-get install -y cowsay fortune\n    ~ COPY entrypoint.sh /\n    ~ ENTRYPOINTER [\"/entrypoint.sh\"]\n    ~ :wq \n    # 创建\n    $ sudo docker build -t username/cowsay-dockerfile . \n    > Sending build content to Docker .....\n    > ....\n    # 运行\n    $ sudo docker run username/cowsay-dockerfile  'Moo'\n    # 上传\n    $ sudo docker push \n    \n\n### 容器连接\n\n    $ sudo docker run --name myredis -d redis # -d表示后台运行\n    ~ a1696406326aaaa6c28931e886b8dd664d191b083de4aed464d584b4720d57b1\n    $ docker run --rm -it --link myredis:redis redis /bin/bash\n    > root@9c914447f5e1:/data# redis-cli -h redis -p 6379\n    > redis:6379> ping\n    > PONG\n    > redis:6379> set \"abc\" 123\n    > OK\n    > redis:6379> get \"abc\"\n    > \"123\"\n    > redis:6379> exit\n    > root@9c914447f5e1:/data# exit\n    > exit\n    \n\n### 容器的备份\n\n    # 查看所有的容器\n    $ docker ps -a\n    CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n    a1696406326a        redis               \"docker-entrypoint...\"   13 minutes ago      Up 13 minutes       6379/tcp            myredis\n    # 备份指定的id\n    $ docker commit -p a1696406326a redis-backup\n    # 查看镜像\n    $ docker images\n    REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\n    redis-backup                 latest              fb9d896b3a39        11 seconds ago      107MB\n    # 上传镜像(docker login && docker push)\n    # 或者打包\n    $ docker save -o ./redis-backup.tar redis-backup\n    # 恢复容器\n    $ docker pull ****\n    # 或者使用包\n    $ docker load -i ./redis-backup.tar\n    \n\n### 让docker容器连接互联网\n\n    # -p 8000:80 表示将主机的8000端口转发至容器的80端口\n    $ docker run -d -p 8000:80 nginx \n    \n    # 容器互联\n    $ docker run -d --name myredis redis\n    $ docker run --link myredis:redis debian env  # --link 目标容器:目标容器在主容器内的简称\n    ~ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    ~ HOSTNAME=69df45e6f92d\n    ~ REDIS_PORT=tcp://172.17.0.2:6379\n    ~ REDIS_PORT_6379_TCP=tcp://172.17.0.2:6379\n    ~ REDIS_PORT_6379_TCP_ADDR=172.17.0.2\n    ~ REDIS_PORT_6379_TCP_PORT=6379\n    ~ REDIS_PORT_6379_TCP_PROTO=tcp\n    ~ REDIS_NAME=/stupefied_chandrasekhar/redis\n    ~ REDIS_ENV_GOSU_VERSION=1.10\n    ~ REDIS_ENV_REDIS_VERSION=4.0.2\n    ~ REDIS_ENV_REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-4.0.2.tar.gz\n    ~ REDIS_ENV_REDIS_DOWNLOAD_SHA=b1a0915dbc91b979d06df1977fe594c3fa9b189f1f3d38743a2948c9f7634813\n    ~ HOME=/root\n    \n\n### 数据卷\n\n    #  -v指定数据卷\n    $ docker run -it --name container-test -h container -v /ddata debian /bin/bash\n    # 查看数据卷在本机的位置\n    $ docker inspect -f { {.Mounts}} container-test  \n    [{volume 4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9 /var/lib/docker/volumes/4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9/_data /ddata local  true }]\n    # 可以在本机中添加文件并在容器中查看修改结果\n    \n\n    ### 在dockerfile中设置数据卷\n    FROM debian:wheezy\n    RUN useradd foo\n    # VOLUME /ddata # 此处添加无效果，因为touch chown是在一个临时容器内的数据卷中执行的\n    RUN touch /data/x\n    RUN CHOWN -R foo:foo /data\n    # VOLUME /ddata # 此处添加可以\n    \n\n    # docker run -v 指定到特定数据卷\n    $ docker run -v /home/adrian/data:./data debian ls /data\n    \n\n    # 数据容器\n    $ docker run --name dbdata postgres echo 'data-only container for postage' # 创建一个postgreSQL的容器\n    # 使用--volumes-from参数，使其他容器也可以使用这个数据卷\n    $ docker run -d --volumes-from dbdata --name db1 postgres\n    \n\n### 如何在开发中使用docker,以python flask为例\n\n    # 创建项目\n    $ tree identidock\n    .\n    ├── app\n    │   └── identidock.py\n    └── Dockerfile\n    \n\n    # 编辑flask文件\n    $ vim app/identidock.py\n    from flask import Flask\n    app = Flask(__name__)\n    \n    @app.route('/')\n    def hello_world():\n        return 'hello world'\n    \n    if __name__ == '__main__':\n        app.run(debug=True, host='0.0.0.0')\n    \n\n    # 编辑dockerfile文件\n    $ vim Dockerfile\n    FROM python:3.4\n    \n    RUN pip install Flask==0.10.1\n    WORKDIR /app\n    COPY app /app\n    CMD [\"python\", \"identidock.py\"]\n    \n\n    # 创建镜像并使用容器\n    $ docker build -t identidock .\n    ...\n    $ docker run -d -p 5000:5000 identidock # 后台运行并将主机的5000端口转发到docker\n    $ curl localhost:5000\n    ~ hello world\n    \n    # 将开发的代码目录挂载到docker上，这样就不必每次更改代码都需要重新bulid一次．\n    $ docker run -d -p 5000:5000 -v \"$PWD\"/app:/app identidock  # -v \"$PWD\"/app:/app把位于主机的./app目录挂载到容器内，覆盖容器/app目录下的内容\n    # 可以修改app目录下的文件查看改动情况\n    \n    # 以wsgi服务器运行flask并且修改设置用户\n    $ vim Dockerfile\n    FROM python:3.4\n    \n    RUN groupadd -r uwsgi && useradd -r -g uwsgi uwsgi # 创建用户组和用户\n    RUN pip install Flask==0.10.1 uWSGI==2.0.8\n    WORKDIR /app\n    COPY app /app\n    \n    EXPOSE 9090 9191  # 声明主机和其他容器可以访问的端口号\n    USER uwsgi #使用用户运行以下代码，默认docker是以root用户运行的，不安全\n    CMD [\"uwsgi\", \"--http\", \"0.0.0.0:9090\", \"--wsgi-file\", \"/app/identidock.py\", \"--callable\", \"app\", \"--stats\", \"0.0.0.0:9191\"]\n    \n\n### 使用配置文件配置开发环境和生产环境\n\n    # 创建脚本文件cmd.sh\n    $ tree\n    .\n    ├── app\n    │   └── identidock.py\n    ├── cmd.sh\n    └── Dockerfile\n    \n    $ vim cmd.sh\n    #! /bin/bash\n    set -e\n    \n    if [ \"$ENV\" = 'DEV' ]; then\n      echo \"Running Development Server\"\n      exec python \"identidock.py\"\n    else\n      echo \"Running Production Server\"\n      exec uwsgi --http 0.0.0.0:9090 --wsgi-file /app/identidock.py --callable app --stats 0.0.0.0:9191\n    fi\n    \n    $ chmod +x cmd.sh\n    $ vim Dockerfile\n    FROM python:3.4\n    \n    RUN groupadd -r uwsgi && useradd -r -g uwsgi uwsgi\n    RUN pip install Flask==0.10.1 uWSGI==2.0.8\n    WORKDIR /app\n    COPY app /app\n    COPY cmd.sh /\n    \n    EXPOSE 9090 9191\n    USER uwsgi\n    CMD [\"/cmd.sh\"]\n    \n    $ docker build -t identidock .\n    $ docker run -e \"ENV=DEV\" -p 5000:5000 identidock # 开发环境\n    $ docker run -d -P identidock\n    \n\n### 使用compose自动化安装创建运行docker环境\n\n    # 安装环境\n    # https://docs.docker.com/compose/install/\n    $ sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n    $ sudo chmod +x /usr/local/bin/docker-compose\n    $ docker-compose --version\n    \n\n    # 配置文件\n    tree\n    .\n    ├── app\n    │   └── identidock.py\n    ├── cmd.sh\n    ├── docker-compose.yml\n    └── Dockerfile\n    # 编辑docker-compose文件\n    $ vim docker-compose.yml\n    identidock:\n      build: .\n      ports:\n        - \"5000:5000\"\n      environment:\n        ENV: DEV\n      volumes:\n        - ./app:/app\n    ~                    \n    \n\n    # 使用方法\n    $ docker-compose up # 如果有镜像则直接运行，如果没有镜像则先build\n    $ docker-compose build # 重新构建镜像\n    $ docker-compose ps 获取由compose管理的容器状态\n    $ docker-compose logs 输出日志\n    $ docker-stop 停止容器，但不会删除他们","slug":"ubuntu16.04安装及使用docker(一)","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt5004fh3a4c2qj8hcg","content":"<h3 id=\"删除旧版本\"><a href=\"#删除旧版本\" class=\"headerlink\" title=\"删除旧版本\"></a>删除旧版本</h3><pre><code>sudo apt-get remove docker docker-engine docker.io</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>$ sudo apt-get update\n# 安装依赖\n$ sudo apt-get install  apt-transport-https ca-certificates curl software-properties-common\n# 添加官方key\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n# 查找key\n$ sudo apt-key fingerprint 0EBFCD88\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   4096R/F273FCD8 2017-02-22\n# 获取资源\nsudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;\n# 查找合适的版本\n$ apt-cache madison docker-ce\ndocker-ce | 17.09.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages\n# 安装\n$ sudo apt-get install docker-ce=&lt;VERSION&gt;\n# 打印安装结果\n$ sudo docker version\nClient:\n Version:      17.09.0-ce\n API version:  1.32\n Go version:   go1.8.3\n Git commit:   afdb6d4\n Built:        Tue Sep 26 22:42:18 2017\n OS/Arch:      linux/amd64\n\nServer:\n Version:      17.09.0-ce\n API version:  1.32 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   afdb6d4\n Built:        Tue Sep 26 22:40:56 2017\n OS/Arch:      linux/amd64\n Experimental: false</code></pre><h3 id=\"将用户加入docker用户组，这样不需要输入sudo\"><a href=\"#将用户加入docker用户组，这样不需要输入sudo\" class=\"headerlink\" title=\"将用户加入docker用户组，这样不需要输入sudo\"></a>将用户加入docker用户组，这样不需要输入sudo</h3><pre><code>1. sudo cat /etc/group | grep docker \n2. 如果不存在docker组，可以添加sudo groupadd docker \n3. 添加当前用户到docker组，sudo usermod -aG  docker $USER \n4. 重启docker服务,sudo systemctl restart docker \n5. 如果权限不够，sudo chmod a+rw /var/run/docker.sock　\n6. sudo chown -R $USER ~/.docker</code></pre><h3 id=\"启动测试\"><a href=\"#启动测试\" class=\"headerlink\" title=\"启动测试\"></a>启动测试</h3><pre><code>$ sudo  docker run hello-world\nUnable to find image &apos;hello-world:latest&apos; locally\n\nlatest: Pulling from library/hello-world\n9a0669468bf7: Pull complete\nDigest: sha256:0e06ef5e1945a718b02a8c319e15bae44f47039005530bc617a5d071190ed3fc\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://cloud.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/</code></pre><h3 id=\"更换镜像源\"><a href=\"#更换镜像源\" class=\"headerlink\" title=\"更换镜像源\"></a>更换镜像源</h3><pre><code># 可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值,没有就创建一个\n\n{\n  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]\n}</code></pre><h3 id=\"安装ctop查看容器状态\"><a href=\"#安装ctop查看容器状态\" class=\"headerlink\" title=\"安装ctop查看容器状态\"></a>安装ctop查看容器状态</h3><pre><code># https://github.com/bcicen/ctop\n$ sudo wget https://github.com/bcicen/ctop/releases/download/v0.6.1/ctop-0.6.1-linux-amd64 -O /usr/local/bin/ctop\n$ sudo chmod +x /usr/local/bin/ctop</code></pre><h3 id=\"第一个实例\"><a href=\"#第一个实例\" class=\"headerlink\" title=\"第一个实例\"></a>第一个实例</h3><pre><code># 第一次使用会下载debian的镜像文件\n$ sudo docker run debian echo &apos;hello world&apos;\n&gt; Unable to find image &apos;debian&apos; locally\n&gt; ......\n\n\n# -i -t 表示进行交互会话\n$ sudo docker run -i -t debian /user/bash\nroot@622ac5689680:/#  echo &apos;hello world&apos;\n&gt; hello world\nroot@622ac5689680:/# exit\n&gt; exit\n\n\n# 基本命令\n$ sudo docker run -h container -i -t debian /bin/bash #-h表示主机名称\n$ sudo docker ps  # 查看当前运行的主机\n$ sudo docker ps -a # 查看全部的主机\n$sudo docker events  # 查看守护进程\n$ sudo docker inspect HOST_NAME 　# 查看HOST_NAME的信息\n$ sudo docker port HOST_NAME # 查看端口映射信息\n$ sudo docker diff HOST_NAME　# 查看更改的信息\n$ sudo docker logs HOST_NAME   # 打印log信息\n$ sudo docker rm HOST_NAME  # 删除\n$ sudo docker pull redis  # 拉取镜像\n$ sudo docker create redis # 创建容器\n$ sudo docker start zen_brown # 开启容器（kitematic是绿色波浪线）\n$ sudo docker stop zen_brown # 停止容器（kitematic是灰色直线）\n$ sudo docker pause zen_brown  # 暂停容器kitematic是灰色波浪线）\n$ sudo docker commit zen_brown # 将容器变成镜像\n$ sudo docker run redis /bin/bash\n$ sudo docker attach zen_brown # 查看容器内进程\n$ sudo docker cp # 在容器和主机之间复制内容\n$ sudo docker exec # 在容器中运行命令\n$ sudo docker kill # 容器立即退出</code></pre><h3 id=\"创建dockerfile镜像\"><a href=\"#创建dockerfile镜像\" class=\"headerlink\" title=\"创建dockerfile镜像\"></a>创建dockerfile镜像</h3><pre><code># 创建项目\n$ mkdir cowsay\n$ cd cowsay\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ :wq\n# 创建\n$ sudo docker build -t test/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run test/cowsay-dockerfile /usr/games/cowsay &apos;Moo&apos;\n\n\n# 使用entrypoint指令\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ ENTRYPOINTER [&quot;/usr/games/cowsay&quot;]\n~ :wq \n# 创建\n$ sudo docker build -t test/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run test/cowsay-dockerfile  &apos;Moo&apos;\n\n\n# 使用脚本解决entrypoint\n$ vim entrypoint.sh\n~ #! /bin/bash\n~ if [ $# -eq 0 ]; then\n~      /usr/games/fortune | /usr/games/cowsay\n~  else\n~     /usr/games/cowsay &quot;$@&quot;\n~   fi\n~ :wq\n$ chmod +x entrypoint.sh\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ COPY entrypoint.sh /\n~ ENTRYPOINTER [&quot;/entrypoint.sh&quot;]\n~ :wq \n# 创建\n$ sudo docker build -t test/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run test/cowsay-dockerfile &apos;Moo&apos;</code></pre><h3 id=\"使用在线仓库\"><a href=\"#使用在线仓库\" class=\"headerlink\" title=\"使用在线仓库\"></a>使用在线仓库</h3><p>在线注册地址：　<a href=\"https://cloud.docker.com\" target=\"_blank\" rel=\"noopener\">https://cloud.docker.com</a></p>\n<pre><code># 登陆\n$ sudo docker login\n$ username:\n$ password:\n# 填写作者信息\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ MAINTAINER username &lt;username@mail.com&gt;\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ COPY entrypoint.sh /\n~ ENTRYPOINTER [&quot;/entrypoint.sh&quot;]\n~ :wq \n# 创建\n$ sudo docker build -t username/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run username/cowsay-dockerfile  &apos;Moo&apos;\n# 上传\n$ sudo docker push </code></pre><h3 id=\"容器连接\"><a href=\"#容器连接\" class=\"headerlink\" title=\"容器连接\"></a>容器连接</h3><pre><code>$ sudo docker run --name myredis -d redis # -d表示后台运行\n~ a1696406326aaaa6c28931e886b8dd664d191b083de4aed464d584b4720d57b1\n$ docker run --rm -it --link myredis:redis redis /bin/bash\n&gt; root@9c914447f5e1:/data# redis-cli -h redis -p 6379\n&gt; redis:6379&gt; ping\n&gt; PONG\n&gt; redis:6379&gt; set &quot;abc&quot; 123\n&gt; OK\n&gt; redis:6379&gt; get &quot;abc&quot;\n&gt; &quot;123&quot;\n&gt; redis:6379&gt; exit\n&gt; root@9c914447f5e1:/data# exit\n&gt; exit</code></pre><h3 id=\"容器的备份\"><a href=\"#容器的备份\" class=\"headerlink\" title=\"容器的备份\"></a>容器的备份</h3><pre><code># 查看所有的容器\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\na1696406326a        redis               &quot;docker-entrypoint...&quot;   13 minutes ago      Up 13 minutes       6379/tcp            myredis\n# 备份指定的id\n$ docker commit -p a1696406326a redis-backup\n# 查看镜像\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nredis-backup                 latest              fb9d896b3a39        11 seconds ago      107MB\n# 上传镜像(docker login &amp;&amp; docker push)\n# 或者打包\n$ docker save -o ./redis-backup.tar redis-backup\n# 恢复容器\n$ docker pull ****\n# 或者使用包\n$ docker load -i ./redis-backup.tar</code></pre><h3 id=\"让docker容器连接互联网\"><a href=\"#让docker容器连接互联网\" class=\"headerlink\" title=\"让docker容器连接互联网\"></a>让docker容器连接互联网</h3><pre><code># -p 8000:80 表示将主机的8000端口转发至容器的80端口\n$ docker run -d -p 8000:80 nginx \n\n# 容器互联\n$ docker run -d --name myredis redis\n$ docker run --link myredis:redis debian env  # --link 目标容器:目标容器在主容器内的简称\n~ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n~ HOSTNAME=69df45e6f92d\n~ REDIS_PORT=tcp://172.17.0.2:6379\n~ REDIS_PORT_6379_TCP=tcp://172.17.0.2:6379\n~ REDIS_PORT_6379_TCP_ADDR=172.17.0.2\n~ REDIS_PORT_6379_TCP_PORT=6379\n~ REDIS_PORT_6379_TCP_PROTO=tcp\n~ REDIS_NAME=/stupefied_chandrasekhar/redis\n~ REDIS_ENV_GOSU_VERSION=1.10\n~ REDIS_ENV_REDIS_VERSION=4.0.2\n~ REDIS_ENV_REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-4.0.2.tar.gz\n~ REDIS_ENV_REDIS_DOWNLOAD_SHA=b1a0915dbc91b979d06df1977fe594c3fa9b189f1f3d38743a2948c9f7634813\n~ HOME=/root</code></pre><h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><pre><code>#  -v指定数据卷\n$ docker run -it --name container-test -h container -v /ddata debian /bin/bash\n# 查看数据卷在本机的位置\n$ docker inspect -f { {.Mounts}} container-test  \n[{volume 4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9 /var/lib/docker/volumes/4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9/_data /ddata local  true }]\n# 可以在本机中添加文件并在容器中查看修改结果\n\n\n### 在dockerfile中设置数据卷\nFROM debian:wheezy\nRUN useradd foo\n# VOLUME /ddata # 此处添加无效果，因为touch chown是在一个临时容器内的数据卷中执行的\nRUN touch /data/x\nRUN CHOWN -R foo:foo /data\n# VOLUME /ddata # 此处添加可以\n\n\n# docker run -v 指定到特定数据卷\n$ docker run -v /home/adrian/data:./data debian ls /data\n\n\n# 数据容器\n$ docker run --name dbdata postgres echo &apos;data-only container for postage&apos; # 创建一个postgreSQL的容器\n# 使用--volumes-from参数，使其他容器也可以使用这个数据卷\n$ docker run -d --volumes-from dbdata --name db1 postgres</code></pre><h3 id=\"如何在开发中使用docker-以python-flask为例\"><a href=\"#如何在开发中使用docker-以python-flask为例\" class=\"headerlink\" title=\"如何在开发中使用docker,以python flask为例\"></a>如何在开发中使用docker,以python flask为例</h3><pre><code># 创建项目\n$ tree identidock\n.\n├── app\n│   └── identidock.py\n└── Dockerfile\n\n\n# 编辑flask文件\n$ vim app/identidock.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(&apos;/&apos;)\ndef hello_world():\n    return &apos;hello world&apos;\n\nif __name__ == &apos;__main__&apos;:\n    app.run(debug=True, host=&apos;0.0.0.0&apos;)\n\n\n# 编辑dockerfile文件\n$ vim Dockerfile\nFROM python:3.4\n\nRUN pip install Flask==0.10.1\nWORKDIR /app\nCOPY app /app\nCMD [&quot;python&quot;, &quot;identidock.py&quot;]\n\n\n# 创建镜像并使用容器\n$ docker build -t identidock .\n...\n$ docker run -d -p 5000:5000 identidock # 后台运行并将主机的5000端口转发到docker\n$ curl localhost:5000\n~ hello world\n\n# 将开发的代码目录挂载到docker上，这样就不必每次更改代码都需要重新bulid一次．\n$ docker run -d -p 5000:5000 -v &quot;$PWD&quot;/app:/app identidock  # -v &quot;$PWD&quot;/app:/app把位于主机的./app目录挂载到容器内，覆盖容器/app目录下的内容\n# 可以修改app目录下的文件查看改动情况\n\n# 以wsgi服务器运行flask并且修改设置用户\n$ vim Dockerfile\nFROM python:3.4\n\nRUN groupadd -r uwsgi &amp;&amp; useradd -r -g uwsgi uwsgi # 创建用户组和用户\nRUN pip install Flask==0.10.1 uWSGI==2.0.8\nWORKDIR /app\nCOPY app /app\n\nEXPOSE 9090 9191  # 声明主机和其他容器可以访问的端口号\nUSER uwsgi #使用用户运行以下代码，默认docker是以root用户运行的，不安全\nCMD [&quot;uwsgi&quot;, &quot;--http&quot;, &quot;0.0.0.0:9090&quot;, &quot;--wsgi-file&quot;, &quot;/app/identidock.py&quot;, &quot;--callable&quot;, &quot;app&quot;, &quot;--stats&quot;, &quot;0.0.0.0:9191&quot;]</code></pre><h3 id=\"使用配置文件配置开发环境和生产环境\"><a href=\"#使用配置文件配置开发环境和生产环境\" class=\"headerlink\" title=\"使用配置文件配置开发环境和生产环境\"></a>使用配置文件配置开发环境和生产环境</h3><pre><code># 创建脚本文件cmd.sh\n$ tree\n.\n├── app\n│   └── identidock.py\n├── cmd.sh\n└── Dockerfile\n\n$ vim cmd.sh\n#! /bin/bash\nset -e\n\nif [ &quot;$ENV&quot; = &apos;DEV&apos; ]; then\n  echo &quot;Running Development Server&quot;\n  exec python &quot;identidock.py&quot;\nelse\n  echo &quot;Running Production Server&quot;\n  exec uwsgi --http 0.0.0.0:9090 --wsgi-file /app/identidock.py --callable app --stats 0.0.0.0:9191\nfi\n\n$ chmod +x cmd.sh\n$ vim Dockerfile\nFROM python:3.4\n\nRUN groupadd -r uwsgi &amp;&amp; useradd -r -g uwsgi uwsgi\nRUN pip install Flask==0.10.1 uWSGI==2.0.8\nWORKDIR /app\nCOPY app /app\nCOPY cmd.sh /\n\nEXPOSE 9090 9191\nUSER uwsgi\nCMD [&quot;/cmd.sh&quot;]\n\n$ docker build -t identidock .\n$ docker run -e &quot;ENV=DEV&quot; -p 5000:5000 identidock # 开发环境\n$ docker run -d -P identidock</code></pre><h3 id=\"使用compose自动化安装创建运行docker环境\"><a href=\"#使用compose自动化安装创建运行docker环境\" class=\"headerlink\" title=\"使用compose自动化安装创建运行docker环境\"></a>使用compose自动化安装创建运行docker环境</h3><pre><code># 安装环境\n# https://docs.docker.com/compose/install/\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n$ docker-compose --version\n\n\n# 配置文件\ntree\n.\n├── app\n│   └── identidock.py\n├── cmd.sh\n├── docker-compose.yml\n└── Dockerfile\n# 编辑docker-compose文件\n$ vim docker-compose.yml\nidentidock:\n  build: .\n  ports:\n    - &quot;5000:5000&quot;\n  environment:\n    ENV: DEV\n  volumes:\n    - ./app:/app\n~                    \n\n\n# 使用方法\n$ docker-compose up # 如果有镜像则直接运行，如果没有镜像则先build\n$ docker-compose build # 重新构建镜像\n$ docker-compose ps 获取由compose管理的容器状态\n$ docker-compose logs 输出日志\n$ docker-stop 停止容器，但不会删除他们</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"删除旧版本\"><a href=\"#删除旧版本\" class=\"headerlink\" title=\"删除旧版本\"></a>删除旧版本</h3><pre><code>sudo apt-get remove docker docker-engine docker.io</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>$ sudo apt-get update\n# 安装依赖\n$ sudo apt-get install  apt-transport-https ca-certificates curl software-properties-common\n# 添加官方key\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n# 查找key\n$ sudo apt-key fingerprint 0EBFCD88\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   4096R/F273FCD8 2017-02-22\n# 获取资源\nsudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;\n# 查找合适的版本\n$ apt-cache madison docker-ce\ndocker-ce | 17.09.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages\n# 安装\n$ sudo apt-get install docker-ce=&lt;VERSION&gt;\n# 打印安装结果\n$ sudo docker version\nClient:\n Version:      17.09.0-ce\n API version:  1.32\n Go version:   go1.8.3\n Git commit:   afdb6d4\n Built:        Tue Sep 26 22:42:18 2017\n OS/Arch:      linux/amd64\n\nServer:\n Version:      17.09.0-ce\n API version:  1.32 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   afdb6d4\n Built:        Tue Sep 26 22:40:56 2017\n OS/Arch:      linux/amd64\n Experimental: false</code></pre><h3 id=\"将用户加入docker用户组，这样不需要输入sudo\"><a href=\"#将用户加入docker用户组，这样不需要输入sudo\" class=\"headerlink\" title=\"将用户加入docker用户组，这样不需要输入sudo\"></a>将用户加入docker用户组，这样不需要输入sudo</h3><pre><code>1. sudo cat /etc/group | grep docker \n2. 如果不存在docker组，可以添加sudo groupadd docker \n3. 添加当前用户到docker组，sudo usermod -aG  docker $USER \n4. 重启docker服务,sudo systemctl restart docker \n5. 如果权限不够，sudo chmod a+rw /var/run/docker.sock　\n6. sudo chown -R $USER ~/.docker</code></pre><h3 id=\"启动测试\"><a href=\"#启动测试\" class=\"headerlink\" title=\"启动测试\"></a>启动测试</h3><pre><code>$ sudo  docker run hello-world\nUnable to find image &apos;hello-world:latest&apos; locally\n\nlatest: Pulling from library/hello-world\n9a0669468bf7: Pull complete\nDigest: sha256:0e06ef5e1945a718b02a8c319e15bae44f47039005530bc617a5d071190ed3fc\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://cloud.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/</code></pre><h3 id=\"更换镜像源\"><a href=\"#更换镜像源\" class=\"headerlink\" title=\"更换镜像源\"></a>更换镜像源</h3><pre><code># 可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值,没有就创建一个\n\n{\n  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]\n}</code></pre><h3 id=\"安装ctop查看容器状态\"><a href=\"#安装ctop查看容器状态\" class=\"headerlink\" title=\"安装ctop查看容器状态\"></a>安装ctop查看容器状态</h3><pre><code># https://github.com/bcicen/ctop\n$ sudo wget https://github.com/bcicen/ctop/releases/download/v0.6.1/ctop-0.6.1-linux-amd64 -O /usr/local/bin/ctop\n$ sudo chmod +x /usr/local/bin/ctop</code></pre><h3 id=\"第一个实例\"><a href=\"#第一个实例\" class=\"headerlink\" title=\"第一个实例\"></a>第一个实例</h3><pre><code># 第一次使用会下载debian的镜像文件\n$ sudo docker run debian echo &apos;hello world&apos;\n&gt; Unable to find image &apos;debian&apos; locally\n&gt; ......\n\n\n# -i -t 表示进行交互会话\n$ sudo docker run -i -t debian /user/bash\nroot@622ac5689680:/#  echo &apos;hello world&apos;\n&gt; hello world\nroot@622ac5689680:/# exit\n&gt; exit\n\n\n# 基本命令\n$ sudo docker run -h container -i -t debian /bin/bash #-h表示主机名称\n$ sudo docker ps  # 查看当前运行的主机\n$ sudo docker ps -a # 查看全部的主机\n$sudo docker events  # 查看守护进程\n$ sudo docker inspect HOST_NAME 　# 查看HOST_NAME的信息\n$ sudo docker port HOST_NAME # 查看端口映射信息\n$ sudo docker diff HOST_NAME　# 查看更改的信息\n$ sudo docker logs HOST_NAME   # 打印log信息\n$ sudo docker rm HOST_NAME  # 删除\n$ sudo docker pull redis  # 拉取镜像\n$ sudo docker create redis # 创建容器\n$ sudo docker start zen_brown # 开启容器（kitematic是绿色波浪线）\n$ sudo docker stop zen_brown # 停止容器（kitematic是灰色直线）\n$ sudo docker pause zen_brown  # 暂停容器kitematic是灰色波浪线）\n$ sudo docker commit zen_brown # 将容器变成镜像\n$ sudo docker run redis /bin/bash\n$ sudo docker attach zen_brown # 查看容器内进程\n$ sudo docker cp # 在容器和主机之间复制内容\n$ sudo docker exec # 在容器中运行命令\n$ sudo docker kill # 容器立即退出</code></pre><h3 id=\"创建dockerfile镜像\"><a href=\"#创建dockerfile镜像\" class=\"headerlink\" title=\"创建dockerfile镜像\"></a>创建dockerfile镜像</h3><pre><code># 创建项目\n$ mkdir cowsay\n$ cd cowsay\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ :wq\n# 创建\n$ sudo docker build -t test/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run test/cowsay-dockerfile /usr/games/cowsay &apos;Moo&apos;\n\n\n# 使用entrypoint指令\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ ENTRYPOINTER [&quot;/usr/games/cowsay&quot;]\n~ :wq \n# 创建\n$ sudo docker build -t test/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run test/cowsay-dockerfile  &apos;Moo&apos;\n\n\n# 使用脚本解决entrypoint\n$ vim entrypoint.sh\n~ #! /bin/bash\n~ if [ $# -eq 0 ]; then\n~      /usr/games/fortune | /usr/games/cowsay\n~  else\n~     /usr/games/cowsay &quot;$@&quot;\n~   fi\n~ :wq\n$ chmod +x entrypoint.sh\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ COPY entrypoint.sh /\n~ ENTRYPOINTER [&quot;/entrypoint.sh&quot;]\n~ :wq \n# 创建\n$ sudo docker build -t test/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run test/cowsay-dockerfile &apos;Moo&apos;</code></pre><h3 id=\"使用在线仓库\"><a href=\"#使用在线仓库\" class=\"headerlink\" title=\"使用在线仓库\"></a>使用在线仓库</h3><p>在线注册地址：　<a href=\"https://cloud.docker.com\" target=\"_blank\" rel=\"noopener\">https://cloud.docker.com</a></p>\n<pre><code># 登陆\n$ sudo docker login\n$ username:\n$ password:\n# 填写作者信息\n$ vim Dockerfile\n~ FROM debian:wheezy\n~ MAINTAINER username &lt;username@mail.com&gt;\n~ RUN apt-get update &amp;&amp; apt-get install -y cowsay fortune\n~ COPY entrypoint.sh /\n~ ENTRYPOINTER [&quot;/entrypoint.sh&quot;]\n~ :wq \n# 创建\n$ sudo docker build -t username/cowsay-dockerfile . \n&gt; Sending build content to Docker .....\n&gt; ....\n# 运行\n$ sudo docker run username/cowsay-dockerfile  &apos;Moo&apos;\n# 上传\n$ sudo docker push </code></pre><h3 id=\"容器连接\"><a href=\"#容器连接\" class=\"headerlink\" title=\"容器连接\"></a>容器连接</h3><pre><code>$ sudo docker run --name myredis -d redis # -d表示后台运行\n~ a1696406326aaaa6c28931e886b8dd664d191b083de4aed464d584b4720d57b1\n$ docker run --rm -it --link myredis:redis redis /bin/bash\n&gt; root@9c914447f5e1:/data# redis-cli -h redis -p 6379\n&gt; redis:6379&gt; ping\n&gt; PONG\n&gt; redis:6379&gt; set &quot;abc&quot; 123\n&gt; OK\n&gt; redis:6379&gt; get &quot;abc&quot;\n&gt; &quot;123&quot;\n&gt; redis:6379&gt; exit\n&gt; root@9c914447f5e1:/data# exit\n&gt; exit</code></pre><h3 id=\"容器的备份\"><a href=\"#容器的备份\" class=\"headerlink\" title=\"容器的备份\"></a>容器的备份</h3><pre><code># 查看所有的容器\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\na1696406326a        redis               &quot;docker-entrypoint...&quot;   13 minutes ago      Up 13 minutes       6379/tcp            myredis\n# 备份指定的id\n$ docker commit -p a1696406326a redis-backup\n# 查看镜像\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nredis-backup                 latest              fb9d896b3a39        11 seconds ago      107MB\n# 上传镜像(docker login &amp;&amp; docker push)\n# 或者打包\n$ docker save -o ./redis-backup.tar redis-backup\n# 恢复容器\n$ docker pull ****\n# 或者使用包\n$ docker load -i ./redis-backup.tar</code></pre><h3 id=\"让docker容器连接互联网\"><a href=\"#让docker容器连接互联网\" class=\"headerlink\" title=\"让docker容器连接互联网\"></a>让docker容器连接互联网</h3><pre><code># -p 8000:80 表示将主机的8000端口转发至容器的80端口\n$ docker run -d -p 8000:80 nginx \n\n# 容器互联\n$ docker run -d --name myredis redis\n$ docker run --link myredis:redis debian env  # --link 目标容器:目标容器在主容器内的简称\n~ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n~ HOSTNAME=69df45e6f92d\n~ REDIS_PORT=tcp://172.17.0.2:6379\n~ REDIS_PORT_6379_TCP=tcp://172.17.0.2:6379\n~ REDIS_PORT_6379_TCP_ADDR=172.17.0.2\n~ REDIS_PORT_6379_TCP_PORT=6379\n~ REDIS_PORT_6379_TCP_PROTO=tcp\n~ REDIS_NAME=/stupefied_chandrasekhar/redis\n~ REDIS_ENV_GOSU_VERSION=1.10\n~ REDIS_ENV_REDIS_VERSION=4.0.2\n~ REDIS_ENV_REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-4.0.2.tar.gz\n~ REDIS_ENV_REDIS_DOWNLOAD_SHA=b1a0915dbc91b979d06df1977fe594c3fa9b189f1f3d38743a2948c9f7634813\n~ HOME=/root</code></pre><h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><pre><code>#  -v指定数据卷\n$ docker run -it --name container-test -h container -v /ddata debian /bin/bash\n# 查看数据卷在本机的位置\n$ docker inspect -f { {.Mounts}} container-test  \n[{volume 4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9 /var/lib/docker/volumes/4687a1d9a80dff56d951f14704a8125f1b642b50c78dac63d3a02a42ff05ffb9/_data /ddata local  true }]\n# 可以在本机中添加文件并在容器中查看修改结果\n\n\n### 在dockerfile中设置数据卷\nFROM debian:wheezy\nRUN useradd foo\n# VOLUME /ddata # 此处添加无效果，因为touch chown是在一个临时容器内的数据卷中执行的\nRUN touch /data/x\nRUN CHOWN -R foo:foo /data\n# VOLUME /ddata # 此处添加可以\n\n\n# docker run -v 指定到特定数据卷\n$ docker run -v /home/adrian/data:./data debian ls /data\n\n\n# 数据容器\n$ docker run --name dbdata postgres echo &apos;data-only container for postage&apos; # 创建一个postgreSQL的容器\n# 使用--volumes-from参数，使其他容器也可以使用这个数据卷\n$ docker run -d --volumes-from dbdata --name db1 postgres</code></pre><h3 id=\"如何在开发中使用docker-以python-flask为例\"><a href=\"#如何在开发中使用docker-以python-flask为例\" class=\"headerlink\" title=\"如何在开发中使用docker,以python flask为例\"></a>如何在开发中使用docker,以python flask为例</h3><pre><code># 创建项目\n$ tree identidock\n.\n├── app\n│   └── identidock.py\n└── Dockerfile\n\n\n# 编辑flask文件\n$ vim app/identidock.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(&apos;/&apos;)\ndef hello_world():\n    return &apos;hello world&apos;\n\nif __name__ == &apos;__main__&apos;:\n    app.run(debug=True, host=&apos;0.0.0.0&apos;)\n\n\n# 编辑dockerfile文件\n$ vim Dockerfile\nFROM python:3.4\n\nRUN pip install Flask==0.10.1\nWORKDIR /app\nCOPY app /app\nCMD [&quot;python&quot;, &quot;identidock.py&quot;]\n\n\n# 创建镜像并使用容器\n$ docker build -t identidock .\n...\n$ docker run -d -p 5000:5000 identidock # 后台运行并将主机的5000端口转发到docker\n$ curl localhost:5000\n~ hello world\n\n# 将开发的代码目录挂载到docker上，这样就不必每次更改代码都需要重新bulid一次．\n$ docker run -d -p 5000:5000 -v &quot;$PWD&quot;/app:/app identidock  # -v &quot;$PWD&quot;/app:/app把位于主机的./app目录挂载到容器内，覆盖容器/app目录下的内容\n# 可以修改app目录下的文件查看改动情况\n\n# 以wsgi服务器运行flask并且修改设置用户\n$ vim Dockerfile\nFROM python:3.4\n\nRUN groupadd -r uwsgi &amp;&amp; useradd -r -g uwsgi uwsgi # 创建用户组和用户\nRUN pip install Flask==0.10.1 uWSGI==2.0.8\nWORKDIR /app\nCOPY app /app\n\nEXPOSE 9090 9191  # 声明主机和其他容器可以访问的端口号\nUSER uwsgi #使用用户运行以下代码，默认docker是以root用户运行的，不安全\nCMD [&quot;uwsgi&quot;, &quot;--http&quot;, &quot;0.0.0.0:9090&quot;, &quot;--wsgi-file&quot;, &quot;/app/identidock.py&quot;, &quot;--callable&quot;, &quot;app&quot;, &quot;--stats&quot;, &quot;0.0.0.0:9191&quot;]</code></pre><h3 id=\"使用配置文件配置开发环境和生产环境\"><a href=\"#使用配置文件配置开发环境和生产环境\" class=\"headerlink\" title=\"使用配置文件配置开发环境和生产环境\"></a>使用配置文件配置开发环境和生产环境</h3><pre><code># 创建脚本文件cmd.sh\n$ tree\n.\n├── app\n│   └── identidock.py\n├── cmd.sh\n└── Dockerfile\n\n$ vim cmd.sh\n#! /bin/bash\nset -e\n\nif [ &quot;$ENV&quot; = &apos;DEV&apos; ]; then\n  echo &quot;Running Development Server&quot;\n  exec python &quot;identidock.py&quot;\nelse\n  echo &quot;Running Production Server&quot;\n  exec uwsgi --http 0.0.0.0:9090 --wsgi-file /app/identidock.py --callable app --stats 0.0.0.0:9191\nfi\n\n$ chmod +x cmd.sh\n$ vim Dockerfile\nFROM python:3.4\n\nRUN groupadd -r uwsgi &amp;&amp; useradd -r -g uwsgi uwsgi\nRUN pip install Flask==0.10.1 uWSGI==2.0.8\nWORKDIR /app\nCOPY app /app\nCOPY cmd.sh /\n\nEXPOSE 9090 9191\nUSER uwsgi\nCMD [&quot;/cmd.sh&quot;]\n\n$ docker build -t identidock .\n$ docker run -e &quot;ENV=DEV&quot; -p 5000:5000 identidock # 开发环境\n$ docker run -d -P identidock</code></pre><h3 id=\"使用compose自动化安装创建运行docker环境\"><a href=\"#使用compose自动化安装创建运行docker环境\" class=\"headerlink\" title=\"使用compose自动化安装创建运行docker环境\"></a>使用compose自动化安装创建运行docker环境</h3><pre><code># 安装环境\n# https://docs.docker.com/compose/install/\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n$ docker-compose --version\n\n\n# 配置文件\ntree\n.\n├── app\n│   └── identidock.py\n├── cmd.sh\n├── docker-compose.yml\n└── Dockerfile\n# 编辑docker-compose文件\n$ vim docker-compose.yml\nidentidock:\n  build: .\n  ports:\n    - &quot;5000:5000&quot;\n  environment:\n    ENV: DEV\n  volumes:\n    - ./app:/app\n~                    \n\n\n# 使用方法\n$ docker-compose up # 如果有镜像则直接运行，如果没有镜像则先build\n$ docker-compose build # 重新构建镜像\n$ docker-compose ps 获取由compose管理的容器状态\n$ docker-compose logs 输出日志\n$ docker-stop 停止容器，但不会删除他们</code></pre>"},{"title":"python爬虫scrapy框架简介","url":"475.html","id":"475","comments":0,"date":"2018-01-10T07:44:12.000Z","_content":"\nScrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。 其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试\n\n### Scrapy主要包括了以下组件：\n\n1.  引擎(Scrapy): 用来处理整个系统的数据流处理, 触发事务(框架核心)\n2.  调度器(Scheduler): 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址\n3.  下载器(Downloader): 用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)\n4.  爬虫(Spiders): 爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面\n5.  项目管道(Pipeline): 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。\n6.  下载器中间件(Downloader Middlewares): 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。\n7.  爬虫中间件(Spider Middlewares): 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。\n8.  调度中间件(Scheduler Middewares): 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。\n\n### Scrapy运行流程大概如下：\n\n首先，引擎从调度器中取出一个链接(URL)用于接下来的抓取 引擎把URL封装成一个请求(Request)传给下载器，下载器把资源下载下来，并封装成应答包(Response) 然后，爬虫解析Response 若是解析出实体（Item）,则交给实体管道进行进一步的处理。 若是解析出的是链接（URL）,则把URL交给Scheduler等待抓取\n\n### 备忘\n\n#### 使用Selector提取数据\n\n#### xpath语法和基本函数\n\n    /\n    .\n    ..\n    ELEMENT\n    //ELEMENT\n    *\n    text\n    @ALTER\n    @*\n    position()\n    last()\n    string()\n    \n\n#### css选择器\n\n    *\n    E\n    E1>E2\n    E1+E2\n    .CLASS\n    #ID\n    [ATTR]\n    [ATTR=VALUE]\n    E:nth-child(n)\n    E:first-child\n    \n\n#### 使用Item和Field封装数据\n\nField(serializer=lambda)设置存储数据\n\n#### 使用Item Pipeline处理数据\n\n修改数据,过滤重复数据,将数据写入到数据库等\n\n#### LinkExtractor提取链接\n\n    LinkExtractor参数\n    allow 允许链接\n    deny 拒绝链接\n    allow_domains 允许域名\n    deny_domains 拒绝域名\n    restrict_xpaths 允许xpath链接\n    restrict_css 允许css选择器链接\n    \n\n#### Exporter导出数据\n\n默认包含以下\n\n    JSON, JSON LINES, CSV, XML, PICKLE, MARSHAL\n    \n\n可配置导出格式和存放文件地址, 可自定义导出格式,例如xls\n\n#### 下载文件和图片\n\nFIlesPipeline\n\n    setting.py\n    ITEM_PIPELINES = {'scrapy.pipelines.files.FilesPipeline': 1}\n    FILES_STORE = '/home/hanchang/download'\n    \n\nImagesPipeline\n\n#### 模拟登录\n\n使用FromRequest ORC识别验证码:pillow, pytesseract 付费网络平台识别 人工识别:爬取登录页面的验证码图片,调用Image.show方法,肉眼识别并输入到内置的input函数中 Cookie登录: 获取浏览器的cookie值(browsercookie包), 利用BrowserCookiesMiddleware将获取的cookie值添加到CookieJar中\n\n#### 动态页面抓取\n\nSplash是Scrapy官方推荐的javascript渲染引擎, Webkit无界面浏览器\n\n    # 安装\n    sudo apt-get install docker\n    sudo docker pull scrapinghub/splash\n    sudo docker run -p 8050:8050 -p 8051:8051 scrapinghub/splash\n    \n\nsplash常见服务端点 http://localhost:8050/render.html GET/POST 返回html 参数: url, timeout, proxy, wait, images, js_source http://localhost:8050/excute 传递模拟的动作给splash,例如等待页面渲染，执行代码，等等\n\n##### scrapy使用splash\n\n    安装\n    pip install scrapy-splash\n    \n\n    setting.py\n    # splash服务器地址\n    SPLASH_URL = 'http://localhost:8050'\n    # 开启splash的两个下载中间件并调整HttpCompressionMiddleware的次序\n    DOWNLOADER_MIDDLEWARES = {\n        'scrapy_splash.SplashCookiesMiddleware': 723,\n            'scrapy_splash.SplashMiddleware': 725,\n            'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,\n    }\n    # 过滤去重函数\n    DUPEFILTER_CLASS = 'scrapy_splash.SplashAwareDupeFilter',\n    # 用户支持cahce_args\n    SPIDER_MIDDLEWARES = {\n      'scrapy_splash.SplashDeduplicateArgsMiddleware': 100,\n    }\n    \n\n#### 分布式爬取\n\n使用scrapy-redis\n\n    # 安装\n    pip install scrapy\n    pip install scrapy-redis\n    \n\n    # 在配置文件setting.py中添加scrapy-redis相关信息\n    # redis服务器\n    REDIS_URL = 'redis://127.0.0.1:6379'\n    # 使用scrapy_redis调度器替代原生调度器\n    SCHEDULER = 'scrapy_redis.scheduler.Scheduler'\n    # 使用scrapy_redis的RFPDupeFilter作为去重过滤器\n    DUPEFILTER_CLASS = 'scrapy_redis.dupefilter.RFPDupeFilter'\n    # 将爬取的数据存储到redis中\n    ITEM_PIPELINES = {\n        'scrapy_redis.pipelines.RedisPipeline': 300,\n    }\n    # 爬虫停止后,保留/清除Reids中的请求队列以及去重集合\n    SCHEDULER_PERSIST = False\n    \n\n    # 修改爬虫spider.py\n    from scrapy_redis.spiders import RedisSpider\n    \n    class BookSpider(RedisSpider):\n    \n        # 注释start_urls\n        # start_urls = []\n    \n\n    # 手动添加start_urls\n    redis-cli -h 127.0.0.1\n    lpush books:start_urls 'http://www.books.com/'","source":"_posts/python爬虫scrapy框架简介.md","raw":"---\ntitle: python爬虫scrapy框架简介\nurl: 475.html\nid: 475\ncomments: false\ncategories:\n  - 后端\n  - 运维\ndate: 2018-01-10 15:44:12\ntags:\n---\n\nScrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。 其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试\n\n### Scrapy主要包括了以下组件：\n\n1.  引擎(Scrapy): 用来处理整个系统的数据流处理, 触发事务(框架核心)\n2.  调度器(Scheduler): 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址\n3.  下载器(Downloader): 用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)\n4.  爬虫(Spiders): 爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面\n5.  项目管道(Pipeline): 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。\n6.  下载器中间件(Downloader Middlewares): 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。\n7.  爬虫中间件(Spider Middlewares): 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。\n8.  调度中间件(Scheduler Middewares): 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。\n\n### Scrapy运行流程大概如下：\n\n首先，引擎从调度器中取出一个链接(URL)用于接下来的抓取 引擎把URL封装成一个请求(Request)传给下载器，下载器把资源下载下来，并封装成应答包(Response) 然后，爬虫解析Response 若是解析出实体（Item）,则交给实体管道进行进一步的处理。 若是解析出的是链接（URL）,则把URL交给Scheduler等待抓取\n\n### 备忘\n\n#### 使用Selector提取数据\n\n#### xpath语法和基本函数\n\n    /\n    .\n    ..\n    ELEMENT\n    //ELEMENT\n    *\n    text\n    @ALTER\n    @*\n    position()\n    last()\n    string()\n    \n\n#### css选择器\n\n    *\n    E\n    E1>E2\n    E1+E2\n    .CLASS\n    #ID\n    [ATTR]\n    [ATTR=VALUE]\n    E:nth-child(n)\n    E:first-child\n    \n\n#### 使用Item和Field封装数据\n\nField(serializer=lambda)设置存储数据\n\n#### 使用Item Pipeline处理数据\n\n修改数据,过滤重复数据,将数据写入到数据库等\n\n#### LinkExtractor提取链接\n\n    LinkExtractor参数\n    allow 允许链接\n    deny 拒绝链接\n    allow_domains 允许域名\n    deny_domains 拒绝域名\n    restrict_xpaths 允许xpath链接\n    restrict_css 允许css选择器链接\n    \n\n#### Exporter导出数据\n\n默认包含以下\n\n    JSON, JSON LINES, CSV, XML, PICKLE, MARSHAL\n    \n\n可配置导出格式和存放文件地址, 可自定义导出格式,例如xls\n\n#### 下载文件和图片\n\nFIlesPipeline\n\n    setting.py\n    ITEM_PIPELINES = {'scrapy.pipelines.files.FilesPipeline': 1}\n    FILES_STORE = '/home/hanchang/download'\n    \n\nImagesPipeline\n\n#### 模拟登录\n\n使用FromRequest ORC识别验证码:pillow, pytesseract 付费网络平台识别 人工识别:爬取登录页面的验证码图片,调用Image.show方法,肉眼识别并输入到内置的input函数中 Cookie登录: 获取浏览器的cookie值(browsercookie包), 利用BrowserCookiesMiddleware将获取的cookie值添加到CookieJar中\n\n#### 动态页面抓取\n\nSplash是Scrapy官方推荐的javascript渲染引擎, Webkit无界面浏览器\n\n    # 安装\n    sudo apt-get install docker\n    sudo docker pull scrapinghub/splash\n    sudo docker run -p 8050:8050 -p 8051:8051 scrapinghub/splash\n    \n\nsplash常见服务端点 http://localhost:8050/render.html GET/POST 返回html 参数: url, timeout, proxy, wait, images, js_source http://localhost:8050/excute 传递模拟的动作给splash,例如等待页面渲染，执行代码，等等\n\n##### scrapy使用splash\n\n    安装\n    pip install scrapy-splash\n    \n\n    setting.py\n    # splash服务器地址\n    SPLASH_URL = 'http://localhost:8050'\n    # 开启splash的两个下载中间件并调整HttpCompressionMiddleware的次序\n    DOWNLOADER_MIDDLEWARES = {\n        'scrapy_splash.SplashCookiesMiddleware': 723,\n            'scrapy_splash.SplashMiddleware': 725,\n            'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,\n    }\n    # 过滤去重函数\n    DUPEFILTER_CLASS = 'scrapy_splash.SplashAwareDupeFilter',\n    # 用户支持cahce_args\n    SPIDER_MIDDLEWARES = {\n      'scrapy_splash.SplashDeduplicateArgsMiddleware': 100,\n    }\n    \n\n#### 分布式爬取\n\n使用scrapy-redis\n\n    # 安装\n    pip install scrapy\n    pip install scrapy-redis\n    \n\n    # 在配置文件setting.py中添加scrapy-redis相关信息\n    # redis服务器\n    REDIS_URL = 'redis://127.0.0.1:6379'\n    # 使用scrapy_redis调度器替代原生调度器\n    SCHEDULER = 'scrapy_redis.scheduler.Scheduler'\n    # 使用scrapy_redis的RFPDupeFilter作为去重过滤器\n    DUPEFILTER_CLASS = 'scrapy_redis.dupefilter.RFPDupeFilter'\n    # 将爬取的数据存储到redis中\n    ITEM_PIPELINES = {\n        'scrapy_redis.pipelines.RedisPipeline': 300,\n    }\n    # 爬虫停止后,保留/清除Reids中的请求队列以及去重集合\n    SCHEDULER_PERSIST = False\n    \n\n    # 修改爬虫spider.py\n    from scrapy_redis.spiders import RedisSpider\n    \n    class BookSpider(RedisSpider):\n    \n        # 注释start_urls\n        # start_urls = []\n    \n\n    # 手动添加start_urls\n    redis-cli -h 127.0.0.1\n    lpush books:start_urls 'http://www.books.com/'","slug":"python爬虫scrapy框架简介","published":1,"updated":"2019-07-23T05:51:43.850Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt6004ih3a4y8uu6g0i","content":"<p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。 其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试</p>\n<h3 id=\"Scrapy主要包括了以下组件：\"><a href=\"#Scrapy主要包括了以下组件：\" class=\"headerlink\" title=\"Scrapy主要包括了以下组件：\"></a>Scrapy主要包括了以下组件：</h3><ol>\n<li>引擎(Scrapy): 用来处理整个系统的数据流处理, 触发事务(框架核心)</li>\n<li>调度器(Scheduler): 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</li>\n<li>下载器(Downloader): 用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)</li>\n<li>爬虫(Spiders): 爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面</li>\n<li>项目管道(Pipeline): 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li>\n<li>下载器中间件(Downloader Middlewares): 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。</li>\n<li>爬虫中间件(Spider Middlewares): 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。</li>\n<li>调度中间件(Scheduler Middewares): 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</li>\n</ol>\n<h3 id=\"Scrapy运行流程大概如下：\"><a href=\"#Scrapy运行流程大概如下：\" class=\"headerlink\" title=\"Scrapy运行流程大概如下：\"></a>Scrapy运行流程大概如下：</h3><p>首先，引擎从调度器中取出一个链接(URL)用于接下来的抓取 引擎把URL封装成一个请求(Request)传给下载器，下载器把资源下载下来，并封装成应答包(Response) 然后，爬虫解析Response 若是解析出实体（Item）,则交给实体管道进行进一步的处理。 若是解析出的是链接（URL）,则把URL交给Scheduler等待抓取</p>\n<h3 id=\"备忘\"><a href=\"#备忘\" class=\"headerlink\" title=\"备忘\"></a>备忘</h3><h4 id=\"使用Selector提取数据\"><a href=\"#使用Selector提取数据\" class=\"headerlink\" title=\"使用Selector提取数据\"></a>使用Selector提取数据</h4><h4 id=\"xpath语法和基本函数\"><a href=\"#xpath语法和基本函数\" class=\"headerlink\" title=\"xpath语法和基本函数\"></a>xpath语法和基本函数</h4><pre><code>/\n.\n..\nELEMENT\n//ELEMENT\n*\ntext\n@ALTER\n@*\nposition()\nlast()\nstring()</code></pre><h4 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h4><pre><code>*\nE\nE1&gt;E2\nE1+E2\n.CLASS\n#ID\n[ATTR]\n[ATTR=VALUE]\nE:nth-child(n)\nE:first-child</code></pre><h4 id=\"使用Item和Field封装数据\"><a href=\"#使用Item和Field封装数据\" class=\"headerlink\" title=\"使用Item和Field封装数据\"></a>使用Item和Field封装数据</h4><p>Field(serializer=lambda)设置存储数据</p>\n<h4 id=\"使用Item-Pipeline处理数据\"><a href=\"#使用Item-Pipeline处理数据\" class=\"headerlink\" title=\"使用Item Pipeline处理数据\"></a>使用Item Pipeline处理数据</h4><p>修改数据,过滤重复数据,将数据写入到数据库等</p>\n<h4 id=\"LinkExtractor提取链接\"><a href=\"#LinkExtractor提取链接\" class=\"headerlink\" title=\"LinkExtractor提取链接\"></a>LinkExtractor提取链接</h4><pre><code>LinkExtractor参数\nallow 允许链接\ndeny 拒绝链接\nallow_domains 允许域名\ndeny_domains 拒绝域名\nrestrict_xpaths 允许xpath链接\nrestrict_css 允许css选择器链接</code></pre><h4 id=\"Exporter导出数据\"><a href=\"#Exporter导出数据\" class=\"headerlink\" title=\"Exporter导出数据\"></a>Exporter导出数据</h4><p>默认包含以下</p>\n<pre><code>JSON, JSON LINES, CSV, XML, PICKLE, MARSHAL</code></pre><p>可配置导出格式和存放文件地址, 可自定义导出格式,例如xls</p>\n<h4 id=\"下载文件和图片\"><a href=\"#下载文件和图片\" class=\"headerlink\" title=\"下载文件和图片\"></a>下载文件和图片</h4><p>FIlesPipeline</p>\n<pre><code>setting.py\nITEM_PIPELINES = {&apos;scrapy.pipelines.files.FilesPipeline&apos;: 1}\nFILES_STORE = &apos;/home/hanchang/download&apos;</code></pre><p>ImagesPipeline</p>\n<h4 id=\"模拟登录\"><a href=\"#模拟登录\" class=\"headerlink\" title=\"模拟登录\"></a>模拟登录</h4><p>使用FromRequest ORC识别验证码:pillow, pytesseract 付费网络平台识别 人工识别:爬取登录页面的验证码图片,调用Image.show方法,肉眼识别并输入到内置的input函数中 Cookie登录: 获取浏览器的cookie值(browsercookie包), 利用BrowserCookiesMiddleware将获取的cookie值添加到CookieJar中</p>\n<h4 id=\"动态页面抓取\"><a href=\"#动态页面抓取\" class=\"headerlink\" title=\"动态页面抓取\"></a>动态页面抓取</h4><p>Splash是Scrapy官方推荐的javascript渲染引擎, Webkit无界面浏览器</p>\n<pre><code># 安装\nsudo apt-get install docker\nsudo docker pull scrapinghub/splash\nsudo docker run -p 8050:8050 -p 8051:8051 scrapinghub/splash</code></pre><p>splash常见服务端点 <a href=\"http://localhost:8050/render.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8050/render.html</a> GET/POST 返回html 参数: url, timeout, proxy, wait, images, js_source <a href=\"http://localhost:8050/excute\" target=\"_blank\" rel=\"noopener\">http://localhost:8050/excute</a> 传递模拟的动作给splash,例如等待页面渲染，执行代码，等等</p>\n<h5 id=\"scrapy使用splash\"><a href=\"#scrapy使用splash\" class=\"headerlink\" title=\"scrapy使用splash\"></a>scrapy使用splash</h5><pre><code>安装\npip install scrapy-splash\n\n\nsetting.py\n# splash服务器地址\nSPLASH_URL = &apos;http://localhost:8050&apos;\n# 开启splash的两个下载中间件并调整HttpCompressionMiddleware的次序\nDOWNLOADER_MIDDLEWARES = {\n    &apos;scrapy_splash.SplashCookiesMiddleware&apos;: 723,\n        &apos;scrapy_splash.SplashMiddleware&apos;: 725,\n        &apos;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&apos;: 810,\n}\n# 过滤去重函数\nDUPEFILTER_CLASS = &apos;scrapy_splash.SplashAwareDupeFilter&apos;,\n# 用户支持cahce_args\nSPIDER_MIDDLEWARES = {\n  &apos;scrapy_splash.SplashDeduplicateArgsMiddleware&apos;: 100,\n}</code></pre><h4 id=\"分布式爬取\"><a href=\"#分布式爬取\" class=\"headerlink\" title=\"分布式爬取\"></a>分布式爬取</h4><p>使用scrapy-redis</p>\n<pre><code># 安装\npip install scrapy\npip install scrapy-redis\n\n\n# 在配置文件setting.py中添加scrapy-redis相关信息\n# redis服务器\nREDIS_URL = &apos;redis://127.0.0.1:6379&apos;\n# 使用scrapy_redis调度器替代原生调度器\nSCHEDULER = &apos;scrapy_redis.scheduler.Scheduler&apos;\n# 使用scrapy_redis的RFPDupeFilter作为去重过滤器\nDUPEFILTER_CLASS = &apos;scrapy_redis.dupefilter.RFPDupeFilter&apos;\n# 将爬取的数据存储到redis中\nITEM_PIPELINES = {\n    &apos;scrapy_redis.pipelines.RedisPipeline&apos;: 300,\n}\n# 爬虫停止后,保留/清除Reids中的请求队列以及去重集合\nSCHEDULER_PERSIST = False\n\n\n# 修改爬虫spider.py\nfrom scrapy_redis.spiders import RedisSpider\n\nclass BookSpider(RedisSpider):\n\n    # 注释start_urls\n    # start_urls = []\n\n\n# 手动添加start_urls\nredis-cli -h 127.0.0.1\nlpush books:start_urls &apos;http://www.books.com/&apos;</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。 其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试</p>\n<h3 id=\"Scrapy主要包括了以下组件：\"><a href=\"#Scrapy主要包括了以下组件：\" class=\"headerlink\" title=\"Scrapy主要包括了以下组件：\"></a>Scrapy主要包括了以下组件：</h3><ol>\n<li>引擎(Scrapy): 用来处理整个系统的数据流处理, 触发事务(框架核心)</li>\n<li>调度器(Scheduler): 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</li>\n<li>下载器(Downloader): 用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)</li>\n<li>爬虫(Spiders): 爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面</li>\n<li>项目管道(Pipeline): 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li>\n<li>下载器中间件(Downloader Middlewares): 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。</li>\n<li>爬虫中间件(Spider Middlewares): 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。</li>\n<li>调度中间件(Scheduler Middewares): 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</li>\n</ol>\n<h3 id=\"Scrapy运行流程大概如下：\"><a href=\"#Scrapy运行流程大概如下：\" class=\"headerlink\" title=\"Scrapy运行流程大概如下：\"></a>Scrapy运行流程大概如下：</h3><p>首先，引擎从调度器中取出一个链接(URL)用于接下来的抓取 引擎把URL封装成一个请求(Request)传给下载器，下载器把资源下载下来，并封装成应答包(Response) 然后，爬虫解析Response 若是解析出实体（Item）,则交给实体管道进行进一步的处理。 若是解析出的是链接（URL）,则把URL交给Scheduler等待抓取</p>\n<h3 id=\"备忘\"><a href=\"#备忘\" class=\"headerlink\" title=\"备忘\"></a>备忘</h3><h4 id=\"使用Selector提取数据\"><a href=\"#使用Selector提取数据\" class=\"headerlink\" title=\"使用Selector提取数据\"></a>使用Selector提取数据</h4><h4 id=\"xpath语法和基本函数\"><a href=\"#xpath语法和基本函数\" class=\"headerlink\" title=\"xpath语法和基本函数\"></a>xpath语法和基本函数</h4><pre><code>/\n.\n..\nELEMENT\n//ELEMENT\n*\ntext\n@ALTER\n@*\nposition()\nlast()\nstring()</code></pre><h4 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h4><pre><code>*\nE\nE1&gt;E2\nE1+E2\n.CLASS\n#ID\n[ATTR]\n[ATTR=VALUE]\nE:nth-child(n)\nE:first-child</code></pre><h4 id=\"使用Item和Field封装数据\"><a href=\"#使用Item和Field封装数据\" class=\"headerlink\" title=\"使用Item和Field封装数据\"></a>使用Item和Field封装数据</h4><p>Field(serializer=lambda)设置存储数据</p>\n<h4 id=\"使用Item-Pipeline处理数据\"><a href=\"#使用Item-Pipeline处理数据\" class=\"headerlink\" title=\"使用Item Pipeline处理数据\"></a>使用Item Pipeline处理数据</h4><p>修改数据,过滤重复数据,将数据写入到数据库等</p>\n<h4 id=\"LinkExtractor提取链接\"><a href=\"#LinkExtractor提取链接\" class=\"headerlink\" title=\"LinkExtractor提取链接\"></a>LinkExtractor提取链接</h4><pre><code>LinkExtractor参数\nallow 允许链接\ndeny 拒绝链接\nallow_domains 允许域名\ndeny_domains 拒绝域名\nrestrict_xpaths 允许xpath链接\nrestrict_css 允许css选择器链接</code></pre><h4 id=\"Exporter导出数据\"><a href=\"#Exporter导出数据\" class=\"headerlink\" title=\"Exporter导出数据\"></a>Exporter导出数据</h4><p>默认包含以下</p>\n<pre><code>JSON, JSON LINES, CSV, XML, PICKLE, MARSHAL</code></pre><p>可配置导出格式和存放文件地址, 可自定义导出格式,例如xls</p>\n<h4 id=\"下载文件和图片\"><a href=\"#下载文件和图片\" class=\"headerlink\" title=\"下载文件和图片\"></a>下载文件和图片</h4><p>FIlesPipeline</p>\n<pre><code>setting.py\nITEM_PIPELINES = {&apos;scrapy.pipelines.files.FilesPipeline&apos;: 1}\nFILES_STORE = &apos;/home/hanchang/download&apos;</code></pre><p>ImagesPipeline</p>\n<h4 id=\"模拟登录\"><a href=\"#模拟登录\" class=\"headerlink\" title=\"模拟登录\"></a>模拟登录</h4><p>使用FromRequest ORC识别验证码:pillow, pytesseract 付费网络平台识别 人工识别:爬取登录页面的验证码图片,调用Image.show方法,肉眼识别并输入到内置的input函数中 Cookie登录: 获取浏览器的cookie值(browsercookie包), 利用BrowserCookiesMiddleware将获取的cookie值添加到CookieJar中</p>\n<h4 id=\"动态页面抓取\"><a href=\"#动态页面抓取\" class=\"headerlink\" title=\"动态页面抓取\"></a>动态页面抓取</h4><p>Splash是Scrapy官方推荐的javascript渲染引擎, Webkit无界面浏览器</p>\n<pre><code># 安装\nsudo apt-get install docker\nsudo docker pull scrapinghub/splash\nsudo docker run -p 8050:8050 -p 8051:8051 scrapinghub/splash</code></pre><p>splash常见服务端点 <a href=\"http://localhost:8050/render.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8050/render.html</a> GET/POST 返回html 参数: url, timeout, proxy, wait, images, js_source <a href=\"http://localhost:8050/excute\" target=\"_blank\" rel=\"noopener\">http://localhost:8050/excute</a> 传递模拟的动作给splash,例如等待页面渲染，执行代码，等等</p>\n<h5 id=\"scrapy使用splash\"><a href=\"#scrapy使用splash\" class=\"headerlink\" title=\"scrapy使用splash\"></a>scrapy使用splash</h5><pre><code>安装\npip install scrapy-splash\n\n\nsetting.py\n# splash服务器地址\nSPLASH_URL = &apos;http://localhost:8050&apos;\n# 开启splash的两个下载中间件并调整HttpCompressionMiddleware的次序\nDOWNLOADER_MIDDLEWARES = {\n    &apos;scrapy_splash.SplashCookiesMiddleware&apos;: 723,\n        &apos;scrapy_splash.SplashMiddleware&apos;: 725,\n        &apos;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&apos;: 810,\n}\n# 过滤去重函数\nDUPEFILTER_CLASS = &apos;scrapy_splash.SplashAwareDupeFilter&apos;,\n# 用户支持cahce_args\nSPIDER_MIDDLEWARES = {\n  &apos;scrapy_splash.SplashDeduplicateArgsMiddleware&apos;: 100,\n}</code></pre><h4 id=\"分布式爬取\"><a href=\"#分布式爬取\" class=\"headerlink\" title=\"分布式爬取\"></a>分布式爬取</h4><p>使用scrapy-redis</p>\n<pre><code># 安装\npip install scrapy\npip install scrapy-redis\n\n\n# 在配置文件setting.py中添加scrapy-redis相关信息\n# redis服务器\nREDIS_URL = &apos;redis://127.0.0.1:6379&apos;\n# 使用scrapy_redis调度器替代原生调度器\nSCHEDULER = &apos;scrapy_redis.scheduler.Scheduler&apos;\n# 使用scrapy_redis的RFPDupeFilter作为去重过滤器\nDUPEFILTER_CLASS = &apos;scrapy_redis.dupefilter.RFPDupeFilter&apos;\n# 将爬取的数据存储到redis中\nITEM_PIPELINES = {\n    &apos;scrapy_redis.pipelines.RedisPipeline&apos;: 300,\n}\n# 爬虫停止后,保留/清除Reids中的请求队列以及去重集合\nSCHEDULER_PERSIST = False\n\n\n# 修改爬虫spider.py\nfrom scrapy_redis.spiders import RedisSpider\n\nclass BookSpider(RedisSpider):\n\n    # 注释start_urls\n    # start_urls = []\n\n\n# 手动添加start_urls\nredis-cli -h 127.0.0.1\nlpush books:start_urls &apos;http://www.books.com/&apos;</code></pre>"},{"title":"Centos7服务器基础配置","url":"90.html","id":"90","comments":0,"date":"2016-11-10T02:29:42.000Z","_content":"\n### 查看当前版本\n\n    cat /proc/version \n    cat /etc/redhat-release\n    Centos Linux release 7.2.1511 (Core)\n    \n\n### 修改root密码\n\n    > passwd root\n    > 输入密码\n    \n\n### 配置网络\n\ncentos网络配置地址 /etc/sysconfig/network Centos设置主机名和网络配置  \n/etc/sysconfig/network-scripts/ifcfg-eth0针对特定的网卡进行设置  \n/etc/resolv.conf设置DNS  \n/etc/hosts设置指定的域名解析地址  \n当前使用的是虚拟机网桥模式\n\n    cd /etc/sysconfig/network-scripts/\n    vi ifcfg-enp0s23\n    # 最后添加内容\n    IPADDR=192.168.0.160  # ip地址\n    NETMASK=255.255.255.0 # 掩码\n    GATEWAY=192.168.0.1 # 网关地址\n    DNS1=202.103.24.68 # DNS地址\n    # 修改内容\n    ONBOOT=yes # 启动时网络接口有效\n    BOOTPROTO=none # dhcp改成none dhcp自动获取，static固定，none手动\n    \n\n    # 启动网卡\n    sudo ifup eth0s23\n    sudo systemctl restart network\n    \n\n安装网络查看工具\n\n    yum install net-tools\n    \n\ncentos默认的命令是\n\n    ip addr\n    \n\n### 开机需要启动的5个服务\n\n    sshd远程登陆, \n    network网络,\n    rsyslog日志相关,\n    crond定时任务,\n    sysstat检测系统性能\n    \n\n### 创建用户\n\n    su\n    # 输入密码\n    useradd test\n    passwd test\n    # 输入密码\n    # 确认密码\n    su test # 切换成普通用户\n    \n\n将test用户加入到sudoers用\n\n    #visudo命令 # 相当于直接编辑 /etc/sudoers,但用命令方式更安全,推荐\n    su\n    cd /etc\n    chmod 777 sudoers\n    root    ALL=(ALL)       ALL\n    test    ALL=(ALL)       ALL  # 新添加的\n    chmod 440 sudoers   # 权限改成440，必须，否则会报错\n    \n\n### 配置ssh\n\n安装ssh\n\n    yum -y install  openssh*\n    \n\n    service sshd start    \n    \n\n### ssh连接\n\n    ssh test@192.168.0.160 # 默认22端口\n    ssh -p 2222 test@192.168.0.160 # 修改端口后\n    \n\n禁止root用户远程ssh连接\n\n    vi /etc/ssh/sshd_congif \n    # 最后添加\n    # 禁止root远程登陆  \n    PermitRootLogin no\n    \n\n### 关闭SELINUX\n\n修改/etc/selinux/config 文件  \n将SELINUX=enforcing改为SELINUX=disabled  \nsetenforce 0 ##设置SELinux 成为permissive模式,临时关闭或者及时起效\n\n### centos开启防火墙\n\n    systemctl mask firewalld\n    systemctl stop firewalld\n    yum install iptables-services # 如果下面命令报错，则需要安装\n    systemctl enable iptables\n    systemctl start iptables\n    systemctl enable ip6tables\n    systemctl start ip6tables\n    \n\n防火墙开机启动\n\n    systemctl enable iptables\n    systemctl disable iptables\n    \n\n    # 查看开机运行的服务\n    systemctl list-unit-files --type=service\n    \n\n防火墙是否放行ssh端口22\n\n    cd /etc/sysconfig/\n    vi iptables\n    \n\n在commit前添加以下内容，并注释文件开头信息\n\n    # sample configuration for iptables service\n    # you can edit this manually or use system-config-firewall\n    # please do not ask us to add additional ports/services to this default configuration\n    *filter\n    # :INPUT ACCEPT [0:0]\n    # :FORWARD ACCEPT [0:0]\n    # :OUTPUT ACCEPT [0:0]\n    # -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n    # -A INPUT -p icmp -j ACCEPT\n    # -A INPUT -i lo -j ACCEPT\n    # -A INPUT -j REJECT --reject-with icmp-host-prohibited\n    # -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n    \n    \n    \n    \n    \n    # 安全设置-防止扫描包\n    # NONE 包(所有标识bit都没有设置)主要是扫描类的数据包\n    -A INPUT -p tcp --tcp-flags ALL NONE -j DROP\n    # 防止sync-flood 攻击\n    -A INPUT -p tcp ! --syn -m state --state NEW -j DROP\n    # ALL包（所有的标注bit都被设置了）也是网络扫描的数据包\n    -A INPUT -p tcp --tcp-flags ALL ALL -j DROP\n    \n    # 开放对应端口\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n    \n    # 缺省设置\n    :INPUT DROP [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    # 许所有从服务器端发起的连接，由此返回的响应数据应该是允许的,yum操作等\n    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n    -A INPUT -p icmp -j ACCEPT\n    # 接受主机localhost的任意请求\n    -A INPUT -i lo -j ACCEPT\n    -A INPUT -j REJECT --reject-with icmp-host-prohibited\n    -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n    \n    COMMIT\n    \n    \n    \n\n### ftp\n\n安装及启动\n\n    yum install vsftpd\n    systemctl start vsftpd\n    systemctl enable vsftpd\n    \n\n更新防火墙，放行20， 21端口，如果用了代理上传，需要添加被动模式的端口号  \n修改配置项目\n\n    vi /etc/vsftpd/vsftpd.conf\n    \n    anonymous_enable=No # YES改成No,禁止匿名用户\n    listen=YES # No改成Yes 开启监听\n    # listen_ipv6=YES  # 此行需要注释掉\n    tcp_wrappers=YES   # 默认应该就是YES\n    \n    # 在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；\n    # 未在/etc/vsftpd/chroot_list文件中列出的用户，不能切换到其他目录。\n    # 需要创建/etc/vsftpd/chroot_list文件\n    chroot_local_user=YES\n    chroot_list_enable=YES  \n    # (default follows) \n    chroot_list_file=/etc/vsftpd/chroot_list\n    \n    # 防止500oops错误 \n    allow_writeable_chroot=YES \n    # 被动模式端口号\n    pasv_min_port=30000  \n    pasv_max_port=31000    \n    \n    \n    \n\n只允许指定ip登陆\n\n    vi /etc/hosts.allow\n    最后添加\n    vsftpd:192.168.0.19:allow\n    vsftpd:all:deny\n    \n\n添加虚拟用户\n\n    useradd -g ftp -d /var/ftp/ftpuser -s /sbin/nologin ftpuser \n    passwd ftpuser\n    cd /etc/vsftpd/\n    touch chroot_list\n    vi chroot_list\n    ftpuser # 将用户名称添加到chroot_list里\n    \n\n### LAMP安装\n\napache\n\n    yum install httpd # 安装apache2\n    systemctl enable httpd.service\n    systemctl enable httpd.service\n    \n\nmysql5.6\n\n    # 安装rpm包\n    rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n    # 查看可以安装的资源\n    yum repolist enabled | grep \"mysql.*-community.*\"\n    # 安装\n    yum install mysql-community-server\n    systemctl start mysqld\n    systemctl enable mysqld\n    mysql_secure_installation # 设置密码等\n    \n\nphp5.4\n\n    yum install php\n    yum install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql php-devel\n    \n\nphp5.6或者其他\n\n    yum -y install epel-release\n    wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    wget https://centos7.iuscommunity.org/ius-release.rpm\n    rpm -Uvh ius-release*.rpm\n    yum -y update\n    yum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath\n    \n\n### LAMP配置\n\napache允许php脚本\n\n    vi /etc/httpd/conf/httpd.conf\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz\n    AddType application/x-httpd-php .php  # 新添加内容\n    \n\napache虚拟主机\n\n    cd /etc/httpd/conf.d\n    vi vhost.conf\n    \n\n    <VirtualHost *:121>\n    ServerName phpmyadmin.com\n    ServerAlias www.phpmyadmin.com\n    DocumentRoot /var/www/html/phpMyAdmin/\n    ErrorLog /var/www/web_log/phpMyAdmin.www_error.log # 开启日志需要创建web_log文件夹，否则会报错\n    CustomLog /var/www/web_log/phpMyAdmin.www_access.log common\n    </VirtualHost>\n    <Directory \"/var/www/html/phpMyAdmin/\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n    \n    \n    <VirtualHost *:108>\n    ServerName hkmain.com\n    ServerAlias www.kmain.com\n    DocumentRoot /var/www/html/NEW/\n    ErrorLog /var/www/web_log/NEW.www_error.log\n    CustomLog /var/www/web_log/NEW.www_access.log common\n    </VirtualHost>\n    <Directory \"/var/www/html/NEW/\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n    \n    \n\napache加载的模块查看\n\n    apachectl -M | sort\n    \n\n网站目录权限配置\n\n    chown -R apache:apache WEB_FOLD\n    chmod 750 WEB_FOLD\n    cd WEB_FOLD\n    find -type d -exec chmod 750 {} \\;\n    find -not -type d -exec chmod 640 {} \\;\n    find . -name \"Runtime\" -type d -exec chmod -R 770 {} \\;\n    \n\n### LNMP安装与配置\n\n参考链接 https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7 nginx安装(apache二选一)\n\n    # 安装pcre库，使nginx支持rewrite\n    sudo yum install pcre pcre-devel -y\n    sudo yum install nginx\n    sudo systemctl start nginx.service\n    # 设置开机启动\n    sudo systemctl enable nginx.service\n    \n\nmysql5.6\n\n    # 安装rpm包\n    rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n    # 查看可以安装的资源\n    yum repolist enabled | grep \"mysql.*-community.*\"\n    # 安装\n    yum install mysql-community-server\n    systemctl start mysqld\n    systemctl enable mysqld\n    mysql_secure_installation # 设置密码等\n    \n\nphp安装\n\n    yum -y install epel-release\n    sudo yum install php php-mysql php-fpm\n    sudo yum install php-pecl-memcache\n    \n\n配置\n\n    vim /etc/php.ini\n    #cgi.fix_poathinfo=1改成\n    cgi.fix_pathinfo=0\n    \n\n    vim /etc/php-php.d/www.conf\n    # 第一处修改\n    listen = /var/run/php-fpm/php-fpm.sock\n    # 第二处修改\n    listen.owner = nobody\n    listen.group = nobody\n    # 第三处修改\n    user = nginx\n    group = nginx\n    \n\n    # 重启\n    sudo systemctl start php-fpm\n    sudo systemctl enable php-fpm\n    \n\n    # 安装xcahe\n    sudo yum -y install php-xcache xcache-admin\n    # 如果失败请用下面的方法\n    # xcahe\n    wget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/x86_64/php-xcache-3.1.1-1.el7.x86_64.rpm\n    # 图形化管理\n    wget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/noarch/xcache-admin-3.1.1-1.el7.noarch.rpm\n    \n\n#配置nginx sudo vi /etc/nginx/conf.d/default.conf server { listen 80; server\\_name server\\_domain\\_name\\_or_IP; # 注意位置，在括号外 root /usr/share/nginx/html; index index.php index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n        # 下面是配置fpm\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; (这个值从php-fpm复制来)\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n    \n\n}\n\n    # 测试\n    sudo vi /usr/share/nginx/html/info.php\n    <?php echo phpinfo();>\n    sudo systemctl restart php-fpm\n    sudo systemctl restart nginx\n    \n\n### 安装imagemagick\n\n    yum install php-pear gcc\n    yum install ImageMagick ImageMagick-devel ImageMagick-perl\n    pecl install imagick # 直接回车\n    echo extension=imagick.so >> /etc/php.ini # 添加php扩展\n    systemctl restart httpd\n    \n\n### mysql主从复制主服务器配置\n\n    vi /etc/my.cnf\n    [mysqld] \n    server-id=1     # 配一个唯一的ID编号，1至32  \n    log-bin=mysql-bin  # 二进制文件存放路径  \n    binlog-do-db=test1  # 需要同步的数据库名  \n    binlog-ignore-db=test2  # 不需要同步的数据库名 \n    \n\n其他参考mysql主从复制\n\n### rsycn数据同步\n\n    yum install rsync # 安装，默认端口873  \n    systemctl start rsyncd\n    systemctl enable rsyncd\n    \n    \n\n    vim rsync.conf# 日志文件位置，启动rsync后自动产生这个文件，无需提前创建\n    log file = /var/log/rsyncd.log\n    # pid文件的存放位置\n    pidfile = /var/run/rsyncd.pid\n    # 支持max connections参数的锁文件\n    lock file = /var/run/rsync.lock\n    # 用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件\n    secrets file = /etc/rsync.pass\n    # rsync启动时欢迎信息页面文件位置（文件内容自定义\n    # motd file = /etc/rsyncd.Motd\n    #\n    \n    # 设置rsync运行权限为root\n    # uid = root\n    # 设置rsync运行权限为root\n    # gid = root\n    # 匿名用户\n    uid = 0\n    gid = 0\n    # 默认端口\n    port = 873\n    # 默认为true，修改为no，增加对目录文件软连接的备份\n    use chroot = no\n    # 设置rsync服务端文件为读写权限\n    read only = yes\n    # 不显示rsync服务端资源列表\n    list = no\n    # 最大连接数\n    max connections = 200\n    # 设置超时时间\n    timeout = 600\n    # 不验证用户密码\n    strict modes = false\n    # 执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开\n    # auth users = test\n    # 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\n    hosts allow = 192.168.0.206, 192.168.0.118\n    # 禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\n    # hosts deny = 192.168.21.254\n    \n    # 自定义名称\n    [web]\n    # rsync服务端数据目录路径\n    path = /var/www/html/HKMAIN_NEW/Upload/product/manual/cn/\n    #\n    # 模块名称与自定义名称相同\n    comment = web\n    \n    [webe]\n    path = /var/www/html/HKMAIN_NEW/Upload/product/manual/en/\n    comment = webe\n    \n\n### centos7.2安装nfs服务器端\n\n    # 服务器端安装及配置\n    # 安装命令\n    sudo yum install nfs-utils rpcbind\n    # 查看是否安装成功\n    $ rpm -aq nfs-utils rpcbind\n    rpcbind-0.2.0-38.el7.x86_64\n    nfs-utils-1.3.0-0.33.el7_3.x86_64\n    # 启动rpcbind\n    sudo systemctl restart rpcbind\n    # 查看状态\n    systemctl status rpcbind\n    # 开机启动\n    sudo systemctl enable rpcbind\n    # 查看是否开机启动\n    systemctl is-enabled rpcbind # enable表示开机启动，disable表示不开机启动\n    # 启动及开机启动nfs服务\n    sudo systemctl restart nfs\n    sudo systemctl enable nfs\n    #配置nfs服务\n    vim /etc/exports\n    /readonly 192.168.0.160(insecure,ro,no_root_squash) # 指定ip地址，只读\n    /rwsync 192.168.0.0/24(insecure,rw,sync,no_root_squash) # 指定ip地址段，读写\n    # 加载配置文件\n    sudo exportfs -rv\n    # 查看nfs服务器本地挂载情况\n    $ showmount -e localhost\n    Export list for localhost:\n    /rwsync   192.168.0.0/24\n    /readonly 192.168.0.160\n    # 重启服务\n    sudo systemctl restart nfs\n    \n    \n    # 客户端安装配置\n    sudo yum install nfs-utils rpcbind\n    # 只需启动rpc服务\n    sudo systemctl restart rpcbind\n    sudo systemctl enable rpcbind\n    # 查看可以挂载服务器端的目录\n    showmount -e 192.168.0.206\n    Export list for 192.168.0.206:\n    /rwsync   192.168.0.0/24\n    /readonly 192.168.0.160\n    # 挂载\n    sudo mount -t nfs 192.168.0.206:/readonly /mnt/readonly\n    sudo mount -t nfs 192.168.0.206:/rwsync /mnt/rwsync\n    # 查看挂载结果\n    df -h\n    \n    \n    \n\n### centos7.2安装python3.5\n\n    # 安装编译环境\n    yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel\n    # 下载文件\n    wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\n    # 解压\n    tar -zxvf Python-3.6.6.tgz\n    # 编译安装\n    cd Python-3.5.1\n    ./configure --prefix=/usr/local/python3\n    make && make install\n    # 创建软连接\n    sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n    python3 --version\n    sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \n    pip3 --version\n    \n    # 添加pip源\n    vim ~/.pip/pip.conf\n    [global]\n    trusted-host =  mirrors.aliyun.com\n    index-url = https://mirrors.aliyun.com/pypi/simple\n    \n    ### 安装虚拟环境\n    sudo pip3 uninstall virtualenv\n    sudo ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv \n    \n    ### 创建虚拟环境\n    virtualenv --no-site-packages -p python3 .env\n    source ./.env/bin/activate\n    \n\n### centos7.2安装node8\n\n    # 参考文件 https://nodejs.org/en/download/package-manager/\n    On RHEL, CentOS or Fedora, for Node.js v8 LTS:\n    \n    curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\n    Alternatively for Node.js 10:\n    \n    curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\n    Then install:\n    sudo yum -y install nodejs\n    \n    \n    # 安装cnpm\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n    \n\n### centos6.8安装nginx\n\n    # 安装pcre库，使nginx支持rewrite\n    yum install pcre pcre-devel -y\n    # 安装openssl，https服务需要使用\n    yum install openssl openssl-devel -y\n    # 安装 gzip 类库\n    yum -y install zlib zlib-devel\n    # 安装编译程序\n    yum -y install make gcc gcc-c++ ncurses-devel\n    # 创建用户\n    useradd nginx -s /sbin/nologin -M\n    # 下载源码\n    wget -q https://nginx.org/download/nginx-1.6.3.tar.gz \n    tar -zxvf nginx-1.6.3.tar.gz\n    cd nginx-1.6.3\n    ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre\n    make\n    make install\n    \n\n    # 启动nginx\n    /usr/local/nginx/sbin/nginx\n    # 停止nginx\n    /usr/local/nginx/sbin/nginx -s quit\n    # 重新加载配置文件\n    /usr/local/nginx/sbin/nginx -s reload        \n    # 测试你的配置文件是否有误\n    /usr/local/nginx/sbin/nginx -t       \n    # 查看nginx对应的端口\n     lsof -i :80\n    \n\n### centos6.8安装mysql5.7\n\n    # yum源直接安装的是mysql5.1版本，抛弃\n    # 先检查是否有旧版本\n    rpm -qa | grep mysql\n    # 删除旧版本\n    sudo yum -y remove mysql-xx-xx\n    wget https://dev.mysql.com/get/mysql57-community-release-el6-10.noarch.rpm\n    sudo yum install mysql57-community-release-el6-10.noarch.rpm\n    sudo yum install mysql-community-server\n    \n\n### centos7.2 源码安装nginx\n\n    # 安装pcre库，使nginx支持rewrite\n    yum install pcre pcre-devel -y\n    # 安装openssl，https服务需要使用\n    yum install openssl openssl-devel -y\n    # 安装 gzip 类库\n    yum -y install zlib zlib-devel\n    # 安装编译程序\n    yum -y install make gcc gcc-c++ ncurses-devel\n    # 创建用户\n    useradd nginx -s /sbin/nologin -M\n    # 下载源码\n    wget -q https://nginx.org/download/nginx-1.12.1.tar.gz \n    tar -zxvf nginx-1.12.1.tar.gz\n    cd nginx-1.12.1\n    ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-threads --with-file-aio --with-ipv6 --with-http_v2_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=native'\n    make\n    make install\n    \n\n    # 创建链接\n    sudo ln -s /usr/local/nginx/bin/nginx /usr/bin/nginx\n    # 启动nginx\n    /usr/local/nginx/sbin/nginx\n    # 停止nginx\n    /usr/local/nginx/sbin/nginx -s quit\n    # 重新加载配置文件\n    /usr/local/nginx/sbin/nginx -s reload        \n    # 测试你的配置文件是否有误\n    /usr/local/nginx/sbin/nginx -t       \n    # 查看nginx对应的端口\n     lsof -i :80\n    \n    \n\n### centos7.2安装php7\n\n    # 加源\n    sudo yum install epel-release yum-utils\n    sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm\n    # 选择remi\n    sudo yum-config-manager --enable remi-php70\n    sudo yum-config-manager --enable remi-php71\n    sudo yum-config-manager --enable remi-php72\n    # 安装相关扩展\n    sudo yum-config-manager --enable remi-php70\n    sudo yum install php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysql\n    # 安装 PHP FPM \n    sudo yum install php-fpm\n    sudo systemctl enable php-fpm\n    sudo systemctl start php-fpm\n    # 配置\n    sudo vim /etc/php-fpm.d/www.conf\n    user = nginx\n    group = nginx\n    \n\n    # 配置nginx虚拟server\n    server {\n    \n        # . . . other code\n    \n        location ~ \\.php$ {\n            try_files $uri =404;\n            # fastcgi_pass unix:/run/php-fpm/www.sock;\n                    fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include fastcgi_params;\n        }\n    }\n    \n\n### centos7.2安装redis\n\n    $ sudo yum install redis\n    $ sudo systemctl enable redis\n    $ sudo systemctl start redis\n    # 查看版本号\n    $ redis-server --version\n    \n\n    # 使用方法 http://www.zhuohc.com/articles/redis%E5%9F%BA%E7%A1%80/\n    \n\n[centos7.2安装使用docker](/articles/centos7-2安装及使用docker/) [centos7.2安装使用sentry](/articles/centos7-2安装使用sentry/) [centos7.2安装使用rabbitMQ](/articles/centos7-2使用rabbitmq/) [centos7.2安装使用postgresql](/articles/postgresql常见命令/)","source":"_posts/Centos7服务器基础配置.md","raw":"---\ntitle: Centos7服务器基础配置\ntags:\n  - linux\nurl: 90.html\nid: 90\ncomments: false\ncategories:\n  - 运维\ndate: 2016-11-10 10:29:42\n---\n\n### 查看当前版本\n\n    cat /proc/version \n    cat /etc/redhat-release\n    Centos Linux release 7.2.1511 (Core)\n    \n\n### 修改root密码\n\n    > passwd root\n    > 输入密码\n    \n\n### 配置网络\n\ncentos网络配置地址 /etc/sysconfig/network Centos设置主机名和网络配置  \n/etc/sysconfig/network-scripts/ifcfg-eth0针对特定的网卡进行设置  \n/etc/resolv.conf设置DNS  \n/etc/hosts设置指定的域名解析地址  \n当前使用的是虚拟机网桥模式\n\n    cd /etc/sysconfig/network-scripts/\n    vi ifcfg-enp0s23\n    # 最后添加内容\n    IPADDR=192.168.0.160  # ip地址\n    NETMASK=255.255.255.0 # 掩码\n    GATEWAY=192.168.0.1 # 网关地址\n    DNS1=202.103.24.68 # DNS地址\n    # 修改内容\n    ONBOOT=yes # 启动时网络接口有效\n    BOOTPROTO=none # dhcp改成none dhcp自动获取，static固定，none手动\n    \n\n    # 启动网卡\n    sudo ifup eth0s23\n    sudo systemctl restart network\n    \n\n安装网络查看工具\n\n    yum install net-tools\n    \n\ncentos默认的命令是\n\n    ip addr\n    \n\n### 开机需要启动的5个服务\n\n    sshd远程登陆, \n    network网络,\n    rsyslog日志相关,\n    crond定时任务,\n    sysstat检测系统性能\n    \n\n### 创建用户\n\n    su\n    # 输入密码\n    useradd test\n    passwd test\n    # 输入密码\n    # 确认密码\n    su test # 切换成普通用户\n    \n\n将test用户加入到sudoers用\n\n    #visudo命令 # 相当于直接编辑 /etc/sudoers,但用命令方式更安全,推荐\n    su\n    cd /etc\n    chmod 777 sudoers\n    root    ALL=(ALL)       ALL\n    test    ALL=(ALL)       ALL  # 新添加的\n    chmod 440 sudoers   # 权限改成440，必须，否则会报错\n    \n\n### 配置ssh\n\n安装ssh\n\n    yum -y install  openssh*\n    \n\n    service sshd start    \n    \n\n### ssh连接\n\n    ssh test@192.168.0.160 # 默认22端口\n    ssh -p 2222 test@192.168.0.160 # 修改端口后\n    \n\n禁止root用户远程ssh连接\n\n    vi /etc/ssh/sshd_congif \n    # 最后添加\n    # 禁止root远程登陆  \n    PermitRootLogin no\n    \n\n### 关闭SELINUX\n\n修改/etc/selinux/config 文件  \n将SELINUX=enforcing改为SELINUX=disabled  \nsetenforce 0 ##设置SELinux 成为permissive模式,临时关闭或者及时起效\n\n### centos开启防火墙\n\n    systemctl mask firewalld\n    systemctl stop firewalld\n    yum install iptables-services # 如果下面命令报错，则需要安装\n    systemctl enable iptables\n    systemctl start iptables\n    systemctl enable ip6tables\n    systemctl start ip6tables\n    \n\n防火墙开机启动\n\n    systemctl enable iptables\n    systemctl disable iptables\n    \n\n    # 查看开机运行的服务\n    systemctl list-unit-files --type=service\n    \n\n防火墙是否放行ssh端口22\n\n    cd /etc/sysconfig/\n    vi iptables\n    \n\n在commit前添加以下内容，并注释文件开头信息\n\n    # sample configuration for iptables service\n    # you can edit this manually or use system-config-firewall\n    # please do not ask us to add additional ports/services to this default configuration\n    *filter\n    # :INPUT ACCEPT [0:0]\n    # :FORWARD ACCEPT [0:0]\n    # :OUTPUT ACCEPT [0:0]\n    # -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n    # -A INPUT -p icmp -j ACCEPT\n    # -A INPUT -i lo -j ACCEPT\n    # -A INPUT -j REJECT --reject-with icmp-host-prohibited\n    # -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n    \n    \n    \n    \n    \n    # 安全设置-防止扫描包\n    # NONE 包(所有标识bit都没有设置)主要是扫描类的数据包\n    -A INPUT -p tcp --tcp-flags ALL NONE -j DROP\n    # 防止sync-flood 攻击\n    -A INPUT -p tcp ! --syn -m state --state NEW -j DROP\n    # ALL包（所有的标注bit都被设置了）也是网络扫描的数据包\n    -A INPUT -p tcp --tcp-flags ALL ALL -j DROP\n    \n    # 开放对应端口\n    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n    \n    # 缺省设置\n    :INPUT DROP [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    # 许所有从服务器端发起的连接，由此返回的响应数据应该是允许的,yum操作等\n    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n    -A INPUT -p icmp -j ACCEPT\n    # 接受主机localhost的任意请求\n    -A INPUT -i lo -j ACCEPT\n    -A INPUT -j REJECT --reject-with icmp-host-prohibited\n    -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n    \n    COMMIT\n    \n    \n    \n\n### ftp\n\n安装及启动\n\n    yum install vsftpd\n    systemctl start vsftpd\n    systemctl enable vsftpd\n    \n\n更新防火墙，放行20， 21端口，如果用了代理上传，需要添加被动模式的端口号  \n修改配置项目\n\n    vi /etc/vsftpd/vsftpd.conf\n    \n    anonymous_enable=No # YES改成No,禁止匿名用户\n    listen=YES # No改成Yes 开启监听\n    # listen_ipv6=YES  # 此行需要注释掉\n    tcp_wrappers=YES   # 默认应该就是YES\n    \n    # 在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；\n    # 未在/etc/vsftpd/chroot_list文件中列出的用户，不能切换到其他目录。\n    # 需要创建/etc/vsftpd/chroot_list文件\n    chroot_local_user=YES\n    chroot_list_enable=YES  \n    # (default follows) \n    chroot_list_file=/etc/vsftpd/chroot_list\n    \n    # 防止500oops错误 \n    allow_writeable_chroot=YES \n    # 被动模式端口号\n    pasv_min_port=30000  \n    pasv_max_port=31000    \n    \n    \n    \n\n只允许指定ip登陆\n\n    vi /etc/hosts.allow\n    最后添加\n    vsftpd:192.168.0.19:allow\n    vsftpd:all:deny\n    \n\n添加虚拟用户\n\n    useradd -g ftp -d /var/ftp/ftpuser -s /sbin/nologin ftpuser \n    passwd ftpuser\n    cd /etc/vsftpd/\n    touch chroot_list\n    vi chroot_list\n    ftpuser # 将用户名称添加到chroot_list里\n    \n\n### LAMP安装\n\napache\n\n    yum install httpd # 安装apache2\n    systemctl enable httpd.service\n    systemctl enable httpd.service\n    \n\nmysql5.6\n\n    # 安装rpm包\n    rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n    # 查看可以安装的资源\n    yum repolist enabled | grep \"mysql.*-community.*\"\n    # 安装\n    yum install mysql-community-server\n    systemctl start mysqld\n    systemctl enable mysqld\n    mysql_secure_installation # 设置密码等\n    \n\nphp5.4\n\n    yum install php\n    yum install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql php-devel\n    \n\nphp5.6或者其他\n\n    yum -y install epel-release\n    wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    wget https://centos7.iuscommunity.org/ius-release.rpm\n    rpm -Uvh ius-release*.rpm\n    yum -y update\n    yum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath\n    \n\n### LAMP配置\n\napache允许php脚本\n\n    vi /etc/httpd/conf/httpd.conf\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz\n    AddType application/x-httpd-php .php  # 新添加内容\n    \n\napache虚拟主机\n\n    cd /etc/httpd/conf.d\n    vi vhost.conf\n    \n\n    <VirtualHost *:121>\n    ServerName phpmyadmin.com\n    ServerAlias www.phpmyadmin.com\n    DocumentRoot /var/www/html/phpMyAdmin/\n    ErrorLog /var/www/web_log/phpMyAdmin.www_error.log # 开启日志需要创建web_log文件夹，否则会报错\n    CustomLog /var/www/web_log/phpMyAdmin.www_access.log common\n    </VirtualHost>\n    <Directory \"/var/www/html/phpMyAdmin/\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n    \n    \n    <VirtualHost *:108>\n    ServerName hkmain.com\n    ServerAlias www.kmain.com\n    DocumentRoot /var/www/html/NEW/\n    ErrorLog /var/www/web_log/NEW.www_error.log\n    CustomLog /var/www/web_log/NEW.www_access.log common\n    </VirtualHost>\n    <Directory \"/var/www/html/NEW/\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n    \n    \n\napache加载的模块查看\n\n    apachectl -M | sort\n    \n\n网站目录权限配置\n\n    chown -R apache:apache WEB_FOLD\n    chmod 750 WEB_FOLD\n    cd WEB_FOLD\n    find -type d -exec chmod 750 {} \\;\n    find -not -type d -exec chmod 640 {} \\;\n    find . -name \"Runtime\" -type d -exec chmod -R 770 {} \\;\n    \n\n### LNMP安装与配置\n\n参考链接 https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7 nginx安装(apache二选一)\n\n    # 安装pcre库，使nginx支持rewrite\n    sudo yum install pcre pcre-devel -y\n    sudo yum install nginx\n    sudo systemctl start nginx.service\n    # 设置开机启动\n    sudo systemctl enable nginx.service\n    \n\nmysql5.6\n\n    # 安装rpm包\n    rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n    # 查看可以安装的资源\n    yum repolist enabled | grep \"mysql.*-community.*\"\n    # 安装\n    yum install mysql-community-server\n    systemctl start mysqld\n    systemctl enable mysqld\n    mysql_secure_installation # 设置密码等\n    \n\nphp安装\n\n    yum -y install epel-release\n    sudo yum install php php-mysql php-fpm\n    sudo yum install php-pecl-memcache\n    \n\n配置\n\n    vim /etc/php.ini\n    #cgi.fix_poathinfo=1改成\n    cgi.fix_pathinfo=0\n    \n\n    vim /etc/php-php.d/www.conf\n    # 第一处修改\n    listen = /var/run/php-fpm/php-fpm.sock\n    # 第二处修改\n    listen.owner = nobody\n    listen.group = nobody\n    # 第三处修改\n    user = nginx\n    group = nginx\n    \n\n    # 重启\n    sudo systemctl start php-fpm\n    sudo systemctl enable php-fpm\n    \n\n    # 安装xcahe\n    sudo yum -y install php-xcache xcache-admin\n    # 如果失败请用下面的方法\n    # xcahe\n    wget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/x86_64/php-xcache-3.1.1-1.el7.x86_64.rpm\n    # 图形化管理\n    wget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/noarch/xcache-admin-3.1.1-1.el7.noarch.rpm\n    \n\n#配置nginx sudo vi /etc/nginx/conf.d/default.conf server { listen 80; server\\_name server\\_domain\\_name\\_or_IP; # 注意位置，在括号外 root /usr/share/nginx/html; index index.php index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n        # 下面是配置fpm\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; (这个值从php-fpm复制来)\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n    \n\n}\n\n    # 测试\n    sudo vi /usr/share/nginx/html/info.php\n    <?php echo phpinfo();>\n    sudo systemctl restart php-fpm\n    sudo systemctl restart nginx\n    \n\n### 安装imagemagick\n\n    yum install php-pear gcc\n    yum install ImageMagick ImageMagick-devel ImageMagick-perl\n    pecl install imagick # 直接回车\n    echo extension=imagick.so >> /etc/php.ini # 添加php扩展\n    systemctl restart httpd\n    \n\n### mysql主从复制主服务器配置\n\n    vi /etc/my.cnf\n    [mysqld] \n    server-id=1     # 配一个唯一的ID编号，1至32  \n    log-bin=mysql-bin  # 二进制文件存放路径  \n    binlog-do-db=test1  # 需要同步的数据库名  \n    binlog-ignore-db=test2  # 不需要同步的数据库名 \n    \n\n其他参考mysql主从复制\n\n### rsycn数据同步\n\n    yum install rsync # 安装，默认端口873  \n    systemctl start rsyncd\n    systemctl enable rsyncd\n    \n    \n\n    vim rsync.conf# 日志文件位置，启动rsync后自动产生这个文件，无需提前创建\n    log file = /var/log/rsyncd.log\n    # pid文件的存放位置\n    pidfile = /var/run/rsyncd.pid\n    # 支持max connections参数的锁文件\n    lock file = /var/run/rsync.lock\n    # 用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件\n    secrets file = /etc/rsync.pass\n    # rsync启动时欢迎信息页面文件位置（文件内容自定义\n    # motd file = /etc/rsyncd.Motd\n    #\n    \n    # 设置rsync运行权限为root\n    # uid = root\n    # 设置rsync运行权限为root\n    # gid = root\n    # 匿名用户\n    uid = 0\n    gid = 0\n    # 默认端口\n    port = 873\n    # 默认为true，修改为no，增加对目录文件软连接的备份\n    use chroot = no\n    # 设置rsync服务端文件为读写权限\n    read only = yes\n    # 不显示rsync服务端资源列表\n    list = no\n    # 最大连接数\n    max connections = 200\n    # 设置超时时间\n    timeout = 600\n    # 不验证用户密码\n    strict modes = false\n    # 执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开\n    # auth users = test\n    # 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\n    hosts allow = 192.168.0.206, 192.168.0.118\n    # 禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\n    # hosts deny = 192.168.21.254\n    \n    # 自定义名称\n    [web]\n    # rsync服务端数据目录路径\n    path = /var/www/html/HKMAIN_NEW/Upload/product/manual/cn/\n    #\n    # 模块名称与自定义名称相同\n    comment = web\n    \n    [webe]\n    path = /var/www/html/HKMAIN_NEW/Upload/product/manual/en/\n    comment = webe\n    \n\n### centos7.2安装nfs服务器端\n\n    # 服务器端安装及配置\n    # 安装命令\n    sudo yum install nfs-utils rpcbind\n    # 查看是否安装成功\n    $ rpm -aq nfs-utils rpcbind\n    rpcbind-0.2.0-38.el7.x86_64\n    nfs-utils-1.3.0-0.33.el7_3.x86_64\n    # 启动rpcbind\n    sudo systemctl restart rpcbind\n    # 查看状态\n    systemctl status rpcbind\n    # 开机启动\n    sudo systemctl enable rpcbind\n    # 查看是否开机启动\n    systemctl is-enabled rpcbind # enable表示开机启动，disable表示不开机启动\n    # 启动及开机启动nfs服务\n    sudo systemctl restart nfs\n    sudo systemctl enable nfs\n    #配置nfs服务\n    vim /etc/exports\n    /readonly 192.168.0.160(insecure,ro,no_root_squash) # 指定ip地址，只读\n    /rwsync 192.168.0.0/24(insecure,rw,sync,no_root_squash) # 指定ip地址段，读写\n    # 加载配置文件\n    sudo exportfs -rv\n    # 查看nfs服务器本地挂载情况\n    $ showmount -e localhost\n    Export list for localhost:\n    /rwsync   192.168.0.0/24\n    /readonly 192.168.0.160\n    # 重启服务\n    sudo systemctl restart nfs\n    \n    \n    # 客户端安装配置\n    sudo yum install nfs-utils rpcbind\n    # 只需启动rpc服务\n    sudo systemctl restart rpcbind\n    sudo systemctl enable rpcbind\n    # 查看可以挂载服务器端的目录\n    showmount -e 192.168.0.206\n    Export list for 192.168.0.206:\n    /rwsync   192.168.0.0/24\n    /readonly 192.168.0.160\n    # 挂载\n    sudo mount -t nfs 192.168.0.206:/readonly /mnt/readonly\n    sudo mount -t nfs 192.168.0.206:/rwsync /mnt/rwsync\n    # 查看挂载结果\n    df -h\n    \n    \n    \n\n### centos7.2安装python3.5\n\n    # 安装编译环境\n    yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel\n    # 下载文件\n    wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\n    # 解压\n    tar -zxvf Python-3.6.6.tgz\n    # 编译安装\n    cd Python-3.5.1\n    ./configure --prefix=/usr/local/python3\n    make && make install\n    # 创建软连接\n    sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n    python3 --version\n    sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \n    pip3 --version\n    \n    # 添加pip源\n    vim ~/.pip/pip.conf\n    [global]\n    trusted-host =  mirrors.aliyun.com\n    index-url = https://mirrors.aliyun.com/pypi/simple\n    \n    ### 安装虚拟环境\n    sudo pip3 uninstall virtualenv\n    sudo ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv \n    \n    ### 创建虚拟环境\n    virtualenv --no-site-packages -p python3 .env\n    source ./.env/bin/activate\n    \n\n### centos7.2安装node8\n\n    # 参考文件 https://nodejs.org/en/download/package-manager/\n    On RHEL, CentOS or Fedora, for Node.js v8 LTS:\n    \n    curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\n    Alternatively for Node.js 10:\n    \n    curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\n    Then install:\n    sudo yum -y install nodejs\n    \n    \n    # 安装cnpm\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n    \n\n### centos6.8安装nginx\n\n    # 安装pcre库，使nginx支持rewrite\n    yum install pcre pcre-devel -y\n    # 安装openssl，https服务需要使用\n    yum install openssl openssl-devel -y\n    # 安装 gzip 类库\n    yum -y install zlib zlib-devel\n    # 安装编译程序\n    yum -y install make gcc gcc-c++ ncurses-devel\n    # 创建用户\n    useradd nginx -s /sbin/nologin -M\n    # 下载源码\n    wget -q https://nginx.org/download/nginx-1.6.3.tar.gz \n    tar -zxvf nginx-1.6.3.tar.gz\n    cd nginx-1.6.3\n    ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre\n    make\n    make install\n    \n\n    # 启动nginx\n    /usr/local/nginx/sbin/nginx\n    # 停止nginx\n    /usr/local/nginx/sbin/nginx -s quit\n    # 重新加载配置文件\n    /usr/local/nginx/sbin/nginx -s reload        \n    # 测试你的配置文件是否有误\n    /usr/local/nginx/sbin/nginx -t       \n    # 查看nginx对应的端口\n     lsof -i :80\n    \n\n### centos6.8安装mysql5.7\n\n    # yum源直接安装的是mysql5.1版本，抛弃\n    # 先检查是否有旧版本\n    rpm -qa | grep mysql\n    # 删除旧版本\n    sudo yum -y remove mysql-xx-xx\n    wget https://dev.mysql.com/get/mysql57-community-release-el6-10.noarch.rpm\n    sudo yum install mysql57-community-release-el6-10.noarch.rpm\n    sudo yum install mysql-community-server\n    \n\n### centos7.2 源码安装nginx\n\n    # 安装pcre库，使nginx支持rewrite\n    yum install pcre pcre-devel -y\n    # 安装openssl，https服务需要使用\n    yum install openssl openssl-devel -y\n    # 安装 gzip 类库\n    yum -y install zlib zlib-devel\n    # 安装编译程序\n    yum -y install make gcc gcc-c++ ncurses-devel\n    # 创建用户\n    useradd nginx -s /sbin/nologin -M\n    # 下载源码\n    wget -q https://nginx.org/download/nginx-1.12.1.tar.gz \n    tar -zxvf nginx-1.12.1.tar.gz\n    cd nginx-1.12.1\n    ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-threads --with-file-aio --with-ipv6 --with-http_v2_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=native'\n    make\n    make install\n    \n\n    # 创建链接\n    sudo ln -s /usr/local/nginx/bin/nginx /usr/bin/nginx\n    # 启动nginx\n    /usr/local/nginx/sbin/nginx\n    # 停止nginx\n    /usr/local/nginx/sbin/nginx -s quit\n    # 重新加载配置文件\n    /usr/local/nginx/sbin/nginx -s reload        \n    # 测试你的配置文件是否有误\n    /usr/local/nginx/sbin/nginx -t       \n    # 查看nginx对应的端口\n     lsof -i :80\n    \n    \n\n### centos7.2安装php7\n\n    # 加源\n    sudo yum install epel-release yum-utils\n    sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm\n    # 选择remi\n    sudo yum-config-manager --enable remi-php70\n    sudo yum-config-manager --enable remi-php71\n    sudo yum-config-manager --enable remi-php72\n    # 安装相关扩展\n    sudo yum-config-manager --enable remi-php70\n    sudo yum install php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysql\n    # 安装 PHP FPM \n    sudo yum install php-fpm\n    sudo systemctl enable php-fpm\n    sudo systemctl start php-fpm\n    # 配置\n    sudo vim /etc/php-fpm.d/www.conf\n    user = nginx\n    group = nginx\n    \n\n    # 配置nginx虚拟server\n    server {\n    \n        # . . . other code\n    \n        location ~ \\.php$ {\n            try_files $uri =404;\n            # fastcgi_pass unix:/run/php-fpm/www.sock;\n                    fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include fastcgi_params;\n        }\n    }\n    \n\n### centos7.2安装redis\n\n    $ sudo yum install redis\n    $ sudo systemctl enable redis\n    $ sudo systemctl start redis\n    # 查看版本号\n    $ redis-server --version\n    \n\n    # 使用方法 http://www.zhuohc.com/articles/redis%E5%9F%BA%E7%A1%80/\n    \n\n[centos7.2安装使用docker](/articles/centos7-2安装及使用docker/) [centos7.2安装使用sentry](/articles/centos7-2安装使用sentry/) [centos7.2安装使用rabbitMQ](/articles/centos7-2使用rabbitmq/) [centos7.2安装使用postgresql](/articles/postgresql常见命令/)","slug":"Centos7服务器基础配置","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwt9004th3a4ng5as3ao","content":"<h3 id=\"查看当前版本\"><a href=\"#查看当前版本\" class=\"headerlink\" title=\"查看当前版本\"></a>查看当前版本</h3><pre><code>cat /proc/version \ncat /etc/redhat-release\nCentos Linux release 7.2.1511 (Core)</code></pre><h3 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h3><pre><code>&gt; passwd root\n&gt; 输入密码</code></pre><h3 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h3><p>centos网络配置地址 /etc/sysconfig/network Centos设置主机名和网络配置<br>/etc/sysconfig/network-scripts/ifcfg-eth0针对特定的网卡进行设置<br>/etc/resolv.conf设置DNS<br>/etc/hosts设置指定的域名解析地址<br>当前使用的是虚拟机网桥模式</p>\n<pre><code>cd /etc/sysconfig/network-scripts/\nvi ifcfg-enp0s23\n# 最后添加内容\nIPADDR=192.168.0.160  # ip地址\nNETMASK=255.255.255.0 # 掩码\nGATEWAY=192.168.0.1 # 网关地址\nDNS1=202.103.24.68 # DNS地址\n# 修改内容\nONBOOT=yes # 启动时网络接口有效\nBOOTPROTO=none # dhcp改成none dhcp自动获取，static固定，none手动\n\n\n# 启动网卡\nsudo ifup eth0s23\nsudo systemctl restart network</code></pre><p>安装网络查看工具</p>\n<pre><code>yum install net-tools</code></pre><p>centos默认的命令是</p>\n<pre><code>ip addr</code></pre><h3 id=\"开机需要启动的5个服务\"><a href=\"#开机需要启动的5个服务\" class=\"headerlink\" title=\"开机需要启动的5个服务\"></a>开机需要启动的5个服务</h3><pre><code>sshd远程登陆, \nnetwork网络,\nrsyslog日志相关,\ncrond定时任务,\nsysstat检测系统性能</code></pre><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><pre><code>su\n# 输入密码\nuseradd test\npasswd test\n# 输入密码\n# 确认密码\nsu test # 切换成普通用户</code></pre><p>将test用户加入到sudoers用</p>\n<pre><code>#visudo命令 # 相当于直接编辑 /etc/sudoers,但用命令方式更安全,推荐\nsu\ncd /etc\nchmod 777 sudoers\nroot    ALL=(ALL)       ALL\ntest    ALL=(ALL)       ALL  # 新添加的\nchmod 440 sudoers   # 权限改成440，必须，否则会报错</code></pre><h3 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h3><p>安装ssh</p>\n<pre><code>yum -y install  openssh*\n\n\nservice sshd start    </code></pre><h3 id=\"ssh连接\"><a href=\"#ssh连接\" class=\"headerlink\" title=\"ssh连接\"></a>ssh连接</h3><pre><code>ssh test@192.168.0.160 # 默认22端口\nssh -p 2222 test@192.168.0.160 # 修改端口后</code></pre><p>禁止root用户远程ssh连接</p>\n<pre><code>vi /etc/ssh/sshd_congif \n# 最后添加\n# 禁止root远程登陆  \nPermitRootLogin no</code></pre><h3 id=\"关闭SELINUX\"><a href=\"#关闭SELINUX\" class=\"headerlink\" title=\"关闭SELINUX\"></a>关闭SELINUX</h3><p>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>setenforce 0 ##设置SELinux 成为permissive模式,临时关闭或者及时起效</p>\n<h3 id=\"centos开启防火墙\"><a href=\"#centos开启防火墙\" class=\"headerlink\" title=\"centos开启防火墙\"></a>centos开启防火墙</h3><pre><code>systemctl mask firewalld\nsystemctl stop firewalld\nyum install iptables-services # 如果下面命令报错，则需要安装\nsystemctl enable iptables\nsystemctl start iptables\nsystemctl enable ip6tables\nsystemctl start ip6tables</code></pre><p>防火墙开机启动</p>\n<pre><code>systemctl enable iptables\nsystemctl disable iptables\n\n\n# 查看开机运行的服务\nsystemctl list-unit-files --type=service</code></pre><p>防火墙是否放行ssh端口22</p>\n<pre><code>cd /etc/sysconfig/\nvi iptables</code></pre><p>在commit前添加以下内容，并注释文件开头信息</p>\n<pre><code># sample configuration for iptables service\n# you can edit this manually or use system-config-firewall\n# please do not ask us to add additional ports/services to this default configuration\n*filter\n# :INPUT ACCEPT [0:0]\n# :FORWARD ACCEPT [0:0]\n# :OUTPUT ACCEPT [0:0]\n# -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n# -A INPUT -p icmp -j ACCEPT\n# -A INPUT -i lo -j ACCEPT\n# -A INPUT -j REJECT --reject-with icmp-host-prohibited\n# -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n\n\n\n\n\n# 安全设置-防止扫描包\n# NONE 包(所有标识bit都没有设置)主要是扫描类的数据包\n-A INPUT -p tcp --tcp-flags ALL NONE -j DROP\n# 防止sync-flood 攻击\n-A INPUT -p tcp ! --syn -m state --state NEW -j DROP\n# ALL包（所有的标注bit都被设置了）也是网络扫描的数据包\n-A INPUT -p tcp --tcp-flags ALL ALL -j DROP\n\n# 开放对应端口\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n\n# 缺省设置\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n# 许所有从服务器端发起的连接，由此返回的响应数据应该是允许的,yum操作等\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n# 接受主机localhost的任意请求\n-A INPUT -i lo -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\n\nCOMMIT</code></pre><h3 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h3><p>安装及启动</p>\n<pre><code>yum install vsftpd\nsystemctl start vsftpd\nsystemctl enable vsftpd</code></pre><p>更新防火墙，放行20， 21端口，如果用了代理上传，需要添加被动模式的端口号<br>修改配置项目</p>\n<pre><code>vi /etc/vsftpd/vsftpd.conf\n\nanonymous_enable=No # YES改成No,禁止匿名用户\nlisten=YES # No改成Yes 开启监听\n# listen_ipv6=YES  # 此行需要注释掉\ntcp_wrappers=YES   # 默认应该就是YES\n\n# 在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；\n# 未在/etc/vsftpd/chroot_list文件中列出的用户，不能切换到其他目录。\n# 需要创建/etc/vsftpd/chroot_list文件\nchroot_local_user=YES\nchroot_list_enable=YES  \n# (default follows) \nchroot_list_file=/etc/vsftpd/chroot_list\n\n# 防止500oops错误 \nallow_writeable_chroot=YES \n# 被动模式端口号\npasv_min_port=30000  \npasv_max_port=31000    </code></pre><p>只允许指定ip登陆</p>\n<pre><code>vi /etc/hosts.allow\n最后添加\nvsftpd:192.168.0.19:allow\nvsftpd:all:deny</code></pre><p>添加虚拟用户</p>\n<pre><code>useradd -g ftp -d /var/ftp/ftpuser -s /sbin/nologin ftpuser \npasswd ftpuser\ncd /etc/vsftpd/\ntouch chroot_list\nvi chroot_list\nftpuser # 将用户名称添加到chroot_list里</code></pre><h3 id=\"LAMP安装\"><a href=\"#LAMP安装\" class=\"headerlink\" title=\"LAMP安装\"></a>LAMP安装</h3><p>apache</p>\n<pre><code>yum install httpd # 安装apache2\nsystemctl enable httpd.service\nsystemctl enable httpd.service</code></pre><p>mysql5.6</p>\n<pre><code># 安装rpm包\nrpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# 查看可以安装的资源\nyum repolist enabled | grep &quot;mysql.*-community.*&quot;\n# 安装\nyum install mysql-community-server\nsystemctl start mysqld\nsystemctl enable mysqld\nmysql_secure_installation # 设置密码等</code></pre><p>php5.4</p>\n<pre><code>yum install php\nyum install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql php-devel</code></pre><p>php5.6或者其他</p>\n<pre><code>yum -y install epel-release\nwget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nwget https://centos7.iuscommunity.org/ius-release.rpm\nrpm -Uvh ius-release*.rpm\nyum -y update\nyum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath</code></pre><h3 id=\"LAMP配置\"><a href=\"#LAMP配置\" class=\"headerlink\" title=\"LAMP配置\"></a>LAMP配置</h3><p>apache允许php脚本</p>\n<pre><code>vi /etc/httpd/conf/httpd.conf\nAddType application/x-compress .Z\nAddType application/x-gzip .gz .tgz\nAddType application/x-httpd-php .php  # 新添加内容</code></pre><p>apache虚拟主机</p>\n<pre><code>cd /etc/httpd/conf.d\nvi vhost.conf\n\n\n&lt;VirtualHost *:121&gt;\nServerName phpmyadmin.com\nServerAlias www.phpmyadmin.com\nDocumentRoot /var/www/html/phpMyAdmin/\nErrorLog /var/www/web_log/phpMyAdmin.www_error.log # 开启日志需要创建web_log文件夹，否则会报错\nCustomLog /var/www/web_log/phpMyAdmin.www_access.log common\n&lt;/VirtualHost&gt;\n&lt;Directory &quot;/var/www/html/phpMyAdmin/&quot;&gt;\n    Options FollowSymLinks\n    AllowOverride All\n    Require all granted\n&lt;/Directory&gt;\n\n\n&lt;VirtualHost *:108&gt;\nServerName hkmain.com\nServerAlias www.kmain.com\nDocumentRoot /var/www/html/NEW/\nErrorLog /var/www/web_log/NEW.www_error.log\nCustomLog /var/www/web_log/NEW.www_access.log common\n&lt;/VirtualHost&gt;\n&lt;Directory &quot;/var/www/html/NEW/&quot;&gt;\n    Options FollowSymLinks\n    AllowOverride All\n    Require all granted\n&lt;/Directory&gt;</code></pre><p>apache加载的模块查看</p>\n<pre><code>apachectl -M | sort</code></pre><p>网站目录权限配置</p>\n<pre><code>chown -R apache:apache WEB_FOLD\nchmod 750 WEB_FOLD\ncd WEB_FOLD\nfind -type d -exec chmod 750 {} \\;\nfind -not -type d -exec chmod 640 {} \\;\nfind . -name &quot;Runtime&quot; -type d -exec chmod -R 770 {} \\;</code></pre><h3 id=\"LNMP安装与配置\"><a href=\"#LNMP安装与配置\" class=\"headerlink\" title=\"LNMP安装与配置\"></a>LNMP安装与配置</h3><p>参考链接 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7\" target=\"_blank\" rel=\"noopener\">https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7</a> nginx安装(apache二选一)</p>\n<pre><code># 安装pcre库，使nginx支持rewrite\nsudo yum install pcre pcre-devel -y\nsudo yum install nginx\nsudo systemctl start nginx.service\n# 设置开机启动\nsudo systemctl enable nginx.service</code></pre><p>mysql5.6</p>\n<pre><code># 安装rpm包\nrpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# 查看可以安装的资源\nyum repolist enabled | grep &quot;mysql.*-community.*&quot;\n# 安装\nyum install mysql-community-server\nsystemctl start mysqld\nsystemctl enable mysqld\nmysql_secure_installation # 设置密码等</code></pre><p>php安装</p>\n<pre><code>yum -y install epel-release\nsudo yum install php php-mysql php-fpm\nsudo yum install php-pecl-memcache</code></pre><p>配置</p>\n<pre><code>vim /etc/php.ini\n#cgi.fix_poathinfo=1改成\ncgi.fix_pathinfo=0\n\n\nvim /etc/php-php.d/www.conf\n# 第一处修改\nlisten = /var/run/php-fpm/php-fpm.sock\n# 第二处修改\nlisten.owner = nobody\nlisten.group = nobody\n# 第三处修改\nuser = nginx\ngroup = nginx\n\n\n# 重启\nsudo systemctl start php-fpm\nsudo systemctl enable php-fpm\n\n\n# 安装xcahe\nsudo yum -y install php-xcache xcache-admin\n# 如果失败请用下面的方法\n# xcahe\nwget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/x86_64/php-xcache-3.1.1-1.el7.x86_64.rpm\n# 图形化管理\nwget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/noarch/xcache-admin-3.1.1-1.el7.noarch.rpm</code></pre><p>#配置nginx sudo vi /etc/nginx/conf.d/default.conf server { listen 80; server_name server_domain_name_or_IP; # 注意位置，在括号外 root /usr/share/nginx/html; index index.php index.html index.htm;</p>\n<pre><code>location / {\n    try_files $uri $uri/ =404;\n}\nerror_page 404 /404.html;\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n    root /usr/share/nginx/html;\n}\n    # 下面是配置fpm\nlocation ~ \\.php$ {\n    try_files $uri =404;\n    fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; (这个值从php-fpm复制来)\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    include fastcgi_params;\n}</code></pre><p>}</p>\n<pre><code># 测试\nsudo vi /usr/share/nginx/html/info.php\n&lt;?php echo phpinfo();&gt;\nsudo systemctl restart php-fpm\nsudo systemctl restart nginx</code></pre><h3 id=\"安装imagemagick\"><a href=\"#安装imagemagick\" class=\"headerlink\" title=\"安装imagemagick\"></a>安装imagemagick</h3><pre><code>yum install php-pear gcc\nyum install ImageMagick ImageMagick-devel ImageMagick-perl\npecl install imagick # 直接回车\necho extension=imagick.so &gt;&gt; /etc/php.ini # 添加php扩展\nsystemctl restart httpd</code></pre><h3 id=\"mysql主从复制主服务器配置\"><a href=\"#mysql主从复制主服务器配置\" class=\"headerlink\" title=\"mysql主从复制主服务器配置\"></a>mysql主从复制主服务器配置</h3><pre><code>vi /etc/my.cnf\n[mysqld] \nserver-id=1     # 配一个唯一的ID编号，1至32  \nlog-bin=mysql-bin  # 二进制文件存放路径  \nbinlog-do-db=test1  # 需要同步的数据库名  \nbinlog-ignore-db=test2  # 不需要同步的数据库名 </code></pre><p>其他参考mysql主从复制</p>\n<h3 id=\"rsycn数据同步\"><a href=\"#rsycn数据同步\" class=\"headerlink\" title=\"rsycn数据同步\"></a>rsycn数据同步</h3><pre><code>yum install rsync # 安装，默认端口873  \nsystemctl start rsyncd\nsystemctl enable rsyncd\n\n\n\nvim rsync.conf# 日志文件位置，启动rsync后自动产生这个文件，无需提前创建\nlog file = /var/log/rsyncd.log\n# pid文件的存放位置\npidfile = /var/run/rsyncd.pid\n# 支持max connections参数的锁文件\nlock file = /var/run/rsync.lock\n# 用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件\nsecrets file = /etc/rsync.pass\n# rsync启动时欢迎信息页面文件位置（文件内容自定义\n# motd file = /etc/rsyncd.Motd\n#\n\n# 设置rsync运行权限为root\n# uid = root\n# 设置rsync运行权限为root\n# gid = root\n# 匿名用户\nuid = 0\ngid = 0\n# 默认端口\nport = 873\n# 默认为true，修改为no，增加对目录文件软连接的备份\nuse chroot = no\n# 设置rsync服务端文件为读写权限\nread only = yes\n# 不显示rsync服务端资源列表\nlist = no\n# 最大连接数\nmax connections = 200\n# 设置超时时间\ntimeout = 600\n# 不验证用户密码\nstrict modes = false\n# 执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开\n# auth users = test\n# 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\nhosts allow = 192.168.0.206, 192.168.0.118\n# 禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\n# hosts deny = 192.168.21.254\n\n# 自定义名称\n[web]\n# rsync服务端数据目录路径\npath = /var/www/html/HKMAIN_NEW/Upload/product/manual/cn/\n#\n# 模块名称与自定义名称相同\ncomment = web\n\n[webe]\npath = /var/www/html/HKMAIN_NEW/Upload/product/manual/en/\ncomment = webe</code></pre><h3 id=\"centos7-2安装nfs服务器端\"><a href=\"#centos7-2安装nfs服务器端\" class=\"headerlink\" title=\"centos7.2安装nfs服务器端\"></a>centos7.2安装nfs服务器端</h3><pre><code># 服务器端安装及配置\n# 安装命令\nsudo yum install nfs-utils rpcbind\n# 查看是否安装成功\n$ rpm -aq nfs-utils rpcbind\nrpcbind-0.2.0-38.el7.x86_64\nnfs-utils-1.3.0-0.33.el7_3.x86_64\n# 启动rpcbind\nsudo systemctl restart rpcbind\n# 查看状态\nsystemctl status rpcbind\n# 开机启动\nsudo systemctl enable rpcbind\n# 查看是否开机启动\nsystemctl is-enabled rpcbind # enable表示开机启动，disable表示不开机启动\n# 启动及开机启动nfs服务\nsudo systemctl restart nfs\nsudo systemctl enable nfs\n#配置nfs服务\nvim /etc/exports\n/readonly 192.168.0.160(insecure,ro,no_root_squash) # 指定ip地址，只读\n/rwsync 192.168.0.0/24(insecure,rw,sync,no_root_squash) # 指定ip地址段，读写\n# 加载配置文件\nsudo exportfs -rv\n# 查看nfs服务器本地挂载情况\n$ showmount -e localhost\nExport list for localhost:\n/rwsync   192.168.0.0/24\n/readonly 192.168.0.160\n# 重启服务\nsudo systemctl restart nfs\n\n\n# 客户端安装配置\nsudo yum install nfs-utils rpcbind\n# 只需启动rpc服务\nsudo systemctl restart rpcbind\nsudo systemctl enable rpcbind\n# 查看可以挂载服务器端的目录\nshowmount -e 192.168.0.206\nExport list for 192.168.0.206:\n/rwsync   192.168.0.0/24\n/readonly 192.168.0.160\n# 挂载\nsudo mount -t nfs 192.168.0.206:/readonly /mnt/readonly\nsudo mount -t nfs 192.168.0.206:/rwsync /mnt/rwsync\n# 查看挂载结果\ndf -h</code></pre><h3 id=\"centos7-2安装python3-5\"><a href=\"#centos7-2安装python3-5\" class=\"headerlink\" title=\"centos7.2安装python3.5\"></a>centos7.2安装python3.5</h3><pre><code># 安装编译环境\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel\n# 下载文件\nwget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\n# 解压\ntar -zxvf Python-3.6.6.tgz\n# 编译安装\ncd Python-3.5.1\n./configure --prefix=/usr/local/python3\nmake &amp;&amp; make install\n# 创建软连接\nsudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\npython3 --version\nsudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \npip3 --version\n\n# 添加pip源\nvim ~/.pip/pip.conf\n[global]\ntrusted-host =  mirrors.aliyun.com\nindex-url = https://mirrors.aliyun.com/pypi/simple\n\n### 安装虚拟环境\nsudo pip3 uninstall virtualenv\nsudo ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv \n\n### 创建虚拟环境\nvirtualenv --no-site-packages -p python3 .env\nsource ./.env/bin/activate</code></pre><h3 id=\"centos7-2安装node8\"><a href=\"#centos7-2安装node8\" class=\"headerlink\" title=\"centos7.2安装node8\"></a>centos7.2安装node8</h3><pre><code># 参考文件 https://nodejs.org/en/download/package-manager/\nOn RHEL, CentOS or Fedora, for Node.js v8 LTS:\n\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nAlternatively for Node.js 10:\n\ncurl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\nThen install:\nsudo yum -y install nodejs\n\n\n# 安装cnpm\nnpm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id=\"centos6-8安装nginx\"><a href=\"#centos6-8安装nginx\" class=\"headerlink\" title=\"centos6.8安装nginx\"></a>centos6.8安装nginx</h3><pre><code># 安装pcre库，使nginx支持rewrite\nyum install pcre pcre-devel -y\n# 安装openssl，https服务需要使用\nyum install openssl openssl-devel -y\n# 安装 gzip 类库\nyum -y install zlib zlib-devel\n# 安装编译程序\nyum -y install make gcc gcc-c++ ncurses-devel\n# 创建用户\nuseradd nginx -s /sbin/nologin -M\n# 下载源码\nwget -q https://nginx.org/download/nginx-1.6.3.tar.gz \ntar -zxvf nginx-1.6.3.tar.gz\ncd nginx-1.6.3\n./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre\nmake\nmake install\n\n\n# 启动nginx\n/usr/local/nginx/sbin/nginx\n# 停止nginx\n/usr/local/nginx/sbin/nginx -s quit\n# 重新加载配置文件\n/usr/local/nginx/sbin/nginx -s reload        \n# 测试你的配置文件是否有误\n/usr/local/nginx/sbin/nginx -t       \n# 查看nginx对应的端口\n lsof -i :80</code></pre><h3 id=\"centos6-8安装mysql5-7\"><a href=\"#centos6-8安装mysql5-7\" class=\"headerlink\" title=\"centos6.8安装mysql5.7\"></a>centos6.8安装mysql5.7</h3><pre><code># yum源直接安装的是mysql5.1版本，抛弃\n# 先检查是否有旧版本\nrpm -qa | grep mysql\n# 删除旧版本\nsudo yum -y remove mysql-xx-xx\nwget https://dev.mysql.com/get/mysql57-community-release-el6-10.noarch.rpm\nsudo yum install mysql57-community-release-el6-10.noarch.rpm\nsudo yum install mysql-community-server</code></pre><h3 id=\"centos7-2-源码安装nginx\"><a href=\"#centos7-2-源码安装nginx\" class=\"headerlink\" title=\"centos7.2 源码安装nginx\"></a>centos7.2 源码安装nginx</h3><pre><code># 安装pcre库，使nginx支持rewrite\nyum install pcre pcre-devel -y\n# 安装openssl，https服务需要使用\nyum install openssl openssl-devel -y\n# 安装 gzip 类库\nyum -y install zlib zlib-devel\n# 安装编译程序\nyum -y install make gcc gcc-c++ ncurses-devel\n# 创建用户\nuseradd nginx -s /sbin/nologin -M\n# 下载源码\nwget -q https://nginx.org/download/nginx-1.12.1.tar.gz \ntar -zxvf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\n./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-threads --with-file-aio --with-ipv6 --with-http_v2_module --with-cc-opt=&apos;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=native&apos;\nmake\nmake install\n\n\n# 创建链接\nsudo ln -s /usr/local/nginx/bin/nginx /usr/bin/nginx\n# 启动nginx\n/usr/local/nginx/sbin/nginx\n# 停止nginx\n/usr/local/nginx/sbin/nginx -s quit\n# 重新加载配置文件\n/usr/local/nginx/sbin/nginx -s reload        \n# 测试你的配置文件是否有误\n/usr/local/nginx/sbin/nginx -t       \n# 查看nginx对应的端口\n lsof -i :80</code></pre><h3 id=\"centos7-2安装php7\"><a href=\"#centos7-2安装php7\" class=\"headerlink\" title=\"centos7.2安装php7\"></a>centos7.2安装php7</h3><pre><code># 加源\nsudo yum install epel-release yum-utils\nsudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm\n# 选择remi\nsudo yum-config-manager --enable remi-php70\nsudo yum-config-manager --enable remi-php71\nsudo yum-config-manager --enable remi-php72\n# 安装相关扩展\nsudo yum-config-manager --enable remi-php70\nsudo yum install php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysql\n# 安装 PHP FPM \nsudo yum install php-fpm\nsudo systemctl enable php-fpm\nsudo systemctl start php-fpm\n# 配置\nsudo vim /etc/php-fpm.d/www.conf\nuser = nginx\ngroup = nginx\n\n\n# 配置nginx虚拟server\nserver {\n\n    # . . . other code\n\n    location ~ \\.php$ {\n        try_files $uri =404;\n        # fastcgi_pass unix:/run/php-fpm/www.sock;\n                fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}</code></pre><h3 id=\"centos7-2安装redis\"><a href=\"#centos7-2安装redis\" class=\"headerlink\" title=\"centos7.2安装redis\"></a>centos7.2安装redis</h3><pre><code>$ sudo yum install redis\n$ sudo systemctl enable redis\n$ sudo systemctl start redis\n# 查看版本号\n$ redis-server --version\n\n\n# 使用方法 http://www.zhuohc.com/articles/redis%E5%9F%BA%E7%A1%80/</code></pre><p><a href=\"/articles/centos7-2安装及使用docker/\">centos7.2安装使用docker</a> <a href=\"/articles/centos7-2安装使用sentry/\">centos7.2安装使用sentry</a> <a href=\"/articles/centos7-2使用rabbitmq/\">centos7.2安装使用rabbitMQ</a> <a href=\"/articles/postgresql常见命令/\">centos7.2安装使用postgresql</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查看当前版本\"><a href=\"#查看当前版本\" class=\"headerlink\" title=\"查看当前版本\"></a>查看当前版本</h3><pre><code>cat /proc/version \ncat /etc/redhat-release\nCentos Linux release 7.2.1511 (Core)</code></pre><h3 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h3><pre><code>&gt; passwd root\n&gt; 输入密码</code></pre><h3 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h3><p>centos网络配置地址 /etc/sysconfig/network Centos设置主机名和网络配置<br>/etc/sysconfig/network-scripts/ifcfg-eth0针对特定的网卡进行设置<br>/etc/resolv.conf设置DNS<br>/etc/hosts设置指定的域名解析地址<br>当前使用的是虚拟机网桥模式</p>\n<pre><code>cd /etc/sysconfig/network-scripts/\nvi ifcfg-enp0s23\n# 最后添加内容\nIPADDR=192.168.0.160  # ip地址\nNETMASK=255.255.255.0 # 掩码\nGATEWAY=192.168.0.1 # 网关地址\nDNS1=202.103.24.68 # DNS地址\n# 修改内容\nONBOOT=yes # 启动时网络接口有效\nBOOTPROTO=none # dhcp改成none dhcp自动获取，static固定，none手动\n\n\n# 启动网卡\nsudo ifup eth0s23\nsudo systemctl restart network</code></pre><p>安装网络查看工具</p>\n<pre><code>yum install net-tools</code></pre><p>centos默认的命令是</p>\n<pre><code>ip addr</code></pre><h3 id=\"开机需要启动的5个服务\"><a href=\"#开机需要启动的5个服务\" class=\"headerlink\" title=\"开机需要启动的5个服务\"></a>开机需要启动的5个服务</h3><pre><code>sshd远程登陆, \nnetwork网络,\nrsyslog日志相关,\ncrond定时任务,\nsysstat检测系统性能</code></pre><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><pre><code>su\n# 输入密码\nuseradd test\npasswd test\n# 输入密码\n# 确认密码\nsu test # 切换成普通用户</code></pre><p>将test用户加入到sudoers用</p>\n<pre><code>#visudo命令 # 相当于直接编辑 /etc/sudoers,但用命令方式更安全,推荐\nsu\ncd /etc\nchmod 777 sudoers\nroot    ALL=(ALL)       ALL\ntest    ALL=(ALL)       ALL  # 新添加的\nchmod 440 sudoers   # 权限改成440，必须，否则会报错</code></pre><h3 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h3><p>安装ssh</p>\n<pre><code>yum -y install  openssh*\n\n\nservice sshd start    </code></pre><h3 id=\"ssh连接\"><a href=\"#ssh连接\" class=\"headerlink\" title=\"ssh连接\"></a>ssh连接</h3><pre><code>ssh test@192.168.0.160 # 默认22端口\nssh -p 2222 test@192.168.0.160 # 修改端口后</code></pre><p>禁止root用户远程ssh连接</p>\n<pre><code>vi /etc/ssh/sshd_congif \n# 最后添加\n# 禁止root远程登陆  \nPermitRootLogin no</code></pre><h3 id=\"关闭SELINUX\"><a href=\"#关闭SELINUX\" class=\"headerlink\" title=\"关闭SELINUX\"></a>关闭SELINUX</h3><p>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>setenforce 0 ##设置SELinux 成为permissive模式,临时关闭或者及时起效</p>\n<h3 id=\"centos开启防火墙\"><a href=\"#centos开启防火墙\" class=\"headerlink\" title=\"centos开启防火墙\"></a>centos开启防火墙</h3><pre><code>systemctl mask firewalld\nsystemctl stop firewalld\nyum install iptables-services # 如果下面命令报错，则需要安装\nsystemctl enable iptables\nsystemctl start iptables\nsystemctl enable ip6tables\nsystemctl start ip6tables</code></pre><p>防火墙开机启动</p>\n<pre><code>systemctl enable iptables\nsystemctl disable iptables\n\n\n# 查看开机运行的服务\nsystemctl list-unit-files --type=service</code></pre><p>防火墙是否放行ssh端口22</p>\n<pre><code>cd /etc/sysconfig/\nvi iptables</code></pre><p>在commit前添加以下内容，并注释文件开头信息</p>\n<pre><code># sample configuration for iptables service\n# you can edit this manually or use system-config-firewall\n# please do not ask us to add additional ports/services to this default configuration\n*filter\n# :INPUT ACCEPT [0:0]\n# :FORWARD ACCEPT [0:0]\n# :OUTPUT ACCEPT [0:0]\n# -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n# -A INPUT -p icmp -j ACCEPT\n# -A INPUT -i lo -j ACCEPT\n# -A INPUT -j REJECT --reject-with icmp-host-prohibited\n# -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n\n\n\n\n\n# 安全设置-防止扫描包\n# NONE 包(所有标识bit都没有设置)主要是扫描类的数据包\n-A INPUT -p tcp --tcp-flags ALL NONE -j DROP\n# 防止sync-flood 攻击\n-A INPUT -p tcp ! --syn -m state --state NEW -j DROP\n# ALL包（所有的标注bit都被设置了）也是网络扫描的数据包\n-A INPUT -p tcp --tcp-flags ALL ALL -j DROP\n\n# 开放对应端口\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n\n# 缺省设置\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n# 许所有从服务器端发起的连接，由此返回的响应数据应该是允许的,yum操作等\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n# 接受主机localhost的任意请求\n-A INPUT -i lo -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\n\nCOMMIT</code></pre><h3 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h3><p>安装及启动</p>\n<pre><code>yum install vsftpd\nsystemctl start vsftpd\nsystemctl enable vsftpd</code></pre><p>更新防火墙，放行20， 21端口，如果用了代理上传，需要添加被动模式的端口号<br>修改配置项目</p>\n<pre><code>vi /etc/vsftpd/vsftpd.conf\n\nanonymous_enable=No # YES改成No,禁止匿名用户\nlisten=YES # No改成Yes 开启监听\n# listen_ipv6=YES  # 此行需要注释掉\ntcp_wrappers=YES   # 默认应该就是YES\n\n# 在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；\n# 未在/etc/vsftpd/chroot_list文件中列出的用户，不能切换到其他目录。\n# 需要创建/etc/vsftpd/chroot_list文件\nchroot_local_user=YES\nchroot_list_enable=YES  \n# (default follows) \nchroot_list_file=/etc/vsftpd/chroot_list\n\n# 防止500oops错误 \nallow_writeable_chroot=YES \n# 被动模式端口号\npasv_min_port=30000  \npasv_max_port=31000    </code></pre><p>只允许指定ip登陆</p>\n<pre><code>vi /etc/hosts.allow\n最后添加\nvsftpd:192.168.0.19:allow\nvsftpd:all:deny</code></pre><p>添加虚拟用户</p>\n<pre><code>useradd -g ftp -d /var/ftp/ftpuser -s /sbin/nologin ftpuser \npasswd ftpuser\ncd /etc/vsftpd/\ntouch chroot_list\nvi chroot_list\nftpuser # 将用户名称添加到chroot_list里</code></pre><h3 id=\"LAMP安装\"><a href=\"#LAMP安装\" class=\"headerlink\" title=\"LAMP安装\"></a>LAMP安装</h3><p>apache</p>\n<pre><code>yum install httpd # 安装apache2\nsystemctl enable httpd.service\nsystemctl enable httpd.service</code></pre><p>mysql5.6</p>\n<pre><code># 安装rpm包\nrpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# 查看可以安装的资源\nyum repolist enabled | grep &quot;mysql.*-community.*&quot;\n# 安装\nyum install mysql-community-server\nsystemctl start mysqld\nsystemctl enable mysqld\nmysql_secure_installation # 设置密码等</code></pre><p>php5.4</p>\n<pre><code>yum install php\nyum install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql php-devel</code></pre><p>php5.6或者其他</p>\n<pre><code>yum -y install epel-release\nwget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nwget https://centos7.iuscommunity.org/ius-release.rpm\nrpm -Uvh ius-release*.rpm\nyum -y update\nyum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath</code></pre><h3 id=\"LAMP配置\"><a href=\"#LAMP配置\" class=\"headerlink\" title=\"LAMP配置\"></a>LAMP配置</h3><p>apache允许php脚本</p>\n<pre><code>vi /etc/httpd/conf/httpd.conf\nAddType application/x-compress .Z\nAddType application/x-gzip .gz .tgz\nAddType application/x-httpd-php .php  # 新添加内容</code></pre><p>apache虚拟主机</p>\n<pre><code>cd /etc/httpd/conf.d\nvi vhost.conf\n\n\n&lt;VirtualHost *:121&gt;\nServerName phpmyadmin.com\nServerAlias www.phpmyadmin.com\nDocumentRoot /var/www/html/phpMyAdmin/\nErrorLog /var/www/web_log/phpMyAdmin.www_error.log # 开启日志需要创建web_log文件夹，否则会报错\nCustomLog /var/www/web_log/phpMyAdmin.www_access.log common\n&lt;/VirtualHost&gt;\n&lt;Directory &quot;/var/www/html/phpMyAdmin/&quot;&gt;\n    Options FollowSymLinks\n    AllowOverride All\n    Require all granted\n&lt;/Directory&gt;\n\n\n&lt;VirtualHost *:108&gt;\nServerName hkmain.com\nServerAlias www.kmain.com\nDocumentRoot /var/www/html/NEW/\nErrorLog /var/www/web_log/NEW.www_error.log\nCustomLog /var/www/web_log/NEW.www_access.log common\n&lt;/VirtualHost&gt;\n&lt;Directory &quot;/var/www/html/NEW/&quot;&gt;\n    Options FollowSymLinks\n    AllowOverride All\n    Require all granted\n&lt;/Directory&gt;</code></pre><p>apache加载的模块查看</p>\n<pre><code>apachectl -M | sort</code></pre><p>网站目录权限配置</p>\n<pre><code>chown -R apache:apache WEB_FOLD\nchmod 750 WEB_FOLD\ncd WEB_FOLD\nfind -type d -exec chmod 750 {} \\;\nfind -not -type d -exec chmod 640 {} \\;\nfind . -name &quot;Runtime&quot; -type d -exec chmod -R 770 {} \\;</code></pre><h3 id=\"LNMP安装与配置\"><a href=\"#LNMP安装与配置\" class=\"headerlink\" title=\"LNMP安装与配置\"></a>LNMP安装与配置</h3><p>参考链接 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7\" target=\"_blank\" rel=\"noopener\">https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-7</a> nginx安装(apache二选一)</p>\n<pre><code># 安装pcre库，使nginx支持rewrite\nsudo yum install pcre pcre-devel -y\nsudo yum install nginx\nsudo systemctl start nginx.service\n# 设置开机启动\nsudo systemctl enable nginx.service</code></pre><p>mysql5.6</p>\n<pre><code># 安装rpm包\nrpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# 查看可以安装的资源\nyum repolist enabled | grep &quot;mysql.*-community.*&quot;\n# 安装\nyum install mysql-community-server\nsystemctl start mysqld\nsystemctl enable mysqld\nmysql_secure_installation # 设置密码等</code></pre><p>php安装</p>\n<pre><code>yum -y install epel-release\nsudo yum install php php-mysql php-fpm\nsudo yum install php-pecl-memcache</code></pre><p>配置</p>\n<pre><code>vim /etc/php.ini\n#cgi.fix_poathinfo=1改成\ncgi.fix_pathinfo=0\n\n\nvim /etc/php-php.d/www.conf\n# 第一处修改\nlisten = /var/run/php-fpm/php-fpm.sock\n# 第二处修改\nlisten.owner = nobody\nlisten.group = nobody\n# 第三处修改\nuser = nginx\ngroup = nginx\n\n\n# 重启\nsudo systemctl start php-fpm\nsudo systemctl enable php-fpm\n\n\n# 安装xcahe\nsudo yum -y install php-xcache xcache-admin\n# 如果失败请用下面的方法\n# xcahe\nwget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/x86_64/php-xcache-3.1.1-1.el7.x86_64.rpm\n# 图形化管理\nwget https://kojipkgs.fedoraproject.org//packages/php-xcache/3.1.1/1.el7/noarch/xcache-admin-3.1.1-1.el7.noarch.rpm</code></pre><p>#配置nginx sudo vi /etc/nginx/conf.d/default.conf server { listen 80; server_name server_domain_name_or_IP; # 注意位置，在括号外 root /usr/share/nginx/html; index index.php index.html index.htm;</p>\n<pre><code>location / {\n    try_files $uri $uri/ =404;\n}\nerror_page 404 /404.html;\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n    root /usr/share/nginx/html;\n}\n    # 下面是配置fpm\nlocation ~ \\.php$ {\n    try_files $uri =404;\n    fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; (这个值从php-fpm复制来)\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    include fastcgi_params;\n}</code></pre><p>}</p>\n<pre><code># 测试\nsudo vi /usr/share/nginx/html/info.php\n&lt;?php echo phpinfo();&gt;\nsudo systemctl restart php-fpm\nsudo systemctl restart nginx</code></pre><h3 id=\"安装imagemagick\"><a href=\"#安装imagemagick\" class=\"headerlink\" title=\"安装imagemagick\"></a>安装imagemagick</h3><pre><code>yum install php-pear gcc\nyum install ImageMagick ImageMagick-devel ImageMagick-perl\npecl install imagick # 直接回车\necho extension=imagick.so &gt;&gt; /etc/php.ini # 添加php扩展\nsystemctl restart httpd</code></pre><h3 id=\"mysql主从复制主服务器配置\"><a href=\"#mysql主从复制主服务器配置\" class=\"headerlink\" title=\"mysql主从复制主服务器配置\"></a>mysql主从复制主服务器配置</h3><pre><code>vi /etc/my.cnf\n[mysqld] \nserver-id=1     # 配一个唯一的ID编号，1至32  \nlog-bin=mysql-bin  # 二进制文件存放路径  \nbinlog-do-db=test1  # 需要同步的数据库名  \nbinlog-ignore-db=test2  # 不需要同步的数据库名 </code></pre><p>其他参考mysql主从复制</p>\n<h3 id=\"rsycn数据同步\"><a href=\"#rsycn数据同步\" class=\"headerlink\" title=\"rsycn数据同步\"></a>rsycn数据同步</h3><pre><code>yum install rsync # 安装，默认端口873  \nsystemctl start rsyncd\nsystemctl enable rsyncd\n\n\n\nvim rsync.conf# 日志文件位置，启动rsync后自动产生这个文件，无需提前创建\nlog file = /var/log/rsyncd.log\n# pid文件的存放位置\npidfile = /var/run/rsyncd.pid\n# 支持max connections参数的锁文件\nlock file = /var/run/rsync.lock\n# 用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件\nsecrets file = /etc/rsync.pass\n# rsync启动时欢迎信息页面文件位置（文件内容自定义\n# motd file = /etc/rsyncd.Motd\n#\n\n# 设置rsync运行权限为root\n# uid = root\n# 设置rsync运行权限为root\n# gid = root\n# 匿名用户\nuid = 0\ngid = 0\n# 默认端口\nport = 873\n# 默认为true，修改为no，增加对目录文件软连接的备份\nuse chroot = no\n# 设置rsync服务端文件为读写权限\nread only = yes\n# 不显示rsync服务端资源列表\nlist = no\n# 最大连接数\nmax connections = 200\n# 设置超时时间\ntimeout = 600\n# 不验证用户密码\nstrict modes = false\n# 执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开\n# auth users = test\n# 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\nhosts allow = 192.168.0.206, 192.168.0.118\n# 禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开\n# hosts deny = 192.168.21.254\n\n# 自定义名称\n[web]\n# rsync服务端数据目录路径\npath = /var/www/html/HKMAIN_NEW/Upload/product/manual/cn/\n#\n# 模块名称与自定义名称相同\ncomment = web\n\n[webe]\npath = /var/www/html/HKMAIN_NEW/Upload/product/manual/en/\ncomment = webe</code></pre><h3 id=\"centos7-2安装nfs服务器端\"><a href=\"#centos7-2安装nfs服务器端\" class=\"headerlink\" title=\"centos7.2安装nfs服务器端\"></a>centos7.2安装nfs服务器端</h3><pre><code># 服务器端安装及配置\n# 安装命令\nsudo yum install nfs-utils rpcbind\n# 查看是否安装成功\n$ rpm -aq nfs-utils rpcbind\nrpcbind-0.2.0-38.el7.x86_64\nnfs-utils-1.3.0-0.33.el7_3.x86_64\n# 启动rpcbind\nsudo systemctl restart rpcbind\n# 查看状态\nsystemctl status rpcbind\n# 开机启动\nsudo systemctl enable rpcbind\n# 查看是否开机启动\nsystemctl is-enabled rpcbind # enable表示开机启动，disable表示不开机启动\n# 启动及开机启动nfs服务\nsudo systemctl restart nfs\nsudo systemctl enable nfs\n#配置nfs服务\nvim /etc/exports\n/readonly 192.168.0.160(insecure,ro,no_root_squash) # 指定ip地址，只读\n/rwsync 192.168.0.0/24(insecure,rw,sync,no_root_squash) # 指定ip地址段，读写\n# 加载配置文件\nsudo exportfs -rv\n# 查看nfs服务器本地挂载情况\n$ showmount -e localhost\nExport list for localhost:\n/rwsync   192.168.0.0/24\n/readonly 192.168.0.160\n# 重启服务\nsudo systemctl restart nfs\n\n\n# 客户端安装配置\nsudo yum install nfs-utils rpcbind\n# 只需启动rpc服务\nsudo systemctl restart rpcbind\nsudo systemctl enable rpcbind\n# 查看可以挂载服务器端的目录\nshowmount -e 192.168.0.206\nExport list for 192.168.0.206:\n/rwsync   192.168.0.0/24\n/readonly 192.168.0.160\n# 挂载\nsudo mount -t nfs 192.168.0.206:/readonly /mnt/readonly\nsudo mount -t nfs 192.168.0.206:/rwsync /mnt/rwsync\n# 查看挂载结果\ndf -h</code></pre><h3 id=\"centos7-2安装python3-5\"><a href=\"#centos7-2安装python3-5\" class=\"headerlink\" title=\"centos7.2安装python3.5\"></a>centos7.2安装python3.5</h3><pre><code># 安装编译环境\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel\n# 下载文件\nwget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\n# 解压\ntar -zxvf Python-3.6.6.tgz\n# 编译安装\ncd Python-3.5.1\n./configure --prefix=/usr/local/python3\nmake &amp;&amp; make install\n# 创建软连接\nsudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\npython3 --version\nsudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \npip3 --version\n\n# 添加pip源\nvim ~/.pip/pip.conf\n[global]\ntrusted-host =  mirrors.aliyun.com\nindex-url = https://mirrors.aliyun.com/pypi/simple\n\n### 安装虚拟环境\nsudo pip3 uninstall virtualenv\nsudo ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv \n\n### 创建虚拟环境\nvirtualenv --no-site-packages -p python3 .env\nsource ./.env/bin/activate</code></pre><h3 id=\"centos7-2安装node8\"><a href=\"#centos7-2安装node8\" class=\"headerlink\" title=\"centos7.2安装node8\"></a>centos7.2安装node8</h3><pre><code># 参考文件 https://nodejs.org/en/download/package-manager/\nOn RHEL, CentOS or Fedora, for Node.js v8 LTS:\n\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nAlternatively for Node.js 10:\n\ncurl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\nThen install:\nsudo yum -y install nodejs\n\n\n# 安装cnpm\nnpm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id=\"centos6-8安装nginx\"><a href=\"#centos6-8安装nginx\" class=\"headerlink\" title=\"centos6.8安装nginx\"></a>centos6.8安装nginx</h3><pre><code># 安装pcre库，使nginx支持rewrite\nyum install pcre pcre-devel -y\n# 安装openssl，https服务需要使用\nyum install openssl openssl-devel -y\n# 安装 gzip 类库\nyum -y install zlib zlib-devel\n# 安装编译程序\nyum -y install make gcc gcc-c++ ncurses-devel\n# 创建用户\nuseradd nginx -s /sbin/nologin -M\n# 下载源码\nwget -q https://nginx.org/download/nginx-1.6.3.tar.gz \ntar -zxvf nginx-1.6.3.tar.gz\ncd nginx-1.6.3\n./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre\nmake\nmake install\n\n\n# 启动nginx\n/usr/local/nginx/sbin/nginx\n# 停止nginx\n/usr/local/nginx/sbin/nginx -s quit\n# 重新加载配置文件\n/usr/local/nginx/sbin/nginx -s reload        \n# 测试你的配置文件是否有误\n/usr/local/nginx/sbin/nginx -t       \n# 查看nginx对应的端口\n lsof -i :80</code></pre><h3 id=\"centos6-8安装mysql5-7\"><a href=\"#centos6-8安装mysql5-7\" class=\"headerlink\" title=\"centos6.8安装mysql5.7\"></a>centos6.8安装mysql5.7</h3><pre><code># yum源直接安装的是mysql5.1版本，抛弃\n# 先检查是否有旧版本\nrpm -qa | grep mysql\n# 删除旧版本\nsudo yum -y remove mysql-xx-xx\nwget https://dev.mysql.com/get/mysql57-community-release-el6-10.noarch.rpm\nsudo yum install mysql57-community-release-el6-10.noarch.rpm\nsudo yum install mysql-community-server</code></pre><h3 id=\"centos7-2-源码安装nginx\"><a href=\"#centos7-2-源码安装nginx\" class=\"headerlink\" title=\"centos7.2 源码安装nginx\"></a>centos7.2 源码安装nginx</h3><pre><code># 安装pcre库，使nginx支持rewrite\nyum install pcre pcre-devel -y\n# 安装openssl，https服务需要使用\nyum install openssl openssl-devel -y\n# 安装 gzip 类库\nyum -y install zlib zlib-devel\n# 安装编译程序\nyum -y install make gcc gcc-c++ ncurses-devel\n# 创建用户\nuseradd nginx -s /sbin/nologin -M\n# 下载源码\nwget -q https://nginx.org/download/nginx-1.12.1.tar.gz \ntar -zxvf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\n./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-threads --with-file-aio --with-ipv6 --with-http_v2_module --with-cc-opt=&apos;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=native&apos;\nmake\nmake install\n\n\n# 创建链接\nsudo ln -s /usr/local/nginx/bin/nginx /usr/bin/nginx\n# 启动nginx\n/usr/local/nginx/sbin/nginx\n# 停止nginx\n/usr/local/nginx/sbin/nginx -s quit\n# 重新加载配置文件\n/usr/local/nginx/sbin/nginx -s reload        \n# 测试你的配置文件是否有误\n/usr/local/nginx/sbin/nginx -t       \n# 查看nginx对应的端口\n lsof -i :80</code></pre><h3 id=\"centos7-2安装php7\"><a href=\"#centos7-2安装php7\" class=\"headerlink\" title=\"centos7.2安装php7\"></a>centos7.2安装php7</h3><pre><code># 加源\nsudo yum install epel-release yum-utils\nsudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm\n# 选择remi\nsudo yum-config-manager --enable remi-php70\nsudo yum-config-manager --enable remi-php71\nsudo yum-config-manager --enable remi-php72\n# 安装相关扩展\nsudo yum-config-manager --enable remi-php70\nsudo yum install php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysql\n# 安装 PHP FPM \nsudo yum install php-fpm\nsudo systemctl enable php-fpm\nsudo systemctl start php-fpm\n# 配置\nsudo vim /etc/php-fpm.d/www.conf\nuser = nginx\ngroup = nginx\n\n\n# 配置nginx虚拟server\nserver {\n\n    # . . . other code\n\n    location ~ \\.php$ {\n        try_files $uri =404;\n        # fastcgi_pass unix:/run/php-fpm/www.sock;\n                fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}</code></pre><h3 id=\"centos7-2安装redis\"><a href=\"#centos7-2安装redis\" class=\"headerlink\" title=\"centos7.2安装redis\"></a>centos7.2安装redis</h3><pre><code>$ sudo yum install redis\n$ sudo systemctl enable redis\n$ sudo systemctl start redis\n# 查看版本号\n$ redis-server --version\n\n\n# 使用方法 http://www.zhuohc.com/articles/redis%E5%9F%BA%E7%A1%80/</code></pre><p><a href=\"/articles/centos7-2安装及使用docker/\">centos7.2安装使用docker</a> <a href=\"/articles/centos7-2安装使用sentry/\">centos7.2安装使用sentry</a> <a href=\"/articles/centos7-2使用rabbitmq/\">centos7.2安装使用rabbitMQ</a> <a href=\"/articles/postgresql常见命令/\">centos7.2安装使用postgresql</a></p>\n"},{"title":"PythonTkinter基础入门","url":"99.html","id":"99","comments":0,"date":"2016-11-10T02:58:02.000Z","_content":"\npython基础环境\n\n    sudo apt-get install python\n    sudo apt-get install python-pip\n    \n\nTkinter安装\n\n    sudo apt-get install python-tk\n    \n\n配置组件外观\n\n    #!/usr/bin/python\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    root = Tk()\n    # 定义图标\n    if sys.platform == 'win32':\n        root.iconbitmap('favicon.ico')\n    else:\n        icon = PhotoImage(file='phone.gif')\n        root.tk.call('wm', 'iconphoto', root._w, icon)\n    # 定义字体，字号，类型\n    label_font = ('Ubuntu', 20, 'bold underline italic')\n    # 创建组件\n    widget = Label(root, text='Hello,云克隆', padx=100, pady=20)\n    # 配置组件字体\n    widget.config(font=label_font)\n    # 组件宽，高\n    widget.config(height=3, width=20)\n    # 组件背景颜色\n    widget.config(bg='#FF0')\n    # 组件字体颜色\n    widget.config(fg='#F0F')\n    # 组件边框宽度\n    widget.config(bd=3)\n    # 组件边框外形, FLAT扁平, SUNKEN凹陷, RAISED凸起, GROOVE凹槽, SOLID加粗, RIDGE脊状,\n    widget.config(relief=SUNKEN)\n    # 组件鼠标手势, 'gumby', 'watch', 'pencil', 'crdss', hand2\n    widget.config(cursor='gumby')\n    # 组件状态, DISABLE禁用, NORMAL正常, READONLY只读\n    widget.config(state=DISABLED)\n    # 布置组件\n    # expand设置是否可以扩展，fill表示随父组件扩展方向，可以设置BOTH, X, Y\n    # 设置组件padding值\n    # side表示按钮布置窗口的位置\n    widget.pack(expand=True, fill=X, padx=10, pady=50, side=LEFT)\n    root.mainloop()\n    \n\n#### 标准弹出框\n\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    # python3\n    # from Tkinter.messagebox import *\n    def callback():\n        if askyesno('Verify', 'Do you ready want to quit?'):\n            showwarning('Yes', 'Quit not yet')\n        else:\n            showinfo('No', 'Quit has been cancelled')\n    \n    errmsg = 'Sorry, no spam allowed'\n    Button(None, text='Quit', command=callback).pack(fill=X)\n    Button(None, text='spam', command=(lambda: showerror('spam', errmsg))).pack(fill=X)\n    mainloop()\n    \n\n#### 常见弹框\n\n    # gui6.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    from tkFileDialog import *\n    from tkColorChooser import *\n    from tkSimpleDialog import *\n    \n    \n    demos = {\n        'Open': askopenfilename,\n        'Color': askcolor,\n        'Query': lambda: askquestion('Warning', 'You typed \"rm *\"\\nconfirm?'),\n        'Error': lambda: showerror('Error!', 'He is dead'),\n        'Input': lambda: askfloat('Entry', 'Enter credit card number')\n    }\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            Label(self, text='Basic demos').pack()\n            for (key, value) in demos.items():\n                Button(self, text=key, command=value).pack(side=TOP, fill=BOTH)\n    \n    if __name__ == '__main__':\n        Demo().mainloop()\n    自定义弹框\n    \n    # -*- coding: UTF-8 -*-\n    import sys\n    from Tkinter import *\n    makemodal = (len(sys.argv) > 1)\n    \n    def dialog():\n        win = Toplevel()\n        Label(win, text='Hard drive reformatted!').pack()\n        Button(win, text='OK', command=win.destroy).pack()\n        if makemodal:\n            # 获取输入的焦点\n            win.focus_set()\n            # 打开的时候，禁用其他窗口\n            win.grab_set()\n            # 在win销毁之前，继续等待\n            win.wait_window()\n        print 'dialog exit'\n    \n    root = Tk()\n    Button(root, text='popup', command=dialog).pack()\n    root.mainloop()\n    \n\n#### 绑定事件\n\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    \n    def showPosEvent(event):\n        print('Widget=%s, X=%s, Y=%s' % (event.widget, event.x, event.y))\n    \n    \n    def showAllEvent(event):\n        print(event)\n        for attr in dir(event):\n            if not attr.startswith('__'):\n                print(attr, '=>', getattr(event, attr))\n    \n    \n    def onKeyPress(event):\n        print('Got key press: ', event.char)\n    \n    \n    def onArrowKey(event):\n        print('Got up arrow key press')\n    \n    \n    def onReturnKey(event):\n        print('Got return key press')\n    \n    \n    def onLeftClick(event):\n        print('Got left mouse button click: ')\n        showPosEvent(event)\n    \n    \n    def onRightClick(event):\n        print('Got right mouse button click: ')\n        showPosEvent(event)\n    \n    \n    def onMiddleClick(event):\n        print('Got middle mouse button click: ')\n        showPosEvent(event)\n        showAllEvent(event)\n    \n    \n    def onLeftDrag(event):\n        print('Got left mouse drag click: ')\n        showPosEvent(event)\n    \n    \n    def onDoubleLeftClick(event):\n        print('Got double left mouse click: ')\n        showPosEvent(event)\n        tkroot.quit()\n    \n    \n    tkroot = Tk()\n    labelfont = ('courier', 20, 'bold')\n    widget = Label(tkroot, text='Hello bind world')\n    widget.config(bg='red', font=labelfont)\n    widget.config(height=5, width=20)\n    widget.pack(expand=YES, fill=BOTH)\n    # 绑定单击左键\n    widget.bind('<Button-1>', onLeftClick)\n    # 绑定单击右键\n    widget.bind('<Button-3>', onRightClick)\n    # 绑定单击中键\n    widget.bind('<Button-2>', onMiddleClick)\n    # 绑定双击左键\n    widget.bind('<Double-1>', onDoubleLeftClick)\n    # 绑定拖拽 B1表示点击左键，Motion表示拖拽\n    widget.bind('<B1-Motion>', onLeftDrag)\n    # 绑定键盘按键\n    widget.bind('<KeyPress>', onKeyPress)\n    # 绑定按下箭头键\n    widget.bind('<Up>', onArrowKey)\n    # 绑定回车，返回键\n    widget.bind('<Return>', onReturnKey)\n    widget.focus()\n    tkroot.title('CLICK ME')\n    tkroot.mainloop()\n    \n    # <ButtonPress> 按下按钮\n    # <ButtonRelease> 松开按钮\n    # <Motion> 鼠标指针移动\n    # <Configure> 窗口大小，位置改变时候\n    # <Destroy> 销毁窗口\n    # <FocusIn> 获取焦点\n    # <FocusOut> 失去焦点\n    # <Map> 窗口打开\n    # <Unmap> 窗口最小化\n    # <Escape>, <BackSpace>, <Tab> 捕获特点ESC键，回车键，tab键\n    # <Down>, <Up>, <Left>, <Right> 捕获方向键\n    # <B1-Motion> 按下左键并拖拽\n    # <KeyPress-a> 按下按键“a”，大小写敏感\n    \n\n#### 输入框\n\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from quitGui import Quitter\n    \n    fields = 'Name', 'Job', 'Pay'\n    \n    \n    def fetch(entries):\n        for entry in entries:\n            print('Input => %s' % entry.get())  # 获取文本信息\n    \n    \n    def makeform(root, fields):\n        entries = []\n        for field in fields:\n            row = Frame(root)\n            lab = Label(row, width=5, text=field)\n            ent = Entry(row)\n            row.pack(side=TOP, fill=X)\n            lab.pack(side=LEFT)\n            ent.pack(side=RIGHT, expand=YES, fill=X)\n            entries.append(ent)\n        return entries\n    \n    \n    def show(entries, popup):\n        fetch(entries)  # 必须在销毁前取出\n        popup.destroy()  # 如果修改了stmt， order， msgs会随之失败\n    \n    \n    def ask():\n        popup = Toplevel()  # 在模拟对话框窗口中显示表单\n        ents = makeform(popup, fields)\n        Button(popup, text='OK', command=(lambda: show(ents, popup))).pack()\n        popup.grab_set()  # 打开的时候，禁用其他窗口\n        popup.focus_set()  # 获取输入的焦点\n        popup.wait_window()  # 在这里等待销毁\n    \n    \n    if __name__ == '__main__':\n        root = Tk()\n        Button(root, text='Dialog', command=ask).pack()\n        root.mainloop()\n    \n\n#### 复选框\n\n    # gui13.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from gui6 import demos\n    from quitGui import Quitter\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            self.tools()\n            Label(self, text='Ckech demos').pack()\n            self.vars = []\n            for key in demos:\n                var = IntVar()\n                Checkbutton(self, text=key, variable=var, command=demos[key]).pack(side=LEFT)\n                self.vars.append(var)\n    \n        def report(self):\n            for var in self.vars:\n                print(var.get())  # 当前开关设置1或者0\n            print()\n    \n        def tools(self):\n            frm = Frame(self)\n            frm.pack(side=RIGHT)\n            Button(frm, text='State', command=self.report).pack(fill=X)\n            Quitter(frm).pack(fill=X)\n    \n    \n    if __name__ == '__main__':\n        Demo().mainloop()\n    \n    \n\n#### 单选按钮\n\n    #gui14.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from gui6 import demos\n    from quitGui import Quitter\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            Label(self, text='Radio demos').pack(side=TOP)\n            self.var = StringVar()\n            # variable表示单选按钮的变量，相当与html的name标签\n            # value表示单选按钮的变量值，相当与html的value标签\n            for key in demos:\n                Radiobutton(self, text=key, command=self.onPress, variable=self.var, value=key).pack(anchor=NW)\n            self.var.set(key)  # 选中最后一个开始\n            Button(self, text='State', command=self.report).pack(fill=X)\n            Quitter(self).pack(fill=X)\n    \n        def onPress(self):\n            pick = self.var.get()\n            print('you pressed', pick)\n            print('result: ', demos[pick]())  # 按钮使用返回的值\n    \n        def report(self):\n            print(self.var.get())\n    \n    if __name__ == '__main__':\n        Demo().mainloop()\n    \n\n#### 标尺滚动条\n\n    # gui16.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from gui6 import demos\n    from quitGui import Quitter\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            Label(self, text='Scale demos').pack()\n            self.var = IntVar()\n            Scale(self, label='Pick demo number',\n                  command=self.onMove, variable=self.var,\n                  from_=0, to=len(demos)-1).pack()\n            Scale(self, label='Pick demo number',  # 标尺的文本\n                  command=self.onMove,  # 绑定回调\n                  variable=self.var,  # 变量\n                  from_=0,   # 标尺最小值\n                  to=len(demos) - 1,   # 标尺最大值\n                  length = 200,  # 长度\n                  tickinterval = 2,   # 每隔几个单位显示标记单位\n                  showvalue = YES,  # 显示或隐藏标尺滑动条旁边的当前值\n                  orient = 'horizontal'  # 横向展示\n                  ).pack()\n            Quitter(self).pack(side=RIGHT)\n            Button(self, text='Run demo', command=self.onRun).pack(side=LEFT)\n            Button(self, text='State', command=self.report).pack(side=RIGHT)\n    \n        def onMove(self, value):\n            print('in onMove', value)\n    \n        def onRun(self):\n            pos = self.var.get()\n            print('you picked', pos)\n            demo = list(demos.values())[pos]\n            print(demo())\n    \n        def report(self):\n            print(self.var.get())\n    \n    if __name__ == '__main__':\n        print(list(demos.keys()))\n        Demo().mainloop()\n    \n\n#### 创建图片\n\n    # gui17.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    gifdir = './gif/'\n    win = Tk()\n    igm = PhotoImage(file=gifdir + 'logo.png')\n    \n    # 按钮上绑定图片\n    # Button(win, image=igm).pack()\n    # win.mainloop()\n    \n    # 创建画布\n    can = Canvas(win)\n    can.pack(fill=BOTH)\n    can.config(width=igm.width() + 4, height=igm.height() + 4)\n    can.create_image(2,  # x坐标\n                     2,  # y坐标\n                     image=igm, anchor=NW)\n    win.mainloop()\n    \n\n### 按钮随机读取图片\n\n    # gui18.py\n    # -*- coding: UTF-8 -*-\n    from glob import glob\n    from gui13 import *\n    import random\n    \n    gifdir = './gif/'\n    \n    \" 按钮随机读取图片 \"\n    class ButtonPicsDemo(Frame):\n        def __init__(self, gifdir=gifdir, parent=None):\n            Frame.__init__(self, parent)\n            self.pack()\n            self.lbl = Label(self, text='none', bg='blue', fg='red')\n            self.pix = Button(self, text='press me', command=self.draw, bg='white')\n            self.lbl.pack(fill=BOTH)\n            self.pix.pack(pady=10)\n            Demo(self, relief=SUNKEN, bd=2).pack(fill=BOTH)\n            # glob模块， glob方法，返回所有匹配的文件列表\n            files = glob(gifdir + '*.png')\n            self.images = [(x, PhotoImage(file=x)) for x in files]\n            print(files)\n    \n        def draw(self):\n            name, photo = random.choice(self.images)\n            self.lbl.config(text=name)\n            self.pix.config(image=photo)\n    \n    if __name__ == '__main__':\n        if __name__ == '__main__':\n            ButtonPicsDemo().mainloop()\n    \n\n#### 缩略图\n\n    # gui19.py\n    # -*- coding: UTF-8 -*-\n    import os\n    import math\n    import PIL\n    from PIL import Image\n    from Tkinter import *\n    \n    \n    def make_thumbs(img_dir, size=(100, 100), subdir='thumbs'):\n        thumb_dir = os.path.join(img_dir, subdir)\n        if not os.path.exists(thumb_dir):\n            os.mkdir(thumb_dir)\n        thumbs = []\n        for img_file in os.listdir(img_dir):\n            thumb_path = os.path.join(thumb_dir, img_file)\n            if os.path.exists(thumb_path):\n                thumb_obj = PIL.Image.open(thumb_path)\n                thumbs.append((img_file, thumb_obj))\n            else:\n                print('making', thumb_path)\n                img_path = os.path.join(img_dir, img_file)\n                try:\n                    img_obj = PIL.Image.open(img_path)\n                    img_obj.thumbnail(size, PIL.Image.ANTIALIAS)\n                    img_obj.save(thumb_path)\n                    thumbs.append((img_file, img_obj))\n                except Exception, e:\n                    print('skipping: ', img_path)\n                    print e\n        return thumbs\n    \n    \n    class ViewOne(Toplevel):\n        def __init__(self, img_dir, img_file):\n            Toplevel.__init__(self)\n            self.title(img_file)\n            img_path = os.path.join(img_dir, img_file)\n            img_obj = PhotoImage(file=img_path)\n            Label(self, image=img_obj).pack()\n            print(img_path, img_obj.width(), img_obj.height())\n            self.savephoto = img_obj\n    \n    \n    def viewer(img_dir, kind=Toplevel, cols=None):\n        win = kind()\n        win.title('VIEWER: ' + img_dir)\n        thumbs = make_thumbs(img_dir)\n        if not cols:\n            # 固定大小 或者N×N\n            cols = int(math.ceil(math.sqrt(len(thumbs))))\n        savephotos = []\n        while thumbs:\n            thumbs_row, thumbs = thumbs[:cols], thumbs[cols:]\n            row = Frame(win)\n            row.pack(fill=BOTH)\n            for(img_file, img_obj) in thumbs_row:\n                size = max(img_obj.size)\n                photo = PhotoImage(file=os.path.join(img_dir, 'thumbs', img_file))\n                link = Button(row, image=photo)\n            handler = lambda savefile=img_file: ViewOne(img_dir, savefile)\n            link.config(command=handler, width=size, height=size)\n            link.pack(side=LEFT, expand=YES)\n            savephotos.append(photo)\n        Button(win, text='Quit', command=win.quit, bg='beige').pack(fill=X)\n        return win, savephotos\n    \n    if __name__ == '__main__':\n        img_dir = len(sys.argv) > 1 and sys.argv[1] or 'gif'\n        main, save = viewer(img_dir, kind=Tk)\n        main.mainloop()\n    \n\n### 创建基础顶级菜单\n\n    # gui20.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    \n    \n    def not_done():\n        showerror('Not implemented', 'Not yet available')\n    \n    \n    def make_menu(win):\n        top = Menu(win)  # 定义顶级菜单\n        win.config(menu=top)\n        file = Menu(top, tearoff=True)  # 一级菜单 tearoff:设置菜单下的虚线是否显示\n        file.add_command(label='New...', command=not_done, underline=0)\n        file.add_command(label='Open...', command=not_done, underline=0)\n        file.add_command(label='Quit...', command=win.quit,  underline=0)\n        top.add_cascade(label='File', menu=file, underline=0)  # 在顶级菜单中添加一级菜单\n    \n        edit = Menu(top, tearoff=False)  # 一级菜单\n        edit.add_command(label='Cut', command=not_done, underline=0)\n        edit.add_command(label='Paste', command=not_done, underline=0)\n        edit.add_separator()  # 添加下划线\n        top.add_cascade(label='Edit', menu=edit, underline=0)\n    \n        submenu = Menu(edit, tearoff=True)  # 二级菜单\n        submenu.add_command(label='Spam', command=win.quit, underline=0)\n        submenu.add_command(label='Eggs', command=not_done, underline=0)\n        edit.add_cascade(label='Stuff', menu=submenu, underline=0)  # 在一级菜单中添加二级菜单\n    \n    if __name__ == '__main__':\n        root = Tk()\n        root.title('menu_win')\n        make_menu(root)\n        msg = Label(root, text='Window menu basic')\n        msg.pack(expand=YES, fill=BOTH)\n        msg.config(relief=SUNKEN, width=40, height=7, bg='beige')\n        root.mainloop()\n    \n\n#### 创建框架级别菜单\n\n    # gui21.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    \n    \n    def not_done():\n        showerror('Not implemented', 'Not yet available')\n    \n    \n    def make_menu(parent):\n        menu_bar = Frame(parent)\n        menu_bar.pack(side=TOP, fill=X)\n    \n        f_button = Menubutton(menu_bar, text='File', underline=0)\n        f_button.pack(side=LEFT)\n        file = Menu(f_button)\n        file.add_command(label='New...', command=not_done, underline=0)\n        file.add_command(label='Open...', command=not_done, underline=0)\n        file.add_command(label='Quit...', command=parent.quit,  underline=0)\n        f_button.config(menu=file)\n    \n        e_button = Menubutton(menu_bar, text='Edit', underline=0)\n        e_button.pack(side=LEFT)\n        edit = Menu(e_button)\n        edit.add_command(label='Cut', command=not_done, underline=0)\n        edit.add_command(label='Paste', command=not_done, underline=0)\n        edit.add_separator()\n        e_button.config(menu=edit)\n    \n        sub_menu = Menu(edit, tearoff=True)\n        sub_menu.add_command(label='Spam', command=parent.quit, underline=0)\n        sub_menu.add_command(label='Eggs', command=not_done, underline=0)\n        edit.add_cascade(label='Stuff', menu=sub_menu, underline=0)\n        return menu_bar\n    \n    \n    \n    if __name__ == '__main__':\n        root = Tk()\n        root.title('menu_fra')\n        for i in range(2):\n            mnu = make_menu(root)\n            mnu.config(bd=2, relief=RAISED)\n            Label(root, bg='black', height=5, width=25).pack(expand=YES, fill=BOTH)\n        Button(root, text='Bye', command=root.quit).pack()\n        root.mainloop()\n    \n\n#### 图片菜单\n\n    # gui22.py\n    # -*- coding:UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    \n    \n    class NewMenuDemo(Frame):\n        def __init__(self, parent=None):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            self.create_widgets()\n    \n        def create_widgets(self):\n            self.make_menubar()\n            self.make_toolbar()\n            l = Label(self, text='Menu and Toolbar Demo')\n            l.config(relief=SUNKEN, width=40, height=10, bg='white')\n            l.pack(expand=YES, fill=BOTH)\n    \n        def make_toolbar(self, size=(30, 30)):\n            toolbar = Frame(self, cursor='hand2', relief=SUNKEN, bd=2)\n            toolbar.pack(side=BOTTOM, fill=X)\n            Button(toolbar, text='Quit', command=self.quit).pack(side=RIGHT)\n            photo_files = ('at.png', 'bd.png', 'dk.png')\n            self.tool_photo_objs = []\n            for file in photo_files:\n                img = PhotoImage(file='./gif/thumbs/' + file)\n                btn = Button(toolbar, image=img, command=self.greeting)\n                btn.config(bd=5, relief=RIDGE)\n                btn.config(width=size[0], height=size[0])\n                btn.pack(side=LEFT)\n                self.tool_photo_objs.append(img)\n            Button(toolbar, text='Hello', command=self.greeting).pack(side=LEFT)\n    \n        def make_menubar(self):\n            self.menubar = Menu(self.master)\n            self.master.config(menu=self.menubar)\n            self.file_menu()\n            self.edit_menu()\n            self.image_menu()\n    \n        def file_menu(self):\n            pulldown = Menu(self.menubar)\n            pulldown.add_command(label='OPEN...', command=self.notdone)\n            pulldown.add_command(label='QUIT', command=self.quit)\n            self.menubar.add_cascade(label='FILE', underline=0, menu=pulldown)\n    \n        def edit_menu(self):\n            pulldown = Menu(self.menubar)\n            pulldown.add_command(label='PASTE', command=self.notdone)\n            pulldown.add_command(label='SPAM', command=self.greeting)\n            pulldown.add_separator()\n            pulldown.add_command(label='DELETE', command=self.greeting)\n            pulldown.entryconfig(4, state=DISABLED)\n            self.menubar.add_cascade(label='EDIT', underline=0, menu=pulldown)\n    \n        def image_menu(self):\n            photo_files = ('at.png', 'bd.png', 'dk.png')\n            pulldown = Menu(self.menubar)\n            self.photo_objs = []\n            for file in photo_files:\n                img = PhotoImage(file='./gif/' + file)\n                pulldown.add_command(image=img, command=self.notdone)\n                self.photo_objs.append(img)\n            self.menubar.add_cascade(label='IMAGE', underline=0, menu=pulldown)\n    \n        def greeting(self):\n            showinfo('greeting', 'GREETING')\n    \n        def notdone(self):\n            showerror('NOT DONE', 'NOT DONE')\n    \n        def quit(self):\n            if askyesno('Verify quit', 'Sure?'):\n                Frame.quit(self)\n    \n    if __name__ == '__main__':\n        NewMenuDemo().mainloop()\n    \n\n#### 滚动条与列表\n\n    # gui23.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    \n    class ScrolledList(Frame):\n        def __init__(self, options, parent=None):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            self.makeWidgets(options)\n    \n    \n        def handle_list(self, event):\n            index = self.listbox.curselection()  # 鼠标选中的行\n            label = self.listbox.get(index)  # 获取鼠标选中的值\n            self.runCommand(label)  # 打印出值\n    \n    \n        def makeWidgets(self, options):\n            # sbar = Scrollbar(self, orient='horizontal')  # 横向滚动\n            sbar = Scrollbar(self)\n            list = Listbox(self, relief=SUNKEN)\n            sbar.config(command=list.yview)  # 移动滚动条启用回调： 按比例调节列表框的显示，\n            list.config(yscrollcommand=sbar.set)  # 移动列表框启用回调：按比例调节滚动条\n            sbar.pack(side=RIGHT, fill=Y)\n            list.pack(side=LEFT, expand=YES, fill=BOTH)\n            pos = 0\n            for label in options:\n                list.insert(pos, label)\n                pos += 1\n            # selectmode 选择模式SINGLE(单选), BROWSE(默认单选), MULTIPLE(多选), EXTENDED(多选)\n            # 启用多选时， curselection返回列表\n            # 启用单选时， curselection返回字符串\n            list.config(selectmode=EXTENDED, setgrid=1)\n            list.bind('<Double-1>', self.handle_list)\n            self.listbox = list\n    \n        def runCommand(self, selection):\n            print('YOU SELECTED:', selection)\n    \n    \n    if __name__ == '__main__':\n        options = (('Lumberjack-%s' % x) for x in range(20))\n        ScrolledList(options).mainloop()\n    \n\n#### TEXT组件\n\n    gui24.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    \n    class ScrollText(Frame):\n        def __init__(self, parent=None, text='', file=None):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            self.make_widgets()\n            self.set_text(text, file)\n    \n        def make_widgets(self):\n            sbar = Scrollbar(self)\n            text = Text(self, relief=SUNKEN)\n            sbar.config(command=text.yview)\n            text.config(yscrollcommand=sbar.set)\n            sbar.pack(side=RIGHT, fill=Y)\n            text.pack(side=LEFT, expand=YES, fill=BOTH)\n            self.text = text\n    \n        def set_text(self, text='', file=None):\n            if file:\n                text = open(file, 'r').read()\n            # 1.0表示第一行，第0列（行从1开始，列从0开始）\n            # END表示最末一个字符后面第一个位置\n            self.text.delete('1.0', END)  # 删除从第一行第0列开始到最后的字符串，即删除全部\n            self.text.insert('1.0', text)  # 从第一行第0列开始填充数据\n            # mark_set 设置text标志\n            self.text.mark_set(INSERT, '1.0')  # 设置将光标设置在文本开始位置\n            # self.text.mark_set('line_two', '2.2')  # 自定义标志位置 可以用mark_unset取消\n            self.text.focus()\n            # TEXT的tag标签\n            # SEL是内置的标签，表示当前选中的文本\n            # text = self.text.get(SEL_FIRST, SEL_LAST)\n            # text = self.text.get('sel.first', 'sel.last')\n            # self.text.tag_add('alltext', '1.0', END)  # 选中所有文本\n            # self.text.tag_add(SEL, index1, index2)  # 将一定范围内的文本添加到内建的SEL标签\n            # self.text.tag_remove(SEL, '1.0', END)  # 将字符串所有字符从SEL标签中删除\n            # self.text.tag_delete(SEL)  # 删除SEL标签\n            # self.text.tag_add('demo', '1.5', '1.7')\n            # self.text.tag_add('demo', '3.0', '5.7')\n            # self.text.tag_config('demo', background='purple')\n            # self.text.tag_config('demo', fontground='white')\n            # self.text.tag_config('demo', font=('times', 16, 'underline'))\n            # self.text.tag_bind('demo', '<Double-1>', func)\n            # see方法\n            # self.text.see('1.0')  # 滚动到第一行第0列\n            # self.text.see(INSERT)  # 滚动到光标插入处\n            # self.text.see(SEL_FIRST)  # 滚动到选中文本第一个字符串\n        def get_text(self):\n            # -1c 表示往回数一个字符串\n            # +1l 表示往前数一行\n            return self.text.get('1.0', END + '-1c')\n    \n    \n    if __name__ == '__main__':\n        root = Tk()\n        if len(sys.argv) > 1:\n            st = ScrollText(file=sys.argv[1])\n        else:\n            st = ScrollText(text='Words\\ngo here')\n    \n        def show(event):\n            print(repr(st.get_text()))\n    \n        root.bind('<Key-Escape>', show)\n        root.mainloop()\n    \n\n#### 简单的文本编辑器\n\n    # gui25.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkSimpleDialog import askstring\n    from tkFileDialog import asksaveasfilename\n    from quitGui import Quitter\n    from gui24 import ScrollText\n    \n    \n    class SimpleEditor(ScrollText):\n        def __init__(self, parent=None, file=None):\n            frm = Frame(parent)\n            frm.pack(fill=X)\n            Button(frm, text='Save', command=self.on_save).pack(side=LEFT)\n            Button(frm, text='Cut', command=self.on_cut).pack(side=LEFT)\n            Button(frm, text='Paste', command=self.on_paste).pack(side=LEFT)\n            Button(frm, text='Find', command=self.on_find).pack(side=LEFT)\n            Quitter(frm).pack(side=LEFT)\n            ScrollText.__init__(self, parent, file=file)\n            self.text.config(font=('courier', 9, 'normal'))\n    \n        def on_save(self):\n            filename = asksaveasfilename()\n            if filename:\n                alltext = self.get_text()\n                open(filename, 'w').write(alltext)\n    \n    \n        def on_cut(self):\n            text = self.text.get(SEL_FIRST, SEL_LAST)\n            self.text.delete(SEL_FIRST, SEL_LAST)\n            self.clipboard_clear()\n            self.clipboard_append(text)\n    \n    \n        def on_paste(self):\n            try:\n                text = self.selection_get(selection='CLIPBOARD')\n                self.text.insert(INSERT, text)\n            except TclError:\n                pass\n    \n    \n        def on_find(self):\n            target = askstring('SimpleEdit', 'Search string?')\n            if target:\n                where = self.text.search(target, INSERT, END)\n                if where:\n                    print(where)\n                    pastit = where + ('+%dc' % len(target))\n                    self.text.tag_remove(SEL, '1.0', END)\n                    self.text.tag_add(SEL, where, pastit)\n                    self.text.mark_set(INSERT, pastit)\n                    self.text.see(INSERT)\n                    self.text.focus()\n    \n    if __name__ == '__main__':\n        if len(sys.argv) > 1:\n            SimpleEditor(file=sys.argv[1]).mainloop()\n        else:\n            SimpleEditor().mainloop()\n    \n\n#### 创建基础画布\n\n    # gui26.py\n    # -*- coding: UTF-8 -*-\n    \n    from Tkinter import *\n    canvas = Canvas(width=525, height=300, bg='white')\n    canvas.pack(expand=YES, fill=BOTH)\n    \n    canvas.create_line(100, 100, 200, 200)\n    canvas.create_line(100, 200, 200, 300)\n    for i in range(1, 20, 2):\n        canvas.create_line(0, i, 50, i)\n    canvas.create_oval(20, 20, 300, 100, width=10, fill='yellow')\n    d = {1:PIESLICE,2:CHORD,3:ARC}\n    for i in d:\n        canvas.create_arc(\n            (10,10 + 60*i,110,110 + 60*i),\n            style=d[i],   #指定样式\n            start=30,     #指定起始角度\n            extent=30     #指定角度偏移量\n            )\n    canvas.create_arc(0, 0, 100, 200, fill='black')\n    canvas.create_rectangle(200, 200, 300, 300, width=5, fill='red')\n    canvas.create_line(0, 300, 150, 150, width=10, fill='green')\n    \n    photo = PhotoImage(file='./gif/lightmachine.png')\n    canvas.create_image(325,25, image=photo, anchor=NW)\n    \n    widget = Label(canvas, text='Spam', fg='white', bg='black')\n    widget.pack()\n    canvas.create_window(100, 100, window=widget)\n    canvas.create_text(100, 280, text='CLOUD CLONE CORP.')\n    \n    # id = canvas.create_line(fromX, fromY, toX, toY)  # 创建直线\n    # id = canvas.create_oval(fromX, fromY, toX, toY) # 创建椭圆\n    # id = canvas.create_arc(fromX, fromY, toX, toY)  # 创建扇形\n    # id =canvas.create_rectangle(fromX, fromY, toX, toY)  # 创建矩形\n    # canvas.move(id, offsetX, offsetY)  # 移动对象\n    # canvas.delete(id)  # 删除对象\n    # canvas.tkraise(id)  # 将对象移动到前端\n    # canvas.lower(id)  # 将对象移动到底部\n    # canvas.itemconfig(id, fill='red')  # 修改对象属性\n    \n    # 画布标签\n    # canvas.create_line(fromX, fromY, toX, toY, tag='bubbles') \n    # canvas.create_line(fromX, fromY, toX, toY, tag='bubbles') \n    # id = canvas.create_line(fromX, fromY, toX, toY)\n    # canvas.addtag_withtag('bubbles', id)\n    # canvas.move('bubbles', diffX, diffY)\n    mainloop()\n    \n\n#### canvas与滚动条\n\n    # gui27.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    class ScrolledCanvas(Frame):\n        def __init__(self, parent=None, color='brown'):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            canv = Canvas(self, bg=color, relief=SUNKEN)\n            canv.config(width=300, height=200)\n            canv.config(scrollregion=(0, 0, 300, 1000))\n            canv.config(highlightthickness=0)\n    \n            sbar = Scrollbar(self)\n            sbar.config(command=canv.yview)\n            canv.config(yscrollcommand=sbar.set)\n            sbar.pack(side=RIGHT, fill=Y)\n            canv.pack(side=LEFT, expand=YES, fill=BOTH)\n    \n            self.fillContent(canv)\n            canv.bind('<Double-1>', self.onDoubleClick)\n            self.canvas = canv\n    \n        def fillContent(self, canv):\n            for i in range(10):\n                canv.create_text(150, 50+(i*100), text='spam'+str(i), fill='beige')\n    \n        def onDoubleClick(self, event):\n            print(event.x, event.y)\n            print(self.canvas.canvasx(event.x), self.canvas.canvasy(event.y))\n    \n    if __name__ == '__main__':\n        ScrolledCanvas().mainloop()\n    \n\n#### canvas绑定事件\n\n    # gui28.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    trace = False\n    \n    class CanvasEventDemo:\n        def __init__(self, parent=None):\n            canvas = Canvas(width=300, height=300, bg='beige')\n            canvas.pack()\n            canvas.bind('<ButtonPress-1>', self.on_start)\n            canvas.bind('<B1-Motion>', self.on_grow)\n            canvas.bind('<Double-1>', self.on_clear)\n            canvas.bind('<ButtonPress-3>', self.on_move)\n            self.canvas = canvas\n            self.drawn = None\n            self.kinds = [canvas.create_oval, canvas.create_rectangle]\n    \n        def on_start(self, event):\n            self.shape =self.kinds[0]\n            self.kinds = self.kinds[1:] + self.kinds[:1]\n            self.start = event\n            self.drawn = None\n    \n        def on_grow(self, event):\n            canvas = event.widget\n            if self.drawn:\n                canvas.delete(self.drawn)\n            object_id = self.shape(self.start.x, self.start.y, event.x, event.y)\n            if trace:\n                print(object_id)\n            self.drawn = object_id\n    \n        def on_clear(self, event):\n            event.widget.delete('all')\n    \n    \n        def on_move(self, event):\n            if self.drawn:\n                if trace:\n                    print(self.drawn)\n                canvas = event.widget\n                diffx, diffy = (event.x - self.start.x), (event.y - self.start.y)\n                canvas.move(self.drawn, diffx, diffy)\n                self.start = event\n    \n    if __name__ == '__main__':\n        CanvasEventDemo()\n        mainloop()\n    \n\n#### grid布局和pack布局实现自动扩展\n\n    # gui29.py\n    # -*- coding: UTF-8 -*-\n    \n    from Tkinter import *\n    colors = ['red', 'green', 'orange', 'white', 'yellow', 'blue']\n    \n    def gridbox(root):\n        Label(root, text='GRID').grid(columnspan=2)  # 跨两列\n        row = 1\n        for color in colors:\n            lab = Label(root, text=color, relief=RIDGE, width=25)\n            ent = Entry(root, bg=color, relief=SUNKEN, width=50)\n            lab.grid(row=row, column=0, sticky=NSEW)  # 向4个方向扩展\n            ent.grid(row=row, column=1, sticky=NSEW)\n            root.rowconfigure(row, weight=1)  # 循环行自动扩展\n            row += 1\n        root.columnconfigure(0, weight=1)  # 第一列自动扩展\n        root.columnconfigure(1, weight=1)  # 第二列自动扩展\n    \n    def packbox(root):\n        Label(root, text='PACK').pack()\n        for color in colors:\n            row = Frame(root)\n            lab = Label(row, text=color, relief=RIDGE, width=25)\n            ent = Entry(row, bg=color, relief=SUNKEN, width=50)\n            row.pack(side=TOP, expand=YES, fill=BOTH)\n            lab.pack(side=LEFT, expand=YES, fill=BOTH)\n            ent.pack(side=RIGHT, expand=YES, fill=BOTH)\n    \n    if __name__ == '__main__':\n        root = Tk()\n        gridbox(Toplevel(root))\n        packbox(Toplevel(root))\n        Button(root, text='Quit', command=root.quit).pack()\n        mainloop()\n    \n\n### PIL：Python Imaging Library\n\n#### 安装\n\n    sudo apt-get install python-imaging\n    或者\n    sudo easy_install PIL\n    \n\nwindow系统选择\n\n    pip install Pillow\n    \n\n图像操作\n\n    import Image\n    # 打开一个jpg图像文件，注意路径要改成你自己的:\n    im = Image.open('/Users/michael/test.jpg')\n    # 获得图像尺寸:\n    w, h = im.size\n    # 缩放到50%:\n    im.thumbnail((w//2, h//2))\n    # 把缩放后的图像用jpeg格式保存:\n    im.save('/Users/michael/thumbnail.jpg', 'jpeg')\n    \n\n模糊效果\n\n    import Image, ImageFilter\n    \n    im = Image.open('/Users/hanchang/test.jpg')\n    im2 = im.filter(ImageFilter.BLUR)\n    im2.save('/Users/hanchang/blur.jpg', 'jpeg')\n    \n\n自定义图像验证码\n\n    import Image, ImageDraw, ImageFont, ImageFilter\n    import random\n    # 随机字母:\n    def rndChar():\n        return chr(random.randint(65, 90))\n    \n    # 随机颜色1:\n    def rndColor():\n        return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))\n    \n    # 随机颜色2:\n    def rndColor2():\n        return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))\n    \n    # 240 x 60:\n    width = 60 * 4\n    height = 60\n    image = Image.new('RGB', (width, height), (255, 255, 255))\n    # 创建Font对象:\n    font = ImageFont.truetype('Arial.ttf', 36)\n    # 创建Draw对象:\n    draw = ImageDraw.Draw(image)\n    # 填充每个像素:\n    for x in range(width):\n        for y in range(height):\n            draw.point((x, y), fill=rndColor())\n    # 输出文字:\n    for t in range(4):\n        draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2())\n    # 模糊:\n    image = image.filter(ImageFilter.BLUR)\n    image.save('code.jpg', 'jpeg');\n    自定义字符串生成图片\n    \n\n``` from PIL import Image,ImageDraw,ImageFont,ImageOps <h1>生成图片</h1> def create\\_image(str, line, name, dir): img\\_size = (400, (line*20) + 10) img\\_mode = 'RGB' img\\_font = ImageFont.truetype('UbuntuMono-R.ttf', 14) img\\_bg = '#FFF' img\\_fg = '#000' img = Image.new(mode=img\\_mode, size=img\\_size, color=img\\_bg) draw = ImageDraw.Draw(img) draw.text((10, 10), str, fill=img\\_fg, font=img_font) img.save( dir + name + '.png', 'png') ```","source":"_posts/PythonTkinter基础入门.md","raw":"---\ntitle: PythonTkinter基础入门\ntags:\n  - python\nurl: 99.html\nid: 99\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-10 10:58:02\n---\n\npython基础环境\n\n    sudo apt-get install python\n    sudo apt-get install python-pip\n    \n\nTkinter安装\n\n    sudo apt-get install python-tk\n    \n\n配置组件外观\n\n    #!/usr/bin/python\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    root = Tk()\n    # 定义图标\n    if sys.platform == 'win32':\n        root.iconbitmap('favicon.ico')\n    else:\n        icon = PhotoImage(file='phone.gif')\n        root.tk.call('wm', 'iconphoto', root._w, icon)\n    # 定义字体，字号，类型\n    label_font = ('Ubuntu', 20, 'bold underline italic')\n    # 创建组件\n    widget = Label(root, text='Hello,云克隆', padx=100, pady=20)\n    # 配置组件字体\n    widget.config(font=label_font)\n    # 组件宽，高\n    widget.config(height=3, width=20)\n    # 组件背景颜色\n    widget.config(bg='#FF0')\n    # 组件字体颜色\n    widget.config(fg='#F0F')\n    # 组件边框宽度\n    widget.config(bd=3)\n    # 组件边框外形, FLAT扁平, SUNKEN凹陷, RAISED凸起, GROOVE凹槽, SOLID加粗, RIDGE脊状,\n    widget.config(relief=SUNKEN)\n    # 组件鼠标手势, 'gumby', 'watch', 'pencil', 'crdss', hand2\n    widget.config(cursor='gumby')\n    # 组件状态, DISABLE禁用, NORMAL正常, READONLY只读\n    widget.config(state=DISABLED)\n    # 布置组件\n    # expand设置是否可以扩展，fill表示随父组件扩展方向，可以设置BOTH, X, Y\n    # 设置组件padding值\n    # side表示按钮布置窗口的位置\n    widget.pack(expand=True, fill=X, padx=10, pady=50, side=LEFT)\n    root.mainloop()\n    \n\n#### 标准弹出框\n\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    # python3\n    # from Tkinter.messagebox import *\n    def callback():\n        if askyesno('Verify', 'Do you ready want to quit?'):\n            showwarning('Yes', 'Quit not yet')\n        else:\n            showinfo('No', 'Quit has been cancelled')\n    \n    errmsg = 'Sorry, no spam allowed'\n    Button(None, text='Quit', command=callback).pack(fill=X)\n    Button(None, text='spam', command=(lambda: showerror('spam', errmsg))).pack(fill=X)\n    mainloop()\n    \n\n#### 常见弹框\n\n    # gui6.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    from tkFileDialog import *\n    from tkColorChooser import *\n    from tkSimpleDialog import *\n    \n    \n    demos = {\n        'Open': askopenfilename,\n        'Color': askcolor,\n        'Query': lambda: askquestion('Warning', 'You typed \"rm *\"\\nconfirm?'),\n        'Error': lambda: showerror('Error!', 'He is dead'),\n        'Input': lambda: askfloat('Entry', 'Enter credit card number')\n    }\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            Label(self, text='Basic demos').pack()\n            for (key, value) in demos.items():\n                Button(self, text=key, command=value).pack(side=TOP, fill=BOTH)\n    \n    if __name__ == '__main__':\n        Demo().mainloop()\n    自定义弹框\n    \n    # -*- coding: UTF-8 -*-\n    import sys\n    from Tkinter import *\n    makemodal = (len(sys.argv) > 1)\n    \n    def dialog():\n        win = Toplevel()\n        Label(win, text='Hard drive reformatted!').pack()\n        Button(win, text='OK', command=win.destroy).pack()\n        if makemodal:\n            # 获取输入的焦点\n            win.focus_set()\n            # 打开的时候，禁用其他窗口\n            win.grab_set()\n            # 在win销毁之前，继续等待\n            win.wait_window()\n        print 'dialog exit'\n    \n    root = Tk()\n    Button(root, text='popup', command=dialog).pack()\n    root.mainloop()\n    \n\n#### 绑定事件\n\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    \n    def showPosEvent(event):\n        print('Widget=%s, X=%s, Y=%s' % (event.widget, event.x, event.y))\n    \n    \n    def showAllEvent(event):\n        print(event)\n        for attr in dir(event):\n            if not attr.startswith('__'):\n                print(attr, '=>', getattr(event, attr))\n    \n    \n    def onKeyPress(event):\n        print('Got key press: ', event.char)\n    \n    \n    def onArrowKey(event):\n        print('Got up arrow key press')\n    \n    \n    def onReturnKey(event):\n        print('Got return key press')\n    \n    \n    def onLeftClick(event):\n        print('Got left mouse button click: ')\n        showPosEvent(event)\n    \n    \n    def onRightClick(event):\n        print('Got right mouse button click: ')\n        showPosEvent(event)\n    \n    \n    def onMiddleClick(event):\n        print('Got middle mouse button click: ')\n        showPosEvent(event)\n        showAllEvent(event)\n    \n    \n    def onLeftDrag(event):\n        print('Got left mouse drag click: ')\n        showPosEvent(event)\n    \n    \n    def onDoubleLeftClick(event):\n        print('Got double left mouse click: ')\n        showPosEvent(event)\n        tkroot.quit()\n    \n    \n    tkroot = Tk()\n    labelfont = ('courier', 20, 'bold')\n    widget = Label(tkroot, text='Hello bind world')\n    widget.config(bg='red', font=labelfont)\n    widget.config(height=5, width=20)\n    widget.pack(expand=YES, fill=BOTH)\n    # 绑定单击左键\n    widget.bind('<Button-1>', onLeftClick)\n    # 绑定单击右键\n    widget.bind('<Button-3>', onRightClick)\n    # 绑定单击中键\n    widget.bind('<Button-2>', onMiddleClick)\n    # 绑定双击左键\n    widget.bind('<Double-1>', onDoubleLeftClick)\n    # 绑定拖拽 B1表示点击左键，Motion表示拖拽\n    widget.bind('<B1-Motion>', onLeftDrag)\n    # 绑定键盘按键\n    widget.bind('<KeyPress>', onKeyPress)\n    # 绑定按下箭头键\n    widget.bind('<Up>', onArrowKey)\n    # 绑定回车，返回键\n    widget.bind('<Return>', onReturnKey)\n    widget.focus()\n    tkroot.title('CLICK ME')\n    tkroot.mainloop()\n    \n    # <ButtonPress> 按下按钮\n    # <ButtonRelease> 松开按钮\n    # <Motion> 鼠标指针移动\n    # <Configure> 窗口大小，位置改变时候\n    # <Destroy> 销毁窗口\n    # <FocusIn> 获取焦点\n    # <FocusOut> 失去焦点\n    # <Map> 窗口打开\n    # <Unmap> 窗口最小化\n    # <Escape>, <BackSpace>, <Tab> 捕获特点ESC键，回车键，tab键\n    # <Down>, <Up>, <Left>, <Right> 捕获方向键\n    # <B1-Motion> 按下左键并拖拽\n    # <KeyPress-a> 按下按键“a”，大小写敏感\n    \n\n#### 输入框\n\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from quitGui import Quitter\n    \n    fields = 'Name', 'Job', 'Pay'\n    \n    \n    def fetch(entries):\n        for entry in entries:\n            print('Input => %s' % entry.get())  # 获取文本信息\n    \n    \n    def makeform(root, fields):\n        entries = []\n        for field in fields:\n            row = Frame(root)\n            lab = Label(row, width=5, text=field)\n            ent = Entry(row)\n            row.pack(side=TOP, fill=X)\n            lab.pack(side=LEFT)\n            ent.pack(side=RIGHT, expand=YES, fill=X)\n            entries.append(ent)\n        return entries\n    \n    \n    def show(entries, popup):\n        fetch(entries)  # 必须在销毁前取出\n        popup.destroy()  # 如果修改了stmt， order， msgs会随之失败\n    \n    \n    def ask():\n        popup = Toplevel()  # 在模拟对话框窗口中显示表单\n        ents = makeform(popup, fields)\n        Button(popup, text='OK', command=(lambda: show(ents, popup))).pack()\n        popup.grab_set()  # 打开的时候，禁用其他窗口\n        popup.focus_set()  # 获取输入的焦点\n        popup.wait_window()  # 在这里等待销毁\n    \n    \n    if __name__ == '__main__':\n        root = Tk()\n        Button(root, text='Dialog', command=ask).pack()\n        root.mainloop()\n    \n\n#### 复选框\n\n    # gui13.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from gui6 import demos\n    from quitGui import Quitter\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            self.tools()\n            Label(self, text='Ckech demos').pack()\n            self.vars = []\n            for key in demos:\n                var = IntVar()\n                Checkbutton(self, text=key, variable=var, command=demos[key]).pack(side=LEFT)\n                self.vars.append(var)\n    \n        def report(self):\n            for var in self.vars:\n                print(var.get())  # 当前开关设置1或者0\n            print()\n    \n        def tools(self):\n            frm = Frame(self)\n            frm.pack(side=RIGHT)\n            Button(frm, text='State', command=self.report).pack(fill=X)\n            Quitter(frm).pack(fill=X)\n    \n    \n    if __name__ == '__main__':\n        Demo().mainloop()\n    \n    \n\n#### 单选按钮\n\n    #gui14.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from gui6 import demos\n    from quitGui import Quitter\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            Label(self, text='Radio demos').pack(side=TOP)\n            self.var = StringVar()\n            # variable表示单选按钮的变量，相当与html的name标签\n            # value表示单选按钮的变量值，相当与html的value标签\n            for key in demos:\n                Radiobutton(self, text=key, command=self.onPress, variable=self.var, value=key).pack(anchor=NW)\n            self.var.set(key)  # 选中最后一个开始\n            Button(self, text='State', command=self.report).pack(fill=X)\n            Quitter(self).pack(fill=X)\n    \n        def onPress(self):\n            pick = self.var.get()\n            print('you pressed', pick)\n            print('result: ', demos[pick]())  # 按钮使用返回的值\n    \n        def report(self):\n            print(self.var.get())\n    \n    if __name__ == '__main__':\n        Demo().mainloop()\n    \n\n#### 标尺滚动条\n\n    # gui16.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from gui6 import demos\n    from quitGui import Quitter\n    \n    \n    class Demo(Frame):\n        def __init__(self, parent=None, **options):\n            Frame.__init__(self, parent, **options)\n            self.pack()\n            Label(self, text='Scale demos').pack()\n            self.var = IntVar()\n            Scale(self, label='Pick demo number',\n                  command=self.onMove, variable=self.var,\n                  from_=0, to=len(demos)-1).pack()\n            Scale(self, label='Pick demo number',  # 标尺的文本\n                  command=self.onMove,  # 绑定回调\n                  variable=self.var,  # 变量\n                  from_=0,   # 标尺最小值\n                  to=len(demos) - 1,   # 标尺最大值\n                  length = 200,  # 长度\n                  tickinterval = 2,   # 每隔几个单位显示标记单位\n                  showvalue = YES,  # 显示或隐藏标尺滑动条旁边的当前值\n                  orient = 'horizontal'  # 横向展示\n                  ).pack()\n            Quitter(self).pack(side=RIGHT)\n            Button(self, text='Run demo', command=self.onRun).pack(side=LEFT)\n            Button(self, text='State', command=self.report).pack(side=RIGHT)\n    \n        def onMove(self, value):\n            print('in onMove', value)\n    \n        def onRun(self):\n            pos = self.var.get()\n            print('you picked', pos)\n            demo = list(demos.values())[pos]\n            print(demo())\n    \n        def report(self):\n            print(self.var.get())\n    \n    if __name__ == '__main__':\n        print(list(demos.keys()))\n        Demo().mainloop()\n    \n\n#### 创建图片\n\n    # gui17.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    gifdir = './gif/'\n    win = Tk()\n    igm = PhotoImage(file=gifdir + 'logo.png')\n    \n    # 按钮上绑定图片\n    # Button(win, image=igm).pack()\n    # win.mainloop()\n    \n    # 创建画布\n    can = Canvas(win)\n    can.pack(fill=BOTH)\n    can.config(width=igm.width() + 4, height=igm.height() + 4)\n    can.create_image(2,  # x坐标\n                     2,  # y坐标\n                     image=igm, anchor=NW)\n    win.mainloop()\n    \n\n### 按钮随机读取图片\n\n    # gui18.py\n    # -*- coding: UTF-8 -*-\n    from glob import glob\n    from gui13 import *\n    import random\n    \n    gifdir = './gif/'\n    \n    \" 按钮随机读取图片 \"\n    class ButtonPicsDemo(Frame):\n        def __init__(self, gifdir=gifdir, parent=None):\n            Frame.__init__(self, parent)\n            self.pack()\n            self.lbl = Label(self, text='none', bg='blue', fg='red')\n            self.pix = Button(self, text='press me', command=self.draw, bg='white')\n            self.lbl.pack(fill=BOTH)\n            self.pix.pack(pady=10)\n            Demo(self, relief=SUNKEN, bd=2).pack(fill=BOTH)\n            # glob模块， glob方法，返回所有匹配的文件列表\n            files = glob(gifdir + '*.png')\n            self.images = [(x, PhotoImage(file=x)) for x in files]\n            print(files)\n    \n        def draw(self):\n            name, photo = random.choice(self.images)\n            self.lbl.config(text=name)\n            self.pix.config(image=photo)\n    \n    if __name__ == '__main__':\n        if __name__ == '__main__':\n            ButtonPicsDemo().mainloop()\n    \n\n#### 缩略图\n\n    # gui19.py\n    # -*- coding: UTF-8 -*-\n    import os\n    import math\n    import PIL\n    from PIL import Image\n    from Tkinter import *\n    \n    \n    def make_thumbs(img_dir, size=(100, 100), subdir='thumbs'):\n        thumb_dir = os.path.join(img_dir, subdir)\n        if not os.path.exists(thumb_dir):\n            os.mkdir(thumb_dir)\n        thumbs = []\n        for img_file in os.listdir(img_dir):\n            thumb_path = os.path.join(thumb_dir, img_file)\n            if os.path.exists(thumb_path):\n                thumb_obj = PIL.Image.open(thumb_path)\n                thumbs.append((img_file, thumb_obj))\n            else:\n                print('making', thumb_path)\n                img_path = os.path.join(img_dir, img_file)\n                try:\n                    img_obj = PIL.Image.open(img_path)\n                    img_obj.thumbnail(size, PIL.Image.ANTIALIAS)\n                    img_obj.save(thumb_path)\n                    thumbs.append((img_file, img_obj))\n                except Exception, e:\n                    print('skipping: ', img_path)\n                    print e\n        return thumbs\n    \n    \n    class ViewOne(Toplevel):\n        def __init__(self, img_dir, img_file):\n            Toplevel.__init__(self)\n            self.title(img_file)\n            img_path = os.path.join(img_dir, img_file)\n            img_obj = PhotoImage(file=img_path)\n            Label(self, image=img_obj).pack()\n            print(img_path, img_obj.width(), img_obj.height())\n            self.savephoto = img_obj\n    \n    \n    def viewer(img_dir, kind=Toplevel, cols=None):\n        win = kind()\n        win.title('VIEWER: ' + img_dir)\n        thumbs = make_thumbs(img_dir)\n        if not cols:\n            # 固定大小 或者N×N\n            cols = int(math.ceil(math.sqrt(len(thumbs))))\n        savephotos = []\n        while thumbs:\n            thumbs_row, thumbs = thumbs[:cols], thumbs[cols:]\n            row = Frame(win)\n            row.pack(fill=BOTH)\n            for(img_file, img_obj) in thumbs_row:\n                size = max(img_obj.size)\n                photo = PhotoImage(file=os.path.join(img_dir, 'thumbs', img_file))\n                link = Button(row, image=photo)\n            handler = lambda savefile=img_file: ViewOne(img_dir, savefile)\n            link.config(command=handler, width=size, height=size)\n            link.pack(side=LEFT, expand=YES)\n            savephotos.append(photo)\n        Button(win, text='Quit', command=win.quit, bg='beige').pack(fill=X)\n        return win, savephotos\n    \n    if __name__ == '__main__':\n        img_dir = len(sys.argv) > 1 and sys.argv[1] or 'gif'\n        main, save = viewer(img_dir, kind=Tk)\n        main.mainloop()\n    \n\n### 创建基础顶级菜单\n\n    # gui20.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    \n    \n    def not_done():\n        showerror('Not implemented', 'Not yet available')\n    \n    \n    def make_menu(win):\n        top = Menu(win)  # 定义顶级菜单\n        win.config(menu=top)\n        file = Menu(top, tearoff=True)  # 一级菜单 tearoff:设置菜单下的虚线是否显示\n        file.add_command(label='New...', command=not_done, underline=0)\n        file.add_command(label='Open...', command=not_done, underline=0)\n        file.add_command(label='Quit...', command=win.quit,  underline=0)\n        top.add_cascade(label='File', menu=file, underline=0)  # 在顶级菜单中添加一级菜单\n    \n        edit = Menu(top, tearoff=False)  # 一级菜单\n        edit.add_command(label='Cut', command=not_done, underline=0)\n        edit.add_command(label='Paste', command=not_done, underline=0)\n        edit.add_separator()  # 添加下划线\n        top.add_cascade(label='Edit', menu=edit, underline=0)\n    \n        submenu = Menu(edit, tearoff=True)  # 二级菜单\n        submenu.add_command(label='Spam', command=win.quit, underline=0)\n        submenu.add_command(label='Eggs', command=not_done, underline=0)\n        edit.add_cascade(label='Stuff', menu=submenu, underline=0)  # 在一级菜单中添加二级菜单\n    \n    if __name__ == '__main__':\n        root = Tk()\n        root.title('menu_win')\n        make_menu(root)\n        msg = Label(root, text='Window menu basic')\n        msg.pack(expand=YES, fill=BOTH)\n        msg.config(relief=SUNKEN, width=40, height=7, bg='beige')\n        root.mainloop()\n    \n\n#### 创建框架级别菜单\n\n    # gui21.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    \n    \n    def not_done():\n        showerror('Not implemented', 'Not yet available')\n    \n    \n    def make_menu(parent):\n        menu_bar = Frame(parent)\n        menu_bar.pack(side=TOP, fill=X)\n    \n        f_button = Menubutton(menu_bar, text='File', underline=0)\n        f_button.pack(side=LEFT)\n        file = Menu(f_button)\n        file.add_command(label='New...', command=not_done, underline=0)\n        file.add_command(label='Open...', command=not_done, underline=0)\n        file.add_command(label='Quit...', command=parent.quit,  underline=0)\n        f_button.config(menu=file)\n    \n        e_button = Menubutton(menu_bar, text='Edit', underline=0)\n        e_button.pack(side=LEFT)\n        edit = Menu(e_button)\n        edit.add_command(label='Cut', command=not_done, underline=0)\n        edit.add_command(label='Paste', command=not_done, underline=0)\n        edit.add_separator()\n        e_button.config(menu=edit)\n    \n        sub_menu = Menu(edit, tearoff=True)\n        sub_menu.add_command(label='Spam', command=parent.quit, underline=0)\n        sub_menu.add_command(label='Eggs', command=not_done, underline=0)\n        edit.add_cascade(label='Stuff', menu=sub_menu, underline=0)\n        return menu_bar\n    \n    \n    \n    if __name__ == '__main__':\n        root = Tk()\n        root.title('menu_fra')\n        for i in range(2):\n            mnu = make_menu(root)\n            mnu.config(bd=2, relief=RAISED)\n            Label(root, bg='black', height=5, width=25).pack(expand=YES, fill=BOTH)\n        Button(root, text='Bye', command=root.quit).pack()\n        root.mainloop()\n    \n\n#### 图片菜单\n\n    # gui22.py\n    # -*- coding:UTF-8 -*-\n    from Tkinter import *\n    from tkMessageBox import *\n    \n    \n    class NewMenuDemo(Frame):\n        def __init__(self, parent=None):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            self.create_widgets()\n    \n        def create_widgets(self):\n            self.make_menubar()\n            self.make_toolbar()\n            l = Label(self, text='Menu and Toolbar Demo')\n            l.config(relief=SUNKEN, width=40, height=10, bg='white')\n            l.pack(expand=YES, fill=BOTH)\n    \n        def make_toolbar(self, size=(30, 30)):\n            toolbar = Frame(self, cursor='hand2', relief=SUNKEN, bd=2)\n            toolbar.pack(side=BOTTOM, fill=X)\n            Button(toolbar, text='Quit', command=self.quit).pack(side=RIGHT)\n            photo_files = ('at.png', 'bd.png', 'dk.png')\n            self.tool_photo_objs = []\n            for file in photo_files:\n                img = PhotoImage(file='./gif/thumbs/' + file)\n                btn = Button(toolbar, image=img, command=self.greeting)\n                btn.config(bd=5, relief=RIDGE)\n                btn.config(width=size[0], height=size[0])\n                btn.pack(side=LEFT)\n                self.tool_photo_objs.append(img)\n            Button(toolbar, text='Hello', command=self.greeting).pack(side=LEFT)\n    \n        def make_menubar(self):\n            self.menubar = Menu(self.master)\n            self.master.config(menu=self.menubar)\n            self.file_menu()\n            self.edit_menu()\n            self.image_menu()\n    \n        def file_menu(self):\n            pulldown = Menu(self.menubar)\n            pulldown.add_command(label='OPEN...', command=self.notdone)\n            pulldown.add_command(label='QUIT', command=self.quit)\n            self.menubar.add_cascade(label='FILE', underline=0, menu=pulldown)\n    \n        def edit_menu(self):\n            pulldown = Menu(self.menubar)\n            pulldown.add_command(label='PASTE', command=self.notdone)\n            pulldown.add_command(label='SPAM', command=self.greeting)\n            pulldown.add_separator()\n            pulldown.add_command(label='DELETE', command=self.greeting)\n            pulldown.entryconfig(4, state=DISABLED)\n            self.menubar.add_cascade(label='EDIT', underline=0, menu=pulldown)\n    \n        def image_menu(self):\n            photo_files = ('at.png', 'bd.png', 'dk.png')\n            pulldown = Menu(self.menubar)\n            self.photo_objs = []\n            for file in photo_files:\n                img = PhotoImage(file='./gif/' + file)\n                pulldown.add_command(image=img, command=self.notdone)\n                self.photo_objs.append(img)\n            self.menubar.add_cascade(label='IMAGE', underline=0, menu=pulldown)\n    \n        def greeting(self):\n            showinfo('greeting', 'GREETING')\n    \n        def notdone(self):\n            showerror('NOT DONE', 'NOT DONE')\n    \n        def quit(self):\n            if askyesno('Verify quit', 'Sure?'):\n                Frame.quit(self)\n    \n    if __name__ == '__main__':\n        NewMenuDemo().mainloop()\n    \n\n#### 滚动条与列表\n\n    # gui23.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    \n    class ScrolledList(Frame):\n        def __init__(self, options, parent=None):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            self.makeWidgets(options)\n    \n    \n        def handle_list(self, event):\n            index = self.listbox.curselection()  # 鼠标选中的行\n            label = self.listbox.get(index)  # 获取鼠标选中的值\n            self.runCommand(label)  # 打印出值\n    \n    \n        def makeWidgets(self, options):\n            # sbar = Scrollbar(self, orient='horizontal')  # 横向滚动\n            sbar = Scrollbar(self)\n            list = Listbox(self, relief=SUNKEN)\n            sbar.config(command=list.yview)  # 移动滚动条启用回调： 按比例调节列表框的显示，\n            list.config(yscrollcommand=sbar.set)  # 移动列表框启用回调：按比例调节滚动条\n            sbar.pack(side=RIGHT, fill=Y)\n            list.pack(side=LEFT, expand=YES, fill=BOTH)\n            pos = 0\n            for label in options:\n                list.insert(pos, label)\n                pos += 1\n            # selectmode 选择模式SINGLE(单选), BROWSE(默认单选), MULTIPLE(多选), EXTENDED(多选)\n            # 启用多选时， curselection返回列表\n            # 启用单选时， curselection返回字符串\n            list.config(selectmode=EXTENDED, setgrid=1)\n            list.bind('<Double-1>', self.handle_list)\n            self.listbox = list\n    \n        def runCommand(self, selection):\n            print('YOU SELECTED:', selection)\n    \n    \n    if __name__ == '__main__':\n        options = (('Lumberjack-%s' % x) for x in range(20))\n        ScrolledList(options).mainloop()\n    \n\n#### TEXT组件\n\n    gui24.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    \n    class ScrollText(Frame):\n        def __init__(self, parent=None, text='', file=None):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            self.make_widgets()\n            self.set_text(text, file)\n    \n        def make_widgets(self):\n            sbar = Scrollbar(self)\n            text = Text(self, relief=SUNKEN)\n            sbar.config(command=text.yview)\n            text.config(yscrollcommand=sbar.set)\n            sbar.pack(side=RIGHT, fill=Y)\n            text.pack(side=LEFT, expand=YES, fill=BOTH)\n            self.text = text\n    \n        def set_text(self, text='', file=None):\n            if file:\n                text = open(file, 'r').read()\n            # 1.0表示第一行，第0列（行从1开始，列从0开始）\n            # END表示最末一个字符后面第一个位置\n            self.text.delete('1.0', END)  # 删除从第一行第0列开始到最后的字符串，即删除全部\n            self.text.insert('1.0', text)  # 从第一行第0列开始填充数据\n            # mark_set 设置text标志\n            self.text.mark_set(INSERT, '1.0')  # 设置将光标设置在文本开始位置\n            # self.text.mark_set('line_two', '2.2')  # 自定义标志位置 可以用mark_unset取消\n            self.text.focus()\n            # TEXT的tag标签\n            # SEL是内置的标签，表示当前选中的文本\n            # text = self.text.get(SEL_FIRST, SEL_LAST)\n            # text = self.text.get('sel.first', 'sel.last')\n            # self.text.tag_add('alltext', '1.0', END)  # 选中所有文本\n            # self.text.tag_add(SEL, index1, index2)  # 将一定范围内的文本添加到内建的SEL标签\n            # self.text.tag_remove(SEL, '1.0', END)  # 将字符串所有字符从SEL标签中删除\n            # self.text.tag_delete(SEL)  # 删除SEL标签\n            # self.text.tag_add('demo', '1.5', '1.7')\n            # self.text.tag_add('demo', '3.0', '5.7')\n            # self.text.tag_config('demo', background='purple')\n            # self.text.tag_config('demo', fontground='white')\n            # self.text.tag_config('demo', font=('times', 16, 'underline'))\n            # self.text.tag_bind('demo', '<Double-1>', func)\n            # see方法\n            # self.text.see('1.0')  # 滚动到第一行第0列\n            # self.text.see(INSERT)  # 滚动到光标插入处\n            # self.text.see(SEL_FIRST)  # 滚动到选中文本第一个字符串\n        def get_text(self):\n            # -1c 表示往回数一个字符串\n            # +1l 表示往前数一行\n            return self.text.get('1.0', END + '-1c')\n    \n    \n    if __name__ == '__main__':\n        root = Tk()\n        if len(sys.argv) > 1:\n            st = ScrollText(file=sys.argv[1])\n        else:\n            st = ScrollText(text='Words\\ngo here')\n    \n        def show(event):\n            print(repr(st.get_text()))\n    \n        root.bind('<Key-Escape>', show)\n        root.mainloop()\n    \n\n#### 简单的文本编辑器\n\n    # gui25.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    from tkSimpleDialog import askstring\n    from tkFileDialog import asksaveasfilename\n    from quitGui import Quitter\n    from gui24 import ScrollText\n    \n    \n    class SimpleEditor(ScrollText):\n        def __init__(self, parent=None, file=None):\n            frm = Frame(parent)\n            frm.pack(fill=X)\n            Button(frm, text='Save', command=self.on_save).pack(side=LEFT)\n            Button(frm, text='Cut', command=self.on_cut).pack(side=LEFT)\n            Button(frm, text='Paste', command=self.on_paste).pack(side=LEFT)\n            Button(frm, text='Find', command=self.on_find).pack(side=LEFT)\n            Quitter(frm).pack(side=LEFT)\n            ScrollText.__init__(self, parent, file=file)\n            self.text.config(font=('courier', 9, 'normal'))\n    \n        def on_save(self):\n            filename = asksaveasfilename()\n            if filename:\n                alltext = self.get_text()\n                open(filename, 'w').write(alltext)\n    \n    \n        def on_cut(self):\n            text = self.text.get(SEL_FIRST, SEL_LAST)\n            self.text.delete(SEL_FIRST, SEL_LAST)\n            self.clipboard_clear()\n            self.clipboard_append(text)\n    \n    \n        def on_paste(self):\n            try:\n                text = self.selection_get(selection='CLIPBOARD')\n                self.text.insert(INSERT, text)\n            except TclError:\n                pass\n    \n    \n        def on_find(self):\n            target = askstring('SimpleEdit', 'Search string?')\n            if target:\n                where = self.text.search(target, INSERT, END)\n                if where:\n                    print(where)\n                    pastit = where + ('+%dc' % len(target))\n                    self.text.tag_remove(SEL, '1.0', END)\n                    self.text.tag_add(SEL, where, pastit)\n                    self.text.mark_set(INSERT, pastit)\n                    self.text.see(INSERT)\n                    self.text.focus()\n    \n    if __name__ == '__main__':\n        if len(sys.argv) > 1:\n            SimpleEditor(file=sys.argv[1]).mainloop()\n        else:\n            SimpleEditor().mainloop()\n    \n\n#### 创建基础画布\n\n    # gui26.py\n    # -*- coding: UTF-8 -*-\n    \n    from Tkinter import *\n    canvas = Canvas(width=525, height=300, bg='white')\n    canvas.pack(expand=YES, fill=BOTH)\n    \n    canvas.create_line(100, 100, 200, 200)\n    canvas.create_line(100, 200, 200, 300)\n    for i in range(1, 20, 2):\n        canvas.create_line(0, i, 50, i)\n    canvas.create_oval(20, 20, 300, 100, width=10, fill='yellow')\n    d = {1:PIESLICE,2:CHORD,3:ARC}\n    for i in d:\n        canvas.create_arc(\n            (10,10 + 60*i,110,110 + 60*i),\n            style=d[i],   #指定样式\n            start=30,     #指定起始角度\n            extent=30     #指定角度偏移量\n            )\n    canvas.create_arc(0, 0, 100, 200, fill='black')\n    canvas.create_rectangle(200, 200, 300, 300, width=5, fill='red')\n    canvas.create_line(0, 300, 150, 150, width=10, fill='green')\n    \n    photo = PhotoImage(file='./gif/lightmachine.png')\n    canvas.create_image(325,25, image=photo, anchor=NW)\n    \n    widget = Label(canvas, text='Spam', fg='white', bg='black')\n    widget.pack()\n    canvas.create_window(100, 100, window=widget)\n    canvas.create_text(100, 280, text='CLOUD CLONE CORP.')\n    \n    # id = canvas.create_line(fromX, fromY, toX, toY)  # 创建直线\n    # id = canvas.create_oval(fromX, fromY, toX, toY) # 创建椭圆\n    # id = canvas.create_arc(fromX, fromY, toX, toY)  # 创建扇形\n    # id =canvas.create_rectangle(fromX, fromY, toX, toY)  # 创建矩形\n    # canvas.move(id, offsetX, offsetY)  # 移动对象\n    # canvas.delete(id)  # 删除对象\n    # canvas.tkraise(id)  # 将对象移动到前端\n    # canvas.lower(id)  # 将对象移动到底部\n    # canvas.itemconfig(id, fill='red')  # 修改对象属性\n    \n    # 画布标签\n    # canvas.create_line(fromX, fromY, toX, toY, tag='bubbles') \n    # canvas.create_line(fromX, fromY, toX, toY, tag='bubbles') \n    # id = canvas.create_line(fromX, fromY, toX, toY)\n    # canvas.addtag_withtag('bubbles', id)\n    # canvas.move('bubbles', diffX, diffY)\n    mainloop()\n    \n\n#### canvas与滚动条\n\n    # gui27.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    \n    class ScrolledCanvas(Frame):\n        def __init__(self, parent=None, color='brown'):\n            Frame.__init__(self, parent)\n            self.pack(expand=YES, fill=BOTH)\n            canv = Canvas(self, bg=color, relief=SUNKEN)\n            canv.config(width=300, height=200)\n            canv.config(scrollregion=(0, 0, 300, 1000))\n            canv.config(highlightthickness=0)\n    \n            sbar = Scrollbar(self)\n            sbar.config(command=canv.yview)\n            canv.config(yscrollcommand=sbar.set)\n            sbar.pack(side=RIGHT, fill=Y)\n            canv.pack(side=LEFT, expand=YES, fill=BOTH)\n    \n            self.fillContent(canv)\n            canv.bind('<Double-1>', self.onDoubleClick)\n            self.canvas = canv\n    \n        def fillContent(self, canv):\n            for i in range(10):\n                canv.create_text(150, 50+(i*100), text='spam'+str(i), fill='beige')\n    \n        def onDoubleClick(self, event):\n            print(event.x, event.y)\n            print(self.canvas.canvasx(event.x), self.canvas.canvasy(event.y))\n    \n    if __name__ == '__main__':\n        ScrolledCanvas().mainloop()\n    \n\n#### canvas绑定事件\n\n    # gui28.py\n    # -*- coding: UTF-8 -*-\n    from Tkinter import *\n    trace = False\n    \n    class CanvasEventDemo:\n        def __init__(self, parent=None):\n            canvas = Canvas(width=300, height=300, bg='beige')\n            canvas.pack()\n            canvas.bind('<ButtonPress-1>', self.on_start)\n            canvas.bind('<B1-Motion>', self.on_grow)\n            canvas.bind('<Double-1>', self.on_clear)\n            canvas.bind('<ButtonPress-3>', self.on_move)\n            self.canvas = canvas\n            self.drawn = None\n            self.kinds = [canvas.create_oval, canvas.create_rectangle]\n    \n        def on_start(self, event):\n            self.shape =self.kinds[0]\n            self.kinds = self.kinds[1:] + self.kinds[:1]\n            self.start = event\n            self.drawn = None\n    \n        def on_grow(self, event):\n            canvas = event.widget\n            if self.drawn:\n                canvas.delete(self.drawn)\n            object_id = self.shape(self.start.x, self.start.y, event.x, event.y)\n            if trace:\n                print(object_id)\n            self.drawn = object_id\n    \n        def on_clear(self, event):\n            event.widget.delete('all')\n    \n    \n        def on_move(self, event):\n            if self.drawn:\n                if trace:\n                    print(self.drawn)\n                canvas = event.widget\n                diffx, diffy = (event.x - self.start.x), (event.y - self.start.y)\n                canvas.move(self.drawn, diffx, diffy)\n                self.start = event\n    \n    if __name__ == '__main__':\n        CanvasEventDemo()\n        mainloop()\n    \n\n#### grid布局和pack布局实现自动扩展\n\n    # gui29.py\n    # -*- coding: UTF-8 -*-\n    \n    from Tkinter import *\n    colors = ['red', 'green', 'orange', 'white', 'yellow', 'blue']\n    \n    def gridbox(root):\n        Label(root, text='GRID').grid(columnspan=2)  # 跨两列\n        row = 1\n        for color in colors:\n            lab = Label(root, text=color, relief=RIDGE, width=25)\n            ent = Entry(root, bg=color, relief=SUNKEN, width=50)\n            lab.grid(row=row, column=0, sticky=NSEW)  # 向4个方向扩展\n            ent.grid(row=row, column=1, sticky=NSEW)\n            root.rowconfigure(row, weight=1)  # 循环行自动扩展\n            row += 1\n        root.columnconfigure(0, weight=1)  # 第一列自动扩展\n        root.columnconfigure(1, weight=1)  # 第二列自动扩展\n    \n    def packbox(root):\n        Label(root, text='PACK').pack()\n        for color in colors:\n            row = Frame(root)\n            lab = Label(row, text=color, relief=RIDGE, width=25)\n            ent = Entry(row, bg=color, relief=SUNKEN, width=50)\n            row.pack(side=TOP, expand=YES, fill=BOTH)\n            lab.pack(side=LEFT, expand=YES, fill=BOTH)\n            ent.pack(side=RIGHT, expand=YES, fill=BOTH)\n    \n    if __name__ == '__main__':\n        root = Tk()\n        gridbox(Toplevel(root))\n        packbox(Toplevel(root))\n        Button(root, text='Quit', command=root.quit).pack()\n        mainloop()\n    \n\n### PIL：Python Imaging Library\n\n#### 安装\n\n    sudo apt-get install python-imaging\n    或者\n    sudo easy_install PIL\n    \n\nwindow系统选择\n\n    pip install Pillow\n    \n\n图像操作\n\n    import Image\n    # 打开一个jpg图像文件，注意路径要改成你自己的:\n    im = Image.open('/Users/michael/test.jpg')\n    # 获得图像尺寸:\n    w, h = im.size\n    # 缩放到50%:\n    im.thumbnail((w//2, h//2))\n    # 把缩放后的图像用jpeg格式保存:\n    im.save('/Users/michael/thumbnail.jpg', 'jpeg')\n    \n\n模糊效果\n\n    import Image, ImageFilter\n    \n    im = Image.open('/Users/hanchang/test.jpg')\n    im2 = im.filter(ImageFilter.BLUR)\n    im2.save('/Users/hanchang/blur.jpg', 'jpeg')\n    \n\n自定义图像验证码\n\n    import Image, ImageDraw, ImageFont, ImageFilter\n    import random\n    # 随机字母:\n    def rndChar():\n        return chr(random.randint(65, 90))\n    \n    # 随机颜色1:\n    def rndColor():\n        return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))\n    \n    # 随机颜色2:\n    def rndColor2():\n        return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))\n    \n    # 240 x 60:\n    width = 60 * 4\n    height = 60\n    image = Image.new('RGB', (width, height), (255, 255, 255))\n    # 创建Font对象:\n    font = ImageFont.truetype('Arial.ttf', 36)\n    # 创建Draw对象:\n    draw = ImageDraw.Draw(image)\n    # 填充每个像素:\n    for x in range(width):\n        for y in range(height):\n            draw.point((x, y), fill=rndColor())\n    # 输出文字:\n    for t in range(4):\n        draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2())\n    # 模糊:\n    image = image.filter(ImageFilter.BLUR)\n    image.save('code.jpg', 'jpeg');\n    自定义字符串生成图片\n    \n\n``` from PIL import Image,ImageDraw,ImageFont,ImageOps <h1>生成图片</h1> def create\\_image(str, line, name, dir): img\\_size = (400, (line*20) + 10) img\\_mode = 'RGB' img\\_font = ImageFont.truetype('UbuntuMono-R.ttf', 14) img\\_bg = '#FFF' img\\_fg = '#000' img = Image.new(mode=img\\_mode, size=img\\_size, color=img\\_bg) draw = ImageDraw.Draw(img) draw.text((10, 10), str, fill=img\\_fg, font=img_font) img.save( dir + name + '.png', 'png') ```","slug":"PythonTkinter基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwtm004wh3a4ikma5dj6","content":"<p>python基础环境</p>\n<pre><code>sudo apt-get install python\nsudo apt-get install python-pip</code></pre><p>Tkinter安装</p>\n<pre><code>sudo apt-get install python-tk</code></pre><p>配置组件外观</p>\n<pre><code>#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nroot = Tk()\n# 定义图标\nif sys.platform == &apos;win32&apos;:\n    root.iconbitmap(&apos;favicon.ico&apos;)\nelse:\n    icon = PhotoImage(file=&apos;phone.gif&apos;)\n    root.tk.call(&apos;wm&apos;, &apos;iconphoto&apos;, root._w, icon)\n# 定义字体，字号，类型\nlabel_font = (&apos;Ubuntu&apos;, 20, &apos;bold underline italic&apos;)\n# 创建组件\nwidget = Label(root, text=&apos;Hello,云克隆&apos;, padx=100, pady=20)\n# 配置组件字体\nwidget.config(font=label_font)\n# 组件宽，高\nwidget.config(height=3, width=20)\n# 组件背景颜色\nwidget.config(bg=&apos;#FF0&apos;)\n# 组件字体颜色\nwidget.config(fg=&apos;#F0F&apos;)\n# 组件边框宽度\nwidget.config(bd=3)\n# 组件边框外形, FLAT扁平, SUNKEN凹陷, RAISED凸起, GROOVE凹槽, SOLID加粗, RIDGE脊状,\nwidget.config(relief=SUNKEN)\n# 组件鼠标手势, &apos;gumby&apos;, &apos;watch&apos;, &apos;pencil&apos;, &apos;crdss&apos;, hand2\nwidget.config(cursor=&apos;gumby&apos;)\n# 组件状态, DISABLE禁用, NORMAL正常, READONLY只读\nwidget.config(state=DISABLED)\n# 布置组件\n# expand设置是否可以扩展，fill表示随父组件扩展方向，可以设置BOTH, X, Y\n# 设置组件padding值\n# side表示按钮布置窗口的位置\nwidget.pack(expand=True, fill=X, padx=10, pady=50, side=LEFT)\nroot.mainloop()</code></pre><h4 id=\"标准弹出框\"><a href=\"#标准弹出框\" class=\"headerlink\" title=\"标准弹出框\"></a>标准弹出框</h4><pre><code># -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n# python3\n# from Tkinter.messagebox import *\ndef callback():\n    if askyesno(&apos;Verify&apos;, &apos;Do you ready want to quit?&apos;):\n        showwarning(&apos;Yes&apos;, &apos;Quit not yet&apos;)\n    else:\n        showinfo(&apos;No&apos;, &apos;Quit has been cancelled&apos;)\n\nerrmsg = &apos;Sorry, no spam allowed&apos;\nButton(None, text=&apos;Quit&apos;, command=callback).pack(fill=X)\nButton(None, text=&apos;spam&apos;, command=(lambda: showerror(&apos;spam&apos;, errmsg))).pack(fill=X)\nmainloop()</code></pre><h4 id=\"常见弹框\"><a href=\"#常见弹框\" class=\"headerlink\" title=\"常见弹框\"></a>常见弹框</h4><pre><code># gui6.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\nfrom tkFileDialog import *\nfrom tkColorChooser import *\nfrom tkSimpleDialog import *\n\n\ndemos = {\n    &apos;Open&apos;: askopenfilename,\n    &apos;Color&apos;: askcolor,\n    &apos;Query&apos;: lambda: askquestion(&apos;Warning&apos;, &apos;You typed &quot;rm *&quot;\\nconfirm?&apos;),\n    &apos;Error&apos;: lambda: showerror(&apos;Error!&apos;, &apos;He is dead&apos;),\n    &apos;Input&apos;: lambda: askfloat(&apos;Entry&apos;, &apos;Enter credit card number&apos;)\n}\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        Label(self, text=&apos;Basic demos&apos;).pack()\n        for (key, value) in demos.items():\n            Button(self, text=key, command=value).pack(side=TOP, fill=BOTH)\n\nif __name__ == &apos;__main__&apos;:\n    Demo().mainloop()\n自定义弹框\n\n# -*- coding: UTF-8 -*-\nimport sys\nfrom Tkinter import *\nmakemodal = (len(sys.argv) &gt; 1)\n\ndef dialog():\n    win = Toplevel()\n    Label(win, text=&apos;Hard drive reformatted!&apos;).pack()\n    Button(win, text=&apos;OK&apos;, command=win.destroy).pack()\n    if makemodal:\n        # 获取输入的焦点\n        win.focus_set()\n        # 打开的时候，禁用其他窗口\n        win.grab_set()\n        # 在win销毁之前，继续等待\n        win.wait_window()\n    print &apos;dialog exit&apos;\n\nroot = Tk()\nButton(root, text=&apos;popup&apos;, command=dialog).pack()\nroot.mainloop()</code></pre><h4 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h4><pre><code># -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\n\ndef showPosEvent(event):\n    print(&apos;Widget=%s, X=%s, Y=%s&apos; % (event.widget, event.x, event.y))\n\n\ndef showAllEvent(event):\n    print(event)\n    for attr in dir(event):\n        if not attr.startswith(&apos;__&apos;):\n            print(attr, &apos;=&gt;&apos;, getattr(event, attr))\n\n\ndef onKeyPress(event):\n    print(&apos;Got key press: &apos;, event.char)\n\n\ndef onArrowKey(event):\n    print(&apos;Got up arrow key press&apos;)\n\n\ndef onReturnKey(event):\n    print(&apos;Got return key press&apos;)\n\n\ndef onLeftClick(event):\n    print(&apos;Got left mouse button click: &apos;)\n    showPosEvent(event)\n\n\ndef onRightClick(event):\n    print(&apos;Got right mouse button click: &apos;)\n    showPosEvent(event)\n\n\ndef onMiddleClick(event):\n    print(&apos;Got middle mouse button click: &apos;)\n    showPosEvent(event)\n    showAllEvent(event)\n\n\ndef onLeftDrag(event):\n    print(&apos;Got left mouse drag click: &apos;)\n    showPosEvent(event)\n\n\ndef onDoubleLeftClick(event):\n    print(&apos;Got double left mouse click: &apos;)\n    showPosEvent(event)\n    tkroot.quit()\n\n\ntkroot = Tk()\nlabelfont = (&apos;courier&apos;, 20, &apos;bold&apos;)\nwidget = Label(tkroot, text=&apos;Hello bind world&apos;)\nwidget.config(bg=&apos;red&apos;, font=labelfont)\nwidget.config(height=5, width=20)\nwidget.pack(expand=YES, fill=BOTH)\n# 绑定单击左键\nwidget.bind(&apos;&lt;Button-1&gt;&apos;, onLeftClick)\n# 绑定单击右键\nwidget.bind(&apos;&lt;Button-3&gt;&apos;, onRightClick)\n# 绑定单击中键\nwidget.bind(&apos;&lt;Button-2&gt;&apos;, onMiddleClick)\n# 绑定双击左键\nwidget.bind(&apos;&lt;Double-1&gt;&apos;, onDoubleLeftClick)\n# 绑定拖拽 B1表示点击左键，Motion表示拖拽\nwidget.bind(&apos;&lt;B1-Motion&gt;&apos;, onLeftDrag)\n# 绑定键盘按键\nwidget.bind(&apos;&lt;KeyPress&gt;&apos;, onKeyPress)\n# 绑定按下箭头键\nwidget.bind(&apos;&lt;Up&gt;&apos;, onArrowKey)\n# 绑定回车，返回键\nwidget.bind(&apos;&lt;Return&gt;&apos;, onReturnKey)\nwidget.focus()\ntkroot.title(&apos;CLICK ME&apos;)\ntkroot.mainloop()\n\n# &lt;ButtonPress&gt; 按下按钮\n# &lt;ButtonRelease&gt; 松开按钮\n# &lt;Motion&gt; 鼠标指针移动\n# &lt;Configure&gt; 窗口大小，位置改变时候\n# &lt;Destroy&gt; 销毁窗口\n# &lt;FocusIn&gt; 获取焦点\n# &lt;FocusOut&gt; 失去焦点\n# &lt;Map&gt; 窗口打开\n# &lt;Unmap&gt; 窗口最小化\n# &lt;Escape&gt;, &lt;BackSpace&gt;, &lt;Tab&gt; 捕获特点ESC键，回车键，tab键\n# &lt;Down&gt;, &lt;Up&gt;, &lt;Left&gt;, &lt;Right&gt; 捕获方向键\n# &lt;B1-Motion&gt; 按下左键并拖拽\n# &lt;KeyPress-a&gt; 按下按键“a”，大小写敏感</code></pre><h4 id=\"输入框\"><a href=\"#输入框\" class=\"headerlink\" title=\"输入框\"></a>输入框</h4><pre><code># -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom quitGui import Quitter\n\nfields = &apos;Name&apos;, &apos;Job&apos;, &apos;Pay&apos;\n\n\ndef fetch(entries):\n    for entry in entries:\n        print(&apos;Input =&gt; %s&apos; % entry.get())  # 获取文本信息\n\n\ndef makeform(root, fields):\n    entries = []\n    for field in fields:\n        row = Frame(root)\n        lab = Label(row, width=5, text=field)\n        ent = Entry(row)\n        row.pack(side=TOP, fill=X)\n        lab.pack(side=LEFT)\n        ent.pack(side=RIGHT, expand=YES, fill=X)\n        entries.append(ent)\n    return entries\n\n\ndef show(entries, popup):\n    fetch(entries)  # 必须在销毁前取出\n    popup.destroy()  # 如果修改了stmt， order， msgs会随之失败\n\n\ndef ask():\n    popup = Toplevel()  # 在模拟对话框窗口中显示表单\n    ents = makeform(popup, fields)\n    Button(popup, text=&apos;OK&apos;, command=(lambda: show(ents, popup))).pack()\n    popup.grab_set()  # 打开的时候，禁用其他窗口\n    popup.focus_set()  # 获取输入的焦点\n    popup.wait_window()  # 在这里等待销毁\n\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    Button(root, text=&apos;Dialog&apos;, command=ask).pack()\n    root.mainloop()</code></pre><h4 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h4><pre><code># gui13.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom gui6 import demos\nfrom quitGui import Quitter\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        self.tools()\n        Label(self, text=&apos;Ckech demos&apos;).pack()\n        self.vars = []\n        for key in demos:\n            var = IntVar()\n            Checkbutton(self, text=key, variable=var, command=demos[key]).pack(side=LEFT)\n            self.vars.append(var)\n\n    def report(self):\n        for var in self.vars:\n            print(var.get())  # 当前开关设置1或者0\n        print()\n\n    def tools(self):\n        frm = Frame(self)\n        frm.pack(side=RIGHT)\n        Button(frm, text=&apos;State&apos;, command=self.report).pack(fill=X)\n        Quitter(frm).pack(fill=X)\n\n\nif __name__ == &apos;__main__&apos;:\n    Demo().mainloop()</code></pre><h4 id=\"单选按钮\"><a href=\"#单选按钮\" class=\"headerlink\" title=\"单选按钮\"></a>单选按钮</h4><pre><code>#gui14.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom gui6 import demos\nfrom quitGui import Quitter\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        Label(self, text=&apos;Radio demos&apos;).pack(side=TOP)\n        self.var = StringVar()\n        # variable表示单选按钮的变量，相当与html的name标签\n        # value表示单选按钮的变量值，相当与html的value标签\n        for key in demos:\n            Radiobutton(self, text=key, command=self.onPress, variable=self.var, value=key).pack(anchor=NW)\n        self.var.set(key)  # 选中最后一个开始\n        Button(self, text=&apos;State&apos;, command=self.report).pack(fill=X)\n        Quitter(self).pack(fill=X)\n\n    def onPress(self):\n        pick = self.var.get()\n        print(&apos;you pressed&apos;, pick)\n        print(&apos;result: &apos;, demos[pick]())  # 按钮使用返回的值\n\n    def report(self):\n        print(self.var.get())\n\nif __name__ == &apos;__main__&apos;:\n    Demo().mainloop()</code></pre><h4 id=\"标尺滚动条\"><a href=\"#标尺滚动条\" class=\"headerlink\" title=\"标尺滚动条\"></a>标尺滚动条</h4><pre><code># gui16.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom gui6 import demos\nfrom quitGui import Quitter\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        Label(self, text=&apos;Scale demos&apos;).pack()\n        self.var = IntVar()\n        Scale(self, label=&apos;Pick demo number&apos;,\n              command=self.onMove, variable=self.var,\n              from_=0, to=len(demos)-1).pack()\n        Scale(self, label=&apos;Pick demo number&apos;,  # 标尺的文本\n              command=self.onMove,  # 绑定回调\n              variable=self.var,  # 变量\n              from_=0,   # 标尺最小值\n              to=len(demos) - 1,   # 标尺最大值\n              length = 200,  # 长度\n              tickinterval = 2,   # 每隔几个单位显示标记单位\n              showvalue = YES,  # 显示或隐藏标尺滑动条旁边的当前值\n              orient = &apos;horizontal&apos;  # 横向展示\n              ).pack()\n        Quitter(self).pack(side=RIGHT)\n        Button(self, text=&apos;Run demo&apos;, command=self.onRun).pack(side=LEFT)\n        Button(self, text=&apos;State&apos;, command=self.report).pack(side=RIGHT)\n\n    def onMove(self, value):\n        print(&apos;in onMove&apos;, value)\n\n    def onRun(self):\n        pos = self.var.get()\n        print(&apos;you picked&apos;, pos)\n        demo = list(demos.values())[pos]\n        print(demo())\n\n    def report(self):\n        print(self.var.get())\n\nif __name__ == &apos;__main__&apos;:\n    print(list(demos.keys()))\n    Demo().mainloop()</code></pre><h4 id=\"创建图片\"><a href=\"#创建图片\" class=\"headerlink\" title=\"创建图片\"></a>创建图片</h4><pre><code># gui17.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\ngifdir = &apos;./gif/&apos;\nwin = Tk()\nigm = PhotoImage(file=gifdir + &apos;logo.png&apos;)\n\n# 按钮上绑定图片\n# Button(win, image=igm).pack()\n# win.mainloop()\n\n# 创建画布\ncan = Canvas(win)\ncan.pack(fill=BOTH)\ncan.config(width=igm.width() + 4, height=igm.height() + 4)\ncan.create_image(2,  # x坐标\n                 2,  # y坐标\n                 image=igm, anchor=NW)\nwin.mainloop()</code></pre><h3 id=\"按钮随机读取图片\"><a href=\"#按钮随机读取图片\" class=\"headerlink\" title=\"按钮随机读取图片\"></a>按钮随机读取图片</h3><pre><code># gui18.py\n# -*- coding: UTF-8 -*-\nfrom glob import glob\nfrom gui13 import *\nimport random\n\ngifdir = &apos;./gif/&apos;\n\n&quot; 按钮随机读取图片 &quot;\nclass ButtonPicsDemo(Frame):\n    def __init__(self, gifdir=gifdir, parent=None):\n        Frame.__init__(self, parent)\n        self.pack()\n        self.lbl = Label(self, text=&apos;none&apos;, bg=&apos;blue&apos;, fg=&apos;red&apos;)\n        self.pix = Button(self, text=&apos;press me&apos;, command=self.draw, bg=&apos;white&apos;)\n        self.lbl.pack(fill=BOTH)\n        self.pix.pack(pady=10)\n        Demo(self, relief=SUNKEN, bd=2).pack(fill=BOTH)\n        # glob模块， glob方法，返回所有匹配的文件列表\n        files = glob(gifdir + &apos;*.png&apos;)\n        self.images = [(x, PhotoImage(file=x)) for x in files]\n        print(files)\n\n    def draw(self):\n        name, photo = random.choice(self.images)\n        self.lbl.config(text=name)\n        self.pix.config(image=photo)\n\nif __name__ == &apos;__main__&apos;:\n    if __name__ == &apos;__main__&apos;:\n        ButtonPicsDemo().mainloop()</code></pre><h4 id=\"缩略图\"><a href=\"#缩略图\" class=\"headerlink\" title=\"缩略图\"></a>缩略图</h4><pre><code># gui19.py\n# -*- coding: UTF-8 -*-\nimport os\nimport math\nimport PIL\nfrom PIL import Image\nfrom Tkinter import *\n\n\ndef make_thumbs(img_dir, size=(100, 100), subdir=&apos;thumbs&apos;):\n    thumb_dir = os.path.join(img_dir, subdir)\n    if not os.path.exists(thumb_dir):\n        os.mkdir(thumb_dir)\n    thumbs = []\n    for img_file in os.listdir(img_dir):\n        thumb_path = os.path.join(thumb_dir, img_file)\n        if os.path.exists(thumb_path):\n            thumb_obj = PIL.Image.open(thumb_path)\n            thumbs.append((img_file, thumb_obj))\n        else:\n            print(&apos;making&apos;, thumb_path)\n            img_path = os.path.join(img_dir, img_file)\n            try:\n                img_obj = PIL.Image.open(img_path)\n                img_obj.thumbnail(size, PIL.Image.ANTIALIAS)\n                img_obj.save(thumb_path)\n                thumbs.append((img_file, img_obj))\n            except Exception, e:\n                print(&apos;skipping: &apos;, img_path)\n                print e\n    return thumbs\n\n\nclass ViewOne(Toplevel):\n    def __init__(self, img_dir, img_file):\n        Toplevel.__init__(self)\n        self.title(img_file)\n        img_path = os.path.join(img_dir, img_file)\n        img_obj = PhotoImage(file=img_path)\n        Label(self, image=img_obj).pack()\n        print(img_path, img_obj.width(), img_obj.height())\n        self.savephoto = img_obj\n\n\ndef viewer(img_dir, kind=Toplevel, cols=None):\n    win = kind()\n    win.title(&apos;VIEWER: &apos; + img_dir)\n    thumbs = make_thumbs(img_dir)\n    if not cols:\n        # 固定大小 或者N×N\n        cols = int(math.ceil(math.sqrt(len(thumbs))))\n    savephotos = []\n    while thumbs:\n        thumbs_row, thumbs = thumbs[:cols], thumbs[cols:]\n        row = Frame(win)\n        row.pack(fill=BOTH)\n        for(img_file, img_obj) in thumbs_row:\n            size = max(img_obj.size)\n            photo = PhotoImage(file=os.path.join(img_dir, &apos;thumbs&apos;, img_file))\n            link = Button(row, image=photo)\n        handler = lambda savefile=img_file: ViewOne(img_dir, savefile)\n        link.config(command=handler, width=size, height=size)\n        link.pack(side=LEFT, expand=YES)\n        savephotos.append(photo)\n    Button(win, text=&apos;Quit&apos;, command=win.quit, bg=&apos;beige&apos;).pack(fill=X)\n    return win, savephotos\n\nif __name__ == &apos;__main__&apos;:\n    img_dir = len(sys.argv) &gt; 1 and sys.argv[1] or &apos;gif&apos;\n    main, save = viewer(img_dir, kind=Tk)\n    main.mainloop()</code></pre><h3 id=\"创建基础顶级菜单\"><a href=\"#创建基础顶级菜单\" class=\"headerlink\" title=\"创建基础顶级菜单\"></a>创建基础顶级菜单</h3><pre><code># gui20.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n\n\ndef not_done():\n    showerror(&apos;Not implemented&apos;, &apos;Not yet available&apos;)\n\n\ndef make_menu(win):\n    top = Menu(win)  # 定义顶级菜单\n    win.config(menu=top)\n    file = Menu(top, tearoff=True)  # 一级菜单 tearoff:设置菜单下的虚线是否显示\n    file.add_command(label=&apos;New...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Open...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Quit...&apos;, command=win.quit,  underline=0)\n    top.add_cascade(label=&apos;File&apos;, menu=file, underline=0)  # 在顶级菜单中添加一级菜单\n\n    edit = Menu(top, tearoff=False)  # 一级菜单\n    edit.add_command(label=&apos;Cut&apos;, command=not_done, underline=0)\n    edit.add_command(label=&apos;Paste&apos;, command=not_done, underline=0)\n    edit.add_separator()  # 添加下划线\n    top.add_cascade(label=&apos;Edit&apos;, menu=edit, underline=0)\n\n    submenu = Menu(edit, tearoff=True)  # 二级菜单\n    submenu.add_command(label=&apos;Spam&apos;, command=win.quit, underline=0)\n    submenu.add_command(label=&apos;Eggs&apos;, command=not_done, underline=0)\n    edit.add_cascade(label=&apos;Stuff&apos;, menu=submenu, underline=0)  # 在一级菜单中添加二级菜单\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    root.title(&apos;menu_win&apos;)\n    make_menu(root)\n    msg = Label(root, text=&apos;Window menu basic&apos;)\n    msg.pack(expand=YES, fill=BOTH)\n    msg.config(relief=SUNKEN, width=40, height=7, bg=&apos;beige&apos;)\n    root.mainloop()</code></pre><h4 id=\"创建框架级别菜单\"><a href=\"#创建框架级别菜单\" class=\"headerlink\" title=\"创建框架级别菜单\"></a>创建框架级别菜单</h4><pre><code># gui21.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n\n\ndef not_done():\n    showerror(&apos;Not implemented&apos;, &apos;Not yet available&apos;)\n\n\ndef make_menu(parent):\n    menu_bar = Frame(parent)\n    menu_bar.pack(side=TOP, fill=X)\n\n    f_button = Menubutton(menu_bar, text=&apos;File&apos;, underline=0)\n    f_button.pack(side=LEFT)\n    file = Menu(f_button)\n    file.add_command(label=&apos;New...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Open...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Quit...&apos;, command=parent.quit,  underline=0)\n    f_button.config(menu=file)\n\n    e_button = Menubutton(menu_bar, text=&apos;Edit&apos;, underline=0)\n    e_button.pack(side=LEFT)\n    edit = Menu(e_button)\n    edit.add_command(label=&apos;Cut&apos;, command=not_done, underline=0)\n    edit.add_command(label=&apos;Paste&apos;, command=not_done, underline=0)\n    edit.add_separator()\n    e_button.config(menu=edit)\n\n    sub_menu = Menu(edit, tearoff=True)\n    sub_menu.add_command(label=&apos;Spam&apos;, command=parent.quit, underline=0)\n    sub_menu.add_command(label=&apos;Eggs&apos;, command=not_done, underline=0)\n    edit.add_cascade(label=&apos;Stuff&apos;, menu=sub_menu, underline=0)\n    return menu_bar\n\n\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    root.title(&apos;menu_fra&apos;)\n    for i in range(2):\n        mnu = make_menu(root)\n        mnu.config(bd=2, relief=RAISED)\n        Label(root, bg=&apos;black&apos;, height=5, width=25).pack(expand=YES, fill=BOTH)\n    Button(root, text=&apos;Bye&apos;, command=root.quit).pack()\n    root.mainloop()</code></pre><h4 id=\"图片菜单\"><a href=\"#图片菜单\" class=\"headerlink\" title=\"图片菜单\"></a>图片菜单</h4><pre><code># gui22.py\n# -*- coding:UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n\n\nclass NewMenuDemo(Frame):\n    def __init__(self, parent=None):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        self.create_widgets()\n\n    def create_widgets(self):\n        self.make_menubar()\n        self.make_toolbar()\n        l = Label(self, text=&apos;Menu and Toolbar Demo&apos;)\n        l.config(relief=SUNKEN, width=40, height=10, bg=&apos;white&apos;)\n        l.pack(expand=YES, fill=BOTH)\n\n    def make_toolbar(self, size=(30, 30)):\n        toolbar = Frame(self, cursor=&apos;hand2&apos;, relief=SUNKEN, bd=2)\n        toolbar.pack(side=BOTTOM, fill=X)\n        Button(toolbar, text=&apos;Quit&apos;, command=self.quit).pack(side=RIGHT)\n        photo_files = (&apos;at.png&apos;, &apos;bd.png&apos;, &apos;dk.png&apos;)\n        self.tool_photo_objs = []\n        for file in photo_files:\n            img = PhotoImage(file=&apos;./gif/thumbs/&apos; + file)\n            btn = Button(toolbar, image=img, command=self.greeting)\n            btn.config(bd=5, relief=RIDGE)\n            btn.config(width=size[0], height=size[0])\n            btn.pack(side=LEFT)\n            self.tool_photo_objs.append(img)\n        Button(toolbar, text=&apos;Hello&apos;, command=self.greeting).pack(side=LEFT)\n\n    def make_menubar(self):\n        self.menubar = Menu(self.master)\n        self.master.config(menu=self.menubar)\n        self.file_menu()\n        self.edit_menu()\n        self.image_menu()\n\n    def file_menu(self):\n        pulldown = Menu(self.menubar)\n        pulldown.add_command(label=&apos;OPEN...&apos;, command=self.notdone)\n        pulldown.add_command(label=&apos;QUIT&apos;, command=self.quit)\n        self.menubar.add_cascade(label=&apos;FILE&apos;, underline=0, menu=pulldown)\n\n    def edit_menu(self):\n        pulldown = Menu(self.menubar)\n        pulldown.add_command(label=&apos;PASTE&apos;, command=self.notdone)\n        pulldown.add_command(label=&apos;SPAM&apos;, command=self.greeting)\n        pulldown.add_separator()\n        pulldown.add_command(label=&apos;DELETE&apos;, command=self.greeting)\n        pulldown.entryconfig(4, state=DISABLED)\n        self.menubar.add_cascade(label=&apos;EDIT&apos;, underline=0, menu=pulldown)\n\n    def image_menu(self):\n        photo_files = (&apos;at.png&apos;, &apos;bd.png&apos;, &apos;dk.png&apos;)\n        pulldown = Menu(self.menubar)\n        self.photo_objs = []\n        for file in photo_files:\n            img = PhotoImage(file=&apos;./gif/&apos; + file)\n            pulldown.add_command(image=img, command=self.notdone)\n            self.photo_objs.append(img)\n        self.menubar.add_cascade(label=&apos;IMAGE&apos;, underline=0, menu=pulldown)\n\n    def greeting(self):\n        showinfo(&apos;greeting&apos;, &apos;GREETING&apos;)\n\n    def notdone(self):\n        showerror(&apos;NOT DONE&apos;, &apos;NOT DONE&apos;)\n\n    def quit(self):\n        if askyesno(&apos;Verify quit&apos;, &apos;Sure?&apos;):\n            Frame.quit(self)\n\nif __name__ == &apos;__main__&apos;:\n    NewMenuDemo().mainloop()</code></pre><h4 id=\"滚动条与列表\"><a href=\"#滚动条与列表\" class=\"headerlink\" title=\"滚动条与列表\"></a>滚动条与列表</h4><pre><code># gui23.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\n\nclass ScrolledList(Frame):\n    def __init__(self, options, parent=None):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        self.makeWidgets(options)\n\n\n    def handle_list(self, event):\n        index = self.listbox.curselection()  # 鼠标选中的行\n        label = self.listbox.get(index)  # 获取鼠标选中的值\n        self.runCommand(label)  # 打印出值\n\n\n    def makeWidgets(self, options):\n        # sbar = Scrollbar(self, orient=&apos;horizontal&apos;)  # 横向滚动\n        sbar = Scrollbar(self)\n        list = Listbox(self, relief=SUNKEN)\n        sbar.config(command=list.yview)  # 移动滚动条启用回调： 按比例调节列表框的显示，\n        list.config(yscrollcommand=sbar.set)  # 移动列表框启用回调：按比例调节滚动条\n        sbar.pack(side=RIGHT, fill=Y)\n        list.pack(side=LEFT, expand=YES, fill=BOTH)\n        pos = 0\n        for label in options:\n            list.insert(pos, label)\n            pos += 1\n        # selectmode 选择模式SINGLE(单选), BROWSE(默认单选), MULTIPLE(多选), EXTENDED(多选)\n        # 启用多选时， curselection返回列表\n        # 启用单选时， curselection返回字符串\n        list.config(selectmode=EXTENDED, setgrid=1)\n        list.bind(&apos;&lt;Double-1&gt;&apos;, self.handle_list)\n        self.listbox = list\n\n    def runCommand(self, selection):\n        print(&apos;YOU SELECTED:&apos;, selection)\n\n\nif __name__ == &apos;__main__&apos;:\n    options = ((&apos;Lumberjack-%s&apos; % x) for x in range(20))\n    ScrolledList(options).mainloop()</code></pre><h4 id=\"TEXT组件\"><a href=\"#TEXT组件\" class=\"headerlink\" title=\"TEXT组件\"></a>TEXT组件</h4><pre><code>gui24.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\n\nclass ScrollText(Frame):\n    def __init__(self, parent=None, text=&apos;&apos;, file=None):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        self.make_widgets()\n        self.set_text(text, file)\n\n    def make_widgets(self):\n        sbar = Scrollbar(self)\n        text = Text(self, relief=SUNKEN)\n        sbar.config(command=text.yview)\n        text.config(yscrollcommand=sbar.set)\n        sbar.pack(side=RIGHT, fill=Y)\n        text.pack(side=LEFT, expand=YES, fill=BOTH)\n        self.text = text\n\n    def set_text(self, text=&apos;&apos;, file=None):\n        if file:\n            text = open(file, &apos;r&apos;).read()\n        # 1.0表示第一行，第0列（行从1开始，列从0开始）\n        # END表示最末一个字符后面第一个位置\n        self.text.delete(&apos;1.0&apos;, END)  # 删除从第一行第0列开始到最后的字符串，即删除全部\n        self.text.insert(&apos;1.0&apos;, text)  # 从第一行第0列开始填充数据\n        # mark_set 设置text标志\n        self.text.mark_set(INSERT, &apos;1.0&apos;)  # 设置将光标设置在文本开始位置\n        # self.text.mark_set(&apos;line_two&apos;, &apos;2.2&apos;)  # 自定义标志位置 可以用mark_unset取消\n        self.text.focus()\n        # TEXT的tag标签\n        # SEL是内置的标签，表示当前选中的文本\n        # text = self.text.get(SEL_FIRST, SEL_LAST)\n        # text = self.text.get(&apos;sel.first&apos;, &apos;sel.last&apos;)\n        # self.text.tag_add(&apos;alltext&apos;, &apos;1.0&apos;, END)  # 选中所有文本\n        # self.text.tag_add(SEL, index1, index2)  # 将一定范围内的文本添加到内建的SEL标签\n        # self.text.tag_remove(SEL, &apos;1.0&apos;, END)  # 将字符串所有字符从SEL标签中删除\n        # self.text.tag_delete(SEL)  # 删除SEL标签\n        # self.text.tag_add(&apos;demo&apos;, &apos;1.5&apos;, &apos;1.7&apos;)\n        # self.text.tag_add(&apos;demo&apos;, &apos;3.0&apos;, &apos;5.7&apos;)\n        # self.text.tag_config(&apos;demo&apos;, background=&apos;purple&apos;)\n        # self.text.tag_config(&apos;demo&apos;, fontground=&apos;white&apos;)\n        # self.text.tag_config(&apos;demo&apos;, font=(&apos;times&apos;, 16, &apos;underline&apos;))\n        # self.text.tag_bind(&apos;demo&apos;, &apos;&lt;Double-1&gt;&apos;, func)\n        # see方法\n        # self.text.see(&apos;1.0&apos;)  # 滚动到第一行第0列\n        # self.text.see(INSERT)  # 滚动到光标插入处\n        # self.text.see(SEL_FIRST)  # 滚动到选中文本第一个字符串\n    def get_text(self):\n        # -1c 表示往回数一个字符串\n        # +1l 表示往前数一行\n        return self.text.get(&apos;1.0&apos;, END + &apos;-1c&apos;)\n\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    if len(sys.argv) &gt; 1:\n        st = ScrollText(file=sys.argv[1])\n    else:\n        st = ScrollText(text=&apos;Words\\ngo here&apos;)\n\n    def show(event):\n        print(repr(st.get_text()))\n\n    root.bind(&apos;&lt;Key-Escape&gt;&apos;, show)\n    root.mainloop()</code></pre><h4 id=\"简单的文本编辑器\"><a href=\"#简单的文本编辑器\" class=\"headerlink\" title=\"简单的文本编辑器\"></a>简单的文本编辑器</h4><pre><code># gui25.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkSimpleDialog import askstring\nfrom tkFileDialog import asksaveasfilename\nfrom quitGui import Quitter\nfrom gui24 import ScrollText\n\n\nclass SimpleEditor(ScrollText):\n    def __init__(self, parent=None, file=None):\n        frm = Frame(parent)\n        frm.pack(fill=X)\n        Button(frm, text=&apos;Save&apos;, command=self.on_save).pack(side=LEFT)\n        Button(frm, text=&apos;Cut&apos;, command=self.on_cut).pack(side=LEFT)\n        Button(frm, text=&apos;Paste&apos;, command=self.on_paste).pack(side=LEFT)\n        Button(frm, text=&apos;Find&apos;, command=self.on_find).pack(side=LEFT)\n        Quitter(frm).pack(side=LEFT)\n        ScrollText.__init__(self, parent, file=file)\n        self.text.config(font=(&apos;courier&apos;, 9, &apos;normal&apos;))\n\n    def on_save(self):\n        filename = asksaveasfilename()\n        if filename:\n            alltext = self.get_text()\n            open(filename, &apos;w&apos;).write(alltext)\n\n\n    def on_cut(self):\n        text = self.text.get(SEL_FIRST, SEL_LAST)\n        self.text.delete(SEL_FIRST, SEL_LAST)\n        self.clipboard_clear()\n        self.clipboard_append(text)\n\n\n    def on_paste(self):\n        try:\n            text = self.selection_get(selection=&apos;CLIPBOARD&apos;)\n            self.text.insert(INSERT, text)\n        except TclError:\n            pass\n\n\n    def on_find(self):\n        target = askstring(&apos;SimpleEdit&apos;, &apos;Search string?&apos;)\n        if target:\n            where = self.text.search(target, INSERT, END)\n            if where:\n                print(where)\n                pastit = where + (&apos;+%dc&apos; % len(target))\n                self.text.tag_remove(SEL, &apos;1.0&apos;, END)\n                self.text.tag_add(SEL, where, pastit)\n                self.text.mark_set(INSERT, pastit)\n                self.text.see(INSERT)\n                self.text.focus()\n\nif __name__ == &apos;__main__&apos;:\n    if len(sys.argv) &gt; 1:\n        SimpleEditor(file=sys.argv[1]).mainloop()\n    else:\n        SimpleEditor().mainloop()</code></pre><h4 id=\"创建基础画布\"><a href=\"#创建基础画布\" class=\"headerlink\" title=\"创建基础画布\"></a>创建基础画布</h4><pre><code># gui26.py\n# -*- coding: UTF-8 -*-\n\nfrom Tkinter import *\ncanvas = Canvas(width=525, height=300, bg=&apos;white&apos;)\ncanvas.pack(expand=YES, fill=BOTH)\n\ncanvas.create_line(100, 100, 200, 200)\ncanvas.create_line(100, 200, 200, 300)\nfor i in range(1, 20, 2):\n    canvas.create_line(0, i, 50, i)\ncanvas.create_oval(20, 20, 300, 100, width=10, fill=&apos;yellow&apos;)\nd = {1:PIESLICE,2:CHORD,3:ARC}\nfor i in d:\n    canvas.create_arc(\n        (10,10 + 60*i,110,110 + 60*i),\n        style=d[i],   #指定样式\n        start=30,     #指定起始角度\n        extent=30     #指定角度偏移量\n        )\ncanvas.create_arc(0, 0, 100, 200, fill=&apos;black&apos;)\ncanvas.create_rectangle(200, 200, 300, 300, width=5, fill=&apos;red&apos;)\ncanvas.create_line(0, 300, 150, 150, width=10, fill=&apos;green&apos;)\n\nphoto = PhotoImage(file=&apos;./gif/lightmachine.png&apos;)\ncanvas.create_image(325,25, image=photo, anchor=NW)\n\nwidget = Label(canvas, text=&apos;Spam&apos;, fg=&apos;white&apos;, bg=&apos;black&apos;)\nwidget.pack()\ncanvas.create_window(100, 100, window=widget)\ncanvas.create_text(100, 280, text=&apos;CLOUD CLONE CORP.&apos;)\n\n# id = canvas.create_line(fromX, fromY, toX, toY)  # 创建直线\n# id = canvas.create_oval(fromX, fromY, toX, toY) # 创建椭圆\n# id = canvas.create_arc(fromX, fromY, toX, toY)  # 创建扇形\n# id =canvas.create_rectangle(fromX, fromY, toX, toY)  # 创建矩形\n# canvas.move(id, offsetX, offsetY)  # 移动对象\n# canvas.delete(id)  # 删除对象\n# canvas.tkraise(id)  # 将对象移动到前端\n# canvas.lower(id)  # 将对象移动到底部\n# canvas.itemconfig(id, fill=&apos;red&apos;)  # 修改对象属性\n\n# 画布标签\n# canvas.create_line(fromX, fromY, toX, toY, tag=&apos;bubbles&apos;) \n# canvas.create_line(fromX, fromY, toX, toY, tag=&apos;bubbles&apos;) \n# id = canvas.create_line(fromX, fromY, toX, toY)\n# canvas.addtag_withtag(&apos;bubbles&apos;, id)\n# canvas.move(&apos;bubbles&apos;, diffX, diffY)\nmainloop()</code></pre><h4 id=\"canvas与滚动条\"><a href=\"#canvas与滚动条\" class=\"headerlink\" title=\"canvas与滚动条\"></a>canvas与滚动条</h4><pre><code># gui27.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\nclass ScrolledCanvas(Frame):\n    def __init__(self, parent=None, color=&apos;brown&apos;):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        canv = Canvas(self, bg=color, relief=SUNKEN)\n        canv.config(width=300, height=200)\n        canv.config(scrollregion=(0, 0, 300, 1000))\n        canv.config(highlightthickness=0)\n\n        sbar = Scrollbar(self)\n        sbar.config(command=canv.yview)\n        canv.config(yscrollcommand=sbar.set)\n        sbar.pack(side=RIGHT, fill=Y)\n        canv.pack(side=LEFT, expand=YES, fill=BOTH)\n\n        self.fillContent(canv)\n        canv.bind(&apos;&lt;Double-1&gt;&apos;, self.onDoubleClick)\n        self.canvas = canv\n\n    def fillContent(self, canv):\n        for i in range(10):\n            canv.create_text(150, 50+(i*100), text=&apos;spam&apos;+str(i), fill=&apos;beige&apos;)\n\n    def onDoubleClick(self, event):\n        print(event.x, event.y)\n        print(self.canvas.canvasx(event.x), self.canvas.canvasy(event.y))\n\nif __name__ == &apos;__main__&apos;:\n    ScrolledCanvas().mainloop()</code></pre><h4 id=\"canvas绑定事件\"><a href=\"#canvas绑定事件\" class=\"headerlink\" title=\"canvas绑定事件\"></a>canvas绑定事件</h4><pre><code># gui28.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\ntrace = False\n\nclass CanvasEventDemo:\n    def __init__(self, parent=None):\n        canvas = Canvas(width=300, height=300, bg=&apos;beige&apos;)\n        canvas.pack()\n        canvas.bind(&apos;&lt;ButtonPress-1&gt;&apos;, self.on_start)\n        canvas.bind(&apos;&lt;B1-Motion&gt;&apos;, self.on_grow)\n        canvas.bind(&apos;&lt;Double-1&gt;&apos;, self.on_clear)\n        canvas.bind(&apos;&lt;ButtonPress-3&gt;&apos;, self.on_move)\n        self.canvas = canvas\n        self.drawn = None\n        self.kinds = [canvas.create_oval, canvas.create_rectangle]\n\n    def on_start(self, event):\n        self.shape =self.kinds[0]\n        self.kinds = self.kinds[1:] + self.kinds[:1]\n        self.start = event\n        self.drawn = None\n\n    def on_grow(self, event):\n        canvas = event.widget\n        if self.drawn:\n            canvas.delete(self.drawn)\n        object_id = self.shape(self.start.x, self.start.y, event.x, event.y)\n        if trace:\n            print(object_id)\n        self.drawn = object_id\n\n    def on_clear(self, event):\n        event.widget.delete(&apos;all&apos;)\n\n\n    def on_move(self, event):\n        if self.drawn:\n            if trace:\n                print(self.drawn)\n            canvas = event.widget\n            diffx, diffy = (event.x - self.start.x), (event.y - self.start.y)\n            canvas.move(self.drawn, diffx, diffy)\n            self.start = event\n\nif __name__ == &apos;__main__&apos;:\n    CanvasEventDemo()\n    mainloop()</code></pre><h4 id=\"grid布局和pack布局实现自动扩展\"><a href=\"#grid布局和pack布局实现自动扩展\" class=\"headerlink\" title=\"grid布局和pack布局实现自动扩展\"></a>grid布局和pack布局实现自动扩展</h4><pre><code># gui29.py\n# -*- coding: UTF-8 -*-\n\nfrom Tkinter import *\ncolors = [&apos;red&apos;, &apos;green&apos;, &apos;orange&apos;, &apos;white&apos;, &apos;yellow&apos;, &apos;blue&apos;]\n\ndef gridbox(root):\n    Label(root, text=&apos;GRID&apos;).grid(columnspan=2)  # 跨两列\n    row = 1\n    for color in colors:\n        lab = Label(root, text=color, relief=RIDGE, width=25)\n        ent = Entry(root, bg=color, relief=SUNKEN, width=50)\n        lab.grid(row=row, column=0, sticky=NSEW)  # 向4个方向扩展\n        ent.grid(row=row, column=1, sticky=NSEW)\n        root.rowconfigure(row, weight=1)  # 循环行自动扩展\n        row += 1\n    root.columnconfigure(0, weight=1)  # 第一列自动扩展\n    root.columnconfigure(1, weight=1)  # 第二列自动扩展\n\ndef packbox(root):\n    Label(root, text=&apos;PACK&apos;).pack()\n    for color in colors:\n        row = Frame(root)\n        lab = Label(row, text=color, relief=RIDGE, width=25)\n        ent = Entry(row, bg=color, relief=SUNKEN, width=50)\n        row.pack(side=TOP, expand=YES, fill=BOTH)\n        lab.pack(side=LEFT, expand=YES, fill=BOTH)\n        ent.pack(side=RIGHT, expand=YES, fill=BOTH)\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    gridbox(Toplevel(root))\n    packbox(Toplevel(root))\n    Button(root, text=&apos;Quit&apos;, command=root.quit).pack()\n    mainloop()</code></pre><h3 id=\"PIL：Python-Imaging-Library\"><a href=\"#PIL：Python-Imaging-Library\" class=\"headerlink\" title=\"PIL：Python Imaging Library\"></a>PIL：Python Imaging Library</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>sudo apt-get install python-imaging\n或者\nsudo easy_install PIL</code></pre><p>window系统选择</p>\n<pre><code>pip install Pillow</code></pre><p>图像操作</p>\n<pre><code>import Image\n# 打开一个jpg图像文件，注意路径要改成你自己的:\nim = Image.open(&apos;/Users/michael/test.jpg&apos;)\n# 获得图像尺寸:\nw, h = im.size\n# 缩放到50%:\nim.thumbnail((w//2, h//2))\n# 把缩放后的图像用jpeg格式保存:\nim.save(&apos;/Users/michael/thumbnail.jpg&apos;, &apos;jpeg&apos;)</code></pre><p>模糊效果</p>\n<pre><code>import Image, ImageFilter\n\nim = Image.open(&apos;/Users/hanchang/test.jpg&apos;)\nim2 = im.filter(ImageFilter.BLUR)\nim2.save(&apos;/Users/hanchang/blur.jpg&apos;, &apos;jpeg&apos;)</code></pre><p>自定义图像验证码</p>\n<pre><code>import Image, ImageDraw, ImageFont, ImageFilter\nimport random\n# 随机字母:\ndef rndChar():\n    return chr(random.randint(65, 90))\n\n# 随机颜色1:\ndef rndColor():\n    return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))\n\n# 随机颜色2:\ndef rndColor2():\n    return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))\n\n# 240 x 60:\nwidth = 60 * 4\nheight = 60\nimage = Image.new(&apos;RGB&apos;, (width, height), (255, 255, 255))\n# 创建Font对象:\nfont = ImageFont.truetype(&apos;Arial.ttf&apos;, 36)\n# 创建Draw对象:\ndraw = ImageDraw.Draw(image)\n# 填充每个像素:\nfor x in range(width):\n    for y in range(height):\n        draw.point((x, y), fill=rndColor())\n# 输出文字:\nfor t in range(4):\n    draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2())\n# 模糊:\nimage = image.filter(ImageFilter.BLUR)\nimage.save(&apos;code.jpg&apos;, &apos;jpeg&apos;);\n自定义字符串生成图片</code></pre><p><code>from PIL import Image,ImageDraw,ImageFont,ImageOps &lt;h1&gt;生成图片&lt;/h1&gt; def create\\_image(str, line, name, dir): img\\_size = (400, (line*20) + 10) img\\_mode = &#39;RGB&#39; img\\_font = ImageFont.truetype(&#39;UbuntuMono-R.ttf&#39;, 14) img\\_bg = &#39;#FFF&#39; img\\_fg = &#39;#000&#39; img = Image.new(mode=img\\_mode, size=img\\_size, color=img\\_bg) draw = ImageDraw.Draw(img) draw.text((10, 10), str, fill=img\\_fg, font=img_font) img.save( dir + name + &#39;.png&#39;, &#39;png&#39;)</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>python基础环境</p>\n<pre><code>sudo apt-get install python\nsudo apt-get install python-pip</code></pre><p>Tkinter安装</p>\n<pre><code>sudo apt-get install python-tk</code></pre><p>配置组件外观</p>\n<pre><code>#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nroot = Tk()\n# 定义图标\nif sys.platform == &apos;win32&apos;:\n    root.iconbitmap(&apos;favicon.ico&apos;)\nelse:\n    icon = PhotoImage(file=&apos;phone.gif&apos;)\n    root.tk.call(&apos;wm&apos;, &apos;iconphoto&apos;, root._w, icon)\n# 定义字体，字号，类型\nlabel_font = (&apos;Ubuntu&apos;, 20, &apos;bold underline italic&apos;)\n# 创建组件\nwidget = Label(root, text=&apos;Hello,云克隆&apos;, padx=100, pady=20)\n# 配置组件字体\nwidget.config(font=label_font)\n# 组件宽，高\nwidget.config(height=3, width=20)\n# 组件背景颜色\nwidget.config(bg=&apos;#FF0&apos;)\n# 组件字体颜色\nwidget.config(fg=&apos;#F0F&apos;)\n# 组件边框宽度\nwidget.config(bd=3)\n# 组件边框外形, FLAT扁平, SUNKEN凹陷, RAISED凸起, GROOVE凹槽, SOLID加粗, RIDGE脊状,\nwidget.config(relief=SUNKEN)\n# 组件鼠标手势, &apos;gumby&apos;, &apos;watch&apos;, &apos;pencil&apos;, &apos;crdss&apos;, hand2\nwidget.config(cursor=&apos;gumby&apos;)\n# 组件状态, DISABLE禁用, NORMAL正常, READONLY只读\nwidget.config(state=DISABLED)\n# 布置组件\n# expand设置是否可以扩展，fill表示随父组件扩展方向，可以设置BOTH, X, Y\n# 设置组件padding值\n# side表示按钮布置窗口的位置\nwidget.pack(expand=True, fill=X, padx=10, pady=50, side=LEFT)\nroot.mainloop()</code></pre><h4 id=\"标准弹出框\"><a href=\"#标准弹出框\" class=\"headerlink\" title=\"标准弹出框\"></a>标准弹出框</h4><pre><code># -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n# python3\n# from Tkinter.messagebox import *\ndef callback():\n    if askyesno(&apos;Verify&apos;, &apos;Do you ready want to quit?&apos;):\n        showwarning(&apos;Yes&apos;, &apos;Quit not yet&apos;)\n    else:\n        showinfo(&apos;No&apos;, &apos;Quit has been cancelled&apos;)\n\nerrmsg = &apos;Sorry, no spam allowed&apos;\nButton(None, text=&apos;Quit&apos;, command=callback).pack(fill=X)\nButton(None, text=&apos;spam&apos;, command=(lambda: showerror(&apos;spam&apos;, errmsg))).pack(fill=X)\nmainloop()</code></pre><h4 id=\"常见弹框\"><a href=\"#常见弹框\" class=\"headerlink\" title=\"常见弹框\"></a>常见弹框</h4><pre><code># gui6.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\nfrom tkFileDialog import *\nfrom tkColorChooser import *\nfrom tkSimpleDialog import *\n\n\ndemos = {\n    &apos;Open&apos;: askopenfilename,\n    &apos;Color&apos;: askcolor,\n    &apos;Query&apos;: lambda: askquestion(&apos;Warning&apos;, &apos;You typed &quot;rm *&quot;\\nconfirm?&apos;),\n    &apos;Error&apos;: lambda: showerror(&apos;Error!&apos;, &apos;He is dead&apos;),\n    &apos;Input&apos;: lambda: askfloat(&apos;Entry&apos;, &apos;Enter credit card number&apos;)\n}\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        Label(self, text=&apos;Basic demos&apos;).pack()\n        for (key, value) in demos.items():\n            Button(self, text=key, command=value).pack(side=TOP, fill=BOTH)\n\nif __name__ == &apos;__main__&apos;:\n    Demo().mainloop()\n自定义弹框\n\n# -*- coding: UTF-8 -*-\nimport sys\nfrom Tkinter import *\nmakemodal = (len(sys.argv) &gt; 1)\n\ndef dialog():\n    win = Toplevel()\n    Label(win, text=&apos;Hard drive reformatted!&apos;).pack()\n    Button(win, text=&apos;OK&apos;, command=win.destroy).pack()\n    if makemodal:\n        # 获取输入的焦点\n        win.focus_set()\n        # 打开的时候，禁用其他窗口\n        win.grab_set()\n        # 在win销毁之前，继续等待\n        win.wait_window()\n    print &apos;dialog exit&apos;\n\nroot = Tk()\nButton(root, text=&apos;popup&apos;, command=dialog).pack()\nroot.mainloop()</code></pre><h4 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h4><pre><code># -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\n\ndef showPosEvent(event):\n    print(&apos;Widget=%s, X=%s, Y=%s&apos; % (event.widget, event.x, event.y))\n\n\ndef showAllEvent(event):\n    print(event)\n    for attr in dir(event):\n        if not attr.startswith(&apos;__&apos;):\n            print(attr, &apos;=&gt;&apos;, getattr(event, attr))\n\n\ndef onKeyPress(event):\n    print(&apos;Got key press: &apos;, event.char)\n\n\ndef onArrowKey(event):\n    print(&apos;Got up arrow key press&apos;)\n\n\ndef onReturnKey(event):\n    print(&apos;Got return key press&apos;)\n\n\ndef onLeftClick(event):\n    print(&apos;Got left mouse button click: &apos;)\n    showPosEvent(event)\n\n\ndef onRightClick(event):\n    print(&apos;Got right mouse button click: &apos;)\n    showPosEvent(event)\n\n\ndef onMiddleClick(event):\n    print(&apos;Got middle mouse button click: &apos;)\n    showPosEvent(event)\n    showAllEvent(event)\n\n\ndef onLeftDrag(event):\n    print(&apos;Got left mouse drag click: &apos;)\n    showPosEvent(event)\n\n\ndef onDoubleLeftClick(event):\n    print(&apos;Got double left mouse click: &apos;)\n    showPosEvent(event)\n    tkroot.quit()\n\n\ntkroot = Tk()\nlabelfont = (&apos;courier&apos;, 20, &apos;bold&apos;)\nwidget = Label(tkroot, text=&apos;Hello bind world&apos;)\nwidget.config(bg=&apos;red&apos;, font=labelfont)\nwidget.config(height=5, width=20)\nwidget.pack(expand=YES, fill=BOTH)\n# 绑定单击左键\nwidget.bind(&apos;&lt;Button-1&gt;&apos;, onLeftClick)\n# 绑定单击右键\nwidget.bind(&apos;&lt;Button-3&gt;&apos;, onRightClick)\n# 绑定单击中键\nwidget.bind(&apos;&lt;Button-2&gt;&apos;, onMiddleClick)\n# 绑定双击左键\nwidget.bind(&apos;&lt;Double-1&gt;&apos;, onDoubleLeftClick)\n# 绑定拖拽 B1表示点击左键，Motion表示拖拽\nwidget.bind(&apos;&lt;B1-Motion&gt;&apos;, onLeftDrag)\n# 绑定键盘按键\nwidget.bind(&apos;&lt;KeyPress&gt;&apos;, onKeyPress)\n# 绑定按下箭头键\nwidget.bind(&apos;&lt;Up&gt;&apos;, onArrowKey)\n# 绑定回车，返回键\nwidget.bind(&apos;&lt;Return&gt;&apos;, onReturnKey)\nwidget.focus()\ntkroot.title(&apos;CLICK ME&apos;)\ntkroot.mainloop()\n\n# &lt;ButtonPress&gt; 按下按钮\n# &lt;ButtonRelease&gt; 松开按钮\n# &lt;Motion&gt; 鼠标指针移动\n# &lt;Configure&gt; 窗口大小，位置改变时候\n# &lt;Destroy&gt; 销毁窗口\n# &lt;FocusIn&gt; 获取焦点\n# &lt;FocusOut&gt; 失去焦点\n# &lt;Map&gt; 窗口打开\n# &lt;Unmap&gt; 窗口最小化\n# &lt;Escape&gt;, &lt;BackSpace&gt;, &lt;Tab&gt; 捕获特点ESC键，回车键，tab键\n# &lt;Down&gt;, &lt;Up&gt;, &lt;Left&gt;, &lt;Right&gt; 捕获方向键\n# &lt;B1-Motion&gt; 按下左键并拖拽\n# &lt;KeyPress-a&gt; 按下按键“a”，大小写敏感</code></pre><h4 id=\"输入框\"><a href=\"#输入框\" class=\"headerlink\" title=\"输入框\"></a>输入框</h4><pre><code># -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom quitGui import Quitter\n\nfields = &apos;Name&apos;, &apos;Job&apos;, &apos;Pay&apos;\n\n\ndef fetch(entries):\n    for entry in entries:\n        print(&apos;Input =&gt; %s&apos; % entry.get())  # 获取文本信息\n\n\ndef makeform(root, fields):\n    entries = []\n    for field in fields:\n        row = Frame(root)\n        lab = Label(row, width=5, text=field)\n        ent = Entry(row)\n        row.pack(side=TOP, fill=X)\n        lab.pack(side=LEFT)\n        ent.pack(side=RIGHT, expand=YES, fill=X)\n        entries.append(ent)\n    return entries\n\n\ndef show(entries, popup):\n    fetch(entries)  # 必须在销毁前取出\n    popup.destroy()  # 如果修改了stmt， order， msgs会随之失败\n\n\ndef ask():\n    popup = Toplevel()  # 在模拟对话框窗口中显示表单\n    ents = makeform(popup, fields)\n    Button(popup, text=&apos;OK&apos;, command=(lambda: show(ents, popup))).pack()\n    popup.grab_set()  # 打开的时候，禁用其他窗口\n    popup.focus_set()  # 获取输入的焦点\n    popup.wait_window()  # 在这里等待销毁\n\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    Button(root, text=&apos;Dialog&apos;, command=ask).pack()\n    root.mainloop()</code></pre><h4 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h4><pre><code># gui13.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom gui6 import demos\nfrom quitGui import Quitter\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        self.tools()\n        Label(self, text=&apos;Ckech demos&apos;).pack()\n        self.vars = []\n        for key in demos:\n            var = IntVar()\n            Checkbutton(self, text=key, variable=var, command=demos[key]).pack(side=LEFT)\n            self.vars.append(var)\n\n    def report(self):\n        for var in self.vars:\n            print(var.get())  # 当前开关设置1或者0\n        print()\n\n    def tools(self):\n        frm = Frame(self)\n        frm.pack(side=RIGHT)\n        Button(frm, text=&apos;State&apos;, command=self.report).pack(fill=X)\n        Quitter(frm).pack(fill=X)\n\n\nif __name__ == &apos;__main__&apos;:\n    Demo().mainloop()</code></pre><h4 id=\"单选按钮\"><a href=\"#单选按钮\" class=\"headerlink\" title=\"单选按钮\"></a>单选按钮</h4><pre><code>#gui14.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom gui6 import demos\nfrom quitGui import Quitter\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        Label(self, text=&apos;Radio demos&apos;).pack(side=TOP)\n        self.var = StringVar()\n        # variable表示单选按钮的变量，相当与html的name标签\n        # value表示单选按钮的变量值，相当与html的value标签\n        for key in demos:\n            Radiobutton(self, text=key, command=self.onPress, variable=self.var, value=key).pack(anchor=NW)\n        self.var.set(key)  # 选中最后一个开始\n        Button(self, text=&apos;State&apos;, command=self.report).pack(fill=X)\n        Quitter(self).pack(fill=X)\n\n    def onPress(self):\n        pick = self.var.get()\n        print(&apos;you pressed&apos;, pick)\n        print(&apos;result: &apos;, demos[pick]())  # 按钮使用返回的值\n\n    def report(self):\n        print(self.var.get())\n\nif __name__ == &apos;__main__&apos;:\n    Demo().mainloop()</code></pre><h4 id=\"标尺滚动条\"><a href=\"#标尺滚动条\" class=\"headerlink\" title=\"标尺滚动条\"></a>标尺滚动条</h4><pre><code># gui16.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom gui6 import demos\nfrom quitGui import Quitter\n\n\nclass Demo(Frame):\n    def __init__(self, parent=None, **options):\n        Frame.__init__(self, parent, **options)\n        self.pack()\n        Label(self, text=&apos;Scale demos&apos;).pack()\n        self.var = IntVar()\n        Scale(self, label=&apos;Pick demo number&apos;,\n              command=self.onMove, variable=self.var,\n              from_=0, to=len(demos)-1).pack()\n        Scale(self, label=&apos;Pick demo number&apos;,  # 标尺的文本\n              command=self.onMove,  # 绑定回调\n              variable=self.var,  # 变量\n              from_=0,   # 标尺最小值\n              to=len(demos) - 1,   # 标尺最大值\n              length = 200,  # 长度\n              tickinterval = 2,   # 每隔几个单位显示标记单位\n              showvalue = YES,  # 显示或隐藏标尺滑动条旁边的当前值\n              orient = &apos;horizontal&apos;  # 横向展示\n              ).pack()\n        Quitter(self).pack(side=RIGHT)\n        Button(self, text=&apos;Run demo&apos;, command=self.onRun).pack(side=LEFT)\n        Button(self, text=&apos;State&apos;, command=self.report).pack(side=RIGHT)\n\n    def onMove(self, value):\n        print(&apos;in onMove&apos;, value)\n\n    def onRun(self):\n        pos = self.var.get()\n        print(&apos;you picked&apos;, pos)\n        demo = list(demos.values())[pos]\n        print(demo())\n\n    def report(self):\n        print(self.var.get())\n\nif __name__ == &apos;__main__&apos;:\n    print(list(demos.keys()))\n    Demo().mainloop()</code></pre><h4 id=\"创建图片\"><a href=\"#创建图片\" class=\"headerlink\" title=\"创建图片\"></a>创建图片</h4><pre><code># gui17.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\ngifdir = &apos;./gif/&apos;\nwin = Tk()\nigm = PhotoImage(file=gifdir + &apos;logo.png&apos;)\n\n# 按钮上绑定图片\n# Button(win, image=igm).pack()\n# win.mainloop()\n\n# 创建画布\ncan = Canvas(win)\ncan.pack(fill=BOTH)\ncan.config(width=igm.width() + 4, height=igm.height() + 4)\ncan.create_image(2,  # x坐标\n                 2,  # y坐标\n                 image=igm, anchor=NW)\nwin.mainloop()</code></pre><h3 id=\"按钮随机读取图片\"><a href=\"#按钮随机读取图片\" class=\"headerlink\" title=\"按钮随机读取图片\"></a>按钮随机读取图片</h3><pre><code># gui18.py\n# -*- coding: UTF-8 -*-\nfrom glob import glob\nfrom gui13 import *\nimport random\n\ngifdir = &apos;./gif/&apos;\n\n&quot; 按钮随机读取图片 &quot;\nclass ButtonPicsDemo(Frame):\n    def __init__(self, gifdir=gifdir, parent=None):\n        Frame.__init__(self, parent)\n        self.pack()\n        self.lbl = Label(self, text=&apos;none&apos;, bg=&apos;blue&apos;, fg=&apos;red&apos;)\n        self.pix = Button(self, text=&apos;press me&apos;, command=self.draw, bg=&apos;white&apos;)\n        self.lbl.pack(fill=BOTH)\n        self.pix.pack(pady=10)\n        Demo(self, relief=SUNKEN, bd=2).pack(fill=BOTH)\n        # glob模块， glob方法，返回所有匹配的文件列表\n        files = glob(gifdir + &apos;*.png&apos;)\n        self.images = [(x, PhotoImage(file=x)) for x in files]\n        print(files)\n\n    def draw(self):\n        name, photo = random.choice(self.images)\n        self.lbl.config(text=name)\n        self.pix.config(image=photo)\n\nif __name__ == &apos;__main__&apos;:\n    if __name__ == &apos;__main__&apos;:\n        ButtonPicsDemo().mainloop()</code></pre><h4 id=\"缩略图\"><a href=\"#缩略图\" class=\"headerlink\" title=\"缩略图\"></a>缩略图</h4><pre><code># gui19.py\n# -*- coding: UTF-8 -*-\nimport os\nimport math\nimport PIL\nfrom PIL import Image\nfrom Tkinter import *\n\n\ndef make_thumbs(img_dir, size=(100, 100), subdir=&apos;thumbs&apos;):\n    thumb_dir = os.path.join(img_dir, subdir)\n    if not os.path.exists(thumb_dir):\n        os.mkdir(thumb_dir)\n    thumbs = []\n    for img_file in os.listdir(img_dir):\n        thumb_path = os.path.join(thumb_dir, img_file)\n        if os.path.exists(thumb_path):\n            thumb_obj = PIL.Image.open(thumb_path)\n            thumbs.append((img_file, thumb_obj))\n        else:\n            print(&apos;making&apos;, thumb_path)\n            img_path = os.path.join(img_dir, img_file)\n            try:\n                img_obj = PIL.Image.open(img_path)\n                img_obj.thumbnail(size, PIL.Image.ANTIALIAS)\n                img_obj.save(thumb_path)\n                thumbs.append((img_file, img_obj))\n            except Exception, e:\n                print(&apos;skipping: &apos;, img_path)\n                print e\n    return thumbs\n\n\nclass ViewOne(Toplevel):\n    def __init__(self, img_dir, img_file):\n        Toplevel.__init__(self)\n        self.title(img_file)\n        img_path = os.path.join(img_dir, img_file)\n        img_obj = PhotoImage(file=img_path)\n        Label(self, image=img_obj).pack()\n        print(img_path, img_obj.width(), img_obj.height())\n        self.savephoto = img_obj\n\n\ndef viewer(img_dir, kind=Toplevel, cols=None):\n    win = kind()\n    win.title(&apos;VIEWER: &apos; + img_dir)\n    thumbs = make_thumbs(img_dir)\n    if not cols:\n        # 固定大小 或者N×N\n        cols = int(math.ceil(math.sqrt(len(thumbs))))\n    savephotos = []\n    while thumbs:\n        thumbs_row, thumbs = thumbs[:cols], thumbs[cols:]\n        row = Frame(win)\n        row.pack(fill=BOTH)\n        for(img_file, img_obj) in thumbs_row:\n            size = max(img_obj.size)\n            photo = PhotoImage(file=os.path.join(img_dir, &apos;thumbs&apos;, img_file))\n            link = Button(row, image=photo)\n        handler = lambda savefile=img_file: ViewOne(img_dir, savefile)\n        link.config(command=handler, width=size, height=size)\n        link.pack(side=LEFT, expand=YES)\n        savephotos.append(photo)\n    Button(win, text=&apos;Quit&apos;, command=win.quit, bg=&apos;beige&apos;).pack(fill=X)\n    return win, savephotos\n\nif __name__ == &apos;__main__&apos;:\n    img_dir = len(sys.argv) &gt; 1 and sys.argv[1] or &apos;gif&apos;\n    main, save = viewer(img_dir, kind=Tk)\n    main.mainloop()</code></pre><h3 id=\"创建基础顶级菜单\"><a href=\"#创建基础顶级菜单\" class=\"headerlink\" title=\"创建基础顶级菜单\"></a>创建基础顶级菜单</h3><pre><code># gui20.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n\n\ndef not_done():\n    showerror(&apos;Not implemented&apos;, &apos;Not yet available&apos;)\n\n\ndef make_menu(win):\n    top = Menu(win)  # 定义顶级菜单\n    win.config(menu=top)\n    file = Menu(top, tearoff=True)  # 一级菜单 tearoff:设置菜单下的虚线是否显示\n    file.add_command(label=&apos;New...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Open...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Quit...&apos;, command=win.quit,  underline=0)\n    top.add_cascade(label=&apos;File&apos;, menu=file, underline=0)  # 在顶级菜单中添加一级菜单\n\n    edit = Menu(top, tearoff=False)  # 一级菜单\n    edit.add_command(label=&apos;Cut&apos;, command=not_done, underline=0)\n    edit.add_command(label=&apos;Paste&apos;, command=not_done, underline=0)\n    edit.add_separator()  # 添加下划线\n    top.add_cascade(label=&apos;Edit&apos;, menu=edit, underline=0)\n\n    submenu = Menu(edit, tearoff=True)  # 二级菜单\n    submenu.add_command(label=&apos;Spam&apos;, command=win.quit, underline=0)\n    submenu.add_command(label=&apos;Eggs&apos;, command=not_done, underline=0)\n    edit.add_cascade(label=&apos;Stuff&apos;, menu=submenu, underline=0)  # 在一级菜单中添加二级菜单\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    root.title(&apos;menu_win&apos;)\n    make_menu(root)\n    msg = Label(root, text=&apos;Window menu basic&apos;)\n    msg.pack(expand=YES, fill=BOTH)\n    msg.config(relief=SUNKEN, width=40, height=7, bg=&apos;beige&apos;)\n    root.mainloop()</code></pre><h4 id=\"创建框架级别菜单\"><a href=\"#创建框架级别菜单\" class=\"headerlink\" title=\"创建框架级别菜单\"></a>创建框架级别菜单</h4><pre><code># gui21.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n\n\ndef not_done():\n    showerror(&apos;Not implemented&apos;, &apos;Not yet available&apos;)\n\n\ndef make_menu(parent):\n    menu_bar = Frame(parent)\n    menu_bar.pack(side=TOP, fill=X)\n\n    f_button = Menubutton(menu_bar, text=&apos;File&apos;, underline=0)\n    f_button.pack(side=LEFT)\n    file = Menu(f_button)\n    file.add_command(label=&apos;New...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Open...&apos;, command=not_done, underline=0)\n    file.add_command(label=&apos;Quit...&apos;, command=parent.quit,  underline=0)\n    f_button.config(menu=file)\n\n    e_button = Menubutton(menu_bar, text=&apos;Edit&apos;, underline=0)\n    e_button.pack(side=LEFT)\n    edit = Menu(e_button)\n    edit.add_command(label=&apos;Cut&apos;, command=not_done, underline=0)\n    edit.add_command(label=&apos;Paste&apos;, command=not_done, underline=0)\n    edit.add_separator()\n    e_button.config(menu=edit)\n\n    sub_menu = Menu(edit, tearoff=True)\n    sub_menu.add_command(label=&apos;Spam&apos;, command=parent.quit, underline=0)\n    sub_menu.add_command(label=&apos;Eggs&apos;, command=not_done, underline=0)\n    edit.add_cascade(label=&apos;Stuff&apos;, menu=sub_menu, underline=0)\n    return menu_bar\n\n\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    root.title(&apos;menu_fra&apos;)\n    for i in range(2):\n        mnu = make_menu(root)\n        mnu.config(bd=2, relief=RAISED)\n        Label(root, bg=&apos;black&apos;, height=5, width=25).pack(expand=YES, fill=BOTH)\n    Button(root, text=&apos;Bye&apos;, command=root.quit).pack()\n    root.mainloop()</code></pre><h4 id=\"图片菜单\"><a href=\"#图片菜单\" class=\"headerlink\" title=\"图片菜单\"></a>图片菜单</h4><pre><code># gui22.py\n# -*- coding:UTF-8 -*-\nfrom Tkinter import *\nfrom tkMessageBox import *\n\n\nclass NewMenuDemo(Frame):\n    def __init__(self, parent=None):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        self.create_widgets()\n\n    def create_widgets(self):\n        self.make_menubar()\n        self.make_toolbar()\n        l = Label(self, text=&apos;Menu and Toolbar Demo&apos;)\n        l.config(relief=SUNKEN, width=40, height=10, bg=&apos;white&apos;)\n        l.pack(expand=YES, fill=BOTH)\n\n    def make_toolbar(self, size=(30, 30)):\n        toolbar = Frame(self, cursor=&apos;hand2&apos;, relief=SUNKEN, bd=2)\n        toolbar.pack(side=BOTTOM, fill=X)\n        Button(toolbar, text=&apos;Quit&apos;, command=self.quit).pack(side=RIGHT)\n        photo_files = (&apos;at.png&apos;, &apos;bd.png&apos;, &apos;dk.png&apos;)\n        self.tool_photo_objs = []\n        for file in photo_files:\n            img = PhotoImage(file=&apos;./gif/thumbs/&apos; + file)\n            btn = Button(toolbar, image=img, command=self.greeting)\n            btn.config(bd=5, relief=RIDGE)\n            btn.config(width=size[0], height=size[0])\n            btn.pack(side=LEFT)\n            self.tool_photo_objs.append(img)\n        Button(toolbar, text=&apos;Hello&apos;, command=self.greeting).pack(side=LEFT)\n\n    def make_menubar(self):\n        self.menubar = Menu(self.master)\n        self.master.config(menu=self.menubar)\n        self.file_menu()\n        self.edit_menu()\n        self.image_menu()\n\n    def file_menu(self):\n        pulldown = Menu(self.menubar)\n        pulldown.add_command(label=&apos;OPEN...&apos;, command=self.notdone)\n        pulldown.add_command(label=&apos;QUIT&apos;, command=self.quit)\n        self.menubar.add_cascade(label=&apos;FILE&apos;, underline=0, menu=pulldown)\n\n    def edit_menu(self):\n        pulldown = Menu(self.menubar)\n        pulldown.add_command(label=&apos;PASTE&apos;, command=self.notdone)\n        pulldown.add_command(label=&apos;SPAM&apos;, command=self.greeting)\n        pulldown.add_separator()\n        pulldown.add_command(label=&apos;DELETE&apos;, command=self.greeting)\n        pulldown.entryconfig(4, state=DISABLED)\n        self.menubar.add_cascade(label=&apos;EDIT&apos;, underline=0, menu=pulldown)\n\n    def image_menu(self):\n        photo_files = (&apos;at.png&apos;, &apos;bd.png&apos;, &apos;dk.png&apos;)\n        pulldown = Menu(self.menubar)\n        self.photo_objs = []\n        for file in photo_files:\n            img = PhotoImage(file=&apos;./gif/&apos; + file)\n            pulldown.add_command(image=img, command=self.notdone)\n            self.photo_objs.append(img)\n        self.menubar.add_cascade(label=&apos;IMAGE&apos;, underline=0, menu=pulldown)\n\n    def greeting(self):\n        showinfo(&apos;greeting&apos;, &apos;GREETING&apos;)\n\n    def notdone(self):\n        showerror(&apos;NOT DONE&apos;, &apos;NOT DONE&apos;)\n\n    def quit(self):\n        if askyesno(&apos;Verify quit&apos;, &apos;Sure?&apos;):\n            Frame.quit(self)\n\nif __name__ == &apos;__main__&apos;:\n    NewMenuDemo().mainloop()</code></pre><h4 id=\"滚动条与列表\"><a href=\"#滚动条与列表\" class=\"headerlink\" title=\"滚动条与列表\"></a>滚动条与列表</h4><pre><code># gui23.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\n\nclass ScrolledList(Frame):\n    def __init__(self, options, parent=None):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        self.makeWidgets(options)\n\n\n    def handle_list(self, event):\n        index = self.listbox.curselection()  # 鼠标选中的行\n        label = self.listbox.get(index)  # 获取鼠标选中的值\n        self.runCommand(label)  # 打印出值\n\n\n    def makeWidgets(self, options):\n        # sbar = Scrollbar(self, orient=&apos;horizontal&apos;)  # 横向滚动\n        sbar = Scrollbar(self)\n        list = Listbox(self, relief=SUNKEN)\n        sbar.config(command=list.yview)  # 移动滚动条启用回调： 按比例调节列表框的显示，\n        list.config(yscrollcommand=sbar.set)  # 移动列表框启用回调：按比例调节滚动条\n        sbar.pack(side=RIGHT, fill=Y)\n        list.pack(side=LEFT, expand=YES, fill=BOTH)\n        pos = 0\n        for label in options:\n            list.insert(pos, label)\n            pos += 1\n        # selectmode 选择模式SINGLE(单选), BROWSE(默认单选), MULTIPLE(多选), EXTENDED(多选)\n        # 启用多选时， curselection返回列表\n        # 启用单选时， curselection返回字符串\n        list.config(selectmode=EXTENDED, setgrid=1)\n        list.bind(&apos;&lt;Double-1&gt;&apos;, self.handle_list)\n        self.listbox = list\n\n    def runCommand(self, selection):\n        print(&apos;YOU SELECTED:&apos;, selection)\n\n\nif __name__ == &apos;__main__&apos;:\n    options = ((&apos;Lumberjack-%s&apos; % x) for x in range(20))\n    ScrolledList(options).mainloop()</code></pre><h4 id=\"TEXT组件\"><a href=\"#TEXT组件\" class=\"headerlink\" title=\"TEXT组件\"></a>TEXT组件</h4><pre><code>gui24.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\n\nclass ScrollText(Frame):\n    def __init__(self, parent=None, text=&apos;&apos;, file=None):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        self.make_widgets()\n        self.set_text(text, file)\n\n    def make_widgets(self):\n        sbar = Scrollbar(self)\n        text = Text(self, relief=SUNKEN)\n        sbar.config(command=text.yview)\n        text.config(yscrollcommand=sbar.set)\n        sbar.pack(side=RIGHT, fill=Y)\n        text.pack(side=LEFT, expand=YES, fill=BOTH)\n        self.text = text\n\n    def set_text(self, text=&apos;&apos;, file=None):\n        if file:\n            text = open(file, &apos;r&apos;).read()\n        # 1.0表示第一行，第0列（行从1开始，列从0开始）\n        # END表示最末一个字符后面第一个位置\n        self.text.delete(&apos;1.0&apos;, END)  # 删除从第一行第0列开始到最后的字符串，即删除全部\n        self.text.insert(&apos;1.0&apos;, text)  # 从第一行第0列开始填充数据\n        # mark_set 设置text标志\n        self.text.mark_set(INSERT, &apos;1.0&apos;)  # 设置将光标设置在文本开始位置\n        # self.text.mark_set(&apos;line_two&apos;, &apos;2.2&apos;)  # 自定义标志位置 可以用mark_unset取消\n        self.text.focus()\n        # TEXT的tag标签\n        # SEL是内置的标签，表示当前选中的文本\n        # text = self.text.get(SEL_FIRST, SEL_LAST)\n        # text = self.text.get(&apos;sel.first&apos;, &apos;sel.last&apos;)\n        # self.text.tag_add(&apos;alltext&apos;, &apos;1.0&apos;, END)  # 选中所有文本\n        # self.text.tag_add(SEL, index1, index2)  # 将一定范围内的文本添加到内建的SEL标签\n        # self.text.tag_remove(SEL, &apos;1.0&apos;, END)  # 将字符串所有字符从SEL标签中删除\n        # self.text.tag_delete(SEL)  # 删除SEL标签\n        # self.text.tag_add(&apos;demo&apos;, &apos;1.5&apos;, &apos;1.7&apos;)\n        # self.text.tag_add(&apos;demo&apos;, &apos;3.0&apos;, &apos;5.7&apos;)\n        # self.text.tag_config(&apos;demo&apos;, background=&apos;purple&apos;)\n        # self.text.tag_config(&apos;demo&apos;, fontground=&apos;white&apos;)\n        # self.text.tag_config(&apos;demo&apos;, font=(&apos;times&apos;, 16, &apos;underline&apos;))\n        # self.text.tag_bind(&apos;demo&apos;, &apos;&lt;Double-1&gt;&apos;, func)\n        # see方法\n        # self.text.see(&apos;1.0&apos;)  # 滚动到第一行第0列\n        # self.text.see(INSERT)  # 滚动到光标插入处\n        # self.text.see(SEL_FIRST)  # 滚动到选中文本第一个字符串\n    def get_text(self):\n        # -1c 表示往回数一个字符串\n        # +1l 表示往前数一行\n        return self.text.get(&apos;1.0&apos;, END + &apos;-1c&apos;)\n\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    if len(sys.argv) &gt; 1:\n        st = ScrollText(file=sys.argv[1])\n    else:\n        st = ScrollText(text=&apos;Words\\ngo here&apos;)\n\n    def show(event):\n        print(repr(st.get_text()))\n\n    root.bind(&apos;&lt;Key-Escape&gt;&apos;, show)\n    root.mainloop()</code></pre><h4 id=\"简单的文本编辑器\"><a href=\"#简单的文本编辑器\" class=\"headerlink\" title=\"简单的文本编辑器\"></a>简单的文本编辑器</h4><pre><code># gui25.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\nfrom tkSimpleDialog import askstring\nfrom tkFileDialog import asksaveasfilename\nfrom quitGui import Quitter\nfrom gui24 import ScrollText\n\n\nclass SimpleEditor(ScrollText):\n    def __init__(self, parent=None, file=None):\n        frm = Frame(parent)\n        frm.pack(fill=X)\n        Button(frm, text=&apos;Save&apos;, command=self.on_save).pack(side=LEFT)\n        Button(frm, text=&apos;Cut&apos;, command=self.on_cut).pack(side=LEFT)\n        Button(frm, text=&apos;Paste&apos;, command=self.on_paste).pack(side=LEFT)\n        Button(frm, text=&apos;Find&apos;, command=self.on_find).pack(side=LEFT)\n        Quitter(frm).pack(side=LEFT)\n        ScrollText.__init__(self, parent, file=file)\n        self.text.config(font=(&apos;courier&apos;, 9, &apos;normal&apos;))\n\n    def on_save(self):\n        filename = asksaveasfilename()\n        if filename:\n            alltext = self.get_text()\n            open(filename, &apos;w&apos;).write(alltext)\n\n\n    def on_cut(self):\n        text = self.text.get(SEL_FIRST, SEL_LAST)\n        self.text.delete(SEL_FIRST, SEL_LAST)\n        self.clipboard_clear()\n        self.clipboard_append(text)\n\n\n    def on_paste(self):\n        try:\n            text = self.selection_get(selection=&apos;CLIPBOARD&apos;)\n            self.text.insert(INSERT, text)\n        except TclError:\n            pass\n\n\n    def on_find(self):\n        target = askstring(&apos;SimpleEdit&apos;, &apos;Search string?&apos;)\n        if target:\n            where = self.text.search(target, INSERT, END)\n            if where:\n                print(where)\n                pastit = where + (&apos;+%dc&apos; % len(target))\n                self.text.tag_remove(SEL, &apos;1.0&apos;, END)\n                self.text.tag_add(SEL, where, pastit)\n                self.text.mark_set(INSERT, pastit)\n                self.text.see(INSERT)\n                self.text.focus()\n\nif __name__ == &apos;__main__&apos;:\n    if len(sys.argv) &gt; 1:\n        SimpleEditor(file=sys.argv[1]).mainloop()\n    else:\n        SimpleEditor().mainloop()</code></pre><h4 id=\"创建基础画布\"><a href=\"#创建基础画布\" class=\"headerlink\" title=\"创建基础画布\"></a>创建基础画布</h4><pre><code># gui26.py\n# -*- coding: UTF-8 -*-\n\nfrom Tkinter import *\ncanvas = Canvas(width=525, height=300, bg=&apos;white&apos;)\ncanvas.pack(expand=YES, fill=BOTH)\n\ncanvas.create_line(100, 100, 200, 200)\ncanvas.create_line(100, 200, 200, 300)\nfor i in range(1, 20, 2):\n    canvas.create_line(0, i, 50, i)\ncanvas.create_oval(20, 20, 300, 100, width=10, fill=&apos;yellow&apos;)\nd = {1:PIESLICE,2:CHORD,3:ARC}\nfor i in d:\n    canvas.create_arc(\n        (10,10 + 60*i,110,110 + 60*i),\n        style=d[i],   #指定样式\n        start=30,     #指定起始角度\n        extent=30     #指定角度偏移量\n        )\ncanvas.create_arc(0, 0, 100, 200, fill=&apos;black&apos;)\ncanvas.create_rectangle(200, 200, 300, 300, width=5, fill=&apos;red&apos;)\ncanvas.create_line(0, 300, 150, 150, width=10, fill=&apos;green&apos;)\n\nphoto = PhotoImage(file=&apos;./gif/lightmachine.png&apos;)\ncanvas.create_image(325,25, image=photo, anchor=NW)\n\nwidget = Label(canvas, text=&apos;Spam&apos;, fg=&apos;white&apos;, bg=&apos;black&apos;)\nwidget.pack()\ncanvas.create_window(100, 100, window=widget)\ncanvas.create_text(100, 280, text=&apos;CLOUD CLONE CORP.&apos;)\n\n# id = canvas.create_line(fromX, fromY, toX, toY)  # 创建直线\n# id = canvas.create_oval(fromX, fromY, toX, toY) # 创建椭圆\n# id = canvas.create_arc(fromX, fromY, toX, toY)  # 创建扇形\n# id =canvas.create_rectangle(fromX, fromY, toX, toY)  # 创建矩形\n# canvas.move(id, offsetX, offsetY)  # 移动对象\n# canvas.delete(id)  # 删除对象\n# canvas.tkraise(id)  # 将对象移动到前端\n# canvas.lower(id)  # 将对象移动到底部\n# canvas.itemconfig(id, fill=&apos;red&apos;)  # 修改对象属性\n\n# 画布标签\n# canvas.create_line(fromX, fromY, toX, toY, tag=&apos;bubbles&apos;) \n# canvas.create_line(fromX, fromY, toX, toY, tag=&apos;bubbles&apos;) \n# id = canvas.create_line(fromX, fromY, toX, toY)\n# canvas.addtag_withtag(&apos;bubbles&apos;, id)\n# canvas.move(&apos;bubbles&apos;, diffX, diffY)\nmainloop()</code></pre><h4 id=\"canvas与滚动条\"><a href=\"#canvas与滚动条\" class=\"headerlink\" title=\"canvas与滚动条\"></a>canvas与滚动条</h4><pre><code># gui27.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\n\nclass ScrolledCanvas(Frame):\n    def __init__(self, parent=None, color=&apos;brown&apos;):\n        Frame.__init__(self, parent)\n        self.pack(expand=YES, fill=BOTH)\n        canv = Canvas(self, bg=color, relief=SUNKEN)\n        canv.config(width=300, height=200)\n        canv.config(scrollregion=(0, 0, 300, 1000))\n        canv.config(highlightthickness=0)\n\n        sbar = Scrollbar(self)\n        sbar.config(command=canv.yview)\n        canv.config(yscrollcommand=sbar.set)\n        sbar.pack(side=RIGHT, fill=Y)\n        canv.pack(side=LEFT, expand=YES, fill=BOTH)\n\n        self.fillContent(canv)\n        canv.bind(&apos;&lt;Double-1&gt;&apos;, self.onDoubleClick)\n        self.canvas = canv\n\n    def fillContent(self, canv):\n        for i in range(10):\n            canv.create_text(150, 50+(i*100), text=&apos;spam&apos;+str(i), fill=&apos;beige&apos;)\n\n    def onDoubleClick(self, event):\n        print(event.x, event.y)\n        print(self.canvas.canvasx(event.x), self.canvas.canvasy(event.y))\n\nif __name__ == &apos;__main__&apos;:\n    ScrolledCanvas().mainloop()</code></pre><h4 id=\"canvas绑定事件\"><a href=\"#canvas绑定事件\" class=\"headerlink\" title=\"canvas绑定事件\"></a>canvas绑定事件</h4><pre><code># gui28.py\n# -*- coding: UTF-8 -*-\nfrom Tkinter import *\ntrace = False\n\nclass CanvasEventDemo:\n    def __init__(self, parent=None):\n        canvas = Canvas(width=300, height=300, bg=&apos;beige&apos;)\n        canvas.pack()\n        canvas.bind(&apos;&lt;ButtonPress-1&gt;&apos;, self.on_start)\n        canvas.bind(&apos;&lt;B1-Motion&gt;&apos;, self.on_grow)\n        canvas.bind(&apos;&lt;Double-1&gt;&apos;, self.on_clear)\n        canvas.bind(&apos;&lt;ButtonPress-3&gt;&apos;, self.on_move)\n        self.canvas = canvas\n        self.drawn = None\n        self.kinds = [canvas.create_oval, canvas.create_rectangle]\n\n    def on_start(self, event):\n        self.shape =self.kinds[0]\n        self.kinds = self.kinds[1:] + self.kinds[:1]\n        self.start = event\n        self.drawn = None\n\n    def on_grow(self, event):\n        canvas = event.widget\n        if self.drawn:\n            canvas.delete(self.drawn)\n        object_id = self.shape(self.start.x, self.start.y, event.x, event.y)\n        if trace:\n            print(object_id)\n        self.drawn = object_id\n\n    def on_clear(self, event):\n        event.widget.delete(&apos;all&apos;)\n\n\n    def on_move(self, event):\n        if self.drawn:\n            if trace:\n                print(self.drawn)\n            canvas = event.widget\n            diffx, diffy = (event.x - self.start.x), (event.y - self.start.y)\n            canvas.move(self.drawn, diffx, diffy)\n            self.start = event\n\nif __name__ == &apos;__main__&apos;:\n    CanvasEventDemo()\n    mainloop()</code></pre><h4 id=\"grid布局和pack布局实现自动扩展\"><a href=\"#grid布局和pack布局实现自动扩展\" class=\"headerlink\" title=\"grid布局和pack布局实现自动扩展\"></a>grid布局和pack布局实现自动扩展</h4><pre><code># gui29.py\n# -*- coding: UTF-8 -*-\n\nfrom Tkinter import *\ncolors = [&apos;red&apos;, &apos;green&apos;, &apos;orange&apos;, &apos;white&apos;, &apos;yellow&apos;, &apos;blue&apos;]\n\ndef gridbox(root):\n    Label(root, text=&apos;GRID&apos;).grid(columnspan=2)  # 跨两列\n    row = 1\n    for color in colors:\n        lab = Label(root, text=color, relief=RIDGE, width=25)\n        ent = Entry(root, bg=color, relief=SUNKEN, width=50)\n        lab.grid(row=row, column=0, sticky=NSEW)  # 向4个方向扩展\n        ent.grid(row=row, column=1, sticky=NSEW)\n        root.rowconfigure(row, weight=1)  # 循环行自动扩展\n        row += 1\n    root.columnconfigure(0, weight=1)  # 第一列自动扩展\n    root.columnconfigure(1, weight=1)  # 第二列自动扩展\n\ndef packbox(root):\n    Label(root, text=&apos;PACK&apos;).pack()\n    for color in colors:\n        row = Frame(root)\n        lab = Label(row, text=color, relief=RIDGE, width=25)\n        ent = Entry(row, bg=color, relief=SUNKEN, width=50)\n        row.pack(side=TOP, expand=YES, fill=BOTH)\n        lab.pack(side=LEFT, expand=YES, fill=BOTH)\n        ent.pack(side=RIGHT, expand=YES, fill=BOTH)\n\nif __name__ == &apos;__main__&apos;:\n    root = Tk()\n    gridbox(Toplevel(root))\n    packbox(Toplevel(root))\n    Button(root, text=&apos;Quit&apos;, command=root.quit).pack()\n    mainloop()</code></pre><h3 id=\"PIL：Python-Imaging-Library\"><a href=\"#PIL：Python-Imaging-Library\" class=\"headerlink\" title=\"PIL：Python Imaging Library\"></a>PIL：Python Imaging Library</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>sudo apt-get install python-imaging\n或者\nsudo easy_install PIL</code></pre><p>window系统选择</p>\n<pre><code>pip install Pillow</code></pre><p>图像操作</p>\n<pre><code>import Image\n# 打开一个jpg图像文件，注意路径要改成你自己的:\nim = Image.open(&apos;/Users/michael/test.jpg&apos;)\n# 获得图像尺寸:\nw, h = im.size\n# 缩放到50%:\nim.thumbnail((w//2, h//2))\n# 把缩放后的图像用jpeg格式保存:\nim.save(&apos;/Users/michael/thumbnail.jpg&apos;, &apos;jpeg&apos;)</code></pre><p>模糊效果</p>\n<pre><code>import Image, ImageFilter\n\nim = Image.open(&apos;/Users/hanchang/test.jpg&apos;)\nim2 = im.filter(ImageFilter.BLUR)\nim2.save(&apos;/Users/hanchang/blur.jpg&apos;, &apos;jpeg&apos;)</code></pre><p>自定义图像验证码</p>\n<pre><code>import Image, ImageDraw, ImageFont, ImageFilter\nimport random\n# 随机字母:\ndef rndChar():\n    return chr(random.randint(65, 90))\n\n# 随机颜色1:\ndef rndColor():\n    return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))\n\n# 随机颜色2:\ndef rndColor2():\n    return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))\n\n# 240 x 60:\nwidth = 60 * 4\nheight = 60\nimage = Image.new(&apos;RGB&apos;, (width, height), (255, 255, 255))\n# 创建Font对象:\nfont = ImageFont.truetype(&apos;Arial.ttf&apos;, 36)\n# 创建Draw对象:\ndraw = ImageDraw.Draw(image)\n# 填充每个像素:\nfor x in range(width):\n    for y in range(height):\n        draw.point((x, y), fill=rndColor())\n# 输出文字:\nfor t in range(4):\n    draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2())\n# 模糊:\nimage = image.filter(ImageFilter.BLUR)\nimage.save(&apos;code.jpg&apos;, &apos;jpeg&apos;);\n自定义字符串生成图片</code></pre><p><code>from PIL import Image,ImageDraw,ImageFont,ImageOps &lt;h1&gt;生成图片&lt;/h1&gt; def create\\_image(str, line, name, dir): img\\_size = (400, (line*20) + 10) img\\_mode = &#39;RGB&#39; img\\_font = ImageFont.truetype(&#39;UbuntuMono-R.ttf&#39;, 14) img\\_bg = &#39;#FFF&#39; img\\_fg = &#39;#000&#39; img = Image.new(mode=img\\_mode, size=img\\_size, color=img\\_bg) draw = ImageDraw.Draw(img) draw.text((10, 10), str, fill=img\\_fg, font=img_font) img.save( dir + name + &#39;.png&#39;, &#39;png&#39;)</code></p>\n"},{"title":"Wordpress插件开发基础入门","url":"101.html","id":"101","comments":0,"date":"2016-11-10T03:40:48.000Z","_content":"\n#### 创建插件\n\n    ├── hanchang-copyright\n    │   └── hanchang-copyright.php\n    \n    \n\n    # hanchang-copyright.php\n    <?php\n    /*\n    Plugin Name: hanchang-copyright\n    Plugin URI: http://www.zhuohc.com\n    Description: 在页脚显示一段版权信息\n    Version: 1.0\n    Author: hanchang\n    Author URI: http://www.zhuohc.com\n    License: GPLv2\n    */\n    \n\n#### 插件启用和停用初始化\n\n    # hanchang-copyright.php\n    <?php\n    /*\n    Plugin Name: hanchang-copyright\n    Plugin URI: http://www.zhuohc.com\n    Description: 在页脚显示一段版权信息\n    Version: 1.0\n    Author: hanchang\n    Author URI: http://www.zhuohc.com\n    License: GPLv2\n    */\n    \n    //定义插件启动时候调用的方法\n    register_activation_hook( __FILE__, 'hanchang_copyright_install');\n    \n    function hanchang_copyright_install() {\n    \n        //插件启动，添加一个默认的版权信息\n        update_option( \"hanchang_copyright_text\", \"<p style='color:red'>本站点所有文章均为原创，转载请注明出处！</p>\" );\n    \n    }\n    \n    //定义插件停用时候调用的方法\n    register_deactivation_hook( __FILE__, 'hanchang_copyright_deactivation');\n    \n    function hanchang_copyright_deactivation() {\n    \n        //插件停用，设置停用标识为1\n        update_option( \"hanchang_copyright_deactivation\", \"yes\" );\n    \n    }\n    \n\n#### 删除插件\n\n    .\n    ├── hanchang-copyright.php\n    └── uninstall.php # 删除插件执行的文件\n    \n\n    # uninstall.php\n    <?\n    // 如果 uninstall 不是从 WordPress 调用，则退出\n    if( !defined( 'WP_UNINSTALL_PLUGIN' ) )\n    exit();\n    \n    //删除插件创建的项目，以确保不占用数据库资源\n    delete_option( 'hanchang_copyright_deactivation' );\n    delete_option( 'hanchang_copyright_text' );\n    \n\n#### add_action\n\n    add_action(\"$tag钩子名称\", \"$function_to_do执行函数\", $priorrity执行优先级, $accepted_arga带参数函数的参数个数)\n    \n\n    # hanchang-copyright.php\n    \n    //为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\n    add_action( \"wp_footer\", \"hc_copyright_insert\" );\n    \n    function hc_copyright_insert(){\n    \n        //输出一段字符串\n        echo get_option( \"hc_copyright_text\" );\n    \n    }\n    \n    \n    add_action( \"wp_head\", \"hanchang_copyright_insert_new\" );\n    \n    function hanchang_copyright_insert_new() {\n        echo \"<script>alert(1);</script>\";\n    }\n    \n    add_action( 'save_post', 'save_post_meta', 10, 2 );\n    \n    function save_post_meta( $post_id, $post ) {\n    \n        update_post_meta( $post_id, \"save-time\", \"更新时间：\" . date(\"Y-m-d H:i:s\") );\n    \n    }\n    \n\n#### 常见钩子\n\n    init 加载初始化\n    wp_head 加载添加到head标签中的内容\n    wp_enqueue_scripts 加载css或者js文件\n    wp_foot 加载添加到底部内容\n    \n    save_post 添加保存文章\n    wp_trash_post 将文章添加到回收站\n    delete_post 将文章删除\n    \n    wp_insert_comment 插入评论\n    \n    user_register 用户注册\n    \n\n    # hanchang-copyright.php\n    <?php\n    /*\n    Plugin Name: hanchang-copyright\n    Plugin URI: http://www.zhuohc.com\n    Description: 在页脚显示一段版权信息\n    Version: 1.0\n    Author: hanchang\n    Author URI: http://www.zhuohc.com\n    License: GPLv2\n    */\n    \n    //定义插件启动时候调用的方法\n    register_activation_hook( __FILE__, 'hanchang_copyright_install');\n    \n    function hanchang_copyright_install() {\n    \n        //插件启动，添加一个默认的版权信息\n        update_option( \"hanchang_copyright_text\", \"<p style='color:red'>本站点所有文章均为原创，转载请注明出处！</p>\" );\n    \n    }\n    \n    //定义插件停用时候调用的方法\n    register_deactivation_hook( __FILE__, 'hanchang_copyright_deactivation');\n    \n    function hanchang_copyright_deactivation() {\n    \n        //插件停用，设置停用标识为1\n        update_option( \"hanchang_copyright_deactivation\", \"yes\" );\n    \n    }\n    \n    //为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\n    add_action( \"wp_footer\", \"hc_copyright_insert\" );\n    \n    function hc_copyright_insert(){\n    \n        //输出一段字符串\n        echo get_option( \"hc_copyright_text\" );\n    \n    }\n    \n    \n    add_action( \"wp_head\", \"hanchang_copyright_insert_new\" );\n    \n    function hanchang_copyright_insert_new() {\n        echo \"<script>alert(1);</script>\";\n    }\n    \n    add_action( 'save_post', 'save_post_meta', 10, 2 );\n    \n    function save_post_meta( $post_id, $post ) {\n    \n        update_post_meta( $post_id, \"save-time\", \"更新时间：\" . date(\"Y-m-d H:i:s\") );\n    \n    }\n    \n    \n    \n    //在输出内容之前，给页面管理添加摘要功能\n    add_action( 'init', 'hc_add_excerpts_to_pages' );\n    \n    function hc_add_excerpts_to_pages() {\n    \n        //给页面管理添加摘要的功能\n        add_post_type_support( 'page', array( 'excerpt' ) );\n    }\n    \n    //wp_head钩子\n    add_action('wp_head','hc_wp_head');\n    \n    function hc_wp_head() {\n    \n        //只有首页输出描述\n        if( is_home() ){ ?>\n            <meta name=\"description\" content=\"<? bloginfo('description'); ?>\" />\n        <? }\n    \n    }\n    \n    \n    //自定义引用样式表\n    function hc_enqueue_style() {\n        wp_enqueue_style( 'core', plugins_url('css/hc_copyrighy.css', __FILE__) , false );\n    }\n    \n    //自定义引用脚本文件\n    function hc_enqueue_script() {\n        wp_enqueue_script( 'my-js', plugins_url('js/hc_copyrighy.js', __FILE__), false );\n    }\n    \n    //引用文件的钩子\n    add_action( 'wp_enqueue_scripts', 'hc_enqueue_style', 5 );\n    add_action( 'wp_enqueue_scripts', 'hc_enqueue_script', 7 );\n    \n    //删除所有挂载在 wp_enqueue_scripts 钩子上的方法\n    remove_all_actions( 'wp_enqueue_scripts', 5 );\n    \n    //评论被添加的时候触发\n    add_action( 'wp_insert_comment', 'comment_inserted', 10, 2 );\n    \n    //移除 wp_insert_comment 钩子上的 comment_inserted 方法\n    remove_action( 'wp_insert_comment', 'comment_inserted', 10 );\n    \n    function comment_inserted($comment_id, $comment_object ) {\n    \n        //获取该评论所在文章的评论总数\n        $comments_count = wp_count_comments( $comment_object->comment_post_ID );\n    \n        $commentarr = array();\n        $commentarr['comment_ID'] = $comment_id;\n    \n        //修改评论的内容，在评论内容前加上 “第{$comments_count->total_comments}个评论：” 这么一段字符串\n        $commentarr['comment_content'] = \"第{$comments_count->total_comments}个评论：\" . $comment_object->comment_content;\n    \n        wp_update_comment( $commentarr );\n    \n    }\n    \n    \n    add_action( 'user_register', 'myplugin_registration_save', 10, 1 );\n    \n    function myplugin_registration_save( $user_id ) {\n    \n        //将新用户的个人说明，设置为注册时间\n        wp_update_user( array( 'ID' => $user_id, 'description' => \"注册时间：\" . date(\"Y-m-d H:i:s\") ) );\n    \n    }\n    ?>\n    \n\n#### 过滤器\n\n    add_filter($tag过滤器名称, $function_to_add需要添加的函数, $priority优先级, $acceptedargs添加的参数数量)\n    \n    \n\n    # hanchang-copyright.php\n    //一开始，我们设置一个变量\n    $value = \"hello\";\n    \n    //给名为 hc_filter 的过滤器，挂载一个 hc_filter_fun 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun 方法进行过滤\n    //add_filter( \"hc_filter\", \"hc_filter_fun\" );\n    \n    //给名为 hc_filter 的过滤器，再挂载一个 hc_filter_fun_add_time 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun、hc_filter_fun_add_time 两个方法进行过滤\n    //add_filter( \"hc_filter\", \"hc_filter_fun_add_time\" );\n    \n    //对 $value 值使用名为 hc_filter 的过滤器进行过滤，这个时候，由于 hc_filter 过滤器只挂载了 hc_filter_fun 方法，因此，只使用 hc_filter_fun 方法 过滤了一次，并且返回给 $myvar 变量\n    //$myvar = apply_filters( \"hc_filter\", $value );\n    \n    add_filter( \"the_content\", \"hc_filter_fun\" );\n    add_filter( \"the_content\", \"hc_filter_fun_add_time\" );\n    \n\n#### 带参数的过滤器\n\n    # hanchang-copyright.php\n    function suppress_if_blurb( $title, $id = null ) {\n    \n        if ( in_category('wpcj', $id ) ) {\n            return '不显示标题';\n        }\n    \n        return $title . \"...\";\n    }\n    \n    //对 the_title 过滤器挂载一个 suppress_if_blurb 方法，优先级为10，传递的参数有2个\n    add_filter( 'the_title', 'suppress_if_blurb', 10, 2 );\n    \n\n#### 常见过滤器\n\n    the_content 文章内容 \n    content_save_pre 文章保存前\n    the_title 文章标题\n    wp_handle_upload_prefilter 上传文件之前\n    \n\n#### 创建菜单\n\n    add_menu_page  # 添加菜单\n    add_submenu_page  # 添加子菜单\n    \n\n    # hanchang-copyright.php\n    // admin_menu钩子挂载创建菜单方法\n    add_action( 'admin_menu', 'hc_create_menu' );\n    function hc_create_menu() {\n    \n        // 创建顶级菜单\n        add_menu_page(\n            'Hanchang的插件首页', // 菜单title标题\n            'hanchang-copyright',  // 菜单名称，显示在后台管理页面侧边栏\n            'manage_options', // 浏览插件所需要的权限=管理员权限\n            'hanchang_copyright' ,  // 菜单别名，不能与其他插件冲突\n            'hanchang_settings_page',  // 菜单需要显示的页面，调用的哪个方法\n            plugins_url( '/images/icon.png', __FILE__ )  // 调用图标\n        );\n    \n        // 创建子菜单\n        add_submenu_page(\n            'hanchang_copyright',  // 父级菜单别名\n            '关于HC的插件',  // 菜单title标题\n            '关于',  //  菜单名称，显示在后台管理页面侧边栏\n            'manage_options',  // 浏览插件所需要的权限=管理员权限\n            'hc_copyright_about',  // 菜单别名，不能与其他插件冲突\n            'hc_create_submenu_menu'  // 调用方法\n        );\n    }\n    \n    function hanchang_settings_page() {\n        ?>\n        <h2>插件顶级菜单</h2>\n        <?\n    }\n    \n    function hc_create_submenu_menu() {\n    \n        ?>\n        <h2>子菜单</h2>\n        <?\n    }\n    \n\n#开发 小工具\n\n    #hanchang-copyright.php\n    // 使用 widgets_init 动作钩子来执行自定义的函数\n    add_action( 'widgets_init', 'hc_register_widgets' );\n    \n    // 注册小工具\n    function hc_register_widgets() {\n        register_widget( 'hc_widget_info' );\n    }\n    \n    //使用 WP_Widget 类来创建小工具\n    class hc_widget_info extends WP_Widget {\n    \n        //构造函数\n        public function __construct() {\n            $widget_ops = array(\n                'classname' => 'hc_widget_info',\n                'description' => '显示作者的个人信息'\n            );\n            $this->WP_Widget( '显示作者个人信息', '作者的小工具', $widget_ops );\n        }\n    \n        //小工具管理界面\n        public function form( $instance ) {\n    \n            $defaults = array( 'title' => '作者的个人信息', 'xingming' => '作者', 'book' => '《作者》' );\n            $instance = wp_parse_args( (array) $instance, $defaults );\n    \n            $title = $instance['title'];\n            $xingming = $instance['xingming'];\n            $book = $instance['book'];\n            ?>\n            <p>标题: <input class=\"widefat\" name=\"<?php echo $this->get_field_name( 'title' ); ?>\" type=\"text\" value=\"<?php echo esc_attr( $title ); ?>\" /></p>\n            <p>姓名: <input class=\"widefat\" name=\"<?php echo $this->get_field_name( 'xingming' ); ?> \"type=\"text\" value=\"<?php echo esc_attr( $xingming ); ?> \" /></p>\n            <p>著作: <textarea class=\"widefat\" name=\" <?php echo $this->get_field_name( 'book' ); ?> \" /><?php echo esc_attr( $book ); ?></textarea> </p>\n            <?php\n        }\n    \n        //保存小工具设置\n        public function update( $new_instance, $old_instance ) {\n    \n            $instance = $old_instance;\n    \n            $instance['title'] = strip_tags( trim( $new_instance['title'] ) );\n            $instance['xingming'] = strip_tags( trim(  $new_instance['xingming'] ) );\n            $instance['book'] = strip_tags( trim( $new_instance['book'] ) );\n            return $instance;\n        }\n    \n        //显示小工具\n        public function widget( $args, $instance ) {\n    \n            extract( $args );\n    \n            $title = apply_filters( 'widget_title', $instance['title'] );\n            $xingming = empty( $instance['xingming'] ) ? ' ' : $instance['xingming'];\n            $book = empty( $instance['book'] ) ? ' ' : $instance['book'];\n    \n            echo '<p> 标题: ' . $title . '</p>';\n            echo '<p> 姓名: ' . $xingming . '</p>';\n            echo '<p> 著作: ' . $book . '</p>';\n        }\n    }\n    \n\n#### 添加元数据框\n\n    # hanchang-copyright.php\n    /**\n     * 添加一个元数据框到 post 和 page 的管理界面中\n     */\n    function myplugin_add_meta_box() {\n    \n        $screens = array( 'post', 'page' );\n    \n        add_meta_box(\n            'myplugin_sectionid',  // 元数据框的html代码中的id值\n            '转载自',  // 元数据框标题\n            'myplugin_meta_box_callback',  // 回调函数名称，输出元数据框中的内容\n            $screens  // 元数据框需要添加在哪个分类内的（文章或者页面）\n        );\n    }\n    \n    //需要给 add_meta_boxes 钩子，挂载一个自定义的方法\n    add_action( 'add_meta_boxes', 'myplugin_add_meta_box' );\n    \n    /**\n     * 元数据框展示代码\n     */\n    function myplugin_meta_box_callback( $post ) {\n    \n        // 添加一个验证信息，这个在保存元数据的时候用到\n        wp_nonce_field( 'myplugin_save_meta_box_data', 'myplugin_meta_box_nonce' );\n    \n        /*\n         * 输出元数据信息\n         */\n        $value = get_post_meta( $post->ID, '_zzurl', true );\n    \n        echo '<label for=\"myplugin_new_field\">';\n        _e( '本文章转载自：' );\n        echo '</label> ';\n        echo '<input type=\"text\" id=\"_zzurl\" name=\"_zzurl\" value=\"' . esc_attr( $value ) . '\" size=\"25\" />';\n    }\n    \n    function myplugin_save_meta_box_data( $post_id ) {\n    \n        //验证是否为有效信息\n        if ( ! isset( $_POST['myplugin_meta_box_nonce'] ) ) {\n            return;\n        }\n    \n        if ( ! wp_verify_nonce( $_POST['myplugin_meta_box_nonce'], 'myplugin_save_meta_box_data' ) ) {\n            return;\n        }\n    \n        if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {\n            return;\n        }\n    \n        // Check the user's permissions.\n        if ( isset( $_POST['post_type'] ) && 'page' == $_POST['post_type'] ) {\n    \n            if ( ! current_user_can( 'edit_page', $post_id ) ) {\n                return;\n            }\n    \n        } else {\n    \n            if ( ! current_user_can( 'edit_post', $post_id ) ) {\n                return;\n            }\n        }\n    \n        if ( ! isset( $_POST['_zzurl'] ) ) {\n            return;\n        }\n    \n        $my_data = sanitize_text_field( $_POST['_zzurl'] );\n    \n        update_post_meta( $post_id, '_zzurl', $my_data );\n    }\n    \n    //文章保存的时候，会调用 save_post 钩子，因此我们要借助这个钩子来保存元数据框内的数据\n    add_action( 'save_post', 'myplugin_save_meta_box_data' );\n    \n\n#### 后台常见css样式表\n\n    # copyright.php\n    function hanchang_settings_page() {\n        ?>\n        <div class=\"wrap\">\n            <h2>插件顶级菜单</h2>\n            <div id=\"message\" class=\"updated\">设置保存成功</div>\n            <div id=\"message\" class=\"error\">保存出现错误</div>\n            <p>\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-primary\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-secondary\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-large\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-small\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-hero\" />\n            </p>\n            <p>\n                <a href=\"#\">搜索</a>\n                <a href=\"#\" class=\"button\">搜索</a>\n                <a href=\"#\" class=\"button button-primary\">搜索</a>\n                <a href=\"#\" class=\"button button-secondary\">搜索</a>\n                <a href=\"#\" class=\"button button-large\">搜索</a>\n                <a href=\"#\" class=\"button button-small\">搜索</a>\n                <a href=\"#\" class=\"button button-hero\">搜索</a>\n            </p>\n    \n            <form method=\"POST\" action=\"\">\n                <table class=\"form-table\">\n                    <tr valign=\"top\">\n                        <th><label for=\"xingming\">姓名：</label></th>\n                        <td><input id=\"xingming\" name=\"xingming\" /></td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"shenfen\">身份：</label></th>\n                        <td>\n                            <select name=\"shenfen\">\n                                <option value=\"在校\">在校</option>\n                                <option value=\"毕业\">毕业</option>\n                            </select>\n                        </td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"tongyi\">同意注册</label></th>\n                        <td><input type=\"checkbox\" name=\"tongyi\" /></td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"xingbie\">性别</label></th>\n                        <td>\n                            <input type=\"radio\" name=\"xingbie\" value=\"男\" /> 男\n                            <input type=\"radio\" name=\"xingbie\" value=\"女\" /> 女\n                        </td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"beizhu\">备注</label></th>\n                        <td><textarea name=\"beizhu\"></textarea></td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <td>\n                            <input type=\"submit\" name=\"save\" value=\"保存\" class=\"button-primary\" />\n                            <input type=\"submit\" name=\"reset\" value=\"重置\" class=\"button-secondary\" />\n                        </td>\n                    </tr>\n                </table>\n            </form>\n    \n            <table class=\"widefat striped\">\n                <thead>\n                <tr>\n                    <th>序号</th>\n                    <th>姓名</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td>1</td>\n                    <td>黄聪</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>黄聪</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td>黄聪</td>\n                </tr>\n                </tbody>\n                <tfoot>\n                <tr>\n                    <th>序号</th>\n                    <th>姓名</th>\n                </tr>\n                </tfoot>\n            </table>\n    \n            <div class=\"tablenav\">\n                <div class=\"tablenav-pages\">\n                    <span class=\"displaying-num\">第1页，共458页</span>\n                    <span class=\"page-numbers current\">1</span>\n                    <a href=\"#\" class=\"page-numbers\">2</a>\n                    <a href=\"#\" class=\"page-numbers\">3</a>\n                    <a href=\"#\" class=\"page-numbers\">4</a>\n                    <a href=\"#\" class=\"next page-numbers\">»</a>\n                </div>\n            </div>\n        </div>\n        <?\n    }\n    \n\n#### 保存插件设置到数据库中\n\n    ├── hc-test\n    │   ├── css\n    │   ├── hc-test.php\n    │   ├── images\n    │   └── js\n    \n    \n\n    hc-test.php\n    \n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    //定义插件启动时候调用的方法\n    register_activation_hook( __FILE__, 'hc_test_install');\n    \n    function hc_test_install() {\n    \n       global $wpdb;\n    \n       if( $wpdb->get_var( \"SHOW TABLES LIKE '{$wpdb->prefix}test'\" ) != \"{$wpdb->prefix}test\" ) \n       {\n          $sql = \"CREATE TABLE IF NOT EXISTS `{$wpdb->prefix}test` (\n               `id` int(11) NOT NULL auto_increment COMMENT '编号',\n               `color` varchar(10) DEFAULT '' COMMENT '字体颜色',\n               `size`  varchar(10) DEFAULT '' COMMENT '字体大小',\n               PRIMARY KEY  (`id`)\n             ) DEFAULT CHARSET=utf8 AUTO_INCREMENT=0;\";\n          $wpdb->query( $sql );\n    \n          $sql = \"REPLACE INTO `{$wpdb->prefix}test` VALUES (1, '#FF0000','20');\";\n          $wpdb->query( $sql );\n       }\n    }\n    \n    add_action( 'admin_menu', 'hc_test_create_menu' );\n    \n    function hc_test_create_menu() {\n    \n       //创建顶级菜单\n       add_menu_page( \n          'HC-TEST', \n          'HC的插件',\n          'manage_options', \n          'hc_test' ,\n          'hc_settings_page',\n          plugins_url( '/images/icon.png', __FILE__ )\n       );\n    }\n    \n    function hc_settings_page() {\n    \n       global $wpdb;\n    \n       //当提交了，并且验证信息正确\n       if( !empty( $_POST ) && check_admin_referer( 'hc_test_nonce' ) ) {\n    \n          //更新设置\n          update_option( 'hc_test_bold', $_POST['hc_test_bold'] );\n    \n          $wpdb->update( \"{$wpdb->prefix}test\", array( 'color' => $_POST['color'], 'size' => $_POST['size'] ), array( 'id' => 1 ) );\n          ?>\n          <div id=\"message\" class=\"updated\">\n             <p><strong>保存成功！</strong></p>\n          </div>\n          <?\n       }\n    \n       $sql = \"SELECT * FROM `{$wpdb->prefix}test`\";\n       $row = $wpdb->get_row( $sql, ARRAY_A );\n    \n       $color = $row['color'];\n       $size = $row['size'];\n       ?>\n       <div class=\"wrap\">\n          <h2>插件顶级菜单</h2>\n          <form action=\"\" method=\"post\">\n             <p><label for=\"color\">字体颜色：</label><input type=\"text\" name=\"color\" value=\"<?php echo $color; ?>\" /></p>\n             <p><label for=\"size\">字体大小：</label>\n             <select name=\"size\">\n                <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n                <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n                <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n                <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n                <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n             </select></p>\n             <p><label for=\"hc_test_obold\">字体加粗：</label><input name=\"hc_test_bold\" type=\"checkbox\"  value=\"1\" <? checked( 1, get_option( 'hc_test_bold' ) ); ?> /> 加粗</p>\n             <p><input type=\"submit\" name=\"submit\" value=\"保存设置\" /></p>\n             <?\n                //输出一个验证信息\n                wp_nonce_field('hc_test_nonce');\n             ?>\n          </form>\n       </div>\n       <?\n    }\n    \n    add_action( 'wp_head', 'hc_test_head_fun' );\n    \n    function hc_test_head_fun() {\n    \n       global $wpdb;\n    \n       //获取自定义数据库中的设置\n       $sql = \"SELECT * FROM `{$wpdb->prefix}test`\";\n       $row = $wpdb->get_row( $sql, ARRAY_A );\n    \n       //获取options表中的设置选项\n       $bold = get_option( \"hc_test_bold\" ) == 1 ? \"bold\" : \"normal\";\n    \n       ?><style>body{color:<? echo $row[\"color\"] ?>;font-size:<? echo $row[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n    }\n    \n\n#### 使用wordpress内置api设置插件属性\n\n    # hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    add_action( 'admin_menu', 'test_create_menu' );\n    \n    function test_create_menu() {\n    \n       //创建顶级菜单\n       add_menu_page(\n          'HC的插件首页',\n          'HC的插件',\n          'manage_options',\n          'hc_test' ,\n          'hc_settings_page',\n          plugins_url( '/images/icon.png', __FILE__ )\n       );\n    }\n    \n    add_action( 'admin_init', 'register_hc_test_setting' );\n    \n    //使用register_setting()注册要存储的字段\n    function register_hc_test_setting() {\n    \n       //注册一个选项，用于装载所有插件设置项\n       $option_group = \"hc_test_group\";\n       register_setting( $option_group, 'hc_test_option' );\n    \n       //添加选项设置区域\n       $setting_section = \"hc_test_setting_section\";\n       add_settings_section(\n          $setting_section,\n          '设置',  // 标题\n          'hc_test_setting_section_function',  // 调用方法，自定义输出\n          $option_group\n       );\n    \n       //设置字体颜色\n       add_settings_field(\n          'hc_test_color',  // 字段id\n          '字体颜色',  // 字段标题\n          'hc_test_color_function', // 字段对应函数方法\n          $option_group,  // 字段对应分组\n          $setting_section  // 字段对应设置选项\n       );\n    \n       //设置字体大小\n       add_settings_field(\n          'hc_test_size',\n          '字体大小',\n          'hc_test_size_function',\n          $option_group,\n          $setting_section\n       );\n    \n       //设置字体加粗\n       add_settings_field(\n          'hc_test_bold',\n          '字体加粗',\n          'hc_test_bold_function',\n          $option_group,\n          $setting_section\n       );\n    }\n    \n    function hc_test_bold_function() {\n       $hc_test_option = get_option( \"hc_test_option\" );\n       ?>\n       <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n       <?\n    }\n    \n    function hc_test_size_function() {\n       $hc_test_option = get_option( \"hc_test_option\" );\n       $size = $hc_test_option[\"size\"];\n       ?>\n       <select name=\"hc_test_option[size]\">\n          <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n          <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n          <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n          <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n          <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n       </select>\n       <?\n    }\n    \n    function hc_test_color_function() {\n       $hc_test_option = get_option( \"hc_test_option\" );\n       ?>\n       <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n       <?\n    }\n    \n    function hc_settings_page() {\n       ?>\n       <div class=\"wrap\">\n          <h2>插件顶级菜单</h2>\n          <form action=\"options.php\" method=\"post\">\n             <?\n             $option_group = \"hc_test_group\";\n    \n             //输出一些必要的字段，包括验证信息等\n             settings_fields( $option_group );\n    \n             //输出选项设置区域\n             do_settings_sections( $option_group );\n    \n             //输出按钮\n             submit_button();\n             ?>\n          </form>\n       </div>\n       <?\n    }\n    \n    \n    add_action( 'wp_head', 'hc_test_head_fun' );\n    \n    function hc_test_head_fun() {\n    \n       $hc_test_option = get_option( \"hc_test_option\" );\n    \n       $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n       ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n    }\n    \n\n#### 将插件改写成类的形式\n\n    #hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    \n    class hcsem_change_font_style {\n    \n       //声明类里面的属性，用 var 开头\n       var $icon_url = \"/images/icon.png\";\n       var $option_group = \"hc_test_group\";\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          //创建菜单\n          add_action( 'admin_menu', array( $this, 'hc_create_menu' ) );\n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //添加选项设置区域\n          $setting_section = \"hc_test_setting_section\";\n          add_settings_section(\n             $setting_section,\n             '',\n             '',\n             $this->option_group\n          );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             '字体颜色',\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             '字体大小',\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             '字体加粗',\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group,\n             $setting_section\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <?\n       }\n    \n       function hc_create_menu() {\n    \n          //创建顶级菜单\n          add_menu_page(\n             'HC的插件首页',\n             'HC的插件',\n             'manage_options',\n             'hc_test' ,\n             array( $this, 'hc_settings_page' ),\n             plugins_url( $this->icon_url, __FILE__ )\n          );\n       }\n    \n       function hc_settings_page() {\n          ?>\n          <div class=\"wrap\">\n             <h2>插件顶级菜单</h2>\n             <form action=\"options.php\" method=\"post\">\n                <?\n                //输出一些必要的字段，包括验证信息等\n                settings_fields( $this->option_group );\n    \n                //输出选项设置区域\n                do_settings_sections( $this->option_group );\n    \n                //输出按钮\n                submit_button();\n                ?>\n             </form>\n          </div>\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();\n    \n\n#### 将插件设置内容转移到wordpress设置里\n\n    # hc-test.php\n    \n    class hcsem_change_font_style {\n    \n       var $option_group = \"general\";  // general常规 writing撰写 reading阅读 discussion讨论 media多媒体 permalink固定链接\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             '字体颜色',\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             '字体大小',\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             '字体加粗',\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();\n    \n\n#### 调用ajax\n\n    # hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    class hcsem_change_font_style {\n    \n       //声明类里面的属性，用 var 开头\n       var $icon_url = \"/images/icon.png\";\n       var $option_group = \"hc_test_group\";\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          //创建菜单\n          add_action( 'admin_menu', array( $this, 'hc_create_menu' ) );\n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n    \n          //使用ajax校验信息\n          wp_enqueue_script( 'hc_test', plugins_url('js/hc_test.js', __FILE__), array('jquery') );\n          wp_localize_script( 'hc_test', 'ajax_object', array( 'ajax_url' => admin_url( 'admin-ajax.php' ) ) );\n    \n          add_action( 'wp_ajax_color_check_action' , array( $this, 'color_check_action_fun') );\n          add_action( 'wp_ajax_nopriv_hcsem_description' , array( $this, 'hcsem_description_fun') );\n       }\n    \n       function color_check_action_fun(){\n    \n          if( trim( $_POST['color'] ) != \"\" ){ echo \"ok\"; }\n          wp_die();\n       }\n    \n       function hcsem_description_fun() {\n    \n          echo \"hc的笔记本：\" . $_POST['description'];\n          wp_die();\n    \n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //添加选项设置区域\n          $setting_section = \"hc_test_setting_section\";\n          add_settings_section(\n             $setting_section,\n             '',\n             '',\n             $this->option_group\n          );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             '字体颜色',\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             '字体大小',\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             '字体加粗',\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group,\n             $setting_section\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <font id=\"error_color\"></font></div>\n          <?\n       }\n    \n       function hc_create_menu() {\n    \n          //创建顶级菜单\n          add_menu_page(\n             'HC的插件首页',\n             'HC的插件',\n             'manage_options',\n             'hc_test' ,\n             array( $this, 'hc_settings_page' ),\n             plugins_url( $this->icon_url, __FILE__ )\n          );\n       }\n    \n       function hc_settings_page() {\n          ?>\n          <div class=\"wrap\">\n             <h2>插件顶级菜单</h2>\n             <form action=\"options.php\" method=\"post\">\n                <?\n                //输出一些必要的字段，包括验证信息等\n                settings_fields( $this->option_group );\n    \n                //输出选项设置区域\n                do_settings_sections( $this->option_group );\n    \n                //输出按钮\n                submit_button();\n                ?>\n             </form>\n          </div>\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();\n    \n\n    # js/hc_test.js\n    jQuery(document).ready( function($) {\n       $(\"input[name='hc_test_option[color]']\").blur( function() {\n          $.ajax({\n             type: \"POST\",\n             data: \"color=\" + $(this).val() + \"&action=hc_color_check\",\n             url: ajax_object.ajax_url,\n             beforeSend: function() {\n                $('#error_color').html('校验中...'); \n             },\n             success: function( $data ) {\n                if( $data == 'ok'){\n                    $('#error_color').html('输入正确');  \n                } else {\n                    $('#error_color').html('颜色不能为空！'); \n                }\n             }\n          });\n       });\n    });\n    \n    \n    jQuery(document).ready( function($) {\n       $(\".description\").click( function() {\n          $.ajax({\n             type: \"POST\",\n             data: \"description=\" + $(this).text() + \"&action=hcsem_description\",\n             url: ajax_object.ajax_url,\n             success : function( $data ) {\n    \n                if( $data != \"0\" ) {\n                   $(\".description\").text( $data );\n                }\n             }\n          });\n       });\n    });\n    \n\n#### 实现插件翻译功能\n\n    .\n    ├── css\n    │   └── hc_copyrighy.css\n    ├── hc-test.php\n    ├── images\n    │   └── icon.png\n    ├── js\n    │   └── hc_test.js\n    └── languages\n        ├── zh_CN.mo\n        └── zh_CN.po\n    \n    \n\n    # hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    class hcsem_change_font_style {\n    \n       //声明类里面的属性，用 var 开头\n       var $icon_url = \"/images/icon.png\";\n       var $option_group = \"hc_test_group\";\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          //创建菜单\n          add_action( 'admin_menu', array( $this, 'hc_create_menu' ) );\n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n    \n          //使用ajax校验信息\n          wp_enqueue_script( 'hc_test', plugins_url('js/hc_test.js', __FILE__), array('jquery') );\n          wp_localize_script( 'hc_test', 'ajax_object', array( 'ajax_url' => admin_url( 'admin-ajax.php' ) ) );\n    \n          add_action( 'wp_ajax_color_check_action' , array( $this, 'color_check_action_fun') );\n          add_action( 'wp_ajax_nopriv_hcsem_description' , array( $this, 'hcsem_description_fun') );\n    \n          add_action( 'init', array( $this, 'hcsem_load_textdomain' ) );\n       }\n    \n       function hcsem_load_textdomain() {\n    \n          //加载 languages 目录下的翻译文件 zh_CN\n          $currentLocale = get_locale();\n    \n          if( !empty( $currentLocale ) ) {\n    \n             $moFile = dirname(__FILE__) . \"/languages/{$currentLocale}.mo\";\n    \n             if( @file_exists( $moFile ) && is_readable( $moFile ) ) load_textdomain( 'hc-test', $moFile );\n          }\n       }\n    \n       function color_check_action_fun(){\n    \n          if( trim( $_POST['color'] ) != \"\" ){ echo \"ok\"; }\n          wp_die();\n       }\n    \n       function hcsem_description_fun() {\n    \n          echo \"HC的笔记本：\" . $_POST['description'];\n          wp_die();\n    \n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //添加选项设置区域\n          $setting_section = \"hc_test_setting_section\";\n          add_settings_section(\n             $setting_section,\n             '',\n             '',\n             $this->option_group\n          );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             __( 'color', 'hc-test' ),\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             __( 'size', 'hc-test' ),\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             __( 'bold', 'hc-test' ),\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group,\n             $setting_section\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> <? _e( 'set bold', 'hc-test' ); ?>\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <font id=\"error_color\"></font></div>\n          <?\n       }\n    \n       function hc_create_menu() {\n    \n          //创建顶级菜单\n          add_menu_page(\n             'hc的插件首页',\n             'hc的插件',\n             'manage_options',\n             'hc_test' ,\n             array( $this, 'hc_settings_page' ),\n             plugins_url( $this->icon_url, __FILE__ )\n          );\n       }\n    \n       function hc_settings_page() {\n          ?>\n          <div class=\"wrap\">\n             <h2>插件顶级菜单</h2>\n             <form action=\"options.php\" method=\"post\">\n                <?\n                //输出一些必要的字段，包括验证信息等\n                settings_fields( $this->option_group );\n    \n                //输出选项设置区域\n                do_settings_sections( $this->option_group );\n    \n                //输出按钮\n                submit_button();\n                ?>\n             </form>\n          </div>\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();","source":"_posts/Wordpress插件开发基础入门.md","raw":"---\ntitle: Wordpress插件开发基础入门\ntags:\n  - php\nurl: 101.html\nid: 101\ncomments: false\ncategories:\n  - 后端\ndate: 2016-11-10 11:40:48\n---\n\n#### 创建插件\n\n    ├── hanchang-copyright\n    │   └── hanchang-copyright.php\n    \n    \n\n    # hanchang-copyright.php\n    <?php\n    /*\n    Plugin Name: hanchang-copyright\n    Plugin URI: http://www.zhuohc.com\n    Description: 在页脚显示一段版权信息\n    Version: 1.0\n    Author: hanchang\n    Author URI: http://www.zhuohc.com\n    License: GPLv2\n    */\n    \n\n#### 插件启用和停用初始化\n\n    # hanchang-copyright.php\n    <?php\n    /*\n    Plugin Name: hanchang-copyright\n    Plugin URI: http://www.zhuohc.com\n    Description: 在页脚显示一段版权信息\n    Version: 1.0\n    Author: hanchang\n    Author URI: http://www.zhuohc.com\n    License: GPLv2\n    */\n    \n    //定义插件启动时候调用的方法\n    register_activation_hook( __FILE__, 'hanchang_copyright_install');\n    \n    function hanchang_copyright_install() {\n    \n        //插件启动，添加一个默认的版权信息\n        update_option( \"hanchang_copyright_text\", \"<p style='color:red'>本站点所有文章均为原创，转载请注明出处！</p>\" );\n    \n    }\n    \n    //定义插件停用时候调用的方法\n    register_deactivation_hook( __FILE__, 'hanchang_copyright_deactivation');\n    \n    function hanchang_copyright_deactivation() {\n    \n        //插件停用，设置停用标识为1\n        update_option( \"hanchang_copyright_deactivation\", \"yes\" );\n    \n    }\n    \n\n#### 删除插件\n\n    .\n    ├── hanchang-copyright.php\n    └── uninstall.php # 删除插件执行的文件\n    \n\n    # uninstall.php\n    <?\n    // 如果 uninstall 不是从 WordPress 调用，则退出\n    if( !defined( 'WP_UNINSTALL_PLUGIN' ) )\n    exit();\n    \n    //删除插件创建的项目，以确保不占用数据库资源\n    delete_option( 'hanchang_copyright_deactivation' );\n    delete_option( 'hanchang_copyright_text' );\n    \n\n#### add_action\n\n    add_action(\"$tag钩子名称\", \"$function_to_do执行函数\", $priorrity执行优先级, $accepted_arga带参数函数的参数个数)\n    \n\n    # hanchang-copyright.php\n    \n    //为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\n    add_action( \"wp_footer\", \"hc_copyright_insert\" );\n    \n    function hc_copyright_insert(){\n    \n        //输出一段字符串\n        echo get_option( \"hc_copyright_text\" );\n    \n    }\n    \n    \n    add_action( \"wp_head\", \"hanchang_copyright_insert_new\" );\n    \n    function hanchang_copyright_insert_new() {\n        echo \"<script>alert(1);</script>\";\n    }\n    \n    add_action( 'save_post', 'save_post_meta', 10, 2 );\n    \n    function save_post_meta( $post_id, $post ) {\n    \n        update_post_meta( $post_id, \"save-time\", \"更新时间：\" . date(\"Y-m-d H:i:s\") );\n    \n    }\n    \n\n#### 常见钩子\n\n    init 加载初始化\n    wp_head 加载添加到head标签中的内容\n    wp_enqueue_scripts 加载css或者js文件\n    wp_foot 加载添加到底部内容\n    \n    save_post 添加保存文章\n    wp_trash_post 将文章添加到回收站\n    delete_post 将文章删除\n    \n    wp_insert_comment 插入评论\n    \n    user_register 用户注册\n    \n\n    # hanchang-copyright.php\n    <?php\n    /*\n    Plugin Name: hanchang-copyright\n    Plugin URI: http://www.zhuohc.com\n    Description: 在页脚显示一段版权信息\n    Version: 1.0\n    Author: hanchang\n    Author URI: http://www.zhuohc.com\n    License: GPLv2\n    */\n    \n    //定义插件启动时候调用的方法\n    register_activation_hook( __FILE__, 'hanchang_copyright_install');\n    \n    function hanchang_copyright_install() {\n    \n        //插件启动，添加一个默认的版权信息\n        update_option( \"hanchang_copyright_text\", \"<p style='color:red'>本站点所有文章均为原创，转载请注明出处！</p>\" );\n    \n    }\n    \n    //定义插件停用时候调用的方法\n    register_deactivation_hook( __FILE__, 'hanchang_copyright_deactivation');\n    \n    function hanchang_copyright_deactivation() {\n    \n        //插件停用，设置停用标识为1\n        update_option( \"hanchang_copyright_deactivation\", \"yes\" );\n    \n    }\n    \n    //为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\n    add_action( \"wp_footer\", \"hc_copyright_insert\" );\n    \n    function hc_copyright_insert(){\n    \n        //输出一段字符串\n        echo get_option( \"hc_copyright_text\" );\n    \n    }\n    \n    \n    add_action( \"wp_head\", \"hanchang_copyright_insert_new\" );\n    \n    function hanchang_copyright_insert_new() {\n        echo \"<script>alert(1);</script>\";\n    }\n    \n    add_action( 'save_post', 'save_post_meta', 10, 2 );\n    \n    function save_post_meta( $post_id, $post ) {\n    \n        update_post_meta( $post_id, \"save-time\", \"更新时间：\" . date(\"Y-m-d H:i:s\") );\n    \n    }\n    \n    \n    \n    //在输出内容之前，给页面管理添加摘要功能\n    add_action( 'init', 'hc_add_excerpts_to_pages' );\n    \n    function hc_add_excerpts_to_pages() {\n    \n        //给页面管理添加摘要的功能\n        add_post_type_support( 'page', array( 'excerpt' ) );\n    }\n    \n    //wp_head钩子\n    add_action('wp_head','hc_wp_head');\n    \n    function hc_wp_head() {\n    \n        //只有首页输出描述\n        if( is_home() ){ ?>\n            <meta name=\"description\" content=\"<? bloginfo('description'); ?>\" />\n        <? }\n    \n    }\n    \n    \n    //自定义引用样式表\n    function hc_enqueue_style() {\n        wp_enqueue_style( 'core', plugins_url('css/hc_copyrighy.css', __FILE__) , false );\n    }\n    \n    //自定义引用脚本文件\n    function hc_enqueue_script() {\n        wp_enqueue_script( 'my-js', plugins_url('js/hc_copyrighy.js', __FILE__), false );\n    }\n    \n    //引用文件的钩子\n    add_action( 'wp_enqueue_scripts', 'hc_enqueue_style', 5 );\n    add_action( 'wp_enqueue_scripts', 'hc_enqueue_script', 7 );\n    \n    //删除所有挂载在 wp_enqueue_scripts 钩子上的方法\n    remove_all_actions( 'wp_enqueue_scripts', 5 );\n    \n    //评论被添加的时候触发\n    add_action( 'wp_insert_comment', 'comment_inserted', 10, 2 );\n    \n    //移除 wp_insert_comment 钩子上的 comment_inserted 方法\n    remove_action( 'wp_insert_comment', 'comment_inserted', 10 );\n    \n    function comment_inserted($comment_id, $comment_object ) {\n    \n        //获取该评论所在文章的评论总数\n        $comments_count = wp_count_comments( $comment_object->comment_post_ID );\n    \n        $commentarr = array();\n        $commentarr['comment_ID'] = $comment_id;\n    \n        //修改评论的内容，在评论内容前加上 “第{$comments_count->total_comments}个评论：” 这么一段字符串\n        $commentarr['comment_content'] = \"第{$comments_count->total_comments}个评论：\" . $comment_object->comment_content;\n    \n        wp_update_comment( $commentarr );\n    \n    }\n    \n    \n    add_action( 'user_register', 'myplugin_registration_save', 10, 1 );\n    \n    function myplugin_registration_save( $user_id ) {\n    \n        //将新用户的个人说明，设置为注册时间\n        wp_update_user( array( 'ID' => $user_id, 'description' => \"注册时间：\" . date(\"Y-m-d H:i:s\") ) );\n    \n    }\n    ?>\n    \n\n#### 过滤器\n\n    add_filter($tag过滤器名称, $function_to_add需要添加的函数, $priority优先级, $acceptedargs添加的参数数量)\n    \n    \n\n    # hanchang-copyright.php\n    //一开始，我们设置一个变量\n    $value = \"hello\";\n    \n    //给名为 hc_filter 的过滤器，挂载一个 hc_filter_fun 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun 方法进行过滤\n    //add_filter( \"hc_filter\", \"hc_filter_fun\" );\n    \n    //给名为 hc_filter 的过滤器，再挂载一个 hc_filter_fun_add_time 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun、hc_filter_fun_add_time 两个方法进行过滤\n    //add_filter( \"hc_filter\", \"hc_filter_fun_add_time\" );\n    \n    //对 $value 值使用名为 hc_filter 的过滤器进行过滤，这个时候，由于 hc_filter 过滤器只挂载了 hc_filter_fun 方法，因此，只使用 hc_filter_fun 方法 过滤了一次，并且返回给 $myvar 变量\n    //$myvar = apply_filters( \"hc_filter\", $value );\n    \n    add_filter( \"the_content\", \"hc_filter_fun\" );\n    add_filter( \"the_content\", \"hc_filter_fun_add_time\" );\n    \n\n#### 带参数的过滤器\n\n    # hanchang-copyright.php\n    function suppress_if_blurb( $title, $id = null ) {\n    \n        if ( in_category('wpcj', $id ) ) {\n            return '不显示标题';\n        }\n    \n        return $title . \"...\";\n    }\n    \n    //对 the_title 过滤器挂载一个 suppress_if_blurb 方法，优先级为10，传递的参数有2个\n    add_filter( 'the_title', 'suppress_if_blurb', 10, 2 );\n    \n\n#### 常见过滤器\n\n    the_content 文章内容 \n    content_save_pre 文章保存前\n    the_title 文章标题\n    wp_handle_upload_prefilter 上传文件之前\n    \n\n#### 创建菜单\n\n    add_menu_page  # 添加菜单\n    add_submenu_page  # 添加子菜单\n    \n\n    # hanchang-copyright.php\n    // admin_menu钩子挂载创建菜单方法\n    add_action( 'admin_menu', 'hc_create_menu' );\n    function hc_create_menu() {\n    \n        // 创建顶级菜单\n        add_menu_page(\n            'Hanchang的插件首页', // 菜单title标题\n            'hanchang-copyright',  // 菜单名称，显示在后台管理页面侧边栏\n            'manage_options', // 浏览插件所需要的权限=管理员权限\n            'hanchang_copyright' ,  // 菜单别名，不能与其他插件冲突\n            'hanchang_settings_page',  // 菜单需要显示的页面，调用的哪个方法\n            plugins_url( '/images/icon.png', __FILE__ )  // 调用图标\n        );\n    \n        // 创建子菜单\n        add_submenu_page(\n            'hanchang_copyright',  // 父级菜单别名\n            '关于HC的插件',  // 菜单title标题\n            '关于',  //  菜单名称，显示在后台管理页面侧边栏\n            'manage_options',  // 浏览插件所需要的权限=管理员权限\n            'hc_copyright_about',  // 菜单别名，不能与其他插件冲突\n            'hc_create_submenu_menu'  // 调用方法\n        );\n    }\n    \n    function hanchang_settings_page() {\n        ?>\n        <h2>插件顶级菜单</h2>\n        <?\n    }\n    \n    function hc_create_submenu_menu() {\n    \n        ?>\n        <h2>子菜单</h2>\n        <?\n    }\n    \n\n#开发 小工具\n\n    #hanchang-copyright.php\n    // 使用 widgets_init 动作钩子来执行自定义的函数\n    add_action( 'widgets_init', 'hc_register_widgets' );\n    \n    // 注册小工具\n    function hc_register_widgets() {\n        register_widget( 'hc_widget_info' );\n    }\n    \n    //使用 WP_Widget 类来创建小工具\n    class hc_widget_info extends WP_Widget {\n    \n        //构造函数\n        public function __construct() {\n            $widget_ops = array(\n                'classname' => 'hc_widget_info',\n                'description' => '显示作者的个人信息'\n            );\n            $this->WP_Widget( '显示作者个人信息', '作者的小工具', $widget_ops );\n        }\n    \n        //小工具管理界面\n        public function form( $instance ) {\n    \n            $defaults = array( 'title' => '作者的个人信息', 'xingming' => '作者', 'book' => '《作者》' );\n            $instance = wp_parse_args( (array) $instance, $defaults );\n    \n            $title = $instance['title'];\n            $xingming = $instance['xingming'];\n            $book = $instance['book'];\n            ?>\n            <p>标题: <input class=\"widefat\" name=\"<?php echo $this->get_field_name( 'title' ); ?>\" type=\"text\" value=\"<?php echo esc_attr( $title ); ?>\" /></p>\n            <p>姓名: <input class=\"widefat\" name=\"<?php echo $this->get_field_name( 'xingming' ); ?> \"type=\"text\" value=\"<?php echo esc_attr( $xingming ); ?> \" /></p>\n            <p>著作: <textarea class=\"widefat\" name=\" <?php echo $this->get_field_name( 'book' ); ?> \" /><?php echo esc_attr( $book ); ?></textarea> </p>\n            <?php\n        }\n    \n        //保存小工具设置\n        public function update( $new_instance, $old_instance ) {\n    \n            $instance = $old_instance;\n    \n            $instance['title'] = strip_tags( trim( $new_instance['title'] ) );\n            $instance['xingming'] = strip_tags( trim(  $new_instance['xingming'] ) );\n            $instance['book'] = strip_tags( trim( $new_instance['book'] ) );\n            return $instance;\n        }\n    \n        //显示小工具\n        public function widget( $args, $instance ) {\n    \n            extract( $args );\n    \n            $title = apply_filters( 'widget_title', $instance['title'] );\n            $xingming = empty( $instance['xingming'] ) ? ' ' : $instance['xingming'];\n            $book = empty( $instance['book'] ) ? ' ' : $instance['book'];\n    \n            echo '<p> 标题: ' . $title . '</p>';\n            echo '<p> 姓名: ' . $xingming . '</p>';\n            echo '<p> 著作: ' . $book . '</p>';\n        }\n    }\n    \n\n#### 添加元数据框\n\n    # hanchang-copyright.php\n    /**\n     * 添加一个元数据框到 post 和 page 的管理界面中\n     */\n    function myplugin_add_meta_box() {\n    \n        $screens = array( 'post', 'page' );\n    \n        add_meta_box(\n            'myplugin_sectionid',  // 元数据框的html代码中的id值\n            '转载自',  // 元数据框标题\n            'myplugin_meta_box_callback',  // 回调函数名称，输出元数据框中的内容\n            $screens  // 元数据框需要添加在哪个分类内的（文章或者页面）\n        );\n    }\n    \n    //需要给 add_meta_boxes 钩子，挂载一个自定义的方法\n    add_action( 'add_meta_boxes', 'myplugin_add_meta_box' );\n    \n    /**\n     * 元数据框展示代码\n     */\n    function myplugin_meta_box_callback( $post ) {\n    \n        // 添加一个验证信息，这个在保存元数据的时候用到\n        wp_nonce_field( 'myplugin_save_meta_box_data', 'myplugin_meta_box_nonce' );\n    \n        /*\n         * 输出元数据信息\n         */\n        $value = get_post_meta( $post->ID, '_zzurl', true );\n    \n        echo '<label for=\"myplugin_new_field\">';\n        _e( '本文章转载自：' );\n        echo '</label> ';\n        echo '<input type=\"text\" id=\"_zzurl\" name=\"_zzurl\" value=\"' . esc_attr( $value ) . '\" size=\"25\" />';\n    }\n    \n    function myplugin_save_meta_box_data( $post_id ) {\n    \n        //验证是否为有效信息\n        if ( ! isset( $_POST['myplugin_meta_box_nonce'] ) ) {\n            return;\n        }\n    \n        if ( ! wp_verify_nonce( $_POST['myplugin_meta_box_nonce'], 'myplugin_save_meta_box_data' ) ) {\n            return;\n        }\n    \n        if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {\n            return;\n        }\n    \n        // Check the user's permissions.\n        if ( isset( $_POST['post_type'] ) && 'page' == $_POST['post_type'] ) {\n    \n            if ( ! current_user_can( 'edit_page', $post_id ) ) {\n                return;\n            }\n    \n        } else {\n    \n            if ( ! current_user_can( 'edit_post', $post_id ) ) {\n                return;\n            }\n        }\n    \n        if ( ! isset( $_POST['_zzurl'] ) ) {\n            return;\n        }\n    \n        $my_data = sanitize_text_field( $_POST['_zzurl'] );\n    \n        update_post_meta( $post_id, '_zzurl', $my_data );\n    }\n    \n    //文章保存的时候，会调用 save_post 钩子，因此我们要借助这个钩子来保存元数据框内的数据\n    add_action( 'save_post', 'myplugin_save_meta_box_data' );\n    \n\n#### 后台常见css样式表\n\n    # copyright.php\n    function hanchang_settings_page() {\n        ?>\n        <div class=\"wrap\">\n            <h2>插件顶级菜单</h2>\n            <div id=\"message\" class=\"updated\">设置保存成功</div>\n            <div id=\"message\" class=\"error\">保存出现错误</div>\n            <p>\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-primary\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-secondary\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-large\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-small\" />\n                <input type=\"submit\" name=\"Save\" value=\"保存设置\" class=\"button button-hero\" />\n            </p>\n            <p>\n                <a href=\"#\">搜索</a>\n                <a href=\"#\" class=\"button\">搜索</a>\n                <a href=\"#\" class=\"button button-primary\">搜索</a>\n                <a href=\"#\" class=\"button button-secondary\">搜索</a>\n                <a href=\"#\" class=\"button button-large\">搜索</a>\n                <a href=\"#\" class=\"button button-small\">搜索</a>\n                <a href=\"#\" class=\"button button-hero\">搜索</a>\n            </p>\n    \n            <form method=\"POST\" action=\"\">\n                <table class=\"form-table\">\n                    <tr valign=\"top\">\n                        <th><label for=\"xingming\">姓名：</label></th>\n                        <td><input id=\"xingming\" name=\"xingming\" /></td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"shenfen\">身份：</label></th>\n                        <td>\n                            <select name=\"shenfen\">\n                                <option value=\"在校\">在校</option>\n                                <option value=\"毕业\">毕业</option>\n                            </select>\n                        </td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"tongyi\">同意注册</label></th>\n                        <td><input type=\"checkbox\" name=\"tongyi\" /></td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"xingbie\">性别</label></th>\n                        <td>\n                            <input type=\"radio\" name=\"xingbie\" value=\"男\" /> 男\n                            <input type=\"radio\" name=\"xingbie\" value=\"女\" /> 女\n                        </td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <th><label for=\"beizhu\">备注</label></th>\n                        <td><textarea name=\"beizhu\"></textarea></td>\n                    </tr>\n                    <tr valign=\"top\">\n                        <td>\n                            <input type=\"submit\" name=\"save\" value=\"保存\" class=\"button-primary\" />\n                            <input type=\"submit\" name=\"reset\" value=\"重置\" class=\"button-secondary\" />\n                        </td>\n                    </tr>\n                </table>\n            </form>\n    \n            <table class=\"widefat striped\">\n                <thead>\n                <tr>\n                    <th>序号</th>\n                    <th>姓名</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td>1</td>\n                    <td>黄聪</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>黄聪</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td>黄聪</td>\n                </tr>\n                </tbody>\n                <tfoot>\n                <tr>\n                    <th>序号</th>\n                    <th>姓名</th>\n                </tr>\n                </tfoot>\n            </table>\n    \n            <div class=\"tablenav\">\n                <div class=\"tablenav-pages\">\n                    <span class=\"displaying-num\">第1页，共458页</span>\n                    <span class=\"page-numbers current\">1</span>\n                    <a href=\"#\" class=\"page-numbers\">2</a>\n                    <a href=\"#\" class=\"page-numbers\">3</a>\n                    <a href=\"#\" class=\"page-numbers\">4</a>\n                    <a href=\"#\" class=\"next page-numbers\">»</a>\n                </div>\n            </div>\n        </div>\n        <?\n    }\n    \n\n#### 保存插件设置到数据库中\n\n    ├── hc-test\n    │   ├── css\n    │   ├── hc-test.php\n    │   ├── images\n    │   └── js\n    \n    \n\n    hc-test.php\n    \n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    //定义插件启动时候调用的方法\n    register_activation_hook( __FILE__, 'hc_test_install');\n    \n    function hc_test_install() {\n    \n       global $wpdb;\n    \n       if( $wpdb->get_var( \"SHOW TABLES LIKE '{$wpdb->prefix}test'\" ) != \"{$wpdb->prefix}test\" ) \n       {\n          $sql = \"CREATE TABLE IF NOT EXISTS `{$wpdb->prefix}test` (\n               `id` int(11) NOT NULL auto_increment COMMENT '编号',\n               `color` varchar(10) DEFAULT '' COMMENT '字体颜色',\n               `size`  varchar(10) DEFAULT '' COMMENT '字体大小',\n               PRIMARY KEY  (`id`)\n             ) DEFAULT CHARSET=utf8 AUTO_INCREMENT=0;\";\n          $wpdb->query( $sql );\n    \n          $sql = \"REPLACE INTO `{$wpdb->prefix}test` VALUES (1, '#FF0000','20');\";\n          $wpdb->query( $sql );\n       }\n    }\n    \n    add_action( 'admin_menu', 'hc_test_create_menu' );\n    \n    function hc_test_create_menu() {\n    \n       //创建顶级菜单\n       add_menu_page( \n          'HC-TEST', \n          'HC的插件',\n          'manage_options', \n          'hc_test' ,\n          'hc_settings_page',\n          plugins_url( '/images/icon.png', __FILE__ )\n       );\n    }\n    \n    function hc_settings_page() {\n    \n       global $wpdb;\n    \n       //当提交了，并且验证信息正确\n       if( !empty( $_POST ) && check_admin_referer( 'hc_test_nonce' ) ) {\n    \n          //更新设置\n          update_option( 'hc_test_bold', $_POST['hc_test_bold'] );\n    \n          $wpdb->update( \"{$wpdb->prefix}test\", array( 'color' => $_POST['color'], 'size' => $_POST['size'] ), array( 'id' => 1 ) );\n          ?>\n          <div id=\"message\" class=\"updated\">\n             <p><strong>保存成功！</strong></p>\n          </div>\n          <?\n       }\n    \n       $sql = \"SELECT * FROM `{$wpdb->prefix}test`\";\n       $row = $wpdb->get_row( $sql, ARRAY_A );\n    \n       $color = $row['color'];\n       $size = $row['size'];\n       ?>\n       <div class=\"wrap\">\n          <h2>插件顶级菜单</h2>\n          <form action=\"\" method=\"post\">\n             <p><label for=\"color\">字体颜色：</label><input type=\"text\" name=\"color\" value=\"<?php echo $color; ?>\" /></p>\n             <p><label for=\"size\">字体大小：</label>\n             <select name=\"size\">\n                <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n                <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n                <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n                <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n                <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n             </select></p>\n             <p><label for=\"hc_test_obold\">字体加粗：</label><input name=\"hc_test_bold\" type=\"checkbox\"  value=\"1\" <? checked( 1, get_option( 'hc_test_bold' ) ); ?> /> 加粗</p>\n             <p><input type=\"submit\" name=\"submit\" value=\"保存设置\" /></p>\n             <?\n                //输出一个验证信息\n                wp_nonce_field('hc_test_nonce');\n             ?>\n          </form>\n       </div>\n       <?\n    }\n    \n    add_action( 'wp_head', 'hc_test_head_fun' );\n    \n    function hc_test_head_fun() {\n    \n       global $wpdb;\n    \n       //获取自定义数据库中的设置\n       $sql = \"SELECT * FROM `{$wpdb->prefix}test`\";\n       $row = $wpdb->get_row( $sql, ARRAY_A );\n    \n       //获取options表中的设置选项\n       $bold = get_option( \"hc_test_bold\" ) == 1 ? \"bold\" : \"normal\";\n    \n       ?><style>body{color:<? echo $row[\"color\"] ?>;font-size:<? echo $row[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n    }\n    \n\n#### 使用wordpress内置api设置插件属性\n\n    # hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    add_action( 'admin_menu', 'test_create_menu' );\n    \n    function test_create_menu() {\n    \n       //创建顶级菜单\n       add_menu_page(\n          'HC的插件首页',\n          'HC的插件',\n          'manage_options',\n          'hc_test' ,\n          'hc_settings_page',\n          plugins_url( '/images/icon.png', __FILE__ )\n       );\n    }\n    \n    add_action( 'admin_init', 'register_hc_test_setting' );\n    \n    //使用register_setting()注册要存储的字段\n    function register_hc_test_setting() {\n    \n       //注册一个选项，用于装载所有插件设置项\n       $option_group = \"hc_test_group\";\n       register_setting( $option_group, 'hc_test_option' );\n    \n       //添加选项设置区域\n       $setting_section = \"hc_test_setting_section\";\n       add_settings_section(\n          $setting_section,\n          '设置',  // 标题\n          'hc_test_setting_section_function',  // 调用方法，自定义输出\n          $option_group\n       );\n    \n       //设置字体颜色\n       add_settings_field(\n          'hc_test_color',  // 字段id\n          '字体颜色',  // 字段标题\n          'hc_test_color_function', // 字段对应函数方法\n          $option_group,  // 字段对应分组\n          $setting_section  // 字段对应设置选项\n       );\n    \n       //设置字体大小\n       add_settings_field(\n          'hc_test_size',\n          '字体大小',\n          'hc_test_size_function',\n          $option_group,\n          $setting_section\n       );\n    \n       //设置字体加粗\n       add_settings_field(\n          'hc_test_bold',\n          '字体加粗',\n          'hc_test_bold_function',\n          $option_group,\n          $setting_section\n       );\n    }\n    \n    function hc_test_bold_function() {\n       $hc_test_option = get_option( \"hc_test_option\" );\n       ?>\n       <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n       <?\n    }\n    \n    function hc_test_size_function() {\n       $hc_test_option = get_option( \"hc_test_option\" );\n       $size = $hc_test_option[\"size\"];\n       ?>\n       <select name=\"hc_test_option[size]\">\n          <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n          <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n          <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n          <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n          <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n       </select>\n       <?\n    }\n    \n    function hc_test_color_function() {\n       $hc_test_option = get_option( \"hc_test_option\" );\n       ?>\n       <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n       <?\n    }\n    \n    function hc_settings_page() {\n       ?>\n       <div class=\"wrap\">\n          <h2>插件顶级菜单</h2>\n          <form action=\"options.php\" method=\"post\">\n             <?\n             $option_group = \"hc_test_group\";\n    \n             //输出一些必要的字段，包括验证信息等\n             settings_fields( $option_group );\n    \n             //输出选项设置区域\n             do_settings_sections( $option_group );\n    \n             //输出按钮\n             submit_button();\n             ?>\n          </form>\n       </div>\n       <?\n    }\n    \n    \n    add_action( 'wp_head', 'hc_test_head_fun' );\n    \n    function hc_test_head_fun() {\n    \n       $hc_test_option = get_option( \"hc_test_option\" );\n    \n       $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n       ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n    }\n    \n\n#### 将插件改写成类的形式\n\n    #hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    \n    class hcsem_change_font_style {\n    \n       //声明类里面的属性，用 var 开头\n       var $icon_url = \"/images/icon.png\";\n       var $option_group = \"hc_test_group\";\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          //创建菜单\n          add_action( 'admin_menu', array( $this, 'hc_create_menu' ) );\n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //添加选项设置区域\n          $setting_section = \"hc_test_setting_section\";\n          add_settings_section(\n             $setting_section,\n             '',\n             '',\n             $this->option_group\n          );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             '字体颜色',\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             '字体大小',\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             '字体加粗',\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group,\n             $setting_section\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <?\n       }\n    \n       function hc_create_menu() {\n    \n          //创建顶级菜单\n          add_menu_page(\n             'HC的插件首页',\n             'HC的插件',\n             'manage_options',\n             'hc_test' ,\n             array( $this, 'hc_settings_page' ),\n             plugins_url( $this->icon_url, __FILE__ )\n          );\n       }\n    \n       function hc_settings_page() {\n          ?>\n          <div class=\"wrap\">\n             <h2>插件顶级菜单</h2>\n             <form action=\"options.php\" method=\"post\">\n                <?\n                //输出一些必要的字段，包括验证信息等\n                settings_fields( $this->option_group );\n    \n                //输出选项设置区域\n                do_settings_sections( $this->option_group );\n    \n                //输出按钮\n                submit_button();\n                ?>\n             </form>\n          </div>\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();\n    \n\n#### 将插件设置内容转移到wordpress设置里\n\n    # hc-test.php\n    \n    class hcsem_change_font_style {\n    \n       var $option_group = \"general\";  // general常规 writing撰写 reading阅读 discussion讨论 media多媒体 permalink固定链接\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             '字体颜色',\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             '字体大小',\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             '字体加粗',\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();\n    \n\n#### 调用ajax\n\n    # hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    class hcsem_change_font_style {\n    \n       //声明类里面的属性，用 var 开头\n       var $icon_url = \"/images/icon.png\";\n       var $option_group = \"hc_test_group\";\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          //创建菜单\n          add_action( 'admin_menu', array( $this, 'hc_create_menu' ) );\n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n    \n          //使用ajax校验信息\n          wp_enqueue_script( 'hc_test', plugins_url('js/hc_test.js', __FILE__), array('jquery') );\n          wp_localize_script( 'hc_test', 'ajax_object', array( 'ajax_url' => admin_url( 'admin-ajax.php' ) ) );\n    \n          add_action( 'wp_ajax_color_check_action' , array( $this, 'color_check_action_fun') );\n          add_action( 'wp_ajax_nopriv_hcsem_description' , array( $this, 'hcsem_description_fun') );\n       }\n    \n       function color_check_action_fun(){\n    \n          if( trim( $_POST['color'] ) != \"\" ){ echo \"ok\"; }\n          wp_die();\n       }\n    \n       function hcsem_description_fun() {\n    \n          echo \"hc的笔记本：\" . $_POST['description'];\n          wp_die();\n    \n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //添加选项设置区域\n          $setting_section = \"hc_test_setting_section\";\n          add_settings_section(\n             $setting_section,\n             '',\n             '',\n             $this->option_group\n          );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             '字体颜色',\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             '字体大小',\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             '字体加粗',\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group,\n             $setting_section\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> 加粗\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <font id=\"error_color\"></font></div>\n          <?\n       }\n    \n       function hc_create_menu() {\n    \n          //创建顶级菜单\n          add_menu_page(\n             'HC的插件首页',\n             'HC的插件',\n             'manage_options',\n             'hc_test' ,\n             array( $this, 'hc_settings_page' ),\n             plugins_url( $this->icon_url, __FILE__ )\n          );\n       }\n    \n       function hc_settings_page() {\n          ?>\n          <div class=\"wrap\">\n             <h2>插件顶级菜单</h2>\n             <form action=\"options.php\" method=\"post\">\n                <?\n                //输出一些必要的字段，包括验证信息等\n                settings_fields( $this->option_group );\n    \n                //输出选项设置区域\n                do_settings_sections( $this->option_group );\n    \n                //输出按钮\n                submit_button();\n                ?>\n             </form>\n          </div>\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();\n    \n\n    # js/hc_test.js\n    jQuery(document).ready( function($) {\n       $(\"input[name='hc_test_option[color]']\").blur( function() {\n          $.ajax({\n             type: \"POST\",\n             data: \"color=\" + $(this).val() + \"&action=hc_color_check\",\n             url: ajax_object.ajax_url,\n             beforeSend: function() {\n                $('#error_color').html('校验中...'); \n             },\n             success: function( $data ) {\n                if( $data == 'ok'){\n                    $('#error_color').html('输入正确');  \n                } else {\n                    $('#error_color').html('颜色不能为空！'); \n                }\n             }\n          });\n       });\n    });\n    \n    \n    jQuery(document).ready( function($) {\n       $(\".description\").click( function() {\n          $.ajax({\n             type: \"POST\",\n             data: \"description=\" + $(this).text() + \"&action=hcsem_description\",\n             url: ajax_object.ajax_url,\n             success : function( $data ) {\n    \n                if( $data != \"0\" ) {\n                   $(\".description\").text( $data );\n                }\n             }\n          });\n       });\n    });\n    \n\n#### 实现插件翻译功能\n\n    .\n    ├── css\n    │   └── hc_copyrighy.css\n    ├── hc-test.php\n    ├── images\n    │   └── icon.png\n    ├── js\n    │   └── hc_test.js\n    └── languages\n        ├── zh_CN.mo\n        └── zh_CN.po\n    \n    \n\n    # hc-test.php\n    <?php\n    /*\n    Plugin Name: hc-test\n    Plugin URI: http://zhuohc.com\n    Description: 测试插件\n    Version: 1.0\n    Author: hc\n    Author URI: http://zhuohc.com\n    License: GPLv2\n    */\n    \n    //设置时区为 亚洲/上海\n    date_default_timezone_set('Asia/Shanghai');\n    \n    class hcsem_change_font_style {\n    \n       //声明类里面的属性，用 var 开头\n       var $icon_url = \"/images/icon.png\";\n       var $option_group = \"hc_test_group\";\n    \n       //构造方法，创建类的时候调用\n       function hcsem_change_font_style() {\n    \n          //创建菜单\n          add_action( 'admin_menu', array( $this, 'hc_create_menu' ) );\n          add_action( 'admin_init', array( $this, 'register_hc_test_setting' ) );\n          add_action( 'wp_head',  array( $this,  'hc_test_head_fun' ) );\n    \n          //使用ajax校验信息\n          wp_enqueue_script( 'hc_test', plugins_url('js/hc_test.js', __FILE__), array('jquery') );\n          wp_localize_script( 'hc_test', 'ajax_object', array( 'ajax_url' => admin_url( 'admin-ajax.php' ) ) );\n    \n          add_action( 'wp_ajax_color_check_action' , array( $this, 'color_check_action_fun') );\n          add_action( 'wp_ajax_nopriv_hcsem_description' , array( $this, 'hcsem_description_fun') );\n    \n          add_action( 'init', array( $this, 'hcsem_load_textdomain' ) );\n       }\n    \n       function hcsem_load_textdomain() {\n    \n          //加载 languages 目录下的翻译文件 zh_CN\n          $currentLocale = get_locale();\n    \n          if( !empty( $currentLocale ) ) {\n    \n             $moFile = dirname(__FILE__) . \"/languages/{$currentLocale}.mo\";\n    \n             if( @file_exists( $moFile ) && is_readable( $moFile ) ) load_textdomain( 'hc-test', $moFile );\n          }\n       }\n    \n       function color_check_action_fun(){\n    \n          if( trim( $_POST['color'] ) != \"\" ){ echo \"ok\"; }\n          wp_die();\n       }\n    \n       function hcsem_description_fun() {\n    \n          echo \"HC的笔记本：\" . $_POST['description'];\n          wp_die();\n    \n       }\n    \n       //使用register_setting()注册要存储的字段\n       function register_hc_test_setting() {\n    \n          //注册一个选项，用于装载所有插件设置项\n          register_setting( $this->option_group, 'hc_test_option' );\n    \n          //添加选项设置区域\n          $setting_section = \"hc_test_setting_section\";\n          add_settings_section(\n             $setting_section,\n             '',\n             '',\n             $this->option_group\n          );\n    \n          //设置字体颜色\n          add_settings_field(\n             'hc_test_color',\n             __( 'color', 'hc-test' ),\n             array( $this, 'hc_test_color_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体大小\n          add_settings_field(\n             'hc_test_size',\n             __( 'size', 'hc-test' ),\n             array( $this, 'hc_test_size_function' ),\n             $this->option_group,\n             $setting_section\n          );\n    \n          //设置字体加粗\n          add_settings_field(\n             'hc_test_bold',\n             __( 'bold', 'hc-test' ),\n             array( $this, 'hc_test_bold_function' ),\n             $this->option_group,\n             $setting_section\n          );\n       }\n    \n       function hc_test_bold_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name=\"hc_test_option[bold]\" type=\"checkbox\"  value=\"1\" <? checked( 1, $hc_test_option[\"bold\"] ); ?> /> <? _e( 'set bold', 'hc-test' ); ?>\n          <?\n       }\n    \n       function hc_test_size_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          $size = $hc_test_option[\"size\"];\n          ?>\n          <select name=\"hc_test_option[size]\">\n             <option value=\"12\" <? selected( '12', $size ); ?>>12</option>\n             <option value=\"14\" <? selected( '14', $size ); ?>>14</option>\n             <option value=\"16\" <? selected( '16', $size ); ?>>16</option>\n             <option value=\"18\" <? selected( '18', $size ); ?>>18</option>\n             <option value=\"20\" <? selected( '20', $size ); ?>>20</option>\n          </select>\n          <?\n       }\n    \n       function hc_test_color_function() {\n          $hc_test_option = get_option( \"hc_test_option\" );\n          ?>\n          <input name='hc_test_option[color]' type='text' value='<? echo $hc_test_option[\"color\"]; ?>' />\n          <font id=\"error_color\"></font></div>\n          <?\n       }\n    \n       function hc_create_menu() {\n    \n          //创建顶级菜单\n          add_menu_page(\n             'hc的插件首页',\n             'hc的插件',\n             'manage_options',\n             'hc_test' ,\n             array( $this, 'hc_settings_page' ),\n             plugins_url( $this->icon_url, __FILE__ )\n          );\n       }\n    \n       function hc_settings_page() {\n          ?>\n          <div class=\"wrap\">\n             <h2>插件顶级菜单</h2>\n             <form action=\"options.php\" method=\"post\">\n                <?\n                //输出一些必要的字段，包括验证信息等\n                settings_fields( $this->option_group );\n    \n                //输出选项设置区域\n                do_settings_sections( $this->option_group );\n    \n                //输出按钮\n                submit_button();\n                ?>\n             </form>\n          </div>\n          <?\n       }\n    \n       function hc_test_head_fun() {\n    \n          $hc_test_option = get_option( \"hc_test_option\" );\n    \n          $bold = $hc_test_option[\"bold\"] == 1 ? \"bold\" : \"normal\";\n          ?><style>body{color:<? echo $hc_test_option[\"color\"] ?>;font-size:<? echo $hc_test_option[\"size\"] ?>px;font-weight:<? echo $bold; ?>;}</style><?\n       }\n    }\n    \n    new hcsem_change_font_style();","slug":"Wordpress插件开发基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwtn004zh3a4rvr09t1u","content":"<h4 id=\"创建插件\"><a href=\"#创建插件\" class=\"headerlink\" title=\"创建插件\"></a>创建插件</h4><pre><code>├── hanchang-copyright\n│   └── hanchang-copyright.php\n\n\n\n# hanchang-copyright.php\n&lt;?php\n/*\nPlugin Name: hanchang-copyright\nPlugin URI: http://www.zhuohc.com\nDescription: 在页脚显示一段版权信息\nVersion: 1.0\nAuthor: hanchang\nAuthor URI: http://www.zhuohc.com\nLicense: GPLv2\n*/</code></pre><h4 id=\"插件启用和停用初始化\"><a href=\"#插件启用和停用初始化\" class=\"headerlink\" title=\"插件启用和停用初始化\"></a>插件启用和停用初始化</h4><pre><code># hanchang-copyright.php\n&lt;?php\n/*\nPlugin Name: hanchang-copyright\nPlugin URI: http://www.zhuohc.com\nDescription: 在页脚显示一段版权信息\nVersion: 1.0\nAuthor: hanchang\nAuthor URI: http://www.zhuohc.com\nLicense: GPLv2\n*/\n\n//定义插件启动时候调用的方法\nregister_activation_hook( __FILE__, &apos;hanchang_copyright_install&apos;);\n\nfunction hanchang_copyright_install() {\n\n    //插件启动，添加一个默认的版权信息\n    update_option( &quot;hanchang_copyright_text&quot;, &quot;&lt;p style=&apos;color:red&apos;&gt;本站点所有文章均为原创，转载请注明出处！&lt;/p&gt;&quot; );\n\n}\n\n//定义插件停用时候调用的方法\nregister_deactivation_hook( __FILE__, &apos;hanchang_copyright_deactivation&apos;);\n\nfunction hanchang_copyright_deactivation() {\n\n    //插件停用，设置停用标识为1\n    update_option( &quot;hanchang_copyright_deactivation&quot;, &quot;yes&quot; );\n\n}</code></pre><h4 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h4><pre><code>.\n├── hanchang-copyright.php\n└── uninstall.php # 删除插件执行的文件\n\n\n# uninstall.php\n&lt;?\n// 如果 uninstall 不是从 WordPress 调用，则退出\nif( !defined( &apos;WP_UNINSTALL_PLUGIN&apos; ) )\nexit();\n\n//删除插件创建的项目，以确保不占用数据库资源\ndelete_option( &apos;hanchang_copyright_deactivation&apos; );\ndelete_option( &apos;hanchang_copyright_text&apos; );</code></pre><h4 id=\"add-action\"><a href=\"#add-action\" class=\"headerlink\" title=\"add_action\"></a>add_action</h4><pre><code>add_action(&quot;$tag钩子名称&quot;, &quot;$function_to_do执行函数&quot;, $priorrity执行优先级, $accepted_arga带参数函数的参数个数)\n\n\n# hanchang-copyright.php\n\n//为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\nadd_action( &quot;wp_footer&quot;, &quot;hc_copyright_insert&quot; );\n\nfunction hc_copyright_insert(){\n\n    //输出一段字符串\n    echo get_option( &quot;hc_copyright_text&quot; );\n\n}\n\n\nadd_action( &quot;wp_head&quot;, &quot;hanchang_copyright_insert_new&quot; );\n\nfunction hanchang_copyright_insert_new() {\n    echo &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;;\n}\n\nadd_action( &apos;save_post&apos;, &apos;save_post_meta&apos;, 10, 2 );\n\nfunction save_post_meta( $post_id, $post ) {\n\n    update_post_meta( $post_id, &quot;save-time&quot;, &quot;更新时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) );\n\n}</code></pre><h4 id=\"常见钩子\"><a href=\"#常见钩子\" class=\"headerlink\" title=\"常见钩子\"></a>常见钩子</h4><pre><code>init 加载初始化\nwp_head 加载添加到head标签中的内容\nwp_enqueue_scripts 加载css或者js文件\nwp_foot 加载添加到底部内容\n\nsave_post 添加保存文章\nwp_trash_post 将文章添加到回收站\ndelete_post 将文章删除\n\nwp_insert_comment 插入评论\n\nuser_register 用户注册\n\n\n# hanchang-copyright.php\n&lt;?php\n/*\nPlugin Name: hanchang-copyright\nPlugin URI: http://www.zhuohc.com\nDescription: 在页脚显示一段版权信息\nVersion: 1.0\nAuthor: hanchang\nAuthor URI: http://www.zhuohc.com\nLicense: GPLv2\n*/\n\n//定义插件启动时候调用的方法\nregister_activation_hook( __FILE__, &apos;hanchang_copyright_install&apos;);\n\nfunction hanchang_copyright_install() {\n\n    //插件启动，添加一个默认的版权信息\n    update_option( &quot;hanchang_copyright_text&quot;, &quot;&lt;p style=&apos;color:red&apos;&gt;本站点所有文章均为原创，转载请注明出处！&lt;/p&gt;&quot; );\n\n}\n\n//定义插件停用时候调用的方法\nregister_deactivation_hook( __FILE__, &apos;hanchang_copyright_deactivation&apos;);\n\nfunction hanchang_copyright_deactivation() {\n\n    //插件停用，设置停用标识为1\n    update_option( &quot;hanchang_copyright_deactivation&quot;, &quot;yes&quot; );\n\n}\n\n//为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\nadd_action( &quot;wp_footer&quot;, &quot;hc_copyright_insert&quot; );\n\nfunction hc_copyright_insert(){\n\n    //输出一段字符串\n    echo get_option( &quot;hc_copyright_text&quot; );\n\n}\n\n\nadd_action( &quot;wp_head&quot;, &quot;hanchang_copyright_insert_new&quot; );\n\nfunction hanchang_copyright_insert_new() {\n    echo &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;;\n}\n\nadd_action( &apos;save_post&apos;, &apos;save_post_meta&apos;, 10, 2 );\n\nfunction save_post_meta( $post_id, $post ) {\n\n    update_post_meta( $post_id, &quot;save-time&quot;, &quot;更新时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) );\n\n}\n\n\n\n//在输出内容之前，给页面管理添加摘要功能\nadd_action( &apos;init&apos;, &apos;hc_add_excerpts_to_pages&apos; );\n\nfunction hc_add_excerpts_to_pages() {\n\n    //给页面管理添加摘要的功能\n    add_post_type_support( &apos;page&apos;, array( &apos;excerpt&apos; ) );\n}\n\n//wp_head钩子\nadd_action(&apos;wp_head&apos;,&apos;hc_wp_head&apos;);\n\nfunction hc_wp_head() {\n\n    //只有首页输出描述\n    if( is_home() ){ ?&gt;\n        &lt;meta name=&quot;description&quot; content=&quot;&lt;? bloginfo(&apos;description&apos;); ?&gt;&quot; /&gt;\n    &lt;? }\n\n}\n\n\n//自定义引用样式表\nfunction hc_enqueue_style() {\n    wp_enqueue_style( &apos;core&apos;, plugins_url(&apos;css/hc_copyrighy.css&apos;, __FILE__) , false );\n}\n\n//自定义引用脚本文件\nfunction hc_enqueue_script() {\n    wp_enqueue_script( &apos;my-js&apos;, plugins_url(&apos;js/hc_copyrighy.js&apos;, __FILE__), false );\n}\n\n//引用文件的钩子\nadd_action( &apos;wp_enqueue_scripts&apos;, &apos;hc_enqueue_style&apos;, 5 );\nadd_action( &apos;wp_enqueue_scripts&apos;, &apos;hc_enqueue_script&apos;, 7 );\n\n//删除所有挂载在 wp_enqueue_scripts 钩子上的方法\nremove_all_actions( &apos;wp_enqueue_scripts&apos;, 5 );\n\n//评论被添加的时候触发\nadd_action( &apos;wp_insert_comment&apos;, &apos;comment_inserted&apos;, 10, 2 );\n\n//移除 wp_insert_comment 钩子上的 comment_inserted 方法\nremove_action( &apos;wp_insert_comment&apos;, &apos;comment_inserted&apos;, 10 );\n\nfunction comment_inserted($comment_id, $comment_object ) {\n\n    //获取该评论所在文章的评论总数\n    $comments_count = wp_count_comments( $comment_object-&gt;comment_post_ID );\n\n    $commentarr = array();\n    $commentarr[&apos;comment_ID&apos;] = $comment_id;\n\n    //修改评论的内容，在评论内容前加上 “第{$comments_count-&gt;total_comments}个评论：” 这么一段字符串\n    $commentarr[&apos;comment_content&apos;] = &quot;第{$comments_count-&gt;total_comments}个评论：&quot; . $comment_object-&gt;comment_content;\n\n    wp_update_comment( $commentarr );\n\n}\n\n\nadd_action( &apos;user_register&apos;, &apos;myplugin_registration_save&apos;, 10, 1 );\n\nfunction myplugin_registration_save( $user_id ) {\n\n    //将新用户的个人说明，设置为注册时间\n    wp_update_user( array( &apos;ID&apos; =&gt; $user_id, &apos;description&apos; =&gt; &quot;注册时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) ) );\n\n}\n?&gt;</code></pre><h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><pre><code>add_filter($tag过滤器名称, $function_to_add需要添加的函数, $priority优先级, $acceptedargs添加的参数数量)\n\n\n\n# hanchang-copyright.php\n//一开始，我们设置一个变量\n$value = &quot;hello&quot;;\n\n//给名为 hc_filter 的过滤器，挂载一个 hc_filter_fun 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun 方法进行过滤\n//add_filter( &quot;hc_filter&quot;, &quot;hc_filter_fun&quot; );\n\n//给名为 hc_filter 的过滤器，再挂载一个 hc_filter_fun_add_time 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun、hc_filter_fun_add_time 两个方法进行过滤\n//add_filter( &quot;hc_filter&quot;, &quot;hc_filter_fun_add_time&quot; );\n\n//对 $value 值使用名为 hc_filter 的过滤器进行过滤，这个时候，由于 hc_filter 过滤器只挂载了 hc_filter_fun 方法，因此，只使用 hc_filter_fun 方法 过滤了一次，并且返回给 $myvar 变量\n//$myvar = apply_filters( &quot;hc_filter&quot;, $value );\n\nadd_filter( &quot;the_content&quot;, &quot;hc_filter_fun&quot; );\nadd_filter( &quot;the_content&quot;, &quot;hc_filter_fun_add_time&quot; );</code></pre><h4 id=\"带参数的过滤器\"><a href=\"#带参数的过滤器\" class=\"headerlink\" title=\"带参数的过滤器\"></a>带参数的过滤器</h4><pre><code># hanchang-copyright.php\nfunction suppress_if_blurb( $title, $id = null ) {\n\n    if ( in_category(&apos;wpcj&apos;, $id ) ) {\n        return &apos;不显示标题&apos;;\n    }\n\n    return $title . &quot;...&quot;;\n}\n\n//对 the_title 过滤器挂载一个 suppress_if_blurb 方法，优先级为10，传递的参数有2个\nadd_filter( &apos;the_title&apos;, &apos;suppress_if_blurb&apos;, 10, 2 );</code></pre><h4 id=\"常见过滤器\"><a href=\"#常见过滤器\" class=\"headerlink\" title=\"常见过滤器\"></a>常见过滤器</h4><pre><code>the_content 文章内容 \ncontent_save_pre 文章保存前\nthe_title 文章标题\nwp_handle_upload_prefilter 上传文件之前</code></pre><h4 id=\"创建菜单\"><a href=\"#创建菜单\" class=\"headerlink\" title=\"创建菜单\"></a>创建菜单</h4><pre><code>add_menu_page  # 添加菜单\nadd_submenu_page  # 添加子菜单\n\n\n# hanchang-copyright.php\n// admin_menu钩子挂载创建菜单方法\nadd_action( &apos;admin_menu&apos;, &apos;hc_create_menu&apos; );\nfunction hc_create_menu() {\n\n    // 创建顶级菜单\n    add_menu_page(\n        &apos;Hanchang的插件首页&apos;, // 菜单title标题\n        &apos;hanchang-copyright&apos;,  // 菜单名称，显示在后台管理页面侧边栏\n        &apos;manage_options&apos;, // 浏览插件所需要的权限=管理员权限\n        &apos;hanchang_copyright&apos; ,  // 菜单别名，不能与其他插件冲突\n        &apos;hanchang_settings_page&apos;,  // 菜单需要显示的页面，调用的哪个方法\n        plugins_url( &apos;/images/icon.png&apos;, __FILE__ )  // 调用图标\n    );\n\n    // 创建子菜单\n    add_submenu_page(\n        &apos;hanchang_copyright&apos;,  // 父级菜单别名\n        &apos;关于HC的插件&apos;,  // 菜单title标题\n        &apos;关于&apos;,  //  菜单名称，显示在后台管理页面侧边栏\n        &apos;manage_options&apos;,  // 浏览插件所需要的权限=管理员权限\n        &apos;hc_copyright_about&apos;,  // 菜单别名，不能与其他插件冲突\n        &apos;hc_create_submenu_menu&apos;  // 调用方法\n    );\n}\n\nfunction hanchang_settings_page() {\n    ?&gt;\n    &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n    &lt;?\n}\n\nfunction hc_create_submenu_menu() {\n\n    ?&gt;\n    &lt;h2&gt;子菜单&lt;/h2&gt;\n    &lt;?\n}</code></pre><p>#开发 小工具</p>\n<pre><code>#hanchang-copyright.php\n// 使用 widgets_init 动作钩子来执行自定义的函数\nadd_action( &apos;widgets_init&apos;, &apos;hc_register_widgets&apos; );\n\n// 注册小工具\nfunction hc_register_widgets() {\n    register_widget( &apos;hc_widget_info&apos; );\n}\n\n//使用 WP_Widget 类来创建小工具\nclass hc_widget_info extends WP_Widget {\n\n    //构造函数\n    public function __construct() {\n        $widget_ops = array(\n            &apos;classname&apos; =&gt; &apos;hc_widget_info&apos;,\n            &apos;description&apos; =&gt; &apos;显示作者的个人信息&apos;\n        );\n        $this-&gt;WP_Widget( &apos;显示作者个人信息&apos;, &apos;作者的小工具&apos;, $widget_ops );\n    }\n\n    //小工具管理界面\n    public function form( $instance ) {\n\n        $defaults = array( &apos;title&apos; =&gt; &apos;作者的个人信息&apos;, &apos;xingming&apos; =&gt; &apos;作者&apos;, &apos;book&apos; =&gt; &apos;《作者》&apos; );\n        $instance = wp_parse_args( (array) $instance, $defaults );\n\n        $title = $instance[&apos;title&apos;];\n        $xingming = $instance[&apos;xingming&apos;];\n        $book = $instance[&apos;book&apos;];\n        ?&gt;\n        &lt;p&gt;标题: &lt;input class=&quot;widefat&quot; name=&quot;&lt;?php echo $this-&gt;get_field_name( &apos;title&apos; ); ?&gt;&quot; type=&quot;text&quot; value=&quot;&lt;?php echo esc_attr( $title ); ?&gt;&quot; /&gt;&lt;/p&gt;\n        &lt;p&gt;姓名: &lt;input class=&quot;widefat&quot; name=&quot;&lt;?php echo $this-&gt;get_field_name( &apos;xingming&apos; ); ?&gt; &quot;type=&quot;text&quot; value=&quot;&lt;?php echo esc_attr( $xingming ); ?&gt; &quot; /&gt;&lt;/p&gt;\n        &lt;p&gt;著作: &lt;textarea class=&quot;widefat&quot; name=&quot; &lt;?php echo $this-&gt;get_field_name( &apos;book&apos; ); ?&gt; &quot; /&gt;&lt;?php echo esc_attr( $book ); ?&gt;&lt;/textarea&gt; &lt;/p&gt;\n        &lt;?php\n    }\n\n    //保存小工具设置\n    public function update( $new_instance, $old_instance ) {\n\n        $instance = $old_instance;\n\n        $instance[&apos;title&apos;] = strip_tags( trim( $new_instance[&apos;title&apos;] ) );\n        $instance[&apos;xingming&apos;] = strip_tags( trim(  $new_instance[&apos;xingming&apos;] ) );\n        $instance[&apos;book&apos;] = strip_tags( trim( $new_instance[&apos;book&apos;] ) );\n        return $instance;\n    }\n\n    //显示小工具\n    public function widget( $args, $instance ) {\n\n        extract( $args );\n\n        $title = apply_filters( &apos;widget_title&apos;, $instance[&apos;title&apos;] );\n        $xingming = empty( $instance[&apos;xingming&apos;] ) ? &apos; &apos; : $instance[&apos;xingming&apos;];\n        $book = empty( $instance[&apos;book&apos;] ) ? &apos; &apos; : $instance[&apos;book&apos;];\n\n        echo &apos;&lt;p&gt; 标题: &apos; . $title . &apos;&lt;/p&gt;&apos;;\n        echo &apos;&lt;p&gt; 姓名: &apos; . $xingming . &apos;&lt;/p&gt;&apos;;\n        echo &apos;&lt;p&gt; 著作: &apos; . $book . &apos;&lt;/p&gt;&apos;;\n    }\n}</code></pre><h4 id=\"添加元数据框\"><a href=\"#添加元数据框\" class=\"headerlink\" title=\"添加元数据框\"></a>添加元数据框</h4><pre><code># hanchang-copyright.php\n/**\n * 添加一个元数据框到 post 和 page 的管理界面中\n */\nfunction myplugin_add_meta_box() {\n\n    $screens = array( &apos;post&apos;, &apos;page&apos; );\n\n    add_meta_box(\n        &apos;myplugin_sectionid&apos;,  // 元数据框的html代码中的id值\n        &apos;转载自&apos;,  // 元数据框标题\n        &apos;myplugin_meta_box_callback&apos;,  // 回调函数名称，输出元数据框中的内容\n        $screens  // 元数据框需要添加在哪个分类内的（文章或者页面）\n    );\n}\n\n//需要给 add_meta_boxes 钩子，挂载一个自定义的方法\nadd_action( &apos;add_meta_boxes&apos;, &apos;myplugin_add_meta_box&apos; );\n\n/**\n * 元数据框展示代码\n */\nfunction myplugin_meta_box_callback( $post ) {\n\n    // 添加一个验证信息，这个在保存元数据的时候用到\n    wp_nonce_field( &apos;myplugin_save_meta_box_data&apos;, &apos;myplugin_meta_box_nonce&apos; );\n\n    /*\n     * 输出元数据信息\n     */\n    $value = get_post_meta( $post-&gt;ID, &apos;_zzurl&apos;, true );\n\n    echo &apos;&lt;label for=&quot;myplugin_new_field&quot;&gt;&apos;;\n    _e( &apos;本文章转载自：&apos; );\n    echo &apos;&lt;/label&gt; &apos;;\n    echo &apos;&lt;input type=&quot;text&quot; id=&quot;_zzurl&quot; name=&quot;_zzurl&quot; value=&quot;&apos; . esc_attr( $value ) . &apos;&quot; size=&quot;25&quot; /&gt;&apos;;\n}\n\nfunction myplugin_save_meta_box_data( $post_id ) {\n\n    //验证是否为有效信息\n    if ( ! isset( $_POST[&apos;myplugin_meta_box_nonce&apos;] ) ) {\n        return;\n    }\n\n    if ( ! wp_verify_nonce( $_POST[&apos;myplugin_meta_box_nonce&apos;], &apos;myplugin_save_meta_box_data&apos; ) ) {\n        return;\n    }\n\n    if ( defined( &apos;DOING_AUTOSAVE&apos; ) &amp;&amp; DOING_AUTOSAVE ) {\n        return;\n    }\n\n    // Check the user&apos;s permissions.\n    if ( isset( $_POST[&apos;post_type&apos;] ) &amp;&amp; &apos;page&apos; == $_POST[&apos;post_type&apos;] ) {\n\n        if ( ! current_user_can( &apos;edit_page&apos;, $post_id ) ) {\n            return;\n        }\n\n    } else {\n\n        if ( ! current_user_can( &apos;edit_post&apos;, $post_id ) ) {\n            return;\n        }\n    }\n\n    if ( ! isset( $_POST[&apos;_zzurl&apos;] ) ) {\n        return;\n    }\n\n    $my_data = sanitize_text_field( $_POST[&apos;_zzurl&apos;] );\n\n    update_post_meta( $post_id, &apos;_zzurl&apos;, $my_data );\n}\n\n//文章保存的时候，会调用 save_post 钩子，因此我们要借助这个钩子来保存元数据框内的数据\nadd_action( &apos;save_post&apos;, &apos;myplugin_save_meta_box_data&apos; );</code></pre><h4 id=\"后台常见css样式表\"><a href=\"#后台常见css样式表\" class=\"headerlink\" title=\"后台常见css样式表\"></a>后台常见css样式表</h4><pre><code># copyright.php\nfunction hanchang_settings_page() {\n    ?&gt;\n    &lt;div class=&quot;wrap&quot;&gt;\n        &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n        &lt;div id=&quot;message&quot; class=&quot;updated&quot;&gt;设置保存成功&lt;/div&gt;\n        &lt;div id=&quot;message&quot; class=&quot;error&quot;&gt;保存出现错误&lt;/div&gt;\n        &lt;p&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-primary&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-secondary&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-large&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-small&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-hero&quot; /&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;a href=&quot;#&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-primary&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-secondary&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-large&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-small&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-hero&quot;&gt;搜索&lt;/a&gt;\n        &lt;/p&gt;\n\n        &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt;\n            &lt;table class=&quot;form-table&quot;&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;xingming&quot;&gt;姓名：&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;&lt;input id=&quot;xingming&quot; name=&quot;xingming&quot; /&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;shenfen&quot;&gt;身份：&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;\n                        &lt;select name=&quot;shenfen&quot;&gt;\n                            &lt;option value=&quot;在校&quot;&gt;在校&lt;/option&gt;\n                            &lt;option value=&quot;毕业&quot;&gt;毕业&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;tongyi&quot;&gt;同意注册&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;tongyi&quot; /&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;xingbie&quot;&gt;性别&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;\n                        &lt;input type=&quot;radio&quot; name=&quot;xingbie&quot; value=&quot;男&quot; /&gt; 男\n                        &lt;input type=&quot;radio&quot; name=&quot;xingbie&quot; value=&quot;女&quot; /&gt; 女\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;beizhu&quot;&gt;备注&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;&lt;textarea name=&quot;beizhu&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;td&gt;\n                        &lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;保存&quot; class=&quot;button-primary&quot; /&gt;\n                        &lt;input type=&quot;submit&quot; name=&quot;reset&quot; value=&quot;重置&quot; class=&quot;button-secondary&quot; /&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/form&gt;\n\n        &lt;table class=&quot;widefat striped&quot;&gt;\n            &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;序号&lt;/th&gt;\n                &lt;th&gt;姓名&lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;/td&gt;\n                &lt;td&gt;黄聪&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;2&lt;/td&gt;\n                &lt;td&gt;黄聪&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;3&lt;/td&gt;\n                &lt;td&gt;黄聪&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;/tbody&gt;\n            &lt;tfoot&gt;\n            &lt;tr&gt;\n                &lt;th&gt;序号&lt;/th&gt;\n                &lt;th&gt;姓名&lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;/tfoot&gt;\n        &lt;/table&gt;\n\n        &lt;div class=&quot;tablenav&quot;&gt;\n            &lt;div class=&quot;tablenav-pages&quot;&gt;\n                &lt;span class=&quot;displaying-num&quot;&gt;第1页，共458页&lt;/span&gt;\n                &lt;span class=&quot;page-numbers current&quot;&gt;1&lt;/span&gt;\n                &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;2&lt;/a&gt;\n                &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;3&lt;/a&gt;\n                &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;4&lt;/a&gt;\n                &lt;a href=&quot;#&quot; class=&quot;next page-numbers&quot;&gt;»&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;?\n}</code></pre><h4 id=\"保存插件设置到数据库中\"><a href=\"#保存插件设置到数据库中\" class=\"headerlink\" title=\"保存插件设置到数据库中\"></a>保存插件设置到数据库中</h4><pre><code>├── hc-test\n│   ├── css\n│   ├── hc-test.php\n│   ├── images\n│   └── js\n\n\n\nhc-test.php\n\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\n//定义插件启动时候调用的方法\nregister_activation_hook( __FILE__, &apos;hc_test_install&apos;);\n\nfunction hc_test_install() {\n\n   global $wpdb;\n\n   if( $wpdb-&gt;get_var( &quot;SHOW TABLES LIKE &apos;{$wpdb-&gt;prefix}test&apos;&quot; ) != &quot;{$wpdb-&gt;prefix}test&quot; ) \n   {\n      $sql = &quot;CREATE TABLE IF NOT EXISTS `{$wpdb-&gt;prefix}test` (\n           `id` int(11) NOT NULL auto_increment COMMENT &apos;编号&apos;,\n           `color` varchar(10) DEFAULT &apos;&apos; COMMENT &apos;字体颜色&apos;,\n           `size`  varchar(10) DEFAULT &apos;&apos; COMMENT &apos;字体大小&apos;,\n           PRIMARY KEY  (`id`)\n         ) DEFAULT CHARSET=utf8 AUTO_INCREMENT=0;&quot;;\n      $wpdb-&gt;query( $sql );\n\n      $sql = &quot;REPLACE INTO `{$wpdb-&gt;prefix}test` VALUES (1, &apos;#FF0000&apos;,&apos;20&apos;);&quot;;\n      $wpdb-&gt;query( $sql );\n   }\n}\n\nadd_action( &apos;admin_menu&apos;, &apos;hc_test_create_menu&apos; );\n\nfunction hc_test_create_menu() {\n\n   //创建顶级菜单\n   add_menu_page( \n      &apos;HC-TEST&apos;, \n      &apos;HC的插件&apos;,\n      &apos;manage_options&apos;, \n      &apos;hc_test&apos; ,\n      &apos;hc_settings_page&apos;,\n      plugins_url( &apos;/images/icon.png&apos;, __FILE__ )\n   );\n}\n\nfunction hc_settings_page() {\n\n   global $wpdb;\n\n   //当提交了，并且验证信息正确\n   if( !empty( $_POST ) &amp;&amp; check_admin_referer( &apos;hc_test_nonce&apos; ) ) {\n\n      //更新设置\n      update_option( &apos;hc_test_bold&apos;, $_POST[&apos;hc_test_bold&apos;] );\n\n      $wpdb-&gt;update( &quot;{$wpdb-&gt;prefix}test&quot;, array( &apos;color&apos; =&gt; $_POST[&apos;color&apos;], &apos;size&apos; =&gt; $_POST[&apos;size&apos;] ), array( &apos;id&apos; =&gt; 1 ) );\n      ?&gt;\n      &lt;div id=&quot;message&quot; class=&quot;updated&quot;&gt;\n         &lt;p&gt;&lt;strong&gt;保存成功！&lt;/strong&gt;&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   $sql = &quot;SELECT * FROM `{$wpdb-&gt;prefix}test`&quot;;\n   $row = $wpdb-&gt;get_row( $sql, ARRAY_A );\n\n   $color = $row[&apos;color&apos;];\n   $size = $row[&apos;size&apos;];\n   ?&gt;\n   &lt;div class=&quot;wrap&quot;&gt;\n      &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n      &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;\n         &lt;p&gt;&lt;label for=&quot;color&quot;&gt;字体颜色：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;color&quot; value=&quot;&lt;?php echo $color; ?&gt;&quot; /&gt;&lt;/p&gt;\n         &lt;p&gt;&lt;label for=&quot;size&quot;&gt;字体大小：&lt;/label&gt;\n         &lt;select name=&quot;size&quot;&gt;\n            &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n            &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n            &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n            &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n            &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n         &lt;/select&gt;&lt;/p&gt;\n         &lt;p&gt;&lt;label for=&quot;hc_test_obold&quot;&gt;字体加粗：&lt;/label&gt;&lt;input name=&quot;hc_test_bold&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, get_option( &apos;hc_test_bold&apos; ) ); ?&gt; /&gt; 加粗&lt;/p&gt;\n         &lt;p&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;保存设置&quot; /&gt;&lt;/p&gt;\n         &lt;?\n            //输出一个验证信息\n            wp_nonce_field(&apos;hc_test_nonce&apos;);\n         ?&gt;\n      &lt;/form&gt;\n   &lt;/div&gt;\n   &lt;?\n}\n\nadd_action( &apos;wp_head&apos;, &apos;hc_test_head_fun&apos; );\n\nfunction hc_test_head_fun() {\n\n   global $wpdb;\n\n   //获取自定义数据库中的设置\n   $sql = &quot;SELECT * FROM `{$wpdb-&gt;prefix}test`&quot;;\n   $row = $wpdb-&gt;get_row( $sql, ARRAY_A );\n\n   //获取options表中的设置选项\n   $bold = get_option( &quot;hc_test_bold&quot; ) == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n\n   ?&gt;&lt;style&gt;body{color:&lt;? echo $row[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $row[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n}</code></pre><h4 id=\"使用wordpress内置api设置插件属性\"><a href=\"#使用wordpress内置api设置插件属性\" class=\"headerlink\" title=\"使用wordpress内置api设置插件属性\"></a>使用wordpress内置api设置插件属性</h4><pre><code># hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\nadd_action( &apos;admin_menu&apos;, &apos;test_create_menu&apos; );\n\nfunction test_create_menu() {\n\n   //创建顶级菜单\n   add_menu_page(\n      &apos;HC的插件首页&apos;,\n      &apos;HC的插件&apos;,\n      &apos;manage_options&apos;,\n      &apos;hc_test&apos; ,\n      &apos;hc_settings_page&apos;,\n      plugins_url( &apos;/images/icon.png&apos;, __FILE__ )\n   );\n}\n\nadd_action( &apos;admin_init&apos;, &apos;register_hc_test_setting&apos; );\n\n//使用register_setting()注册要存储的字段\nfunction register_hc_test_setting() {\n\n   //注册一个选项，用于装载所有插件设置项\n   $option_group = &quot;hc_test_group&quot;;\n   register_setting( $option_group, &apos;hc_test_option&apos; );\n\n   //添加选项设置区域\n   $setting_section = &quot;hc_test_setting_section&quot;;\n   add_settings_section(\n      $setting_section,\n      &apos;设置&apos;,  // 标题\n      &apos;hc_test_setting_section_function&apos;,  // 调用方法，自定义输出\n      $option_group\n   );\n\n   //设置字体颜色\n   add_settings_field(\n      &apos;hc_test_color&apos;,  // 字段id\n      &apos;字体颜色&apos;,  // 字段标题\n      &apos;hc_test_color_function&apos;, // 字段对应函数方法\n      $option_group,  // 字段对应分组\n      $setting_section  // 字段对应设置选项\n   );\n\n   //设置字体大小\n   add_settings_field(\n      &apos;hc_test_size&apos;,\n      &apos;字体大小&apos;,\n      &apos;hc_test_size_function&apos;,\n      $option_group,\n      $setting_section\n   );\n\n   //设置字体加粗\n   add_settings_field(\n      &apos;hc_test_bold&apos;,\n      &apos;字体加粗&apos;,\n      &apos;hc_test_bold_function&apos;,\n      $option_group,\n      $setting_section\n   );\n}\n\nfunction hc_test_bold_function() {\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n   ?&gt;\n   &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n   &lt;?\n}\n\nfunction hc_test_size_function() {\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n   $size = $hc_test_option[&quot;size&quot;];\n   ?&gt;\n   &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n      &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n      &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n      &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n      &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n      &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n   &lt;/select&gt;\n   &lt;?\n}\n\nfunction hc_test_color_function() {\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n   ?&gt;\n   &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n   &lt;?\n}\n\nfunction hc_settings_page() {\n   ?&gt;\n   &lt;div class=&quot;wrap&quot;&gt;\n      &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n      &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n         &lt;?\n         $option_group = &quot;hc_test_group&quot;;\n\n         //输出一些必要的字段，包括验证信息等\n         settings_fields( $option_group );\n\n         //输出选项设置区域\n         do_settings_sections( $option_group );\n\n         //输出按钮\n         submit_button();\n         ?&gt;\n      &lt;/form&gt;\n   &lt;/div&gt;\n   &lt;?\n}\n\n\nadd_action( &apos;wp_head&apos;, &apos;hc_test_head_fun&apos; );\n\nfunction hc_test_head_fun() {\n\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n   $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n   ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n}</code></pre><h4 id=\"将插件改写成类的形式\"><a href=\"#将插件改写成类的形式\" class=\"headerlink\" title=\"将插件改写成类的形式\"></a>将插件改写成类的形式</h4><pre><code>#hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\n\nclass hcsem_change_font_style {\n\n   //声明类里面的属性，用 var 开头\n   var $icon_url = &quot;/images/icon.png&quot;;\n   var $option_group = &quot;hc_test_group&quot;;\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      //创建菜单\n      add_action( &apos;admin_menu&apos;, array( $this, &apos;hc_create_menu&apos; ) );\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //添加选项设置区域\n      $setting_section = &quot;hc_test_setting_section&quot;;\n      add_settings_section(\n         $setting_section,\n         &apos;&apos;,\n         &apos;&apos;,\n         $this-&gt;option_group\n      );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         &apos;字体颜色&apos;,\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         &apos;字体大小&apos;,\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         &apos;字体加粗&apos;,\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;?\n   }\n\n   function hc_create_menu() {\n\n      //创建顶级菜单\n      add_menu_page(\n         &apos;HC的插件首页&apos;,\n         &apos;HC的插件&apos;,\n         &apos;manage_options&apos;,\n         &apos;hc_test&apos; ,\n         array( $this, &apos;hc_settings_page&apos; ),\n         plugins_url( $this-&gt;icon_url, __FILE__ )\n      );\n   }\n\n   function hc_settings_page() {\n      ?&gt;\n      &lt;div class=&quot;wrap&quot;&gt;\n         &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n         &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n            &lt;?\n            //输出一些必要的字段，包括验证信息等\n            settings_fields( $this-&gt;option_group );\n\n            //输出选项设置区域\n            do_settings_sections( $this-&gt;option_group );\n\n            //输出按钮\n            submit_button();\n            ?&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();</code></pre><h4 id=\"将插件设置内容转移到wordpress设置里\"><a href=\"#将插件设置内容转移到wordpress设置里\" class=\"headerlink\" title=\"将插件设置内容转移到wordpress设置里\"></a>将插件设置内容转移到wordpress设置里</h4><pre><code># hc-test.php\n\nclass hcsem_change_font_style {\n\n   var $option_group = &quot;general&quot;;  // general常规 writing撰写 reading阅读 discussion讨论 media多媒体 permalink固定链接\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         &apos;字体颜色&apos;,\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         &apos;字体大小&apos;,\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         &apos;字体加粗&apos;,\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();</code></pre><h4 id=\"调用ajax\"><a href=\"#调用ajax\" class=\"headerlink\" title=\"调用ajax\"></a>调用ajax</h4><pre><code># hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\nclass hcsem_change_font_style {\n\n   //声明类里面的属性，用 var 开头\n   var $icon_url = &quot;/images/icon.png&quot;;\n   var $option_group = &quot;hc_test_group&quot;;\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      //创建菜单\n      add_action( &apos;admin_menu&apos;, array( $this, &apos;hc_create_menu&apos; ) );\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n\n      //使用ajax校验信息\n      wp_enqueue_script( &apos;hc_test&apos;, plugins_url(&apos;js/hc_test.js&apos;, __FILE__), array(&apos;jquery&apos;) );\n      wp_localize_script( &apos;hc_test&apos;, &apos;ajax_object&apos;, array( &apos;ajax_url&apos; =&gt; admin_url( &apos;admin-ajax.php&apos; ) ) );\n\n      add_action( &apos;wp_ajax_color_check_action&apos; , array( $this, &apos;color_check_action_fun&apos;) );\n      add_action( &apos;wp_ajax_nopriv_hcsem_description&apos; , array( $this, &apos;hcsem_description_fun&apos;) );\n   }\n\n   function color_check_action_fun(){\n\n      if( trim( $_POST[&apos;color&apos;] ) != &quot;&quot; ){ echo &quot;ok&quot;; }\n      wp_die();\n   }\n\n   function hcsem_description_fun() {\n\n      echo &quot;hc的笔记本：&quot; . $_POST[&apos;description&apos;];\n      wp_die();\n\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //添加选项设置区域\n      $setting_section = &quot;hc_test_setting_section&quot;;\n      add_settings_section(\n         $setting_section,\n         &apos;&apos;,\n         &apos;&apos;,\n         $this-&gt;option_group\n      );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         &apos;字体颜色&apos;,\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         &apos;字体大小&apos;,\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         &apos;字体加粗&apos;,\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;font id=&quot;error_color&quot;&gt;&lt;/font&gt;&lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_create_menu() {\n\n      //创建顶级菜单\n      add_menu_page(\n         &apos;HC的插件首页&apos;,\n         &apos;HC的插件&apos;,\n         &apos;manage_options&apos;,\n         &apos;hc_test&apos; ,\n         array( $this, &apos;hc_settings_page&apos; ),\n         plugins_url( $this-&gt;icon_url, __FILE__ )\n      );\n   }\n\n   function hc_settings_page() {\n      ?&gt;\n      &lt;div class=&quot;wrap&quot;&gt;\n         &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n         &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n            &lt;?\n            //输出一些必要的字段，包括验证信息等\n            settings_fields( $this-&gt;option_group );\n\n            //输出选项设置区域\n            do_settings_sections( $this-&gt;option_group );\n\n            //输出按钮\n            submit_button();\n            ?&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();\n\n\n# js/hc_test.js\njQuery(document).ready( function($) {\n   $(&quot;input[name=&apos;hc_test_option[color]&apos;]&quot;).blur( function() {\n      $.ajax({\n         type: &quot;POST&quot;,\n         data: &quot;color=&quot; + $(this).val() + &quot;&amp;action=hc_color_check&quot;,\n         url: ajax_object.ajax_url,\n         beforeSend: function() {\n            $(&apos;#error_color&apos;).html(&apos;校验中...&apos;); \n         },\n         success: function( $data ) {\n            if( $data == &apos;ok&apos;){\n                $(&apos;#error_color&apos;).html(&apos;输入正确&apos;);  \n            } else {\n                $(&apos;#error_color&apos;).html(&apos;颜色不能为空！&apos;); \n            }\n         }\n      });\n   });\n});\n\n\njQuery(document).ready( function($) {\n   $(&quot;.description&quot;).click( function() {\n      $.ajax({\n         type: &quot;POST&quot;,\n         data: &quot;description=&quot; + $(this).text() + &quot;&amp;action=hcsem_description&quot;,\n         url: ajax_object.ajax_url,\n         success : function( $data ) {\n\n            if( $data != &quot;0&quot; ) {\n               $(&quot;.description&quot;).text( $data );\n            }\n         }\n      });\n   });\n});</code></pre><h4 id=\"实现插件翻译功能\"><a href=\"#实现插件翻译功能\" class=\"headerlink\" title=\"实现插件翻译功能\"></a>实现插件翻译功能</h4><pre><code>.\n├── css\n│   └── hc_copyrighy.css\n├── hc-test.php\n├── images\n│   └── icon.png\n├── js\n│   └── hc_test.js\n└── languages\n    ├── zh_CN.mo\n    └── zh_CN.po\n\n\n\n# hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\nclass hcsem_change_font_style {\n\n   //声明类里面的属性，用 var 开头\n   var $icon_url = &quot;/images/icon.png&quot;;\n   var $option_group = &quot;hc_test_group&quot;;\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      //创建菜单\n      add_action( &apos;admin_menu&apos;, array( $this, &apos;hc_create_menu&apos; ) );\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n\n      //使用ajax校验信息\n      wp_enqueue_script( &apos;hc_test&apos;, plugins_url(&apos;js/hc_test.js&apos;, __FILE__), array(&apos;jquery&apos;) );\n      wp_localize_script( &apos;hc_test&apos;, &apos;ajax_object&apos;, array( &apos;ajax_url&apos; =&gt; admin_url( &apos;admin-ajax.php&apos; ) ) );\n\n      add_action( &apos;wp_ajax_color_check_action&apos; , array( $this, &apos;color_check_action_fun&apos;) );\n      add_action( &apos;wp_ajax_nopriv_hcsem_description&apos; , array( $this, &apos;hcsem_description_fun&apos;) );\n\n      add_action( &apos;init&apos;, array( $this, &apos;hcsem_load_textdomain&apos; ) );\n   }\n\n   function hcsem_load_textdomain() {\n\n      //加载 languages 目录下的翻译文件 zh_CN\n      $currentLocale = get_locale();\n\n      if( !empty( $currentLocale ) ) {\n\n         $moFile = dirname(__FILE__) . &quot;/languages/{$currentLocale}.mo&quot;;\n\n         if( @file_exists( $moFile ) &amp;&amp; is_readable( $moFile ) ) load_textdomain( &apos;hc-test&apos;, $moFile );\n      }\n   }\n\n   function color_check_action_fun(){\n\n      if( trim( $_POST[&apos;color&apos;] ) != &quot;&quot; ){ echo &quot;ok&quot;; }\n      wp_die();\n   }\n\n   function hcsem_description_fun() {\n\n      echo &quot;HC的笔记本：&quot; . $_POST[&apos;description&apos;];\n      wp_die();\n\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //添加选项设置区域\n      $setting_section = &quot;hc_test_setting_section&quot;;\n      add_settings_section(\n         $setting_section,\n         &apos;&apos;,\n         &apos;&apos;,\n         $this-&gt;option_group\n      );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         __( &apos;color&apos;, &apos;hc-test&apos; ),\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         __( &apos;size&apos;, &apos;hc-test&apos; ),\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         __( &apos;bold&apos;, &apos;hc-test&apos; ),\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; &lt;? _e( &apos;set bold&apos;, &apos;hc-test&apos; ); ?&gt;\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;font id=&quot;error_color&quot;&gt;&lt;/font&gt;&lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_create_menu() {\n\n      //创建顶级菜单\n      add_menu_page(\n         &apos;hc的插件首页&apos;,\n         &apos;hc的插件&apos;,\n         &apos;manage_options&apos;,\n         &apos;hc_test&apos; ,\n         array( $this, &apos;hc_settings_page&apos; ),\n         plugins_url( $this-&gt;icon_url, __FILE__ )\n      );\n   }\n\n   function hc_settings_page() {\n      ?&gt;\n      &lt;div class=&quot;wrap&quot;&gt;\n         &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n         &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n            &lt;?\n            //输出一些必要的字段，包括验证信息等\n            settings_fields( $this-&gt;option_group );\n\n            //输出选项设置区域\n            do_settings_sections( $this-&gt;option_group );\n\n            //输出按钮\n            submit_button();\n            ?&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建插件\"><a href=\"#创建插件\" class=\"headerlink\" title=\"创建插件\"></a>创建插件</h4><pre><code>├── hanchang-copyright\n│   └── hanchang-copyright.php\n\n\n\n# hanchang-copyright.php\n&lt;?php\n/*\nPlugin Name: hanchang-copyright\nPlugin URI: http://www.zhuohc.com\nDescription: 在页脚显示一段版权信息\nVersion: 1.0\nAuthor: hanchang\nAuthor URI: http://www.zhuohc.com\nLicense: GPLv2\n*/</code></pre><h4 id=\"插件启用和停用初始化\"><a href=\"#插件启用和停用初始化\" class=\"headerlink\" title=\"插件启用和停用初始化\"></a>插件启用和停用初始化</h4><pre><code># hanchang-copyright.php\n&lt;?php\n/*\nPlugin Name: hanchang-copyright\nPlugin URI: http://www.zhuohc.com\nDescription: 在页脚显示一段版权信息\nVersion: 1.0\nAuthor: hanchang\nAuthor URI: http://www.zhuohc.com\nLicense: GPLv2\n*/\n\n//定义插件启动时候调用的方法\nregister_activation_hook( __FILE__, &apos;hanchang_copyright_install&apos;);\n\nfunction hanchang_copyright_install() {\n\n    //插件启动，添加一个默认的版权信息\n    update_option( &quot;hanchang_copyright_text&quot;, &quot;&lt;p style=&apos;color:red&apos;&gt;本站点所有文章均为原创，转载请注明出处！&lt;/p&gt;&quot; );\n\n}\n\n//定义插件停用时候调用的方法\nregister_deactivation_hook( __FILE__, &apos;hanchang_copyright_deactivation&apos;);\n\nfunction hanchang_copyright_deactivation() {\n\n    //插件停用，设置停用标识为1\n    update_option( &quot;hanchang_copyright_deactivation&quot;, &quot;yes&quot; );\n\n}</code></pre><h4 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h4><pre><code>.\n├── hanchang-copyright.php\n└── uninstall.php # 删除插件执行的文件\n\n\n# uninstall.php\n&lt;?\n// 如果 uninstall 不是从 WordPress 调用，则退出\nif( !defined( &apos;WP_UNINSTALL_PLUGIN&apos; ) )\nexit();\n\n//删除插件创建的项目，以确保不占用数据库资源\ndelete_option( &apos;hanchang_copyright_deactivation&apos; );\ndelete_option( &apos;hanchang_copyright_text&apos; );</code></pre><h4 id=\"add-action\"><a href=\"#add-action\" class=\"headerlink\" title=\"add_action\"></a>add_action</h4><pre><code>add_action(&quot;$tag钩子名称&quot;, &quot;$function_to_do执行函数&quot;, $priorrity执行优先级, $accepted_arga带参数函数的参数个数)\n\n\n# hanchang-copyright.php\n\n//为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\nadd_action( &quot;wp_footer&quot;, &quot;hc_copyright_insert&quot; );\n\nfunction hc_copyright_insert(){\n\n    //输出一段字符串\n    echo get_option( &quot;hc_copyright_text&quot; );\n\n}\n\n\nadd_action( &quot;wp_head&quot;, &quot;hanchang_copyright_insert_new&quot; );\n\nfunction hanchang_copyright_insert_new() {\n    echo &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;;\n}\n\nadd_action( &apos;save_post&apos;, &apos;save_post_meta&apos;, 10, 2 );\n\nfunction save_post_meta( $post_id, $post ) {\n\n    update_post_meta( $post_id, &quot;save-time&quot;, &quot;更新时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) );\n\n}</code></pre><h4 id=\"常见钩子\"><a href=\"#常见钩子\" class=\"headerlink\" title=\"常见钩子\"></a>常见钩子</h4><pre><code>init 加载初始化\nwp_head 加载添加到head标签中的内容\nwp_enqueue_scripts 加载css或者js文件\nwp_foot 加载添加到底部内容\n\nsave_post 添加保存文章\nwp_trash_post 将文章添加到回收站\ndelete_post 将文章删除\n\nwp_insert_comment 插入评论\n\nuser_register 用户注册\n\n\n# hanchang-copyright.php\n&lt;?php\n/*\nPlugin Name: hanchang-copyright\nPlugin URI: http://www.zhuohc.com\nDescription: 在页脚显示一段版权信息\nVersion: 1.0\nAuthor: hanchang\nAuthor URI: http://www.zhuohc.com\nLicense: GPLv2\n*/\n\n//定义插件启动时候调用的方法\nregister_activation_hook( __FILE__, &apos;hanchang_copyright_install&apos;);\n\nfunction hanchang_copyright_install() {\n\n    //插件启动，添加一个默认的版权信息\n    update_option( &quot;hanchang_copyright_text&quot;, &quot;&lt;p style=&apos;color:red&apos;&gt;本站点所有文章均为原创，转载请注明出处！&lt;/p&gt;&quot; );\n\n}\n\n//定义插件停用时候调用的方法\nregister_deactivation_hook( __FILE__, &apos;hanchang_copyright_deactivation&apos;);\n\nfunction hanchang_copyright_deactivation() {\n\n    //插件停用，设置停用标识为1\n    update_option( &quot;hanchang_copyright_deactivation&quot;, &quot;yes&quot; );\n\n}\n\n//为 wp_footer 钩子挂载一个新的动作 hc_copyright_insert\nadd_action( &quot;wp_footer&quot;, &quot;hc_copyright_insert&quot; );\n\nfunction hc_copyright_insert(){\n\n    //输出一段字符串\n    echo get_option( &quot;hc_copyright_text&quot; );\n\n}\n\n\nadd_action( &quot;wp_head&quot;, &quot;hanchang_copyright_insert_new&quot; );\n\nfunction hanchang_copyright_insert_new() {\n    echo &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;;\n}\n\nadd_action( &apos;save_post&apos;, &apos;save_post_meta&apos;, 10, 2 );\n\nfunction save_post_meta( $post_id, $post ) {\n\n    update_post_meta( $post_id, &quot;save-time&quot;, &quot;更新时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) );\n\n}\n\n\n\n//在输出内容之前，给页面管理添加摘要功能\nadd_action( &apos;init&apos;, &apos;hc_add_excerpts_to_pages&apos; );\n\nfunction hc_add_excerpts_to_pages() {\n\n    //给页面管理添加摘要的功能\n    add_post_type_support( &apos;page&apos;, array( &apos;excerpt&apos; ) );\n}\n\n//wp_head钩子\nadd_action(&apos;wp_head&apos;,&apos;hc_wp_head&apos;);\n\nfunction hc_wp_head() {\n\n    //只有首页输出描述\n    if( is_home() ){ ?&gt;\n        &lt;meta name=&quot;description&quot; content=&quot;&lt;? bloginfo(&apos;description&apos;); ?&gt;&quot; /&gt;\n    &lt;? }\n\n}\n\n\n//自定义引用样式表\nfunction hc_enqueue_style() {\n    wp_enqueue_style( &apos;core&apos;, plugins_url(&apos;css/hc_copyrighy.css&apos;, __FILE__) , false );\n}\n\n//自定义引用脚本文件\nfunction hc_enqueue_script() {\n    wp_enqueue_script( &apos;my-js&apos;, plugins_url(&apos;js/hc_copyrighy.js&apos;, __FILE__), false );\n}\n\n//引用文件的钩子\nadd_action( &apos;wp_enqueue_scripts&apos;, &apos;hc_enqueue_style&apos;, 5 );\nadd_action( &apos;wp_enqueue_scripts&apos;, &apos;hc_enqueue_script&apos;, 7 );\n\n//删除所有挂载在 wp_enqueue_scripts 钩子上的方法\nremove_all_actions( &apos;wp_enqueue_scripts&apos;, 5 );\n\n//评论被添加的时候触发\nadd_action( &apos;wp_insert_comment&apos;, &apos;comment_inserted&apos;, 10, 2 );\n\n//移除 wp_insert_comment 钩子上的 comment_inserted 方法\nremove_action( &apos;wp_insert_comment&apos;, &apos;comment_inserted&apos;, 10 );\n\nfunction comment_inserted($comment_id, $comment_object ) {\n\n    //获取该评论所在文章的评论总数\n    $comments_count = wp_count_comments( $comment_object-&gt;comment_post_ID );\n\n    $commentarr = array();\n    $commentarr[&apos;comment_ID&apos;] = $comment_id;\n\n    //修改评论的内容，在评论内容前加上 “第{$comments_count-&gt;total_comments}个评论：” 这么一段字符串\n    $commentarr[&apos;comment_content&apos;] = &quot;第{$comments_count-&gt;total_comments}个评论：&quot; . $comment_object-&gt;comment_content;\n\n    wp_update_comment( $commentarr );\n\n}\n\n\nadd_action( &apos;user_register&apos;, &apos;myplugin_registration_save&apos;, 10, 1 );\n\nfunction myplugin_registration_save( $user_id ) {\n\n    //将新用户的个人说明，设置为注册时间\n    wp_update_user( array( &apos;ID&apos; =&gt; $user_id, &apos;description&apos; =&gt; &quot;注册时间：&quot; . date(&quot;Y-m-d H:i:s&quot;) ) );\n\n}\n?&gt;</code></pre><h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><pre><code>add_filter($tag过滤器名称, $function_to_add需要添加的函数, $priority优先级, $acceptedargs添加的参数数量)\n\n\n\n# hanchang-copyright.php\n//一开始，我们设置一个变量\n$value = &quot;hello&quot;;\n\n//给名为 hc_filter 的过滤器，挂载一个 hc_filter_fun 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun 方法进行过滤\n//add_filter( &quot;hc_filter&quot;, &quot;hc_filter_fun&quot; );\n\n//给名为 hc_filter 的过滤器，再挂载一个 hc_filter_fun_add_time 方法，传递给 hc_filter 的变量都会经过 hc_filter_fun、hc_filter_fun_add_time 两个方法进行过滤\n//add_filter( &quot;hc_filter&quot;, &quot;hc_filter_fun_add_time&quot; );\n\n//对 $value 值使用名为 hc_filter 的过滤器进行过滤，这个时候，由于 hc_filter 过滤器只挂载了 hc_filter_fun 方法，因此，只使用 hc_filter_fun 方法 过滤了一次，并且返回给 $myvar 变量\n//$myvar = apply_filters( &quot;hc_filter&quot;, $value );\n\nadd_filter( &quot;the_content&quot;, &quot;hc_filter_fun&quot; );\nadd_filter( &quot;the_content&quot;, &quot;hc_filter_fun_add_time&quot; );</code></pre><h4 id=\"带参数的过滤器\"><a href=\"#带参数的过滤器\" class=\"headerlink\" title=\"带参数的过滤器\"></a>带参数的过滤器</h4><pre><code># hanchang-copyright.php\nfunction suppress_if_blurb( $title, $id = null ) {\n\n    if ( in_category(&apos;wpcj&apos;, $id ) ) {\n        return &apos;不显示标题&apos;;\n    }\n\n    return $title . &quot;...&quot;;\n}\n\n//对 the_title 过滤器挂载一个 suppress_if_blurb 方法，优先级为10，传递的参数有2个\nadd_filter( &apos;the_title&apos;, &apos;suppress_if_blurb&apos;, 10, 2 );</code></pre><h4 id=\"常见过滤器\"><a href=\"#常见过滤器\" class=\"headerlink\" title=\"常见过滤器\"></a>常见过滤器</h4><pre><code>the_content 文章内容 \ncontent_save_pre 文章保存前\nthe_title 文章标题\nwp_handle_upload_prefilter 上传文件之前</code></pre><h4 id=\"创建菜单\"><a href=\"#创建菜单\" class=\"headerlink\" title=\"创建菜单\"></a>创建菜单</h4><pre><code>add_menu_page  # 添加菜单\nadd_submenu_page  # 添加子菜单\n\n\n# hanchang-copyright.php\n// admin_menu钩子挂载创建菜单方法\nadd_action( &apos;admin_menu&apos;, &apos;hc_create_menu&apos; );\nfunction hc_create_menu() {\n\n    // 创建顶级菜单\n    add_menu_page(\n        &apos;Hanchang的插件首页&apos;, // 菜单title标题\n        &apos;hanchang-copyright&apos;,  // 菜单名称，显示在后台管理页面侧边栏\n        &apos;manage_options&apos;, // 浏览插件所需要的权限=管理员权限\n        &apos;hanchang_copyright&apos; ,  // 菜单别名，不能与其他插件冲突\n        &apos;hanchang_settings_page&apos;,  // 菜单需要显示的页面，调用的哪个方法\n        plugins_url( &apos;/images/icon.png&apos;, __FILE__ )  // 调用图标\n    );\n\n    // 创建子菜单\n    add_submenu_page(\n        &apos;hanchang_copyright&apos;,  // 父级菜单别名\n        &apos;关于HC的插件&apos;,  // 菜单title标题\n        &apos;关于&apos;,  //  菜单名称，显示在后台管理页面侧边栏\n        &apos;manage_options&apos;,  // 浏览插件所需要的权限=管理员权限\n        &apos;hc_copyright_about&apos;,  // 菜单别名，不能与其他插件冲突\n        &apos;hc_create_submenu_menu&apos;  // 调用方法\n    );\n}\n\nfunction hanchang_settings_page() {\n    ?&gt;\n    &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n    &lt;?\n}\n\nfunction hc_create_submenu_menu() {\n\n    ?&gt;\n    &lt;h2&gt;子菜单&lt;/h2&gt;\n    &lt;?\n}</code></pre><p>#开发 小工具</p>\n<pre><code>#hanchang-copyright.php\n// 使用 widgets_init 动作钩子来执行自定义的函数\nadd_action( &apos;widgets_init&apos;, &apos;hc_register_widgets&apos; );\n\n// 注册小工具\nfunction hc_register_widgets() {\n    register_widget( &apos;hc_widget_info&apos; );\n}\n\n//使用 WP_Widget 类来创建小工具\nclass hc_widget_info extends WP_Widget {\n\n    //构造函数\n    public function __construct() {\n        $widget_ops = array(\n            &apos;classname&apos; =&gt; &apos;hc_widget_info&apos;,\n            &apos;description&apos; =&gt; &apos;显示作者的个人信息&apos;\n        );\n        $this-&gt;WP_Widget( &apos;显示作者个人信息&apos;, &apos;作者的小工具&apos;, $widget_ops );\n    }\n\n    //小工具管理界面\n    public function form( $instance ) {\n\n        $defaults = array( &apos;title&apos; =&gt; &apos;作者的个人信息&apos;, &apos;xingming&apos; =&gt; &apos;作者&apos;, &apos;book&apos; =&gt; &apos;《作者》&apos; );\n        $instance = wp_parse_args( (array) $instance, $defaults );\n\n        $title = $instance[&apos;title&apos;];\n        $xingming = $instance[&apos;xingming&apos;];\n        $book = $instance[&apos;book&apos;];\n        ?&gt;\n        &lt;p&gt;标题: &lt;input class=&quot;widefat&quot; name=&quot;&lt;?php echo $this-&gt;get_field_name( &apos;title&apos; ); ?&gt;&quot; type=&quot;text&quot; value=&quot;&lt;?php echo esc_attr( $title ); ?&gt;&quot; /&gt;&lt;/p&gt;\n        &lt;p&gt;姓名: &lt;input class=&quot;widefat&quot; name=&quot;&lt;?php echo $this-&gt;get_field_name( &apos;xingming&apos; ); ?&gt; &quot;type=&quot;text&quot; value=&quot;&lt;?php echo esc_attr( $xingming ); ?&gt; &quot; /&gt;&lt;/p&gt;\n        &lt;p&gt;著作: &lt;textarea class=&quot;widefat&quot; name=&quot; &lt;?php echo $this-&gt;get_field_name( &apos;book&apos; ); ?&gt; &quot; /&gt;&lt;?php echo esc_attr( $book ); ?&gt;&lt;/textarea&gt; &lt;/p&gt;\n        &lt;?php\n    }\n\n    //保存小工具设置\n    public function update( $new_instance, $old_instance ) {\n\n        $instance = $old_instance;\n\n        $instance[&apos;title&apos;] = strip_tags( trim( $new_instance[&apos;title&apos;] ) );\n        $instance[&apos;xingming&apos;] = strip_tags( trim(  $new_instance[&apos;xingming&apos;] ) );\n        $instance[&apos;book&apos;] = strip_tags( trim( $new_instance[&apos;book&apos;] ) );\n        return $instance;\n    }\n\n    //显示小工具\n    public function widget( $args, $instance ) {\n\n        extract( $args );\n\n        $title = apply_filters( &apos;widget_title&apos;, $instance[&apos;title&apos;] );\n        $xingming = empty( $instance[&apos;xingming&apos;] ) ? &apos; &apos; : $instance[&apos;xingming&apos;];\n        $book = empty( $instance[&apos;book&apos;] ) ? &apos; &apos; : $instance[&apos;book&apos;];\n\n        echo &apos;&lt;p&gt; 标题: &apos; . $title . &apos;&lt;/p&gt;&apos;;\n        echo &apos;&lt;p&gt; 姓名: &apos; . $xingming . &apos;&lt;/p&gt;&apos;;\n        echo &apos;&lt;p&gt; 著作: &apos; . $book . &apos;&lt;/p&gt;&apos;;\n    }\n}</code></pre><h4 id=\"添加元数据框\"><a href=\"#添加元数据框\" class=\"headerlink\" title=\"添加元数据框\"></a>添加元数据框</h4><pre><code># hanchang-copyright.php\n/**\n * 添加一个元数据框到 post 和 page 的管理界面中\n */\nfunction myplugin_add_meta_box() {\n\n    $screens = array( &apos;post&apos;, &apos;page&apos; );\n\n    add_meta_box(\n        &apos;myplugin_sectionid&apos;,  // 元数据框的html代码中的id值\n        &apos;转载自&apos;,  // 元数据框标题\n        &apos;myplugin_meta_box_callback&apos;,  // 回调函数名称，输出元数据框中的内容\n        $screens  // 元数据框需要添加在哪个分类内的（文章或者页面）\n    );\n}\n\n//需要给 add_meta_boxes 钩子，挂载一个自定义的方法\nadd_action( &apos;add_meta_boxes&apos;, &apos;myplugin_add_meta_box&apos; );\n\n/**\n * 元数据框展示代码\n */\nfunction myplugin_meta_box_callback( $post ) {\n\n    // 添加一个验证信息，这个在保存元数据的时候用到\n    wp_nonce_field( &apos;myplugin_save_meta_box_data&apos;, &apos;myplugin_meta_box_nonce&apos; );\n\n    /*\n     * 输出元数据信息\n     */\n    $value = get_post_meta( $post-&gt;ID, &apos;_zzurl&apos;, true );\n\n    echo &apos;&lt;label for=&quot;myplugin_new_field&quot;&gt;&apos;;\n    _e( &apos;本文章转载自：&apos; );\n    echo &apos;&lt;/label&gt; &apos;;\n    echo &apos;&lt;input type=&quot;text&quot; id=&quot;_zzurl&quot; name=&quot;_zzurl&quot; value=&quot;&apos; . esc_attr( $value ) . &apos;&quot; size=&quot;25&quot; /&gt;&apos;;\n}\n\nfunction myplugin_save_meta_box_data( $post_id ) {\n\n    //验证是否为有效信息\n    if ( ! isset( $_POST[&apos;myplugin_meta_box_nonce&apos;] ) ) {\n        return;\n    }\n\n    if ( ! wp_verify_nonce( $_POST[&apos;myplugin_meta_box_nonce&apos;], &apos;myplugin_save_meta_box_data&apos; ) ) {\n        return;\n    }\n\n    if ( defined( &apos;DOING_AUTOSAVE&apos; ) &amp;&amp; DOING_AUTOSAVE ) {\n        return;\n    }\n\n    // Check the user&apos;s permissions.\n    if ( isset( $_POST[&apos;post_type&apos;] ) &amp;&amp; &apos;page&apos; == $_POST[&apos;post_type&apos;] ) {\n\n        if ( ! current_user_can( &apos;edit_page&apos;, $post_id ) ) {\n            return;\n        }\n\n    } else {\n\n        if ( ! current_user_can( &apos;edit_post&apos;, $post_id ) ) {\n            return;\n        }\n    }\n\n    if ( ! isset( $_POST[&apos;_zzurl&apos;] ) ) {\n        return;\n    }\n\n    $my_data = sanitize_text_field( $_POST[&apos;_zzurl&apos;] );\n\n    update_post_meta( $post_id, &apos;_zzurl&apos;, $my_data );\n}\n\n//文章保存的时候，会调用 save_post 钩子，因此我们要借助这个钩子来保存元数据框内的数据\nadd_action( &apos;save_post&apos;, &apos;myplugin_save_meta_box_data&apos; );</code></pre><h4 id=\"后台常见css样式表\"><a href=\"#后台常见css样式表\" class=\"headerlink\" title=\"后台常见css样式表\"></a>后台常见css样式表</h4><pre><code># copyright.php\nfunction hanchang_settings_page() {\n    ?&gt;\n    &lt;div class=&quot;wrap&quot;&gt;\n        &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n        &lt;div id=&quot;message&quot; class=&quot;updated&quot;&gt;设置保存成功&lt;/div&gt;\n        &lt;div id=&quot;message&quot; class=&quot;error&quot;&gt;保存出现错误&lt;/div&gt;\n        &lt;p&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-primary&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-secondary&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-large&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-small&quot; /&gt;\n            &lt;input type=&quot;submit&quot; name=&quot;Save&quot; value=&quot;保存设置&quot; class=&quot;button button-hero&quot; /&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;a href=&quot;#&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-primary&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-secondary&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-large&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-small&quot;&gt;搜索&lt;/a&gt;\n            &lt;a href=&quot;#&quot; class=&quot;button button-hero&quot;&gt;搜索&lt;/a&gt;\n        &lt;/p&gt;\n\n        &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt;\n            &lt;table class=&quot;form-table&quot;&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;xingming&quot;&gt;姓名：&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;&lt;input id=&quot;xingming&quot; name=&quot;xingming&quot; /&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;shenfen&quot;&gt;身份：&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;\n                        &lt;select name=&quot;shenfen&quot;&gt;\n                            &lt;option value=&quot;在校&quot;&gt;在校&lt;/option&gt;\n                            &lt;option value=&quot;毕业&quot;&gt;毕业&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;tongyi&quot;&gt;同意注册&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;tongyi&quot; /&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;xingbie&quot;&gt;性别&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;\n                        &lt;input type=&quot;radio&quot; name=&quot;xingbie&quot; value=&quot;男&quot; /&gt; 男\n                        &lt;input type=&quot;radio&quot; name=&quot;xingbie&quot; value=&quot;女&quot; /&gt; 女\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;th&gt;&lt;label for=&quot;beizhu&quot;&gt;备注&lt;/label&gt;&lt;/th&gt;\n                    &lt;td&gt;&lt;textarea name=&quot;beizhu&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr valign=&quot;top&quot;&gt;\n                    &lt;td&gt;\n                        &lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;保存&quot; class=&quot;button-primary&quot; /&gt;\n                        &lt;input type=&quot;submit&quot; name=&quot;reset&quot; value=&quot;重置&quot; class=&quot;button-secondary&quot; /&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/form&gt;\n\n        &lt;table class=&quot;widefat striped&quot;&gt;\n            &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;序号&lt;/th&gt;\n                &lt;th&gt;姓名&lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;/td&gt;\n                &lt;td&gt;黄聪&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;2&lt;/td&gt;\n                &lt;td&gt;黄聪&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;3&lt;/td&gt;\n                &lt;td&gt;黄聪&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;/tbody&gt;\n            &lt;tfoot&gt;\n            &lt;tr&gt;\n                &lt;th&gt;序号&lt;/th&gt;\n                &lt;th&gt;姓名&lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;/tfoot&gt;\n        &lt;/table&gt;\n\n        &lt;div class=&quot;tablenav&quot;&gt;\n            &lt;div class=&quot;tablenav-pages&quot;&gt;\n                &lt;span class=&quot;displaying-num&quot;&gt;第1页，共458页&lt;/span&gt;\n                &lt;span class=&quot;page-numbers current&quot;&gt;1&lt;/span&gt;\n                &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;2&lt;/a&gt;\n                &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;3&lt;/a&gt;\n                &lt;a href=&quot;#&quot; class=&quot;page-numbers&quot;&gt;4&lt;/a&gt;\n                &lt;a href=&quot;#&quot; class=&quot;next page-numbers&quot;&gt;»&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;?\n}</code></pre><h4 id=\"保存插件设置到数据库中\"><a href=\"#保存插件设置到数据库中\" class=\"headerlink\" title=\"保存插件设置到数据库中\"></a>保存插件设置到数据库中</h4><pre><code>├── hc-test\n│   ├── css\n│   ├── hc-test.php\n│   ├── images\n│   └── js\n\n\n\nhc-test.php\n\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\n//定义插件启动时候调用的方法\nregister_activation_hook( __FILE__, &apos;hc_test_install&apos;);\n\nfunction hc_test_install() {\n\n   global $wpdb;\n\n   if( $wpdb-&gt;get_var( &quot;SHOW TABLES LIKE &apos;{$wpdb-&gt;prefix}test&apos;&quot; ) != &quot;{$wpdb-&gt;prefix}test&quot; ) \n   {\n      $sql = &quot;CREATE TABLE IF NOT EXISTS `{$wpdb-&gt;prefix}test` (\n           `id` int(11) NOT NULL auto_increment COMMENT &apos;编号&apos;,\n           `color` varchar(10) DEFAULT &apos;&apos; COMMENT &apos;字体颜色&apos;,\n           `size`  varchar(10) DEFAULT &apos;&apos; COMMENT &apos;字体大小&apos;,\n           PRIMARY KEY  (`id`)\n         ) DEFAULT CHARSET=utf8 AUTO_INCREMENT=0;&quot;;\n      $wpdb-&gt;query( $sql );\n\n      $sql = &quot;REPLACE INTO `{$wpdb-&gt;prefix}test` VALUES (1, &apos;#FF0000&apos;,&apos;20&apos;);&quot;;\n      $wpdb-&gt;query( $sql );\n   }\n}\n\nadd_action( &apos;admin_menu&apos;, &apos;hc_test_create_menu&apos; );\n\nfunction hc_test_create_menu() {\n\n   //创建顶级菜单\n   add_menu_page( \n      &apos;HC-TEST&apos;, \n      &apos;HC的插件&apos;,\n      &apos;manage_options&apos;, \n      &apos;hc_test&apos; ,\n      &apos;hc_settings_page&apos;,\n      plugins_url( &apos;/images/icon.png&apos;, __FILE__ )\n   );\n}\n\nfunction hc_settings_page() {\n\n   global $wpdb;\n\n   //当提交了，并且验证信息正确\n   if( !empty( $_POST ) &amp;&amp; check_admin_referer( &apos;hc_test_nonce&apos; ) ) {\n\n      //更新设置\n      update_option( &apos;hc_test_bold&apos;, $_POST[&apos;hc_test_bold&apos;] );\n\n      $wpdb-&gt;update( &quot;{$wpdb-&gt;prefix}test&quot;, array( &apos;color&apos; =&gt; $_POST[&apos;color&apos;], &apos;size&apos; =&gt; $_POST[&apos;size&apos;] ), array( &apos;id&apos; =&gt; 1 ) );\n      ?&gt;\n      &lt;div id=&quot;message&quot; class=&quot;updated&quot;&gt;\n         &lt;p&gt;&lt;strong&gt;保存成功！&lt;/strong&gt;&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   $sql = &quot;SELECT * FROM `{$wpdb-&gt;prefix}test`&quot;;\n   $row = $wpdb-&gt;get_row( $sql, ARRAY_A );\n\n   $color = $row[&apos;color&apos;];\n   $size = $row[&apos;size&apos;];\n   ?&gt;\n   &lt;div class=&quot;wrap&quot;&gt;\n      &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n      &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;\n         &lt;p&gt;&lt;label for=&quot;color&quot;&gt;字体颜色：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;color&quot; value=&quot;&lt;?php echo $color; ?&gt;&quot; /&gt;&lt;/p&gt;\n         &lt;p&gt;&lt;label for=&quot;size&quot;&gt;字体大小：&lt;/label&gt;\n         &lt;select name=&quot;size&quot;&gt;\n            &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n            &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n            &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n            &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n            &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n         &lt;/select&gt;&lt;/p&gt;\n         &lt;p&gt;&lt;label for=&quot;hc_test_obold&quot;&gt;字体加粗：&lt;/label&gt;&lt;input name=&quot;hc_test_bold&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, get_option( &apos;hc_test_bold&apos; ) ); ?&gt; /&gt; 加粗&lt;/p&gt;\n         &lt;p&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;保存设置&quot; /&gt;&lt;/p&gt;\n         &lt;?\n            //输出一个验证信息\n            wp_nonce_field(&apos;hc_test_nonce&apos;);\n         ?&gt;\n      &lt;/form&gt;\n   &lt;/div&gt;\n   &lt;?\n}\n\nadd_action( &apos;wp_head&apos;, &apos;hc_test_head_fun&apos; );\n\nfunction hc_test_head_fun() {\n\n   global $wpdb;\n\n   //获取自定义数据库中的设置\n   $sql = &quot;SELECT * FROM `{$wpdb-&gt;prefix}test`&quot;;\n   $row = $wpdb-&gt;get_row( $sql, ARRAY_A );\n\n   //获取options表中的设置选项\n   $bold = get_option( &quot;hc_test_bold&quot; ) == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n\n   ?&gt;&lt;style&gt;body{color:&lt;? echo $row[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $row[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n}</code></pre><h4 id=\"使用wordpress内置api设置插件属性\"><a href=\"#使用wordpress内置api设置插件属性\" class=\"headerlink\" title=\"使用wordpress内置api设置插件属性\"></a>使用wordpress内置api设置插件属性</h4><pre><code># hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\nadd_action( &apos;admin_menu&apos;, &apos;test_create_menu&apos; );\n\nfunction test_create_menu() {\n\n   //创建顶级菜单\n   add_menu_page(\n      &apos;HC的插件首页&apos;,\n      &apos;HC的插件&apos;,\n      &apos;manage_options&apos;,\n      &apos;hc_test&apos; ,\n      &apos;hc_settings_page&apos;,\n      plugins_url( &apos;/images/icon.png&apos;, __FILE__ )\n   );\n}\n\nadd_action( &apos;admin_init&apos;, &apos;register_hc_test_setting&apos; );\n\n//使用register_setting()注册要存储的字段\nfunction register_hc_test_setting() {\n\n   //注册一个选项，用于装载所有插件设置项\n   $option_group = &quot;hc_test_group&quot;;\n   register_setting( $option_group, &apos;hc_test_option&apos; );\n\n   //添加选项设置区域\n   $setting_section = &quot;hc_test_setting_section&quot;;\n   add_settings_section(\n      $setting_section,\n      &apos;设置&apos;,  // 标题\n      &apos;hc_test_setting_section_function&apos;,  // 调用方法，自定义输出\n      $option_group\n   );\n\n   //设置字体颜色\n   add_settings_field(\n      &apos;hc_test_color&apos;,  // 字段id\n      &apos;字体颜色&apos;,  // 字段标题\n      &apos;hc_test_color_function&apos;, // 字段对应函数方法\n      $option_group,  // 字段对应分组\n      $setting_section  // 字段对应设置选项\n   );\n\n   //设置字体大小\n   add_settings_field(\n      &apos;hc_test_size&apos;,\n      &apos;字体大小&apos;,\n      &apos;hc_test_size_function&apos;,\n      $option_group,\n      $setting_section\n   );\n\n   //设置字体加粗\n   add_settings_field(\n      &apos;hc_test_bold&apos;,\n      &apos;字体加粗&apos;,\n      &apos;hc_test_bold_function&apos;,\n      $option_group,\n      $setting_section\n   );\n}\n\nfunction hc_test_bold_function() {\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n   ?&gt;\n   &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n   &lt;?\n}\n\nfunction hc_test_size_function() {\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n   $size = $hc_test_option[&quot;size&quot;];\n   ?&gt;\n   &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n      &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n      &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n      &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n      &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n      &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n   &lt;/select&gt;\n   &lt;?\n}\n\nfunction hc_test_color_function() {\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n   ?&gt;\n   &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n   &lt;?\n}\n\nfunction hc_settings_page() {\n   ?&gt;\n   &lt;div class=&quot;wrap&quot;&gt;\n      &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n      &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n         &lt;?\n         $option_group = &quot;hc_test_group&quot;;\n\n         //输出一些必要的字段，包括验证信息等\n         settings_fields( $option_group );\n\n         //输出选项设置区域\n         do_settings_sections( $option_group );\n\n         //输出按钮\n         submit_button();\n         ?&gt;\n      &lt;/form&gt;\n   &lt;/div&gt;\n   &lt;?\n}\n\n\nadd_action( &apos;wp_head&apos;, &apos;hc_test_head_fun&apos; );\n\nfunction hc_test_head_fun() {\n\n   $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n   $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n   ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n}</code></pre><h4 id=\"将插件改写成类的形式\"><a href=\"#将插件改写成类的形式\" class=\"headerlink\" title=\"将插件改写成类的形式\"></a>将插件改写成类的形式</h4><pre><code>#hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\n\nclass hcsem_change_font_style {\n\n   //声明类里面的属性，用 var 开头\n   var $icon_url = &quot;/images/icon.png&quot;;\n   var $option_group = &quot;hc_test_group&quot;;\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      //创建菜单\n      add_action( &apos;admin_menu&apos;, array( $this, &apos;hc_create_menu&apos; ) );\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //添加选项设置区域\n      $setting_section = &quot;hc_test_setting_section&quot;;\n      add_settings_section(\n         $setting_section,\n         &apos;&apos;,\n         &apos;&apos;,\n         $this-&gt;option_group\n      );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         &apos;字体颜色&apos;,\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         &apos;字体大小&apos;,\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         &apos;字体加粗&apos;,\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;?\n   }\n\n   function hc_create_menu() {\n\n      //创建顶级菜单\n      add_menu_page(\n         &apos;HC的插件首页&apos;,\n         &apos;HC的插件&apos;,\n         &apos;manage_options&apos;,\n         &apos;hc_test&apos; ,\n         array( $this, &apos;hc_settings_page&apos; ),\n         plugins_url( $this-&gt;icon_url, __FILE__ )\n      );\n   }\n\n   function hc_settings_page() {\n      ?&gt;\n      &lt;div class=&quot;wrap&quot;&gt;\n         &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n         &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n            &lt;?\n            //输出一些必要的字段，包括验证信息等\n            settings_fields( $this-&gt;option_group );\n\n            //输出选项设置区域\n            do_settings_sections( $this-&gt;option_group );\n\n            //输出按钮\n            submit_button();\n            ?&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();</code></pre><h4 id=\"将插件设置内容转移到wordpress设置里\"><a href=\"#将插件设置内容转移到wordpress设置里\" class=\"headerlink\" title=\"将插件设置内容转移到wordpress设置里\"></a>将插件设置内容转移到wordpress设置里</h4><pre><code># hc-test.php\n\nclass hcsem_change_font_style {\n\n   var $option_group = &quot;general&quot;;  // general常规 writing撰写 reading阅读 discussion讨论 media多媒体 permalink固定链接\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         &apos;字体颜色&apos;,\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         &apos;字体大小&apos;,\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         &apos;字体加粗&apos;,\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();</code></pre><h4 id=\"调用ajax\"><a href=\"#调用ajax\" class=\"headerlink\" title=\"调用ajax\"></a>调用ajax</h4><pre><code># hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\nclass hcsem_change_font_style {\n\n   //声明类里面的属性，用 var 开头\n   var $icon_url = &quot;/images/icon.png&quot;;\n   var $option_group = &quot;hc_test_group&quot;;\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      //创建菜单\n      add_action( &apos;admin_menu&apos;, array( $this, &apos;hc_create_menu&apos; ) );\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n\n      //使用ajax校验信息\n      wp_enqueue_script( &apos;hc_test&apos;, plugins_url(&apos;js/hc_test.js&apos;, __FILE__), array(&apos;jquery&apos;) );\n      wp_localize_script( &apos;hc_test&apos;, &apos;ajax_object&apos;, array( &apos;ajax_url&apos; =&gt; admin_url( &apos;admin-ajax.php&apos; ) ) );\n\n      add_action( &apos;wp_ajax_color_check_action&apos; , array( $this, &apos;color_check_action_fun&apos;) );\n      add_action( &apos;wp_ajax_nopriv_hcsem_description&apos; , array( $this, &apos;hcsem_description_fun&apos;) );\n   }\n\n   function color_check_action_fun(){\n\n      if( trim( $_POST[&apos;color&apos;] ) != &quot;&quot; ){ echo &quot;ok&quot;; }\n      wp_die();\n   }\n\n   function hcsem_description_fun() {\n\n      echo &quot;hc的笔记本：&quot; . $_POST[&apos;description&apos;];\n      wp_die();\n\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //添加选项设置区域\n      $setting_section = &quot;hc_test_setting_section&quot;;\n      add_settings_section(\n         $setting_section,\n         &apos;&apos;,\n         &apos;&apos;,\n         $this-&gt;option_group\n      );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         &apos;字体颜色&apos;,\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         &apos;字体大小&apos;,\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         &apos;字体加粗&apos;,\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; 加粗\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;font id=&quot;error_color&quot;&gt;&lt;/font&gt;&lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_create_menu() {\n\n      //创建顶级菜单\n      add_menu_page(\n         &apos;HC的插件首页&apos;,\n         &apos;HC的插件&apos;,\n         &apos;manage_options&apos;,\n         &apos;hc_test&apos; ,\n         array( $this, &apos;hc_settings_page&apos; ),\n         plugins_url( $this-&gt;icon_url, __FILE__ )\n      );\n   }\n\n   function hc_settings_page() {\n      ?&gt;\n      &lt;div class=&quot;wrap&quot;&gt;\n         &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n         &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n            &lt;?\n            //输出一些必要的字段，包括验证信息等\n            settings_fields( $this-&gt;option_group );\n\n            //输出选项设置区域\n            do_settings_sections( $this-&gt;option_group );\n\n            //输出按钮\n            submit_button();\n            ?&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();\n\n\n# js/hc_test.js\njQuery(document).ready( function($) {\n   $(&quot;input[name=&apos;hc_test_option[color]&apos;]&quot;).blur( function() {\n      $.ajax({\n         type: &quot;POST&quot;,\n         data: &quot;color=&quot; + $(this).val() + &quot;&amp;action=hc_color_check&quot;,\n         url: ajax_object.ajax_url,\n         beforeSend: function() {\n            $(&apos;#error_color&apos;).html(&apos;校验中...&apos;); \n         },\n         success: function( $data ) {\n            if( $data == &apos;ok&apos;){\n                $(&apos;#error_color&apos;).html(&apos;输入正确&apos;);  \n            } else {\n                $(&apos;#error_color&apos;).html(&apos;颜色不能为空！&apos;); \n            }\n         }\n      });\n   });\n});\n\n\njQuery(document).ready( function($) {\n   $(&quot;.description&quot;).click( function() {\n      $.ajax({\n         type: &quot;POST&quot;,\n         data: &quot;description=&quot; + $(this).text() + &quot;&amp;action=hcsem_description&quot;,\n         url: ajax_object.ajax_url,\n         success : function( $data ) {\n\n            if( $data != &quot;0&quot; ) {\n               $(&quot;.description&quot;).text( $data );\n            }\n         }\n      });\n   });\n});</code></pre><h4 id=\"实现插件翻译功能\"><a href=\"#实现插件翻译功能\" class=\"headerlink\" title=\"实现插件翻译功能\"></a>实现插件翻译功能</h4><pre><code>.\n├── css\n│   └── hc_copyrighy.css\n├── hc-test.php\n├── images\n│   └── icon.png\n├── js\n│   └── hc_test.js\n└── languages\n    ├── zh_CN.mo\n    └── zh_CN.po\n\n\n\n# hc-test.php\n&lt;?php\n/*\nPlugin Name: hc-test\nPlugin URI: http://zhuohc.com\nDescription: 测试插件\nVersion: 1.0\nAuthor: hc\nAuthor URI: http://zhuohc.com\nLicense: GPLv2\n*/\n\n//设置时区为 亚洲/上海\ndate_default_timezone_set(&apos;Asia/Shanghai&apos;);\n\nclass hcsem_change_font_style {\n\n   //声明类里面的属性，用 var 开头\n   var $icon_url = &quot;/images/icon.png&quot;;\n   var $option_group = &quot;hc_test_group&quot;;\n\n   //构造方法，创建类的时候调用\n   function hcsem_change_font_style() {\n\n      //创建菜单\n      add_action( &apos;admin_menu&apos;, array( $this, &apos;hc_create_menu&apos; ) );\n      add_action( &apos;admin_init&apos;, array( $this, &apos;register_hc_test_setting&apos; ) );\n      add_action( &apos;wp_head&apos;,  array( $this,  &apos;hc_test_head_fun&apos; ) );\n\n      //使用ajax校验信息\n      wp_enqueue_script( &apos;hc_test&apos;, plugins_url(&apos;js/hc_test.js&apos;, __FILE__), array(&apos;jquery&apos;) );\n      wp_localize_script( &apos;hc_test&apos;, &apos;ajax_object&apos;, array( &apos;ajax_url&apos; =&gt; admin_url( &apos;admin-ajax.php&apos; ) ) );\n\n      add_action( &apos;wp_ajax_color_check_action&apos; , array( $this, &apos;color_check_action_fun&apos;) );\n      add_action( &apos;wp_ajax_nopriv_hcsem_description&apos; , array( $this, &apos;hcsem_description_fun&apos;) );\n\n      add_action( &apos;init&apos;, array( $this, &apos;hcsem_load_textdomain&apos; ) );\n   }\n\n   function hcsem_load_textdomain() {\n\n      //加载 languages 目录下的翻译文件 zh_CN\n      $currentLocale = get_locale();\n\n      if( !empty( $currentLocale ) ) {\n\n         $moFile = dirname(__FILE__) . &quot;/languages/{$currentLocale}.mo&quot;;\n\n         if( @file_exists( $moFile ) &amp;&amp; is_readable( $moFile ) ) load_textdomain( &apos;hc-test&apos;, $moFile );\n      }\n   }\n\n   function color_check_action_fun(){\n\n      if( trim( $_POST[&apos;color&apos;] ) != &quot;&quot; ){ echo &quot;ok&quot;; }\n      wp_die();\n   }\n\n   function hcsem_description_fun() {\n\n      echo &quot;HC的笔记本：&quot; . $_POST[&apos;description&apos;];\n      wp_die();\n\n   }\n\n   //使用register_setting()注册要存储的字段\n   function register_hc_test_setting() {\n\n      //注册一个选项，用于装载所有插件设置项\n      register_setting( $this-&gt;option_group, &apos;hc_test_option&apos; );\n\n      //添加选项设置区域\n      $setting_section = &quot;hc_test_setting_section&quot;;\n      add_settings_section(\n         $setting_section,\n         &apos;&apos;,\n         &apos;&apos;,\n         $this-&gt;option_group\n      );\n\n      //设置字体颜色\n      add_settings_field(\n         &apos;hc_test_color&apos;,\n         __( &apos;color&apos;, &apos;hc-test&apos; ),\n         array( $this, &apos;hc_test_color_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体大小\n      add_settings_field(\n         &apos;hc_test_size&apos;,\n         __( &apos;size&apos;, &apos;hc-test&apos; ),\n         array( $this, &apos;hc_test_size_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n\n      //设置字体加粗\n      add_settings_field(\n         &apos;hc_test_bold&apos;,\n         __( &apos;bold&apos;, &apos;hc-test&apos; ),\n         array( $this, &apos;hc_test_bold_function&apos; ),\n         $this-&gt;option_group,\n         $setting_section\n      );\n   }\n\n   function hc_test_bold_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&quot;hc_test_option[bold]&quot; type=&quot;checkbox&quot;  value=&quot;1&quot; &lt;? checked( 1, $hc_test_option[&quot;bold&quot;] ); ?&gt; /&gt; &lt;? _e( &apos;set bold&apos;, &apos;hc-test&apos; ); ?&gt;\n      &lt;?\n   }\n\n   function hc_test_size_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      $size = $hc_test_option[&quot;size&quot;];\n      ?&gt;\n      &lt;select name=&quot;hc_test_option[size]&quot;&gt;\n         &lt;option value=&quot;12&quot; &lt;? selected( &apos;12&apos;, $size ); ?&gt;&gt;12&lt;/option&gt;\n         &lt;option value=&quot;14&quot; &lt;? selected( &apos;14&apos;, $size ); ?&gt;&gt;14&lt;/option&gt;\n         &lt;option value=&quot;16&quot; &lt;? selected( &apos;16&apos;, $size ); ?&gt;&gt;16&lt;/option&gt;\n         &lt;option value=&quot;18&quot; &lt;? selected( &apos;18&apos;, $size ); ?&gt;&gt;18&lt;/option&gt;\n         &lt;option value=&quot;20&quot; &lt;? selected( &apos;20&apos;, $size ); ?&gt;&gt;20&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;?\n   }\n\n   function hc_test_color_function() {\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n      ?&gt;\n      &lt;input name=&apos;hc_test_option[color]&apos; type=&apos;text&apos; value=&apos;&lt;? echo $hc_test_option[&quot;color&quot;]; ?&gt;&apos; /&gt;\n      &lt;font id=&quot;error_color&quot;&gt;&lt;/font&gt;&lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_create_menu() {\n\n      //创建顶级菜单\n      add_menu_page(\n         &apos;hc的插件首页&apos;,\n         &apos;hc的插件&apos;,\n         &apos;manage_options&apos;,\n         &apos;hc_test&apos; ,\n         array( $this, &apos;hc_settings_page&apos; ),\n         plugins_url( $this-&gt;icon_url, __FILE__ )\n      );\n   }\n\n   function hc_settings_page() {\n      ?&gt;\n      &lt;div class=&quot;wrap&quot;&gt;\n         &lt;h2&gt;插件顶级菜单&lt;/h2&gt;\n         &lt;form action=&quot;options.php&quot; method=&quot;post&quot;&gt;\n            &lt;?\n            //输出一些必要的字段，包括验证信息等\n            settings_fields( $this-&gt;option_group );\n\n            //输出选项设置区域\n            do_settings_sections( $this-&gt;option_group );\n\n            //输出按钮\n            submit_button();\n            ?&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;?\n   }\n\n   function hc_test_head_fun() {\n\n      $hc_test_option = get_option( &quot;hc_test_option&quot; );\n\n      $bold = $hc_test_option[&quot;bold&quot;] == 1 ? &quot;bold&quot; : &quot;normal&quot;;\n      ?&gt;&lt;style&gt;body{color:&lt;? echo $hc_test_option[&quot;color&quot;] ?&gt;;font-size:&lt;? echo $hc_test_option[&quot;size&quot;] ?&gt;px;font-weight:&lt;? echo $bold; ?&gt;;}&lt;/style&gt;&lt;?\n   }\n}\n\nnew hcsem_change_font_style();</code></pre>"},{"title":"Javascript基础入门","url":"86.html","id":"86","comments":0,"date":"2016-11-10T02:19:51.000Z","_content":"\n### 数据类型\n\n> object(包含Function，Array，Date等)  \n> number  \n> string  \n> boolean  \n> null  \n> undefined\n\n### 类型检测\n\ntypeof 基本类型，function， null可以用===判断\n\n    typeof 100           // \"number\"   \n    typeof true          // \"boolean\"    \n    typeof function      // \"function\"    \n    typeof undefined     // \"undefined\"  \n    typeof new Object()  // \"object\"  \n    typeof [1, 2]        // \"object\"  \n    typeof NaN           // \"number\"  \n    typeof null          // \"object\"  \n    \n\ninstanceof\n\n    // 不同window或iframe下返回false\n    [1, 2] instanceof Array === true  \n    new Object instanceof Array === fasle\n    \n\nObject.prototype.toString\n\n    Object.prototype.toString.apply([1, 2, 3]) === \"[object Array]\";  \n    Object.prototype.toString.apply(function(){}) === \"[object Function]\"  \n    Object.prototype.toString.apply(null) === \"[object Null]\"  // ie678返回[object Object]  \n    Object.prototype.toString.apply(undefined) === \"[object Undefined]\"  \n    Object.prototype.toString.apply(12313) === \"[object Number]\"  \n    Object.prototype.toString.apply('12313') === \"[object String]\"\n    \n\nconstructor  \nduck type\n\n### 表达式\n\n表达式是一种js短语，可使js解释器用来产生一个值\n\n    // 原始表达式\n    3.14, \"test\"      // 常量，直接量\n    null, this, true  // 关键字\n    i, j, k;           // 变量\n    \n    // 复合表达式\n    10 * 20;           // 原始表达式+运算符+原始表达式\n    \n    // 初始化表达式\n    [1, 2];\n    [1,,2];\n    {x: 1, y: 2};\n    \n    // 函数表达式\n    var fe = function(){};\n    (function(){console.log('1111');}){};\n    \n    // 属性访问表达式\n    var o = {x:1};\n    o.x;\n    o['x'];\n    \n    // 调用表达式\n    func();\n    \n    // 对象创建表达式\n    new Func(1, 2);\n    new Object;\n    \n\n### 运算符\n\n> 一元（+num）  \n> 二元（a + b）  \n> 三元（c：a：b） 赋值(x += 1)  \n> 比较(a == b)  \n> 算术（a - b）  \n> 位 （a | b）  \n> 逻辑 (exp1 && exp2)  \n> 字符串(\"a\" + \"b\")  \n> 特殊\n\n### 特殊运算符\n\n> c? a:b  \n> var val = (1, 2, 3) // 逗号运算符  \n> delete obj.x // 删除对象属性  \n> 'x' in window; // in 运算符  \n> instanceof, typeof // 判断类型  \n> new Foo(); // new 运算符  \n> this // this运算符  \n> void 0 // undefined\n\n### 语句\n\n块语句block  \n块语句是没有作用域的\n\n    {  \n    var str = 'hi';  \n    console.log(str);  \n    }  \n    \n\n声明语句 var  \nvar a=1, b=1; 函数语句function\n\n    // 函数声明语句  \n    function fd() {  \n        return true;  \n    }    \n    // 函数表达式  \n    var fe = function() {\n        //do sth\n    };\n    \n\nfor in 语句\n\n    var p;  \n    var obj = {x:1, y:2};  \n    for(p in obj) {\n        // 顺序不确定  \n    }\n    \n    \n\nswith语句\n\n    var val = 2;\n    switch (val) {\n        case 1:\n            console.log(1);\n            break;\n        case 2:\n            console.log(2);\n            break;\n        case 3:\n            console.log(3);\n            break;\n        default:\n            console.log(0);\n            break;\n    }\n    \n\n循环语句\n\n    while (isTrue) {\n        // do sth\n    }\n    \n    do {\n        // do sth\n    } while (isTrue)\n    \n    var i;\n    for (i = 0; i < n; i++) {\n        // do sth\n    }\n    \n\nwith语句 // 不使用 try catch语句\n\n    try {\n        try {\n            throw new Error('oops');\n        } catch(ex) {\n            console.error('inner catch', ex.message);\n            throw ex;\n        } finally {\n            console.log('inner  finally');\n        }\n    } catch(ex) {\n        console.error('outer catch', ex.message);\n    } finally {\n        console.log('outer finally');\n    }\n    \n\n结果 内部catch>内部finally>外部catch>外部finally\n\n    inner catch oops  \n    inner  finally  \n    outer catch oops  \n    outer finally  \n    \n\n### 严格模式(待补充）\n\n    function func() {\n        'use strict';\n    }\n    \n\n### 对象\n\n对象创建  \n字面量创建\n\n    var obj = {x: 1};\n    console.log(obj);\n    console.log(obj.y);\n    Object.prototype.y = 2;\n    console.log(obj);\n    console.log(obj.y);\n    obj.y = undefined;\n    console.log(obj);\n    console.log(obj.y);\n    \n\n    { x: 1 }\n    undefined\n    { x: 1 }\n    2\n    { x: 1, y: undefined }\n    undefined\n    \n\nnew构造器创建\n\n    function foo() { this.color = 'red';}\n    foo.prototype.background = '#000';\n    var redColor = new foo();\n    console.log(redColor);\n    console.log(typeof redColor.toString);\n    console.log(redColor.color);\n    console.log(redColor.background);\n    console.log(foo);\n    console.log(foo.prototype);\n    console.log(foo.prototype.prototype);\n    console.log('background' in redColor);\n    redColor.background = '#FFF';\n    console.log(redColor.background);\n    console.log(foo.prototype.background);\n    \n\n    foo { color: 'red' }\n    function\n    red\n    #000\n    [Function: foo]\n    foo { background: '#000' }\n    undefined\n    true\n    #FFF\n    #000\n    \n\nObject.create()创建\n\n    function obj() {\n        this.x = 1;\n    }\n    console.log(obj);\n    var obj1 = new obj();\n    console.log(obj1);\n    var obj2 = Object.create(obj);\n    console.log(obj2);\n    console.log(obj2.x);\n    var obj3 = Object.create(obj1);\n    console.log(obj3);\n    console.log(obj3.x);;\n    \n\n    [Function: obj]\n    obj { x: 1 }\n    Function {}\n    undefined\n    obj {}\n    1\n    \n\n### 对象的内部原型(**proto**)和构造器的原型（prototype）的关系。\n\n一、所有构造器/函数的**proto**都指向Function.prototype，它是一个空函数（Empty function）\n\n    Number.__proto__ === Function.prototype  // true  \n    Boolean.__proto__ === Function.prototype // true  \n    String.__proto__ === Function.prototype  // true  \n    Object.__proto__ === Function.prototype  // true  \n    Function.__proto__ === Function.prototype // true  \n    Array.__proto__ === Function.prototype   // true  \n    RegExp.__proto__ === Function.prototype  // true  \n    Error.__proto__ === Function.prototype   // true  \n    Date.__proto__ === Function.prototype    // true  \n    Math.__proto__ === Object.prototype  // true  \n    JSON.__proto__ === Object.prototype  // true \n    // 函数声明\n    function Person() {}\n    // 函数表达式\n    var Man = function() {}\n    console.log(Person.__proto__ === Function.prototype) // true  \n    console.log(Man.__proto__ === Function.prototype)    // true  \n    \n\n所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5）\n\n    console.log(typeof Function.prototype) // function\n    console.log(typeof Object.prototype)   // object\n    console.log(typeof Number.prototype)   // object\n    console.log(typeof Boolean.prototype)  // object\n    console.log(typeof String.prototype)   // object\n    console.log(typeof Array.prototype)    // object\n    console.log(typeof RegExp.prototype)   // object\n    console.log(typeof Error.prototype)    // object\n    console.log(typeof Date.prototype)     // object\n    console.log(typeof Object.prototype)   // object  \n    console.log(Function.prototype.__proto__ === Object.prototype) // true    \n    Object.prototype.__proto__ === null  // true  \n    \n\n二、所有对象的**proto**都指向其构造器的prototype  \nJavaScript引擎内置构造器\n\n    var obj = {name: 'jack'}\n    var arr = [1,2,3]\n    var reg = /hello/g\n    var date = new Date\n    var err = new Error('exception')\n    \n    console.log(obj.__proto__ === Object.prototype) // true\n    console.log(arr.__proto__ === Array.prototype)  // true\n    console.log(reg.__proto__ === RegExp.prototype) // true\n    console.log(date.__proto__ === Date.prototype)  // true\n    console.log(err.__proto__ === Error.prototype)  // true\n    \n\n自定义的构造器\n\n    function Person(name) {\n        this.name = name\n    }\n    var p = new Person('jack')\n    console.log(p.__proto__ === Person.prototype) // true\n    \n\n每个对象都有一个constructor属性，可以获取它的构造器\n\n    function Person(name) {\n        this.name = name\n    }\n    var p = new Person('jack')\n    console.log(p.__proto__ === p.constructor.prototype) // true\n    \n\n### 对象属性操作\n\n属性读写\n\n    // 属性读写\n    var obj = {x1: 1, x2: 2};\n    var i = 1, n = 2;\n    for(; i<= n; i++) {\n        console.log(obj['x' + i]);\n    }\n    // 输出1，2\n    \n    var p;\n    for(p in obj) {\n        console.log(obj[p]);\n    }\n    // 输出1，2\n    \n    var obj = {x: 1};\n    // 读写异常\n    console.log(obj.y); // undefined\n    var yz = obj.y.z;  // TypeError: Cannot read property 'z' of undefined\n    obj.y.z = 2;      //TypeError: Cannot set property 'z' of undefined\n    // 正确方式\n    var yz;\n    if(obj.y) {\n        yz = obj.y.z;\n    }\n    // 或者\n    var yz = obj && obj.y && obj.y.z  // 这个会返回undefined\n    \n\n属性删除\n\n    var person = {age: 28, title: 'fe'};\n    console.log(delete person.age);  // true\n    console.log(delete person['age']);  // true\n    console.log(person.age);  // undefined\n    console.log(delete person.age);   // 注意这个也返回true 判断操作结束后该属性是否存在\n    \n    // 有些属性是不能删除的\n    console.log(delete Object.prototype);  // false\n    \n    // 原因\n    var descriptor = Object.getOwnPropertyDescriptor(Object, 'prototype');\n    console.log(descriptor.configurable);  // false\n    \n    // 变量及函数不可删除\n    var globalVal = 1;\n    console.log(delete globalVal);  // false\n    \n    (function() {\n        var localVal = 1;\n        console.log(delete localVal);\n    }());  // false\n    \n    function fd() {}\n    console.log(delete fd);  // false\n    \n    (function() {\n        function fd() {};\n        console.log(delete fd);\n    }());  // false\n    \n    \n    // 隐示定义的变量可以\n    ohNo = 1;\n    console.log(delete ohNo);  // true\n    \n\n对象属性检测\n\n    var cat = new Object();\n    cat.legs = 4;\n    cat.name = 'Kitty';\n    \n    console.log('legs' in cat);  // true\n    console.log('abc' in cat);  // false\n    console.log('toString' in cat);  // true 继承属性\n    \n    console.log(cat.hasOwnProperty('legs'));  // true\n    console.log(cat.hasOwnProperty('toString'));  // false\n    \n    console.log(cat.propertyIsEnumerable('legs'));  // true\n    console.log(cat.propertyIsEnumerable('toString'));  // false\n    \n    \n    Object.defineProperty(cat, 'price', {enumerable: false, value: 1000});\n    // defineProperty是Object的方法，默认的标签enumerable值为false\n    // Object.x创建属性，默认的标签值为true\n    console.log(cat.propertyIsEnumerable('price'));  // false\n    console.log(cat.hasOwnProperty('price'));  // true\n    \n    \n    // 判断属性是否存在\n    if(cat && cat.legs) {\n        cat.legs *= 2;\n    }\n    \n    if(cat.legs != undefined) {\n        // !== undefined 或者 !== null\n    }\n    if(cat.legs !== undefined) {\n        // !== undefined\n    }\n    \n\n对象属性枚举\n\n    var o = {x: 1, y: 2, z: 3};\n    console.log('toString' in o);  // true\n    o.propertyIsEnumerable('toString');  // false\n    \n    var key;\n    console.log(o.x);  // 1\n    console.log(o.y);  // 2\n    console.log(o.z);  // 3\n    for(key in o) {\n        console.log(key);  // x, y, z\n        console.log(o.key);  // undefined\n        console.log(o[key]);  // 1, 2, 3\n    }\n    \n    \n    var obj = Object.create(o);\n    obj.a = 4;\n    var key;\n    for(key in obj) {\n        console.log(key); // a, x, y, z\n    }\n    var key1;\n    for (key1 in obj) {\n        if(obj.hasOwnProperty(key1)) {\n            console.log(key1); // a\n        }\n    }\n    \n\n对象属性的get/set方法\n\n    // 对象属性的get/set方法\n    var man = {\n        name: 'Bug',\n        weibo: 'Bug',\n        get age() {\n            return new Date().getFullYear() - 1988;\n        },\n        set age(val) {\n            console.log('cannot be set ' + val);\n        },\n    };\n    \n    console.log(man.age);  // 调用age的get方法27\n    man.age = 100;  // 调用age的set方法 cannot be set 100\n    console.log(man.age);  // 27\n    \n    \n    var man = {\n        weibo: 'Bug',\n        $age: null,\n        get age() {\n            if(this.$age == undefined) {\n                return new Date().getFullYear() - 1988;\n            } else {\n                return this.$age;\n            }\n        },\n        set age(val) {\n            val = +val; // 转为数字\n            if(!isNaN(val) && val > 0 && val < 150) {\n                this.$age = + val;\n            } else {\n                throw new Error('Incorrect val = ' + val );\n            }\n        }\n    }\n    \n    console.log(man.age);  // 27\n    man.age = 100;\n    console.log(man.age);  // 100\n    //man.age = 'abc';  // Error: Incorrect val = NaN\n    \n    \n    // get/set方法与原型链\n    \n    // 这是错误的定义对象属性get方法方式\n    function foo1() {}\n    foo1.prototype.z = {\n        get: function() {\n            return 2;\n        }\n    };\n    var obj = new foo1();\n    console.log(obj.z);  // 这个会被认为是对象 { get: [Function] }\n    obj.z = 200;\n    console.log(obj.z);  // 200\n    \n    // 正确定义方法\n    function foo() {}\n    Object.defineProperty(foo.prototype, 'z', {\n        get: function() {\n            return 1;\n        },\n        // configurable: true,  // 开启此属于也不会被改变\n        // writable: true,  // 此项不能配置writable/value get/set 二选一\n     });\n    var obj = new foo();\n    console.log(obj.z);   // 1\n    obj.z = 100;\n    console.log(obj.z);  // 但是还是1 并没有被改变\n    \n    Object.defineProperty(obj, 'z', {\n        value: 100,\n        configurable: true\n    });\n    console.log(obj.z);  // 100\n    delete obj.z;\n    console.log(obj.z);  // 返回到1\n    \n    // 另外一个例子\n    var o = {};\n    Object.defineProperty(o, 'x', {\n        value: 1\n    });  // 默认writable: false, configurable: false\n    var obj = Object.create(o);\n    console.log(obj.x);  // 1\n    obj.x = 100;\n    console.log(obj.x);  // 还是1\n    \n    \n    Object.defineProperty(obj, 'x', {\n        writable: true,\n        configurable: true,\n        value: 100\n    });\n    console.log(obj.x);  // 100\n    obj.x = 200;\n    console.log(obj.x); // 200\n    \n\n### 对象属性标签\n\n    person = {};\n    Object.defineProperty(person, 'type', {\n        configurable: false,\n        writable: true,\n        enumerable: false,\n        value: 'Object',\n    });\n    \n    console.log(Object.keys(person));   // [] 返回空数组，不能枚举\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // { value: 'Object', writable: true, enumerable: false, configurable: false }\n    \n    \n    // writable为true，可以通过赋值方法修改value值 [通过赋值修改属性值只和writable标签有关，和configurable无关]\n    person.type = 'Object2';\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));  // { value: 'Object2', writable: true, enumerable: false, configurable: false }\n    \n    \n    // configurable: false 无法使用delete删除属性， 无法使用get/set方法，  无法重新配置属性标签（除了将writable从true修改为false）\n    console.log(delete person.type);   // 返回false\n    \n    \n    // 只有writable和configurable标签都为false时，不能修改value标签值，其他情况都可以修改value标签值\n    Object.defineProperty(person, 'type', {\n        configurable: false,\n        writable: true,\n        enumerable: false,\n        value: 'Object1',\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // { value: 'Object1', writable: true, enumerable: false, configurable: false }\n    \n    \n    // 可以重新配置writable标签值(只能重true改为false)\n    Object.defineProperty(person, 'type', {\n        writable: false,\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // { value: 'Object1', writable: false, enumerable: false, configurable: false }\n    \n    \n    // 无法将writable从false改为true\n    Object.defineProperty(person, 'type', {\n        writable: true,\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // TypeError: Cannot redefine property: type\n    \n    \n    // 无法重新配置enumerable，configurable属性\n    Object.defineProperty(person, 'type', {\n        enumerable: true,\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // TypeError: Cannot redefine property: type\n    \n\n### 对象标签\n\n原型标签**proto**\n\n    // 原型标签__proto__\n    \n    function Person(name) {\n        this.name = name;\n    }\n    var p = new Person('jack');\n    console.log(p.__proto__ === Person.prototype);  // true\n    \n\n类型标签\n\n    //  对象class标签，表示对象是哪个类型，没有直接的方法去修改或者获取\n    var toString = Object.prototype.toString;\n    \n    console.log(toString.call(null));  // [object Null]\n    console.log(toString.call(undefined));  // [object Undefined]\n    console.log(toString.call(1));  // [object Number]\n    console.log(toString.call(new Number(1)));  // [object Number]\n    console.log(toString.call(true));  // [object Boolean]\n    console.log(toString.call(new Boolean(true)));  // [object Boolean]\n    \n\n可扩展标签\n\n    // extensible 可扩展标签，表示是否可以继续添加对象属性\n    var obj = {x: 1, y: 2};\n    console.log(Object.isExtensible(obj));  // true 对象可扩展\n    Object.preventExtensions(obj);  // 配置对象不可扩展\n    console.log(Object.isExtensible(obj));  // false 对象不可扩展\n    obj.z =1;\n    console.log(obj.z);  // undefined 添加属性失败\n    console.log(Object.getOwnPropertyDescriptor(obj, 'x'));  // // { value: 1, writable: true, enumerable: true, configurable: true }\n    \n    \n    // Object.seal方法，对象的所有属性configurable值为false\n    Object.seal(obj);\n    console.log(Object.getOwnPropertyDescriptor(obj, 'x'));  // { value: 1, writable: true, enumerable: true, configurable: false }\n    console.log(Object.isSealed(obj)); // true\n    \n    \n    // Object.freeze方法，对象的所有属性configurable，writable标签值为false\n    Object.freeze(obj);\n    console.log(Object.getOwnPropertyDescriptor(obj, 'x'));   // // { value: 1, writable: false, enumerable: true, configurable: false }\n    console.log(Object.isFrozen(obj));  // true\n    \n\n### JS对象与json格式转换\n\n    // 将js对象转为json格式JSON.stringify()\n    var obj = {x: 1, y: true, z: [1, 2, 3], nullVal: null};\n    console.log(JSON.stringify(obj));  // {\"x\":1,\"y\":true,\"z\":[1,2,3],\"nullVal\":null}\n    \n    // undefined,NaN,Infinity等特殊属性值\n    var obj = {val: undefined, a: NaN, b: Infinity, c: new Date()};\n    console.log(JSON.stringify(obj));  // {\"a\":null,\"b\":null,\"c\":\"2015-12-19T12:30:40.456Z\"}\n    \n    // 将json格式转为js对象JSON.parse\n    var obj = JSON.parse('{\"x\": 1}');\n    console.log(obj.x);  // 1\n    \n    //toJSON方法\n    var obj = {\n        x: 1,\n        y: 2,\n        o: {\n            o1: 1,\n            o2: 2,\n            toJSON: function() {\n                return this.o1 + this.o2;\n            }\n        },\n    };\n    console.log(JSON.stringify(obj));  // {\"x\":1,\"y\":2,\"o\":3}\n    \n\n###toString valueOf方法\n\n    // 对象在作为操作数时，解释器总是优先调用valueOf()--(Date类型的对象在二元“+”运算时例外),而其他情况，解释器总是认为我们想要的是字符串，所以会优先调用toString()。\n    var obj = {x: 1, y: 2};\n    console.log(obj.toString());  // [object Object]\n    console.log(+obj.toString());  // NaN\n    console.log(3 + obj.toString());  // 3[object Object] 会被理解为字符串拼接\n    console.log(+obj.valueOf());  // NaN\n    \n    // 重写\n    obj.toString = function() {\n        return this.x + this.y;\n    };\n    console.log(+obj);  // 3\n    obj.valueOf = function() {\n        return this.x + this.y + 100;\n    };\n    console.log(+obj);  // 103\n    \n    // 如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。在不能调用toString的情况下，只能让valueOf上阵了。\n    \n    var cc = {\n        i: 10,\n        valueOf: function() {\n            console.log('valueOf');\n            return this.i;\n        }\n    };\n    \n    console.log(cc);// 10 { [Number: 10] i: 10, valueOf: [Function] }\n    console.log(+cc); // 10 valueOf\n    console.log(''+cc); // 10 valueOf\n    console.log(String(cc)); // [object Object]\n    console.log(Number(cc)); // 10 valueOf\n    console.log(cc == '10'); // true valueOf\n    \n\n### 数组\n\n创建数组\n\n    // 字面量创建数组 数组的长度不能超过2^23 - 1 = 4,294,967,295\n    var BAT = ['B', 'A', 'T'];\n    var students = [{name: 'B', age: 27}, {name: 'A', age: 30}];\n    var arr = ['T', 123, true, null, undefined];\n    var arrInArr = [[1, 2], [1, 2, 3]];\n    \n    // 对象创建数组 new关键字可以省略\n    var arr = new Array();  // var = [];\n    var arrWithLength = new Array(100);  // undefined * 100\n    var arrLikesLiteral = new Array(true, false, null, 1, 2, 'hi');  // [true, false, null, 1, 2, 'hi']\n    \n\n数组元素操作\n\n    // 数组元素读写\n    \n    // 索引访问\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr[1]);  // b\n    console.log(arr.length);  // 5\n    arr[5] = 'f';\n    console.log(arr);  // [ 'a', 'b', 'c', 'd', 'e', 'f' ]\n    console.log(arr.length);  // 6\n    \n    // delete方法并不会改变数组长度,delete 和定义为undefined的区别\n    delete arr[0];\n    console.log(arr);  // [ , 'b', 'c', 'd', 'e', 'f' ]\n    console.log(arr.length);  // 6\n    console.log(0 in arr);  // 会返回false\n    arr[1] = undefined;\n    console.log(arr);  // [ , undefined, 'c', 'd', 'e', 'f' ]\n    console.log(arr.length);  // 6\n    console.log(1 in arr);  // true\n    \n    // 数组是动态的，无需指定大小\n    \n    // 指定索引位置，改变数组\n    var arr = [];\n    arr[1] = 'b';\n    console.log(arr.length);  // 2\n    console.log(arr);   // [ , 'b' ]\n    \n    // push方法，在数组尾部添加元素,并返回新的数组长度\n    console.log(arr.push('c'));  // 3\n    console.log(arr);  // [ , 'b', 'c' ]\n    \n    // 在数组尾部添加的另一种方法\n    arr[arr.length] = 'd';\n    console.log(arr);  // [ , 'b', 'c', 'd' ]\n    \n    // unshift方法，在数组头部添加元素，并返回新的数组长度\n    console.log(arr.unshift('a'));  // 5\n    console.log(arr);  // [ 'a', , 'b', 'c', 'd' ]\n    \n    // pop方法，删除数组尾部的元素并返回这个元素\n    console.log(arr.pop());  // 'd'\n    console.log(arr);  // [ 'a', , 'b', 'c' ]\n    \n    // 删除数组尾部元素的另个方法\n    arr.length -= 1;\n    console.log(arr);  // [ 'a', , 'b' ]\n    \n    // shift方法，删除数组头部的元素并返回这个元素\n    console.log(arr.shift());  // 'a'\n    console.log(arr);  // [ , 'b' ]\n    \n\n数组迭代\n\n    // 数组迭代\n    var arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n    for(var i = 0; i < arr.length; i++) {\n        console.log(arr[i]);\n    }\n    // a b c d e f g\n    \n    for(i in arr) {\n        console.log(arr[i]);\n    }\n    // a b c d e f g\n    \n    // for in 表达式的坑：会迭代原型的元素\n    Array.prototype.x = 'keng';\n    for(i in arr) {\n        console.log(arr[i]);\n    }\n    // a b c d e f g keng\n    \n    for(i in arr) {\n        if(arr.hasOwnProperty(i)) {\n            console.log(arr[i]);\n        }\n    }\n    // a b c d e f g\n    \n\n特殊数组：二维数组和稀疏数组\n\n    // 特殊数组：二维数组，稀疏数组\n    // 二维数组\n    var arr = [['a', 'b'], ['c', 'd'], ['e', 'f']];\n    var i = 0, j = 0;\n    var row;\n    for(; i < arr.length; i++) {\n        row = arr[i];\n        console.log('row' + i);\n        for(j = 0; j < row.length; j++) {\n            console.log(row[j]);\n        }\n    }\n    // row0 a b row1 c d row2 e f\n    \n    // 稀疏数组：并不含有从0开始的连续索引\n    var arr1 = [undefined];\n    var arr2 = new Array(1);\n    console.log(0 in arr1);  // true\n    console.log(0 in arr2);  // false\n    \n\n### 数组的方法\n\nArray.prototype.join(separator)\n\n    // Array.prototype.join(separator)方法：将数组拼接成字符串，返回字符串，不改变原数组\n    var arr = ['a', 'b', 'c'];\n    console.log(arr.join());  // a,b,c\n    console.log(arr.join('_'));  // a,b,c\n    function repeatString(str, n) {\n        return new Array(n + 1).join(str);\n    }\n    console.log(repeatString('a', 3));  // aaa\n    console.log(repeatString('Hi', 5));  // HiHiHiHiHi\n    \n\nArray.prototype.reverse()\n\n    // Array.prototype.reverse() 将数组逆序，返回数组本身，会改变数组本身\n    var arr = ['a', 'b', 'c'];\n    var arr1 = arr;\n    var arr2 = ['a', 'b', 'c'];\n    console.log(arr.reverse());  // [ 'c', 'b', 'a' ]\n    console.log(arr);  // [ 'c', 'b', 'a' ]\n    console.log(arr1);  // [ 'c', 'b', 'a' ]\n    console.log(arr2);  // [ 'a', 'b', 'c' ]\n    \n\nArray.prototype.sort(sortby）\n\n    // Array.prototype.sort(sortby)方法：接受一个函数参数(不传参数默认按字符编码顺序)，返回数组本身，会修改原数组\n    var arr = ['f', 'b', 'd', 'e', 'a'];\n    console.log(arr.sort());  // [ 'a', 'b', 'd', 'e', 'f' ]\n    console.log(arr);  // [ 'a', 'b', 'd', 'e', 'f' ]\n    \n    var arr = [13, 24, 51, 3];\n    console.log(arr.sort());  // [ 13, 24, 3, 51 ]\n    \n    // 传入参数：比较函数(a, b)\n    // 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n    // 若 a 等于 b，则返回 0。\n    // 若 a 大于 b，则返回一个大于 0 的值。\n    function sortNumber(a, b) {\n        return a - b;\n    }\n    console.log(arr.sort(sortNumber));  // [ 3, 13, 24, 51 ]\n    \n    var arr = [{age: 25}, {age: 29}, {age: 40}];\n    console.log(arr.sort(function sortAge(a, b) {\n        return a.age - b.age;\n    }));  // [ { age: 25 }, { age: 29 }, { age: 40 } ]\n    \n\nArray.prototype.concat(arrayX, arrayY.....)\n\n    // Array.prototype.concat(arrayX, arrayY.....)方法 连接多个数组，返回一个新的数组，不会改变原数组\n    var arr = ['a', 'b', 'c'];\n    console.log(arr.concat('d', 'e'));  // [ 'a', 'b', 'c', 'd', 'e' ]\n    console.log(arr);  // [ 'a', 'b', 'c' ]\n    console.log(arr.concat(['d', 'e'], 'f'));  // [ 'a', 'b', 'c', 'd', 'e', 'f' ]\n    console.log(arr.concat(['d', 'e'], ['f', 'g']));  // 'b', 'c', 'd', 'e', 'f', 'g' ]\n    console.log(arr.concat([['d', 'e'], 'f']));  // [ 'a', 'b', 'c', [ 'd', 'e' ], 'f' ]\n    console.log(arr.concat([[['d', 'e'], 'f'], 'g']));  // [ 'a', 'b', 'c', [ [ 'd', 'e' ], 'f' ], 'g' ]\n    \n\nArray.prototype.slice(start, end)\n\n    // Array.prototype.slice(start, end)方法：左闭右开截取数组，返回一个新的数组，不改变原数组\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.slice(1, 3));  // ['b', 'c']\n    console.log(arr.slice(1));  // ['b', 'c', 'd', 'e']\n    console.log(arr.slice(1, -1));  // ['b', 'c', 'd']\n    console.log(arr.slice(-4, -3));  // ['b']\n    \n\nArray.prototype.splice(index, howmany, item1,....itemX)\n\n    // Array.prototype.splice(index, howmany, item1,....itemX)方法：\n    // 向/从数组中添加/删除项目，然后返回被删除的项目。会改变原数组\n    // index参数：必须，整数，添加或删除的位置，左闭合\n    // howmany参数：可选，设置为0，则不会删除\n    // item1,.....itemX：可选，向数组中添加的元素\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2));   // [ 'c', 'd', 'e' ]\n    console.log(arr);  // [ 'a', 'b' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 1));  // [ 'c' ]\n    console.log(arr);  // [ 'a', 'b', 'd', 'e' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 0));  // []\n    console.log(arr);  // [ 'a', 'b', 'c', 'd', 'e' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 2, 'f', 'g', ['h', 'i']));  // [ 'c', 'd' ]\n    console.log(arr);  // [ 'a', 'b', 'f', 'g', [ 'h', 'i' ], 'e' ]\n    \n    // 指定位置插入新的元素\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 0, 'f'));  // []\n    console.log(arr); // [ 'a', 'b', 'f', 'c', 'd', 'e' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice());  // []\n    console.log(arr); // [ 'a', 'b', 'c', 'd', 'e' ]\n    \n\nArray.prototype.forEach()\n\n    // Array.prototype.forEach()方法(ES5)：接收函数参数\n    // 函数的3个参数x: 元素值，index：元素索引，a 数组本身\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    arr.forEach(function(x, index, a) {\n        console.log(x + '_' + index + '_' + a);\n    });\n    // a_0_a,b,c,d,e b_1_a,b,c,d,e c_2_a,b,c,d,e d_3_a,b,c,d,e e_4_a,b,c,d,e\n    \n\nArray.prototype.map()\n\n    //Array.prototype.map()方法(ES5):接收函数参数,不会修改原数组\n    var arr = ['a', 'b', 'c'];\n    var arr1 = arr.map(function(x) {\n        return x + 'like';\n    });\n    \n    console.log(arr);  // [ 'a', 'b', 'c' ]\n    console.log(arr1);  // [ 'alike', 'blike', 'clike' ]\n    \n\nArray.prototype.filter()\n\n    // Array.prototype.filter()过滤方法(ES5):接收函数参数，不修改原数组\n    var arr = [1,2,3,4,5,6,7,8,9,10];\n    var arr1 = arr.filter(function(x, index) {\n        return index % 3 === 0 || x >= 8;\n    });\n    console.log(arr1);  // [ 1, 4, 7, 8, 9, 10 ]\n    console.log(arr);  // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n    \n\nArray.prototype.every() & Array.prototype.some()\n\n    // Array.prototype.every() & Array.prototype.some()判断方法(ES5):接收函数参数，不修改原数组\n    // every 全部符合条件  some 只需一个符合条件\n    var arr = [1,2,3,4,5];\n    console.log(arr.every(function(x) {\n        return x < 10;\n    }));  // true\n    console.log(arr.every(function(x) {\n        return x <= 3;\n    }));  // false\n    console.log(arr.some(function(x) {\n        return x === 3;\n    }));  // true\n    console.log(arr.some(function(x) {\n        return x === 100;\n    }));  // false\n    \n\nArray.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)\n\n    // Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)方法\n    // 接收一个函数参数和一个数组索引参数，并返回一个值，不修改原数组\n    // 函数参加接收2个参数分别代表2个索引\n    // 索引参数表示从第index个元素开始\n    var arr = [1, 2, 3];\n    var sum = arr.reduce(function(x, y) {\n        return x + y;\n    }, 0);\n    console.log(sum);  // 6  1+2返回3 3+3 返回6\n    \n    var arr = [3, 9, 6];\n    var max = arr.reduce(function(x, y) {\n        console.log(x + '|' + y);\n        return x > y ? x : y;\n    });\n    // 3|9\n    // 9|6\n    console.log(max);  // 9\n    \n    var max = arr.reduceRight(function(x, y) {\n        console.log(x + '|' + y);\n        return x > y ? x : y;\n    });\n    // 6|9\n    // 9|3\n    console.log(max);  // 9\n    \n\nArray.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)\n\n    // Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)数字检索方法\n    // value参数表示要查找的元素值，index表示从第几个索引位置开始查找(闭合)\n    var arr = ['a', 'b', 'c', 'b', 'a'];\n    console.log(arr.indexOf('b'));  // 1 在数组中查找是否有元素值为'b'，有则返回这个元素索引\n    console.log(arr.indexOf('f'));  // -1 如果没有则返回-1\n    console.log(arr.indexOf('b', 1));  // 1 从第2个元素开始查找，返回索引1\n    console.log(arr.indexOf('b', 2));  // 3\n    console.log(arr.indexOf('b', -2));  // 3\n    console.log(arr.indexOf('b', -4));  // 1\n    console.log(arr.indexOf('b', -8));  // 1\n    console.log(arr.lastIndexOf('b'));  // 3\n    \n\nArray.isArray()\n\n    // Array.isArray() 判断是否为数组\n    console.log(Array.isArray([]));  // true\n    \n\n### 创建函数\n\n    // 函数声明\n    function add(a, b) {\n        a = +a;\n        b = +b;\n        if (isNaN(a) || isNaN(b)) {\n            return;\n        }\n        return a + b;\n    }\n    \n    // 函数表达式\n    var add = function(a, b) {\n        // do sth\n    };\n    \n    // IEF(立即执行函数表达式)\n    (function() {\n        // do sth\n    })();\n    \n    // 函数表达式\n    return function () {\n        // do sth\n    };\n    \n    // NFE(命名式函数表达式)\n    var add = function foo(a, b) {\n        // do sth\n    };\n    \n\n**函数声明和函数表达式区别：函数声明会前置**\n\n    var num = add(1, 2);\n    console.log(num);\n    \n    function add(a, b) {\n        a = +a;\n        b = +b;\n        if (isNaN(a) || isNaN(b)) {\n            return;\n        }\n        return a + b;\n    }\n    \n    // 结果为3\n    \n\n    var num = add(1, 2);\n    console.log(num);\n    \n    var add = function (a, b) {\n        a = +a;\n        b = +b;\n        if (isNaN(a) || isNaN(b)) {\n            return;\n        }\n        return a + b;\n    };\n    \n    // TypeError: add is not a function\n    \n\n### this\n\n全局下的this\n\n    // 全局下的this(浏览器下)\n    console.log(this.window === document);  // true\n    console.log(this === window);  // true\n    this.a = 37;\n    console.log(window.a);  // 37\n    \n\n一般函数的this\n\n    // 一般函数的this（浏览器下）\n    function f1() {\n        return this;\n    }\n    f1() === window;  // true\n    \n    function f2() {\n        \"use strict\";  // 严格模式下\n        return this\n    }\n    f2() === undefined;  // true\n    \n\n作为对象方法的函数的this\n\n    var o = {\n        prop: 37,\n        f: function() {\n            return this.prop;\n        }\n    };\n    console.log(o.f());  // 37\n    \n    var o = {prop: 37};\n    function  independent() {\n        return this.prop;\n    }\n    o.f = independent;\n    console.log(o.f());  // 37\n    \n\n原型链上的this\n\n    var o = {\n        f: function() {\n            return this.a + this.b;\n        }\n    };\n    var p = Object.create(o); // p为空对象，其原型会指向o\n    p.a = 1;\n    p.b = 4;\n    console.log(p.f())  // 5\n    \n\n构造器中的this\n\n    // 当new的函数构造器没有return返回值或者返回值不是对象时，new返回一个this指向构造器的prototype这样一个空对象\n    // 如果return返回的是对象 new返回的这是这个对象\n    function Myclass() {\n        this.a = 37;\n    }\n    var o = new Myclass();\n    console.log(o.a);  // 37\n    \n    function C2() {\n        this.a = 37;\n        return {a: 38};\n    }\n    o = new C2();\n    console.log(o.a);  // 38\n    \n\ncall和apply的this\n\n    function add(c, d) {\n        return this.a + this.b + c + d;\n    }\n    var o = {a: 1, b: 2};\n    add.call(o, 5, 6);  // 1+3+5+7=16\n    add.apply(o, [10, 20]);  //1+3+10+20=34\n    \n    function bar() {\n        console.log(Object.prototype.toString.call(this));\n    }\n    bar.call(7); // [object Number]\n    \n\nband和this\n\n    //bind是es5后，ie9+使用\n    function f() {\n        return this.a;\n    }\n    var g = f.bind({a: 'test'});\n    console.log(g());  // test\n    var o = {\n        a: 37,\n        f: f,\n        g: g\n    };\n    console.log(o.f(), o.g());  // 37, test\n    \n\n函数arguments属性\n\n    function foo(x, y, z) {\n        arguments.length;  // 2 实际传入的参数数量\n        arguments[0];  // 1 传入第一个参数值\n        arguments[0] = 10;\n        x;  // 10 将第一个参数值修改为10， 严格模式下任然是1\n        arguments[2] = 100;\n        z; // undefined  由于第三个参数没有传入，不会绑定\n        arguments.callee  === foo;  // true   严格模式下不能使用\n    }\n    \n    foo(1, 2);\n    foo.length;  // 3   3个参数\n    foo.name;  // \"foo\" 函数名\n    \n\n### call和apply\n\n    // apply和call方法（浏览器）\n    // 第一个参数是作为this的对象，如果不是对象，会转换为对象\n    // call传入的是扁平传入参数\n    // apply第二个参数树数组\n    function foo(x, y) {\n        console.log(x, y, this);\n    }\n    \n    foo.call(100, 1, 2);  // 1, 2, Number(100)\n    foo.apply(true, [3, 4]);  //3, 4, Boolean(true)\n    foo.apply(null);  // undefined, undefined, window\n    foo.apply(undefined);  // undefined, undefined, window\n    \n\n### bind\n\nbind方法：改变this\n\n    // bind方法\n    this.x = 9;\n    var module = {\n        x: 81,\n        getX: function() {\n            return this.x;\n        }\n    };\n    \n    module.getX();  // 81 this指向module\n    \n    var getX = module.getX;\n    getX();  // 9 this指向全局变量\n    \n    var boundGetX = getX.bind(module);\n    boundGetX();  // 81  bind改变this指向\n    \n\nbind方法：科里化\n\n    // bind方法\n    function add(a, b, c) {\n        return a+b+c;\n    }\n    \n    var func = add.bind(undefined, 100);\n    func(1, 2);  // 103  undefined传给this， 100传给第一个参数a\n    \n    var func2 = func.bind(undefined, 200);\n    func2(10);  // 310 undefined传给this，200传给b\n    \n\nbind与new\n\n    // bind方法与new\n    function foo() {\n        this.b = 100;\n        return this.a;\n    }\n    \n    var func = foo.bind({a: 1});\n    \n    func(); // 1  foo.bind后this指向{a: 1} return this.a = 1\n    new func();  // {b: 100} new调用将返回一个this，this会被初始化一个空对象，并且其原型是foo.prototype,空对象的b属性为100\n    \n    \n\n### 闭包\n\n闭包基本概念\n\n    // 闭包\n    var n = 999;\n    function f1() {\n        console.log(n);\n    }\n    f1();  // 999  函数内部可以访问全局变量\n    \n    function f1() {\n        var n = 999;\n    }\n    console.log(n);  // error  函数外部无法访问函数内部局部变量\n    \n    function f1() {\n        n = 999;\n    }\n    console.log(n); // 999 因为没有使用var语句，相当于定义一个全局变量\n    \n    \n    // 简单的闭包原型\n    function f1() {\n        var n = 999;\n        function f2() {\n            console.log(n);\n        }\n        return f2\n    }\n    var result = f1();\n    result();  // 999\n    \n\n闭包案例\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n        <style>\n            #div1 {\n                background-color: rosybrown;\n            }\n            #div2 {\n                background-color: aquamarine;\n            }\n            #div3 {\n                background-color: yellowgreen;\n            }\n        </style>\n    </head>\n    <body>\n    \n    </body>\n    <script>\n        document.body.innerHTML = '<div id=\"div1\">aaa</div><div id=\"div2\">bbb</div><div id=\"div3\">ccc</div>';\n        for(var i = 1; i < 4; i++) {\n            alert(i);  // 结果为1，2，3\n            document.getElementById('div' + i).\n                    addEventListener('click', function() {\n                alert(i);  // 点击div1，div2，div3结果都是4,因为addEventListener的回调函数执行时i都为4\n            });\n        }\n    </script>\n    </html>\n    \n\n正确写法\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n        <style>\n            #div1 {\n                background-color: rosybrown;\n            }\n            #div2 {\n                background-color: aquamarine;\n            }\n            #div3 {\n                background-color: yellowgreen;\n            }\n        </style>\n    </head>\n    <body>\n    \n    </body>\n    <script>\n        document.body.innerHTML = '<div id=\"div1\">aaa</div><div id=\"div2\">bbb</div><div id=\"div3\">ccc</div>';\n        for(var i = 1; i < 4; i++) {\n            !function(i) {\n                alert(i);  // 1,2,3\n                document.getElementById('div' + i).\n                   addEventListener('click', function() {\n                       alert(i);  // 1, 2,3 \n                });\n            }(i);\n        }\n    </script>\n    </html>\n    \n\n闭包中的封装\n\n    (function() {\n        var _userID = 23245;\n        var _typeID = 'item';\n        var exportID = {};\n    \n        function converter(userID) {\n            return +userID;\n        }\n    \n        exportID.getUserID = function() {\n            return converter(_userID);\n        };\n    \n        exportID.getTypeID = function() {\n            return _typeID;\n        };\n        global.exportID = exportID;\n    }());\n    \n    console.log(exportID.getUserID());  //23245\n    console.log(exportID._userID);  // undefined\n    \n\n### 三种作用域\n\n    // 作用域： 全局作用域，函数作用域，eval作用域\n    var a = 10;\n    (function() {\n        var b = 20;\n    })();\n    console.log(a);  // 10\n    console.log(b);  // error\n    \n    for(var item in {a: 1, b: 2}) {\n        console.log(item);  // a, b\n    }\n    console.log(item); // b\n    \n\n### ES3中的执行上下文\n\nEC = Execution Context 执行上下文  \n变量对象（Variable Object 简写VO）是一个抽象概念，用于存储执行上下文中的变量，函数声明，函数参数\n\n    var a = 10;\n    function test(x) {\n        var b = 20;\n    }\n    test(30);\n    \n\n对应的上下文\n\n    // 整个js环境中的VO\n    VO(globalContext) = {\n        a: 10,\n        test: <ref to function>\n    };\n    // 执行test(30)的VO\n    VO(test functionContext) = {\n        x: 30,\n        b: 20\n    };\n    \n\n全局执行上下文\n\n    VO(globalContext) === [[global]]\n    [[global]] = {\n        Math : <...>,\n        String : <...>,\n        isNaN: function() {[Native Code]},\n        ...\n        ...\n        window: global\n    };\n    \n    String(10);  //[[global]].String(10)\n    window.a = 10;  // [[global]].window.a = 10\n    this.b = 20;  // [[global]].b = 20\n    \n\n变量初始化阶段\n\n    // 1, 函数参数（若没有传入，则其值为undefined）\n    // 2, 函数声明（若函数声明和函数参数冲突，则函数声明会覆盖掉函数参数）\n    // 3，变量声明（初始化变量值为undefined，若何函数参数，函数声明冲突，会被忽略掉）\n    function test(a, b) {\n        var c = 10;\n        function d() {}\n        var e = function _e() {};\n        (function x() {});\n        b = 20;\n    }\n    test(10);\n    \n    \n    AO(test) = {\n        a: 10,\n        b: undefined,\n        c: undefined,\n        d: <ref to func 'd'>,\n        e: undefined,\n    };\n    \n\n变量初始化案例1\n\n    function foo(x, y, z) {\n        function x() {}\n        console.log(x);\n    }\n    \n    foo(100);  // [Function: x]\n    //\n    AO(foo) = {\n        //x: 100,\n        y: undefined,\n        z: undefined,\n        x: <ref to func 'x'>,  // 函数声明x会覆盖掉参数声明 \n    }\n    \n\n变量初始化案例2\n\n    function foo(x, y, z) {\n        function func() {}\n        var func;\n        console.log(func);\n    }\n    foo(100);  // [Function: func]\n    \n    function foo(x, y, z) {\n        function func() {}\n        var func = 1;\n        console.log(func);\n    }\n    foo(100);  // 1  执行阶段会执行func = 1 这个语句\n    \n\n代码执行阶段\n\n    function test(a, b) {\n        var c = 10;\n        function d() {}\n        var e = function _e() {};\n        (function x() {})();\n        b = 20;\n    }\n    \n    // 初始化阶段\n    AO(test) = {\n        a: 10,\n        b: undefined,\n        c: undefined,\n        d: <ref to func 'd'>,\n        e: undefined\n    };\n    // 代码执行阶段\n    AO(test) = {\n        a: 10,\n        b: 20,\n        c: 10,\n        d: <reference to FunctionDeclaration 'd'>,\n        e: function _e()\n    };\n    \n\n全局执行上下文案例\n\n    console.log(x);  // [Function: x]\n    var x = 10;  // 初始化阶段x: 冲突，被忽略\n    console.log(x);  // 10\n    x = 20;\n    function x() {}  // 初始化阶段x: <ref to func 'x'>\n    console.log(x);  // 20\n    if (true) {\n        var a = 1;  // 初始化阶段a: undefined\n    } else {\n        var b = true;  // 初始化阶段b: undefined\n    }\n    \n    console.log(a);  // 1\n    console.log(b);  // undefined\n    \n\n### prototype\n\nprototype是函数对象上的预设的对象属性  \n原型是对象上的原型，通常都是构造器的prototype属性  \n实例\n\n    function Abc() {\n        this.y = 2;\n        var z = 3;\n    }\n    console.log(Abc);  // [Function: Abc]\n    console.log(Abc.prototype);  // Abc {}\n    console.log(typeof Abc.prototype);  // object\n    \n    Abc.prototype.x = 1;\n    console.log(Abc.prototype);  // Abc { x: 1 }\n    \n    var obj1 = new Abc();\n    console.log(obj1.__proto__);  // Abc { x: 1 }\n    console.log(obj1.__proto__ === Abc.prototype);  // true  new构造器创建的对象的原型是构造器的prototype属性\n    console.log(obj1);  // Abc { y: 2 }\n    console.log(obj1.y);  // 2\n    console.log(obj1.x);  // 1\n    \n\n### 继承\n\n实现继承的方法\n\n    // 实现继承的方法\n    function Person() {\n    }\n    \n    function Student() {\n    }\n    \n    Student.prototype = Person.prototype;  // 错误，会影响被继承类的方法\n    Student.prototype = new Person();  // 错误，传参问题，因为Student是类，并不是实例\n    \n    // 正确的方法\n    Student.prototype = Object.create(Person.prototype);\n    Student.prototype.constructor = Student;\n    // Object.create()是es5的方法，下面是fix方法\n    if(!Object.create) {\n        Object.create = function(proto) {\n            function F() {}\n            F.prototype = proto;\n            return new F;\n        };\n    }\n    \n\n原型的继承方法\n\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        this.sayNo = function() {\n            console.log(this.name + ' say no');\n        }\n    }\n    \n    Person.prototype.hi = function() {\n        console.log('Hi, my name is ' + this.name + ',I\\'m ' + this.age + ' years old now');\n    };\n    Person.prototype.LEGS_NUM = 2;\n    Person.prototype.ARMS_NUM = 2;\n    Person.prototype.walk = function() {\n        console.log(this.name + ' is walking...');\n    };\n    \n    console.log(Person);  // [Function: Person]\n    console.log(Person.prototype);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n    var Jack = new Person();  // Person构造器没有return对象，所以返回的是this\n    Jack.sayNo();  // undefined say no\n    Jack.hi();  // Hi, my name is undefined,I'm undefined years old now\n    Jack.walk();  // undefined is walking...\n    console.log(Jack);  // Person { name: undefined, age: undefined, sayNo: [Function] }\n    console.log(Jack.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n    \n    // 以下5行代码是js中对象继承的写法\n    function Student(name, age, className) {\n        Person.call(this, name, age);  // 使用call方法调用父构造器函数\n        this.className = className;\n    }\n    Student.prototype = Object.create(Person.prototype);   // 这个如果直接使用Student.prototype = Person.prototype，改变Student对象方法会改变Person对象的方法，因为他们指向的是同一个对象\n    Student.prototype.constructor = Student;\n    \n    Student.prototype.hi = function() {\n        console.log('Hi, my name is ' + this.name + ', I\\'m' + this.age + ' years old now, and from ' + this.className + '.');\n    };\n    Student.prototype.learn = function(subject) {\n        console.log(this.name + ' is learning ' + subject + ' at ' + this.className + '.');\n    };\n    \n    var Lussi = new Student('Lussi', 27, 'Class Tree');\n    Lussi.sayNo();  // Lussi say no\n    Lussi.hi();  // Hi, my name is Lussi, I'm27 years old now, and from Class Tree.\n    Lussi.walk();  // Lussi is walking...\n    Lussi.learn('math');  // Lussi is learning math at Class Tree.\n    console.log(Lussi);  // Student {name: 'Lussi', age: 27, sayNo: [Function], className: 'Class Tree' }\n    console.log(Lussi.__proto__);  // Student {constructor: [Function: Student], hi: [Function], learn: [Function] }\n    console.log(Lussi.__proto__.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n    console.log(Lussi.__proto__.__proto__.__proto__);  // {}\n    console.log(Lussi.__proto__.__proto__.__proto__.__proto__);  // null  \n    // 改变prototype\n    Student.prototype.x = 101;  // 会影响已经创建实例的属性\n    console.log(Jack.x);  // undefined\n    console.log(Lussi.x);  // 101\n    \n    Student.prototype = {y: 2};  // 不会影响已经创建实例的属性，但会影响新创建的实例，并且重新修改prototype.y属性也不会改变\n    console.log(Jack.y); // undefined\n    console.log(Lussi.y);  // undefined\n    var Lilei = new Student('Lilei', 24, 'Class three');\n    console.log(Lilei.x);  // undefined\n    console.log(Lilei.y);  // 2\n    Student.prototype.y = 100;\n    console.log(Lilei.y);  // 100\n    console.log(Lussi.y);  // undefined\n    Student.prototype.z = 30;\n    console.log(Lilei.z);  // 30\n    console.log(Lussi.z);  // undefined\n    Person.prototype.z = 40;\n    console.log(Lilei.z);  // 30\n    console.log(Lussi.z);  // 40\n    console.log(Jack.z);  // 40\n    \n\n### instanceof\n\n    // instanceof  左边是对象（如果不是，直接返回false），右边是构造器（如果不是，直接报错），判断构造器的prototype属性是否在对象的原型链上\n    console.log([1, 2] instanceof Array);  // true\n    console.log(1 instanceof Array);  // false\n    console.log(Array.prototype);  // []\n    console.log(new Object() instanceof Array);  //false\n    console.log(Object.prototype);  // {}\n    console.log(new Object() instanceof Object);  // true\n    console.log(new Array() instanceof Object);  // true\n    \n\n### 模拟重载\n\n    function Person() {\n        var args = arguments;\n        // 判断第一个传入的是不是对象，因为args[null]也返回object，所有需要判断是否为null\n        if(typeof args[0] === 'object' && args[0]) {\n            if(args[0].name) {\n                this.name = args[0].name;\n            }\n            if(args[0].age) {\n                this.age = args[0].age;\n            }\n        } else {\n            if(args[0]) {\n                this.name = args[0];\n            }\n            if(args[1]) {\n                this.age = args[1];\n            }\n        }\n    }\n    Person.prototype.toString = function() {\n        console.log('name=' + this.name + ', age=' + this.age);\n    };\n    \n    var LiLei = new Person('LiLei', 23);\n    var Hanmm = new Person({name: 'Hanmm', age: 21});\n    LiLei.toString();  // name=LiLei, age=23\n    Hanmm.toString();  // name=Hanmm, age=21\n    \n\n### 调用子类方法\n\n    function Person(name) {\n        this.name = name;\n    }\n    function Student(name, className) {\n        this.className = className;\n        Person.call(this, name);\n    }\n    \n    Person.prototype.init = function() {\n        console.log('Person.init');\n    };\n    Student.prototype.init = function() {\n        console.log('Student.init');\n        Person.prototype.init.apply(this, arguments);\n    };\n    var LiLei = new Student('LiLei', 'Class four');\n    console.log(LiLei);  // Student { className: 'Class four', name: 'LiLei' }\n    LiLei.init();  // Student.init  Person.init\n    \n\n### 实现链式调用\n\n    function ClassManager() {\n        console.log('ClassManager');\n        this.name = 'ClassName';\n    }\n    ClassManager.prototype.addClass = function(str) {\n        console.log('class: '  + str + ' added.');\n        console.log(this);\n        return this;  // this始终指向ClassManger类的实例\n    };\n    \n    var manager = new ClassManager();\n    manager.addClass('A').addClass('B').addClass('C');  //class: A added. ClassManager { name: 'ClassName' } class: B added. ClassManager { name: 'ClassName' } class: C added. ClassManager { name: 'ClassName' }","source":"_posts/Javascript基础入门.md","raw":"---\ntitle: Javascript基础入门\ntags:\n  - javascript\nurl: 86.html\nid: 86\ncomments: false\ncategories:\n  - 前端\ndate: 2016-11-10 10:19:51\n---\n\n### 数据类型\n\n> object(包含Function，Array，Date等)  \n> number  \n> string  \n> boolean  \n> null  \n> undefined\n\n### 类型检测\n\ntypeof 基本类型，function， null可以用===判断\n\n    typeof 100           // \"number\"   \n    typeof true          // \"boolean\"    \n    typeof function      // \"function\"    \n    typeof undefined     // \"undefined\"  \n    typeof new Object()  // \"object\"  \n    typeof [1, 2]        // \"object\"  \n    typeof NaN           // \"number\"  \n    typeof null          // \"object\"  \n    \n\ninstanceof\n\n    // 不同window或iframe下返回false\n    [1, 2] instanceof Array === true  \n    new Object instanceof Array === fasle\n    \n\nObject.prototype.toString\n\n    Object.prototype.toString.apply([1, 2, 3]) === \"[object Array]\";  \n    Object.prototype.toString.apply(function(){}) === \"[object Function]\"  \n    Object.prototype.toString.apply(null) === \"[object Null]\"  // ie678返回[object Object]  \n    Object.prototype.toString.apply(undefined) === \"[object Undefined]\"  \n    Object.prototype.toString.apply(12313) === \"[object Number]\"  \n    Object.prototype.toString.apply('12313') === \"[object String]\"\n    \n\nconstructor  \nduck type\n\n### 表达式\n\n表达式是一种js短语，可使js解释器用来产生一个值\n\n    // 原始表达式\n    3.14, \"test\"      // 常量，直接量\n    null, this, true  // 关键字\n    i, j, k;           // 变量\n    \n    // 复合表达式\n    10 * 20;           // 原始表达式+运算符+原始表达式\n    \n    // 初始化表达式\n    [1, 2];\n    [1,,2];\n    {x: 1, y: 2};\n    \n    // 函数表达式\n    var fe = function(){};\n    (function(){console.log('1111');}){};\n    \n    // 属性访问表达式\n    var o = {x:1};\n    o.x;\n    o['x'];\n    \n    // 调用表达式\n    func();\n    \n    // 对象创建表达式\n    new Func(1, 2);\n    new Object;\n    \n\n### 运算符\n\n> 一元（+num）  \n> 二元（a + b）  \n> 三元（c：a：b） 赋值(x += 1)  \n> 比较(a == b)  \n> 算术（a - b）  \n> 位 （a | b）  \n> 逻辑 (exp1 && exp2)  \n> 字符串(\"a\" + \"b\")  \n> 特殊\n\n### 特殊运算符\n\n> c? a:b  \n> var val = (1, 2, 3) // 逗号运算符  \n> delete obj.x // 删除对象属性  \n> 'x' in window; // in 运算符  \n> instanceof, typeof // 判断类型  \n> new Foo(); // new 运算符  \n> this // this运算符  \n> void 0 // undefined\n\n### 语句\n\n块语句block  \n块语句是没有作用域的\n\n    {  \n    var str = 'hi';  \n    console.log(str);  \n    }  \n    \n\n声明语句 var  \nvar a=1, b=1; 函数语句function\n\n    // 函数声明语句  \n    function fd() {  \n        return true;  \n    }    \n    // 函数表达式  \n    var fe = function() {\n        //do sth\n    };\n    \n\nfor in 语句\n\n    var p;  \n    var obj = {x:1, y:2};  \n    for(p in obj) {\n        // 顺序不确定  \n    }\n    \n    \n\nswith语句\n\n    var val = 2;\n    switch (val) {\n        case 1:\n            console.log(1);\n            break;\n        case 2:\n            console.log(2);\n            break;\n        case 3:\n            console.log(3);\n            break;\n        default:\n            console.log(0);\n            break;\n    }\n    \n\n循环语句\n\n    while (isTrue) {\n        // do sth\n    }\n    \n    do {\n        // do sth\n    } while (isTrue)\n    \n    var i;\n    for (i = 0; i < n; i++) {\n        // do sth\n    }\n    \n\nwith语句 // 不使用 try catch语句\n\n    try {\n        try {\n            throw new Error('oops');\n        } catch(ex) {\n            console.error('inner catch', ex.message);\n            throw ex;\n        } finally {\n            console.log('inner  finally');\n        }\n    } catch(ex) {\n        console.error('outer catch', ex.message);\n    } finally {\n        console.log('outer finally');\n    }\n    \n\n结果 内部catch>内部finally>外部catch>外部finally\n\n    inner catch oops  \n    inner  finally  \n    outer catch oops  \n    outer finally  \n    \n\n### 严格模式(待补充）\n\n    function func() {\n        'use strict';\n    }\n    \n\n### 对象\n\n对象创建  \n字面量创建\n\n    var obj = {x: 1};\n    console.log(obj);\n    console.log(obj.y);\n    Object.prototype.y = 2;\n    console.log(obj);\n    console.log(obj.y);\n    obj.y = undefined;\n    console.log(obj);\n    console.log(obj.y);\n    \n\n    { x: 1 }\n    undefined\n    { x: 1 }\n    2\n    { x: 1, y: undefined }\n    undefined\n    \n\nnew构造器创建\n\n    function foo() { this.color = 'red';}\n    foo.prototype.background = '#000';\n    var redColor = new foo();\n    console.log(redColor);\n    console.log(typeof redColor.toString);\n    console.log(redColor.color);\n    console.log(redColor.background);\n    console.log(foo);\n    console.log(foo.prototype);\n    console.log(foo.prototype.prototype);\n    console.log('background' in redColor);\n    redColor.background = '#FFF';\n    console.log(redColor.background);\n    console.log(foo.prototype.background);\n    \n\n    foo { color: 'red' }\n    function\n    red\n    #000\n    [Function: foo]\n    foo { background: '#000' }\n    undefined\n    true\n    #FFF\n    #000\n    \n\nObject.create()创建\n\n    function obj() {\n        this.x = 1;\n    }\n    console.log(obj);\n    var obj1 = new obj();\n    console.log(obj1);\n    var obj2 = Object.create(obj);\n    console.log(obj2);\n    console.log(obj2.x);\n    var obj3 = Object.create(obj1);\n    console.log(obj3);\n    console.log(obj3.x);;\n    \n\n    [Function: obj]\n    obj { x: 1 }\n    Function {}\n    undefined\n    obj {}\n    1\n    \n\n### 对象的内部原型(**proto**)和构造器的原型（prototype）的关系。\n\n一、所有构造器/函数的**proto**都指向Function.prototype，它是一个空函数（Empty function）\n\n    Number.__proto__ === Function.prototype  // true  \n    Boolean.__proto__ === Function.prototype // true  \n    String.__proto__ === Function.prototype  // true  \n    Object.__proto__ === Function.prototype  // true  \n    Function.__proto__ === Function.prototype // true  \n    Array.__proto__ === Function.prototype   // true  \n    RegExp.__proto__ === Function.prototype  // true  \n    Error.__proto__ === Function.prototype   // true  \n    Date.__proto__ === Function.prototype    // true  \n    Math.__proto__ === Object.prototype  // true  \n    JSON.__proto__ === Object.prototype  // true \n    // 函数声明\n    function Person() {}\n    // 函数表达式\n    var Man = function() {}\n    console.log(Person.__proto__ === Function.prototype) // true  \n    console.log(Man.__proto__ === Function.prototype)    // true  \n    \n\n所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5）\n\n    console.log(typeof Function.prototype) // function\n    console.log(typeof Object.prototype)   // object\n    console.log(typeof Number.prototype)   // object\n    console.log(typeof Boolean.prototype)  // object\n    console.log(typeof String.prototype)   // object\n    console.log(typeof Array.prototype)    // object\n    console.log(typeof RegExp.prototype)   // object\n    console.log(typeof Error.prototype)    // object\n    console.log(typeof Date.prototype)     // object\n    console.log(typeof Object.prototype)   // object  \n    console.log(Function.prototype.__proto__ === Object.prototype) // true    \n    Object.prototype.__proto__ === null  // true  \n    \n\n二、所有对象的**proto**都指向其构造器的prototype  \nJavaScript引擎内置构造器\n\n    var obj = {name: 'jack'}\n    var arr = [1,2,3]\n    var reg = /hello/g\n    var date = new Date\n    var err = new Error('exception')\n    \n    console.log(obj.__proto__ === Object.prototype) // true\n    console.log(arr.__proto__ === Array.prototype)  // true\n    console.log(reg.__proto__ === RegExp.prototype) // true\n    console.log(date.__proto__ === Date.prototype)  // true\n    console.log(err.__proto__ === Error.prototype)  // true\n    \n\n自定义的构造器\n\n    function Person(name) {\n        this.name = name\n    }\n    var p = new Person('jack')\n    console.log(p.__proto__ === Person.prototype) // true\n    \n\n每个对象都有一个constructor属性，可以获取它的构造器\n\n    function Person(name) {\n        this.name = name\n    }\n    var p = new Person('jack')\n    console.log(p.__proto__ === p.constructor.prototype) // true\n    \n\n### 对象属性操作\n\n属性读写\n\n    // 属性读写\n    var obj = {x1: 1, x2: 2};\n    var i = 1, n = 2;\n    for(; i<= n; i++) {\n        console.log(obj['x' + i]);\n    }\n    // 输出1，2\n    \n    var p;\n    for(p in obj) {\n        console.log(obj[p]);\n    }\n    // 输出1，2\n    \n    var obj = {x: 1};\n    // 读写异常\n    console.log(obj.y); // undefined\n    var yz = obj.y.z;  // TypeError: Cannot read property 'z' of undefined\n    obj.y.z = 2;      //TypeError: Cannot set property 'z' of undefined\n    // 正确方式\n    var yz;\n    if(obj.y) {\n        yz = obj.y.z;\n    }\n    // 或者\n    var yz = obj && obj.y && obj.y.z  // 这个会返回undefined\n    \n\n属性删除\n\n    var person = {age: 28, title: 'fe'};\n    console.log(delete person.age);  // true\n    console.log(delete person['age']);  // true\n    console.log(person.age);  // undefined\n    console.log(delete person.age);   // 注意这个也返回true 判断操作结束后该属性是否存在\n    \n    // 有些属性是不能删除的\n    console.log(delete Object.prototype);  // false\n    \n    // 原因\n    var descriptor = Object.getOwnPropertyDescriptor(Object, 'prototype');\n    console.log(descriptor.configurable);  // false\n    \n    // 变量及函数不可删除\n    var globalVal = 1;\n    console.log(delete globalVal);  // false\n    \n    (function() {\n        var localVal = 1;\n        console.log(delete localVal);\n    }());  // false\n    \n    function fd() {}\n    console.log(delete fd);  // false\n    \n    (function() {\n        function fd() {};\n        console.log(delete fd);\n    }());  // false\n    \n    \n    // 隐示定义的变量可以\n    ohNo = 1;\n    console.log(delete ohNo);  // true\n    \n\n对象属性检测\n\n    var cat = new Object();\n    cat.legs = 4;\n    cat.name = 'Kitty';\n    \n    console.log('legs' in cat);  // true\n    console.log('abc' in cat);  // false\n    console.log('toString' in cat);  // true 继承属性\n    \n    console.log(cat.hasOwnProperty('legs'));  // true\n    console.log(cat.hasOwnProperty('toString'));  // false\n    \n    console.log(cat.propertyIsEnumerable('legs'));  // true\n    console.log(cat.propertyIsEnumerable('toString'));  // false\n    \n    \n    Object.defineProperty(cat, 'price', {enumerable: false, value: 1000});\n    // defineProperty是Object的方法，默认的标签enumerable值为false\n    // Object.x创建属性，默认的标签值为true\n    console.log(cat.propertyIsEnumerable('price'));  // false\n    console.log(cat.hasOwnProperty('price'));  // true\n    \n    \n    // 判断属性是否存在\n    if(cat && cat.legs) {\n        cat.legs *= 2;\n    }\n    \n    if(cat.legs != undefined) {\n        // !== undefined 或者 !== null\n    }\n    if(cat.legs !== undefined) {\n        // !== undefined\n    }\n    \n\n对象属性枚举\n\n    var o = {x: 1, y: 2, z: 3};\n    console.log('toString' in o);  // true\n    o.propertyIsEnumerable('toString');  // false\n    \n    var key;\n    console.log(o.x);  // 1\n    console.log(o.y);  // 2\n    console.log(o.z);  // 3\n    for(key in o) {\n        console.log(key);  // x, y, z\n        console.log(o.key);  // undefined\n        console.log(o[key]);  // 1, 2, 3\n    }\n    \n    \n    var obj = Object.create(o);\n    obj.a = 4;\n    var key;\n    for(key in obj) {\n        console.log(key); // a, x, y, z\n    }\n    var key1;\n    for (key1 in obj) {\n        if(obj.hasOwnProperty(key1)) {\n            console.log(key1); // a\n        }\n    }\n    \n\n对象属性的get/set方法\n\n    // 对象属性的get/set方法\n    var man = {\n        name: 'Bug',\n        weibo: 'Bug',\n        get age() {\n            return new Date().getFullYear() - 1988;\n        },\n        set age(val) {\n            console.log('cannot be set ' + val);\n        },\n    };\n    \n    console.log(man.age);  // 调用age的get方法27\n    man.age = 100;  // 调用age的set方法 cannot be set 100\n    console.log(man.age);  // 27\n    \n    \n    var man = {\n        weibo: 'Bug',\n        $age: null,\n        get age() {\n            if(this.$age == undefined) {\n                return new Date().getFullYear() - 1988;\n            } else {\n                return this.$age;\n            }\n        },\n        set age(val) {\n            val = +val; // 转为数字\n            if(!isNaN(val) && val > 0 && val < 150) {\n                this.$age = + val;\n            } else {\n                throw new Error('Incorrect val = ' + val );\n            }\n        }\n    }\n    \n    console.log(man.age);  // 27\n    man.age = 100;\n    console.log(man.age);  // 100\n    //man.age = 'abc';  // Error: Incorrect val = NaN\n    \n    \n    // get/set方法与原型链\n    \n    // 这是错误的定义对象属性get方法方式\n    function foo1() {}\n    foo1.prototype.z = {\n        get: function() {\n            return 2;\n        }\n    };\n    var obj = new foo1();\n    console.log(obj.z);  // 这个会被认为是对象 { get: [Function] }\n    obj.z = 200;\n    console.log(obj.z);  // 200\n    \n    // 正确定义方法\n    function foo() {}\n    Object.defineProperty(foo.prototype, 'z', {\n        get: function() {\n            return 1;\n        },\n        // configurable: true,  // 开启此属于也不会被改变\n        // writable: true,  // 此项不能配置writable/value get/set 二选一\n     });\n    var obj = new foo();\n    console.log(obj.z);   // 1\n    obj.z = 100;\n    console.log(obj.z);  // 但是还是1 并没有被改变\n    \n    Object.defineProperty(obj, 'z', {\n        value: 100,\n        configurable: true\n    });\n    console.log(obj.z);  // 100\n    delete obj.z;\n    console.log(obj.z);  // 返回到1\n    \n    // 另外一个例子\n    var o = {};\n    Object.defineProperty(o, 'x', {\n        value: 1\n    });  // 默认writable: false, configurable: false\n    var obj = Object.create(o);\n    console.log(obj.x);  // 1\n    obj.x = 100;\n    console.log(obj.x);  // 还是1\n    \n    \n    Object.defineProperty(obj, 'x', {\n        writable: true,\n        configurable: true,\n        value: 100\n    });\n    console.log(obj.x);  // 100\n    obj.x = 200;\n    console.log(obj.x); // 200\n    \n\n### 对象属性标签\n\n    person = {};\n    Object.defineProperty(person, 'type', {\n        configurable: false,\n        writable: true,\n        enumerable: false,\n        value: 'Object',\n    });\n    \n    console.log(Object.keys(person));   // [] 返回空数组，不能枚举\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // { value: 'Object', writable: true, enumerable: false, configurable: false }\n    \n    \n    // writable为true，可以通过赋值方法修改value值 [通过赋值修改属性值只和writable标签有关，和configurable无关]\n    person.type = 'Object2';\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));  // { value: 'Object2', writable: true, enumerable: false, configurable: false }\n    \n    \n    // configurable: false 无法使用delete删除属性， 无法使用get/set方法，  无法重新配置属性标签（除了将writable从true修改为false）\n    console.log(delete person.type);   // 返回false\n    \n    \n    // 只有writable和configurable标签都为false时，不能修改value标签值，其他情况都可以修改value标签值\n    Object.defineProperty(person, 'type', {\n        configurable: false,\n        writable: true,\n        enumerable: false,\n        value: 'Object1',\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // { value: 'Object1', writable: true, enumerable: false, configurable: false }\n    \n    \n    // 可以重新配置writable标签值(只能重true改为false)\n    Object.defineProperty(person, 'type', {\n        writable: false,\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // { value: 'Object1', writable: false, enumerable: false, configurable: false }\n    \n    \n    // 无法将writable从false改为true\n    Object.defineProperty(person, 'type', {\n        writable: true,\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // TypeError: Cannot redefine property: type\n    \n    \n    // 无法重新配置enumerable，configurable属性\n    Object.defineProperty(person, 'type', {\n        enumerable: true,\n    });\n    console.log(Object.getOwnPropertyDescriptor(person, 'type'));   // TypeError: Cannot redefine property: type\n    \n\n### 对象标签\n\n原型标签**proto**\n\n    // 原型标签__proto__\n    \n    function Person(name) {\n        this.name = name;\n    }\n    var p = new Person('jack');\n    console.log(p.__proto__ === Person.prototype);  // true\n    \n\n类型标签\n\n    //  对象class标签，表示对象是哪个类型，没有直接的方法去修改或者获取\n    var toString = Object.prototype.toString;\n    \n    console.log(toString.call(null));  // [object Null]\n    console.log(toString.call(undefined));  // [object Undefined]\n    console.log(toString.call(1));  // [object Number]\n    console.log(toString.call(new Number(1)));  // [object Number]\n    console.log(toString.call(true));  // [object Boolean]\n    console.log(toString.call(new Boolean(true)));  // [object Boolean]\n    \n\n可扩展标签\n\n    // extensible 可扩展标签，表示是否可以继续添加对象属性\n    var obj = {x: 1, y: 2};\n    console.log(Object.isExtensible(obj));  // true 对象可扩展\n    Object.preventExtensions(obj);  // 配置对象不可扩展\n    console.log(Object.isExtensible(obj));  // false 对象不可扩展\n    obj.z =1;\n    console.log(obj.z);  // undefined 添加属性失败\n    console.log(Object.getOwnPropertyDescriptor(obj, 'x'));  // // { value: 1, writable: true, enumerable: true, configurable: true }\n    \n    \n    // Object.seal方法，对象的所有属性configurable值为false\n    Object.seal(obj);\n    console.log(Object.getOwnPropertyDescriptor(obj, 'x'));  // { value: 1, writable: true, enumerable: true, configurable: false }\n    console.log(Object.isSealed(obj)); // true\n    \n    \n    // Object.freeze方法，对象的所有属性configurable，writable标签值为false\n    Object.freeze(obj);\n    console.log(Object.getOwnPropertyDescriptor(obj, 'x'));   // // { value: 1, writable: false, enumerable: true, configurable: false }\n    console.log(Object.isFrozen(obj));  // true\n    \n\n### JS对象与json格式转换\n\n    // 将js对象转为json格式JSON.stringify()\n    var obj = {x: 1, y: true, z: [1, 2, 3], nullVal: null};\n    console.log(JSON.stringify(obj));  // {\"x\":1,\"y\":true,\"z\":[1,2,3],\"nullVal\":null}\n    \n    // undefined,NaN,Infinity等特殊属性值\n    var obj = {val: undefined, a: NaN, b: Infinity, c: new Date()};\n    console.log(JSON.stringify(obj));  // {\"a\":null,\"b\":null,\"c\":\"2015-12-19T12:30:40.456Z\"}\n    \n    // 将json格式转为js对象JSON.parse\n    var obj = JSON.parse('{\"x\": 1}');\n    console.log(obj.x);  // 1\n    \n    //toJSON方法\n    var obj = {\n        x: 1,\n        y: 2,\n        o: {\n            o1: 1,\n            o2: 2,\n            toJSON: function() {\n                return this.o1 + this.o2;\n            }\n        },\n    };\n    console.log(JSON.stringify(obj));  // {\"x\":1,\"y\":2,\"o\":3}\n    \n\n###toString valueOf方法\n\n    // 对象在作为操作数时，解释器总是优先调用valueOf()--(Date类型的对象在二元“+”运算时例外),而其他情况，解释器总是认为我们想要的是字符串，所以会优先调用toString()。\n    var obj = {x: 1, y: 2};\n    console.log(obj.toString());  // [object Object]\n    console.log(+obj.toString());  // NaN\n    console.log(3 + obj.toString());  // 3[object Object] 会被理解为字符串拼接\n    console.log(+obj.valueOf());  // NaN\n    \n    // 重写\n    obj.toString = function() {\n        return this.x + this.y;\n    };\n    console.log(+obj);  // 3\n    obj.valueOf = function() {\n        return this.x + this.y + 100;\n    };\n    console.log(+obj);  // 103\n    \n    // 如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。在不能调用toString的情况下，只能让valueOf上阵了。\n    \n    var cc = {\n        i: 10,\n        valueOf: function() {\n            console.log('valueOf');\n            return this.i;\n        }\n    };\n    \n    console.log(cc);// 10 { [Number: 10] i: 10, valueOf: [Function] }\n    console.log(+cc); // 10 valueOf\n    console.log(''+cc); // 10 valueOf\n    console.log(String(cc)); // [object Object]\n    console.log(Number(cc)); // 10 valueOf\n    console.log(cc == '10'); // true valueOf\n    \n\n### 数组\n\n创建数组\n\n    // 字面量创建数组 数组的长度不能超过2^23 - 1 = 4,294,967,295\n    var BAT = ['B', 'A', 'T'];\n    var students = [{name: 'B', age: 27}, {name: 'A', age: 30}];\n    var arr = ['T', 123, true, null, undefined];\n    var arrInArr = [[1, 2], [1, 2, 3]];\n    \n    // 对象创建数组 new关键字可以省略\n    var arr = new Array();  // var = [];\n    var arrWithLength = new Array(100);  // undefined * 100\n    var arrLikesLiteral = new Array(true, false, null, 1, 2, 'hi');  // [true, false, null, 1, 2, 'hi']\n    \n\n数组元素操作\n\n    // 数组元素读写\n    \n    // 索引访问\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr[1]);  // b\n    console.log(arr.length);  // 5\n    arr[5] = 'f';\n    console.log(arr);  // [ 'a', 'b', 'c', 'd', 'e', 'f' ]\n    console.log(arr.length);  // 6\n    \n    // delete方法并不会改变数组长度,delete 和定义为undefined的区别\n    delete arr[0];\n    console.log(arr);  // [ , 'b', 'c', 'd', 'e', 'f' ]\n    console.log(arr.length);  // 6\n    console.log(0 in arr);  // 会返回false\n    arr[1] = undefined;\n    console.log(arr);  // [ , undefined, 'c', 'd', 'e', 'f' ]\n    console.log(arr.length);  // 6\n    console.log(1 in arr);  // true\n    \n    // 数组是动态的，无需指定大小\n    \n    // 指定索引位置，改变数组\n    var arr = [];\n    arr[1] = 'b';\n    console.log(arr.length);  // 2\n    console.log(arr);   // [ , 'b' ]\n    \n    // push方法，在数组尾部添加元素,并返回新的数组长度\n    console.log(arr.push('c'));  // 3\n    console.log(arr);  // [ , 'b', 'c' ]\n    \n    // 在数组尾部添加的另一种方法\n    arr[arr.length] = 'd';\n    console.log(arr);  // [ , 'b', 'c', 'd' ]\n    \n    // unshift方法，在数组头部添加元素，并返回新的数组长度\n    console.log(arr.unshift('a'));  // 5\n    console.log(arr);  // [ 'a', , 'b', 'c', 'd' ]\n    \n    // pop方法，删除数组尾部的元素并返回这个元素\n    console.log(arr.pop());  // 'd'\n    console.log(arr);  // [ 'a', , 'b', 'c' ]\n    \n    // 删除数组尾部元素的另个方法\n    arr.length -= 1;\n    console.log(arr);  // [ 'a', , 'b' ]\n    \n    // shift方法，删除数组头部的元素并返回这个元素\n    console.log(arr.shift());  // 'a'\n    console.log(arr);  // [ , 'b' ]\n    \n\n数组迭代\n\n    // 数组迭代\n    var arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n    for(var i = 0; i < arr.length; i++) {\n        console.log(arr[i]);\n    }\n    // a b c d e f g\n    \n    for(i in arr) {\n        console.log(arr[i]);\n    }\n    // a b c d e f g\n    \n    // for in 表达式的坑：会迭代原型的元素\n    Array.prototype.x = 'keng';\n    for(i in arr) {\n        console.log(arr[i]);\n    }\n    // a b c d e f g keng\n    \n    for(i in arr) {\n        if(arr.hasOwnProperty(i)) {\n            console.log(arr[i]);\n        }\n    }\n    // a b c d e f g\n    \n\n特殊数组：二维数组和稀疏数组\n\n    // 特殊数组：二维数组，稀疏数组\n    // 二维数组\n    var arr = [['a', 'b'], ['c', 'd'], ['e', 'f']];\n    var i = 0, j = 0;\n    var row;\n    for(; i < arr.length; i++) {\n        row = arr[i];\n        console.log('row' + i);\n        for(j = 0; j < row.length; j++) {\n            console.log(row[j]);\n        }\n    }\n    // row0 a b row1 c d row2 e f\n    \n    // 稀疏数组：并不含有从0开始的连续索引\n    var arr1 = [undefined];\n    var arr2 = new Array(1);\n    console.log(0 in arr1);  // true\n    console.log(0 in arr2);  // false\n    \n\n### 数组的方法\n\nArray.prototype.join(separator)\n\n    // Array.prototype.join(separator)方法：将数组拼接成字符串，返回字符串，不改变原数组\n    var arr = ['a', 'b', 'c'];\n    console.log(arr.join());  // a,b,c\n    console.log(arr.join('_'));  // a,b,c\n    function repeatString(str, n) {\n        return new Array(n + 1).join(str);\n    }\n    console.log(repeatString('a', 3));  // aaa\n    console.log(repeatString('Hi', 5));  // HiHiHiHiHi\n    \n\nArray.prototype.reverse()\n\n    // Array.prototype.reverse() 将数组逆序，返回数组本身，会改变数组本身\n    var arr = ['a', 'b', 'c'];\n    var arr1 = arr;\n    var arr2 = ['a', 'b', 'c'];\n    console.log(arr.reverse());  // [ 'c', 'b', 'a' ]\n    console.log(arr);  // [ 'c', 'b', 'a' ]\n    console.log(arr1);  // [ 'c', 'b', 'a' ]\n    console.log(arr2);  // [ 'a', 'b', 'c' ]\n    \n\nArray.prototype.sort(sortby）\n\n    // Array.prototype.sort(sortby)方法：接受一个函数参数(不传参数默认按字符编码顺序)，返回数组本身，会修改原数组\n    var arr = ['f', 'b', 'd', 'e', 'a'];\n    console.log(arr.sort());  // [ 'a', 'b', 'd', 'e', 'f' ]\n    console.log(arr);  // [ 'a', 'b', 'd', 'e', 'f' ]\n    \n    var arr = [13, 24, 51, 3];\n    console.log(arr.sort());  // [ 13, 24, 3, 51 ]\n    \n    // 传入参数：比较函数(a, b)\n    // 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n    // 若 a 等于 b，则返回 0。\n    // 若 a 大于 b，则返回一个大于 0 的值。\n    function sortNumber(a, b) {\n        return a - b;\n    }\n    console.log(arr.sort(sortNumber));  // [ 3, 13, 24, 51 ]\n    \n    var arr = [{age: 25}, {age: 29}, {age: 40}];\n    console.log(arr.sort(function sortAge(a, b) {\n        return a.age - b.age;\n    }));  // [ { age: 25 }, { age: 29 }, { age: 40 } ]\n    \n\nArray.prototype.concat(arrayX, arrayY.....)\n\n    // Array.prototype.concat(arrayX, arrayY.....)方法 连接多个数组，返回一个新的数组，不会改变原数组\n    var arr = ['a', 'b', 'c'];\n    console.log(arr.concat('d', 'e'));  // [ 'a', 'b', 'c', 'd', 'e' ]\n    console.log(arr);  // [ 'a', 'b', 'c' ]\n    console.log(arr.concat(['d', 'e'], 'f'));  // [ 'a', 'b', 'c', 'd', 'e', 'f' ]\n    console.log(arr.concat(['d', 'e'], ['f', 'g']));  // 'b', 'c', 'd', 'e', 'f', 'g' ]\n    console.log(arr.concat([['d', 'e'], 'f']));  // [ 'a', 'b', 'c', [ 'd', 'e' ], 'f' ]\n    console.log(arr.concat([[['d', 'e'], 'f'], 'g']));  // [ 'a', 'b', 'c', [ [ 'd', 'e' ], 'f' ], 'g' ]\n    \n\nArray.prototype.slice(start, end)\n\n    // Array.prototype.slice(start, end)方法：左闭右开截取数组，返回一个新的数组，不改变原数组\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.slice(1, 3));  // ['b', 'c']\n    console.log(arr.slice(1));  // ['b', 'c', 'd', 'e']\n    console.log(arr.slice(1, -1));  // ['b', 'c', 'd']\n    console.log(arr.slice(-4, -3));  // ['b']\n    \n\nArray.prototype.splice(index, howmany, item1,....itemX)\n\n    // Array.prototype.splice(index, howmany, item1,....itemX)方法：\n    // 向/从数组中添加/删除项目，然后返回被删除的项目。会改变原数组\n    // index参数：必须，整数，添加或删除的位置，左闭合\n    // howmany参数：可选，设置为0，则不会删除\n    // item1,.....itemX：可选，向数组中添加的元素\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2));   // [ 'c', 'd', 'e' ]\n    console.log(arr);  // [ 'a', 'b' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 1));  // [ 'c' ]\n    console.log(arr);  // [ 'a', 'b', 'd', 'e' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 0));  // []\n    console.log(arr);  // [ 'a', 'b', 'c', 'd', 'e' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 2, 'f', 'g', ['h', 'i']));  // [ 'c', 'd' ]\n    console.log(arr);  // [ 'a', 'b', 'f', 'g', [ 'h', 'i' ], 'e' ]\n    \n    // 指定位置插入新的元素\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice(2, 0, 'f'));  // []\n    console.log(arr); // [ 'a', 'b', 'f', 'c', 'd', 'e' ]\n    \n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    console.log(arr.splice());  // []\n    console.log(arr); // [ 'a', 'b', 'c', 'd', 'e' ]\n    \n\nArray.prototype.forEach()\n\n    // Array.prototype.forEach()方法(ES5)：接收函数参数\n    // 函数的3个参数x: 元素值，index：元素索引，a 数组本身\n    var arr = ['a', 'b', 'c', 'd', 'e'];\n    arr.forEach(function(x, index, a) {\n        console.log(x + '_' + index + '_' + a);\n    });\n    // a_0_a,b,c,d,e b_1_a,b,c,d,e c_2_a,b,c,d,e d_3_a,b,c,d,e e_4_a,b,c,d,e\n    \n\nArray.prototype.map()\n\n    //Array.prototype.map()方法(ES5):接收函数参数,不会修改原数组\n    var arr = ['a', 'b', 'c'];\n    var arr1 = arr.map(function(x) {\n        return x + 'like';\n    });\n    \n    console.log(arr);  // [ 'a', 'b', 'c' ]\n    console.log(arr1);  // [ 'alike', 'blike', 'clike' ]\n    \n\nArray.prototype.filter()\n\n    // Array.prototype.filter()过滤方法(ES5):接收函数参数，不修改原数组\n    var arr = [1,2,3,4,5,6,7,8,9,10];\n    var arr1 = arr.filter(function(x, index) {\n        return index % 3 === 0 || x >= 8;\n    });\n    console.log(arr1);  // [ 1, 4, 7, 8, 9, 10 ]\n    console.log(arr);  // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n    \n\nArray.prototype.every() & Array.prototype.some()\n\n    // Array.prototype.every() & Array.prototype.some()判断方法(ES5):接收函数参数，不修改原数组\n    // every 全部符合条件  some 只需一个符合条件\n    var arr = [1,2,3,4,5];\n    console.log(arr.every(function(x) {\n        return x < 10;\n    }));  // true\n    console.log(arr.every(function(x) {\n        return x <= 3;\n    }));  // false\n    console.log(arr.some(function(x) {\n        return x === 3;\n    }));  // true\n    console.log(arr.some(function(x) {\n        return x === 100;\n    }));  // false\n    \n\nArray.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)\n\n    // Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)方法\n    // 接收一个函数参数和一个数组索引参数，并返回一个值，不修改原数组\n    // 函数参加接收2个参数分别代表2个索引\n    // 索引参数表示从第index个元素开始\n    var arr = [1, 2, 3];\n    var sum = arr.reduce(function(x, y) {\n        return x + y;\n    }, 0);\n    console.log(sum);  // 6  1+2返回3 3+3 返回6\n    \n    var arr = [3, 9, 6];\n    var max = arr.reduce(function(x, y) {\n        console.log(x + '|' + y);\n        return x > y ? x : y;\n    });\n    // 3|9\n    // 9|6\n    console.log(max);  // 9\n    \n    var max = arr.reduceRight(function(x, y) {\n        console.log(x + '|' + y);\n        return x > y ? x : y;\n    });\n    // 6|9\n    // 9|3\n    console.log(max);  // 9\n    \n\nArray.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)\n\n    // Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)数字检索方法\n    // value参数表示要查找的元素值，index表示从第几个索引位置开始查找(闭合)\n    var arr = ['a', 'b', 'c', 'b', 'a'];\n    console.log(arr.indexOf('b'));  // 1 在数组中查找是否有元素值为'b'，有则返回这个元素索引\n    console.log(arr.indexOf('f'));  // -1 如果没有则返回-1\n    console.log(arr.indexOf('b', 1));  // 1 从第2个元素开始查找，返回索引1\n    console.log(arr.indexOf('b', 2));  // 3\n    console.log(arr.indexOf('b', -2));  // 3\n    console.log(arr.indexOf('b', -4));  // 1\n    console.log(arr.indexOf('b', -8));  // 1\n    console.log(arr.lastIndexOf('b'));  // 3\n    \n\nArray.isArray()\n\n    // Array.isArray() 判断是否为数组\n    console.log(Array.isArray([]));  // true\n    \n\n### 创建函数\n\n    // 函数声明\n    function add(a, b) {\n        a = +a;\n        b = +b;\n        if (isNaN(a) || isNaN(b)) {\n            return;\n        }\n        return a + b;\n    }\n    \n    // 函数表达式\n    var add = function(a, b) {\n        // do sth\n    };\n    \n    // IEF(立即执行函数表达式)\n    (function() {\n        // do sth\n    })();\n    \n    // 函数表达式\n    return function () {\n        // do sth\n    };\n    \n    // NFE(命名式函数表达式)\n    var add = function foo(a, b) {\n        // do sth\n    };\n    \n\n**函数声明和函数表达式区别：函数声明会前置**\n\n    var num = add(1, 2);\n    console.log(num);\n    \n    function add(a, b) {\n        a = +a;\n        b = +b;\n        if (isNaN(a) || isNaN(b)) {\n            return;\n        }\n        return a + b;\n    }\n    \n    // 结果为3\n    \n\n    var num = add(1, 2);\n    console.log(num);\n    \n    var add = function (a, b) {\n        a = +a;\n        b = +b;\n        if (isNaN(a) || isNaN(b)) {\n            return;\n        }\n        return a + b;\n    };\n    \n    // TypeError: add is not a function\n    \n\n### this\n\n全局下的this\n\n    // 全局下的this(浏览器下)\n    console.log(this.window === document);  // true\n    console.log(this === window);  // true\n    this.a = 37;\n    console.log(window.a);  // 37\n    \n\n一般函数的this\n\n    // 一般函数的this（浏览器下）\n    function f1() {\n        return this;\n    }\n    f1() === window;  // true\n    \n    function f2() {\n        \"use strict\";  // 严格模式下\n        return this\n    }\n    f2() === undefined;  // true\n    \n\n作为对象方法的函数的this\n\n    var o = {\n        prop: 37,\n        f: function() {\n            return this.prop;\n        }\n    };\n    console.log(o.f());  // 37\n    \n    var o = {prop: 37};\n    function  independent() {\n        return this.prop;\n    }\n    o.f = independent;\n    console.log(o.f());  // 37\n    \n\n原型链上的this\n\n    var o = {\n        f: function() {\n            return this.a + this.b;\n        }\n    };\n    var p = Object.create(o); // p为空对象，其原型会指向o\n    p.a = 1;\n    p.b = 4;\n    console.log(p.f())  // 5\n    \n\n构造器中的this\n\n    // 当new的函数构造器没有return返回值或者返回值不是对象时，new返回一个this指向构造器的prototype这样一个空对象\n    // 如果return返回的是对象 new返回的这是这个对象\n    function Myclass() {\n        this.a = 37;\n    }\n    var o = new Myclass();\n    console.log(o.a);  // 37\n    \n    function C2() {\n        this.a = 37;\n        return {a: 38};\n    }\n    o = new C2();\n    console.log(o.a);  // 38\n    \n\ncall和apply的this\n\n    function add(c, d) {\n        return this.a + this.b + c + d;\n    }\n    var o = {a: 1, b: 2};\n    add.call(o, 5, 6);  // 1+3+5+7=16\n    add.apply(o, [10, 20]);  //1+3+10+20=34\n    \n    function bar() {\n        console.log(Object.prototype.toString.call(this));\n    }\n    bar.call(7); // [object Number]\n    \n\nband和this\n\n    //bind是es5后，ie9+使用\n    function f() {\n        return this.a;\n    }\n    var g = f.bind({a: 'test'});\n    console.log(g());  // test\n    var o = {\n        a: 37,\n        f: f,\n        g: g\n    };\n    console.log(o.f(), o.g());  // 37, test\n    \n\n函数arguments属性\n\n    function foo(x, y, z) {\n        arguments.length;  // 2 实际传入的参数数量\n        arguments[0];  // 1 传入第一个参数值\n        arguments[0] = 10;\n        x;  // 10 将第一个参数值修改为10， 严格模式下任然是1\n        arguments[2] = 100;\n        z; // undefined  由于第三个参数没有传入，不会绑定\n        arguments.callee  === foo;  // true   严格模式下不能使用\n    }\n    \n    foo(1, 2);\n    foo.length;  // 3   3个参数\n    foo.name;  // \"foo\" 函数名\n    \n\n### call和apply\n\n    // apply和call方法（浏览器）\n    // 第一个参数是作为this的对象，如果不是对象，会转换为对象\n    // call传入的是扁平传入参数\n    // apply第二个参数树数组\n    function foo(x, y) {\n        console.log(x, y, this);\n    }\n    \n    foo.call(100, 1, 2);  // 1, 2, Number(100)\n    foo.apply(true, [3, 4]);  //3, 4, Boolean(true)\n    foo.apply(null);  // undefined, undefined, window\n    foo.apply(undefined);  // undefined, undefined, window\n    \n\n### bind\n\nbind方法：改变this\n\n    // bind方法\n    this.x = 9;\n    var module = {\n        x: 81,\n        getX: function() {\n            return this.x;\n        }\n    };\n    \n    module.getX();  // 81 this指向module\n    \n    var getX = module.getX;\n    getX();  // 9 this指向全局变量\n    \n    var boundGetX = getX.bind(module);\n    boundGetX();  // 81  bind改变this指向\n    \n\nbind方法：科里化\n\n    // bind方法\n    function add(a, b, c) {\n        return a+b+c;\n    }\n    \n    var func = add.bind(undefined, 100);\n    func(1, 2);  // 103  undefined传给this， 100传给第一个参数a\n    \n    var func2 = func.bind(undefined, 200);\n    func2(10);  // 310 undefined传给this，200传给b\n    \n\nbind与new\n\n    // bind方法与new\n    function foo() {\n        this.b = 100;\n        return this.a;\n    }\n    \n    var func = foo.bind({a: 1});\n    \n    func(); // 1  foo.bind后this指向{a: 1} return this.a = 1\n    new func();  // {b: 100} new调用将返回一个this，this会被初始化一个空对象，并且其原型是foo.prototype,空对象的b属性为100\n    \n    \n\n### 闭包\n\n闭包基本概念\n\n    // 闭包\n    var n = 999;\n    function f1() {\n        console.log(n);\n    }\n    f1();  // 999  函数内部可以访问全局变量\n    \n    function f1() {\n        var n = 999;\n    }\n    console.log(n);  // error  函数外部无法访问函数内部局部变量\n    \n    function f1() {\n        n = 999;\n    }\n    console.log(n); // 999 因为没有使用var语句，相当于定义一个全局变量\n    \n    \n    // 简单的闭包原型\n    function f1() {\n        var n = 999;\n        function f2() {\n            console.log(n);\n        }\n        return f2\n    }\n    var result = f1();\n    result();  // 999\n    \n\n闭包案例\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n        <style>\n            #div1 {\n                background-color: rosybrown;\n            }\n            #div2 {\n                background-color: aquamarine;\n            }\n            #div3 {\n                background-color: yellowgreen;\n            }\n        </style>\n    </head>\n    <body>\n    \n    </body>\n    <script>\n        document.body.innerHTML = '<div id=\"div1\">aaa</div><div id=\"div2\">bbb</div><div id=\"div3\">ccc</div>';\n        for(var i = 1; i < 4; i++) {\n            alert(i);  // 结果为1，2，3\n            document.getElementById('div' + i).\n                    addEventListener('click', function() {\n                alert(i);  // 点击div1，div2，div3结果都是4,因为addEventListener的回调函数执行时i都为4\n            });\n        }\n    </script>\n    </html>\n    \n\n正确写法\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n        <style>\n            #div1 {\n                background-color: rosybrown;\n            }\n            #div2 {\n                background-color: aquamarine;\n            }\n            #div3 {\n                background-color: yellowgreen;\n            }\n        </style>\n    </head>\n    <body>\n    \n    </body>\n    <script>\n        document.body.innerHTML = '<div id=\"div1\">aaa</div><div id=\"div2\">bbb</div><div id=\"div3\">ccc</div>';\n        for(var i = 1; i < 4; i++) {\n            !function(i) {\n                alert(i);  // 1,2,3\n                document.getElementById('div' + i).\n                   addEventListener('click', function() {\n                       alert(i);  // 1, 2,3 \n                });\n            }(i);\n        }\n    </script>\n    </html>\n    \n\n闭包中的封装\n\n    (function() {\n        var _userID = 23245;\n        var _typeID = 'item';\n        var exportID = {};\n    \n        function converter(userID) {\n            return +userID;\n        }\n    \n        exportID.getUserID = function() {\n            return converter(_userID);\n        };\n    \n        exportID.getTypeID = function() {\n            return _typeID;\n        };\n        global.exportID = exportID;\n    }());\n    \n    console.log(exportID.getUserID());  //23245\n    console.log(exportID._userID);  // undefined\n    \n\n### 三种作用域\n\n    // 作用域： 全局作用域，函数作用域，eval作用域\n    var a = 10;\n    (function() {\n        var b = 20;\n    })();\n    console.log(a);  // 10\n    console.log(b);  // error\n    \n    for(var item in {a: 1, b: 2}) {\n        console.log(item);  // a, b\n    }\n    console.log(item); // b\n    \n\n### ES3中的执行上下文\n\nEC = Execution Context 执行上下文  \n变量对象（Variable Object 简写VO）是一个抽象概念，用于存储执行上下文中的变量，函数声明，函数参数\n\n    var a = 10;\n    function test(x) {\n        var b = 20;\n    }\n    test(30);\n    \n\n对应的上下文\n\n    // 整个js环境中的VO\n    VO(globalContext) = {\n        a: 10,\n        test: <ref to function>\n    };\n    // 执行test(30)的VO\n    VO(test functionContext) = {\n        x: 30,\n        b: 20\n    };\n    \n\n全局执行上下文\n\n    VO(globalContext) === [[global]]\n    [[global]] = {\n        Math : <...>,\n        String : <...>,\n        isNaN: function() {[Native Code]},\n        ...\n        ...\n        window: global\n    };\n    \n    String(10);  //[[global]].String(10)\n    window.a = 10;  // [[global]].window.a = 10\n    this.b = 20;  // [[global]].b = 20\n    \n\n变量初始化阶段\n\n    // 1, 函数参数（若没有传入，则其值为undefined）\n    // 2, 函数声明（若函数声明和函数参数冲突，则函数声明会覆盖掉函数参数）\n    // 3，变量声明（初始化变量值为undefined，若何函数参数，函数声明冲突，会被忽略掉）\n    function test(a, b) {\n        var c = 10;\n        function d() {}\n        var e = function _e() {};\n        (function x() {});\n        b = 20;\n    }\n    test(10);\n    \n    \n    AO(test) = {\n        a: 10,\n        b: undefined,\n        c: undefined,\n        d: <ref to func 'd'>,\n        e: undefined,\n    };\n    \n\n变量初始化案例1\n\n    function foo(x, y, z) {\n        function x() {}\n        console.log(x);\n    }\n    \n    foo(100);  // [Function: x]\n    //\n    AO(foo) = {\n        //x: 100,\n        y: undefined,\n        z: undefined,\n        x: <ref to func 'x'>,  // 函数声明x会覆盖掉参数声明 \n    }\n    \n\n变量初始化案例2\n\n    function foo(x, y, z) {\n        function func() {}\n        var func;\n        console.log(func);\n    }\n    foo(100);  // [Function: func]\n    \n    function foo(x, y, z) {\n        function func() {}\n        var func = 1;\n        console.log(func);\n    }\n    foo(100);  // 1  执行阶段会执行func = 1 这个语句\n    \n\n代码执行阶段\n\n    function test(a, b) {\n        var c = 10;\n        function d() {}\n        var e = function _e() {};\n        (function x() {})();\n        b = 20;\n    }\n    \n    // 初始化阶段\n    AO(test) = {\n        a: 10,\n        b: undefined,\n        c: undefined,\n        d: <ref to func 'd'>,\n        e: undefined\n    };\n    // 代码执行阶段\n    AO(test) = {\n        a: 10,\n        b: 20,\n        c: 10,\n        d: <reference to FunctionDeclaration 'd'>,\n        e: function _e()\n    };\n    \n\n全局执行上下文案例\n\n    console.log(x);  // [Function: x]\n    var x = 10;  // 初始化阶段x: 冲突，被忽略\n    console.log(x);  // 10\n    x = 20;\n    function x() {}  // 初始化阶段x: <ref to func 'x'>\n    console.log(x);  // 20\n    if (true) {\n        var a = 1;  // 初始化阶段a: undefined\n    } else {\n        var b = true;  // 初始化阶段b: undefined\n    }\n    \n    console.log(a);  // 1\n    console.log(b);  // undefined\n    \n\n### prototype\n\nprototype是函数对象上的预设的对象属性  \n原型是对象上的原型，通常都是构造器的prototype属性  \n实例\n\n    function Abc() {\n        this.y = 2;\n        var z = 3;\n    }\n    console.log(Abc);  // [Function: Abc]\n    console.log(Abc.prototype);  // Abc {}\n    console.log(typeof Abc.prototype);  // object\n    \n    Abc.prototype.x = 1;\n    console.log(Abc.prototype);  // Abc { x: 1 }\n    \n    var obj1 = new Abc();\n    console.log(obj1.__proto__);  // Abc { x: 1 }\n    console.log(obj1.__proto__ === Abc.prototype);  // true  new构造器创建的对象的原型是构造器的prototype属性\n    console.log(obj1);  // Abc { y: 2 }\n    console.log(obj1.y);  // 2\n    console.log(obj1.x);  // 1\n    \n\n### 继承\n\n实现继承的方法\n\n    // 实现继承的方法\n    function Person() {\n    }\n    \n    function Student() {\n    }\n    \n    Student.prototype = Person.prototype;  // 错误，会影响被继承类的方法\n    Student.prototype = new Person();  // 错误，传参问题，因为Student是类，并不是实例\n    \n    // 正确的方法\n    Student.prototype = Object.create(Person.prototype);\n    Student.prototype.constructor = Student;\n    // Object.create()是es5的方法，下面是fix方法\n    if(!Object.create) {\n        Object.create = function(proto) {\n            function F() {}\n            F.prototype = proto;\n            return new F;\n        };\n    }\n    \n\n原型的继承方法\n\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        this.sayNo = function() {\n            console.log(this.name + ' say no');\n        }\n    }\n    \n    Person.prototype.hi = function() {\n        console.log('Hi, my name is ' + this.name + ',I\\'m ' + this.age + ' years old now');\n    };\n    Person.prototype.LEGS_NUM = 2;\n    Person.prototype.ARMS_NUM = 2;\n    Person.prototype.walk = function() {\n        console.log(this.name + ' is walking...');\n    };\n    \n    console.log(Person);  // [Function: Person]\n    console.log(Person.prototype);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n    var Jack = new Person();  // Person构造器没有return对象，所以返回的是this\n    Jack.sayNo();  // undefined say no\n    Jack.hi();  // Hi, my name is undefined,I'm undefined years old now\n    Jack.walk();  // undefined is walking...\n    console.log(Jack);  // Person { name: undefined, age: undefined, sayNo: [Function] }\n    console.log(Jack.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n    \n    // 以下5行代码是js中对象继承的写法\n    function Student(name, age, className) {\n        Person.call(this, name, age);  // 使用call方法调用父构造器函数\n        this.className = className;\n    }\n    Student.prototype = Object.create(Person.prototype);   // 这个如果直接使用Student.prototype = Person.prototype，改变Student对象方法会改变Person对象的方法，因为他们指向的是同一个对象\n    Student.prototype.constructor = Student;\n    \n    Student.prototype.hi = function() {\n        console.log('Hi, my name is ' + this.name + ', I\\'m' + this.age + ' years old now, and from ' + this.className + '.');\n    };\n    Student.prototype.learn = function(subject) {\n        console.log(this.name + ' is learning ' + subject + ' at ' + this.className + '.');\n    };\n    \n    var Lussi = new Student('Lussi', 27, 'Class Tree');\n    Lussi.sayNo();  // Lussi say no\n    Lussi.hi();  // Hi, my name is Lussi, I'm27 years old now, and from Class Tree.\n    Lussi.walk();  // Lussi is walking...\n    Lussi.learn('math');  // Lussi is learning math at Class Tree.\n    console.log(Lussi);  // Student {name: 'Lussi', age: 27, sayNo: [Function], className: 'Class Tree' }\n    console.log(Lussi.__proto__);  // Student {constructor: [Function: Student], hi: [Function], learn: [Function] }\n    console.log(Lussi.__proto__.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n    console.log(Lussi.__proto__.__proto__.__proto__);  // {}\n    console.log(Lussi.__proto__.__proto__.__proto__.__proto__);  // null  \n    // 改变prototype\n    Student.prototype.x = 101;  // 会影响已经创建实例的属性\n    console.log(Jack.x);  // undefined\n    console.log(Lussi.x);  // 101\n    \n    Student.prototype = {y: 2};  // 不会影响已经创建实例的属性，但会影响新创建的实例，并且重新修改prototype.y属性也不会改变\n    console.log(Jack.y); // undefined\n    console.log(Lussi.y);  // undefined\n    var Lilei = new Student('Lilei', 24, 'Class three');\n    console.log(Lilei.x);  // undefined\n    console.log(Lilei.y);  // 2\n    Student.prototype.y = 100;\n    console.log(Lilei.y);  // 100\n    console.log(Lussi.y);  // undefined\n    Student.prototype.z = 30;\n    console.log(Lilei.z);  // 30\n    console.log(Lussi.z);  // undefined\n    Person.prototype.z = 40;\n    console.log(Lilei.z);  // 30\n    console.log(Lussi.z);  // 40\n    console.log(Jack.z);  // 40\n    \n\n### instanceof\n\n    // instanceof  左边是对象（如果不是，直接返回false），右边是构造器（如果不是，直接报错），判断构造器的prototype属性是否在对象的原型链上\n    console.log([1, 2] instanceof Array);  // true\n    console.log(1 instanceof Array);  // false\n    console.log(Array.prototype);  // []\n    console.log(new Object() instanceof Array);  //false\n    console.log(Object.prototype);  // {}\n    console.log(new Object() instanceof Object);  // true\n    console.log(new Array() instanceof Object);  // true\n    \n\n### 模拟重载\n\n    function Person() {\n        var args = arguments;\n        // 判断第一个传入的是不是对象，因为args[null]也返回object，所有需要判断是否为null\n        if(typeof args[0] === 'object' && args[0]) {\n            if(args[0].name) {\n                this.name = args[0].name;\n            }\n            if(args[0].age) {\n                this.age = args[0].age;\n            }\n        } else {\n            if(args[0]) {\n                this.name = args[0];\n            }\n            if(args[1]) {\n                this.age = args[1];\n            }\n        }\n    }\n    Person.prototype.toString = function() {\n        console.log('name=' + this.name + ', age=' + this.age);\n    };\n    \n    var LiLei = new Person('LiLei', 23);\n    var Hanmm = new Person({name: 'Hanmm', age: 21});\n    LiLei.toString();  // name=LiLei, age=23\n    Hanmm.toString();  // name=Hanmm, age=21\n    \n\n### 调用子类方法\n\n    function Person(name) {\n        this.name = name;\n    }\n    function Student(name, className) {\n        this.className = className;\n        Person.call(this, name);\n    }\n    \n    Person.prototype.init = function() {\n        console.log('Person.init');\n    };\n    Student.prototype.init = function() {\n        console.log('Student.init');\n        Person.prototype.init.apply(this, arguments);\n    };\n    var LiLei = new Student('LiLei', 'Class four');\n    console.log(LiLei);  // Student { className: 'Class four', name: 'LiLei' }\n    LiLei.init();  // Student.init  Person.init\n    \n\n### 实现链式调用\n\n    function ClassManager() {\n        console.log('ClassManager');\n        this.name = 'ClassName';\n    }\n    ClassManager.prototype.addClass = function(str) {\n        console.log('class: '  + str + ' added.');\n        console.log(this);\n        return this;  // this始终指向ClassManger类的实例\n    };\n    \n    var manager = new ClassManager();\n    manager.addClass('A').addClass('B').addClass('C');  //class: A added. ClassManager { name: 'ClassName' } class: B added. ClassManager { name: 'ClassName' } class: C added. ClassManager { name: 'ClassName' }","slug":"Javascript基础入门","published":1,"updated":"2019-07-23T05:51:43.847Z","layout":"post","photos":[],"link":"","_id":"cjyfgqwtp0052h3a4f26wgvmw","content":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p>object(包含Function，Array，Date等)<br>number<br>string<br>boolean<br>null<br>undefined</p>\n</blockquote>\n<h3 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h3><p>typeof 基本类型，function， null可以用===判断</p>\n<pre><code>typeof 100           // &quot;number&quot;   \ntypeof true          // &quot;boolean&quot;    \ntypeof function      // &quot;function&quot;    \ntypeof undefined     // &quot;undefined&quot;  \ntypeof new Object()  // &quot;object&quot;  \ntypeof [1, 2]        // &quot;object&quot;  \ntypeof NaN           // &quot;number&quot;  \ntypeof null          // &quot;object&quot;  </code></pre><p>instanceof</p>\n<pre><code>// 不同window或iframe下返回false\n[1, 2] instanceof Array === true  \nnew Object instanceof Array === fasle</code></pre><p>Object.prototype.toString</p>\n<pre><code>Object.prototype.toString.apply([1, 2, 3]) === &quot;[object Array]&quot;;  \nObject.prototype.toString.apply(function(){}) === &quot;[object Function]&quot;  \nObject.prototype.toString.apply(null) === &quot;[object Null]&quot;  // ie678返回[object Object]  \nObject.prototype.toString.apply(undefined) === &quot;[object Undefined]&quot;  \nObject.prototype.toString.apply(12313) === &quot;[object Number]&quot;  \nObject.prototype.toString.apply(&apos;12313&apos;) === &quot;[object String]&quot;</code></pre><p>constructor<br>duck type</p>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>表达式是一种js短语，可使js解释器用来产生一个值</p>\n<pre><code>// 原始表达式\n3.14, &quot;test&quot;      // 常量，直接量\nnull, this, true  // 关键字\ni, j, k;           // 变量\n\n// 复合表达式\n10 * 20;           // 原始表达式+运算符+原始表达式\n\n// 初始化表达式\n[1, 2];\n[1,,2];\n{x: 1, y: 2};\n\n// 函数表达式\nvar fe = function(){};\n(function(){console.log(&apos;1111&apos;);}){};\n\n// 属性访问表达式\nvar o = {x:1};\no.x;\no[&apos;x&apos;];\n\n// 调用表达式\nfunc();\n\n// 对象创建表达式\nnew Func(1, 2);\nnew Object;</code></pre><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><blockquote>\n<p>一元（+num）<br>二元（a + b）<br>三元（c：a：b） 赋值(x += 1)<br>比较(a == b)<br>算术（a - b）<br>位 （a | b）<br>逻辑 (exp1 &amp;&amp; exp2)<br>字符串(“a” + “b”)<br>特殊</p>\n</blockquote>\n<h3 id=\"特殊运算符\"><a href=\"#特殊运算符\" class=\"headerlink\" title=\"特殊运算符\"></a>特殊运算符</h3><blockquote>\n<p>c? a:b<br>var val = (1, 2, 3) // 逗号运算符<br>delete obj.x // 删除对象属性<br>‘x’ in window; // in 运算符<br>instanceof, typeof // 判断类型<br>new Foo(); // new 运算符<br>this // this运算符<br>void 0 // undefined</p>\n</blockquote>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>块语句block<br>块语句是没有作用域的</p>\n<pre><code>{  \nvar str = &apos;hi&apos;;  \nconsole.log(str);  \n}  </code></pre><p>声明语句 var<br>var a=1, b=1; 函数语句function</p>\n<pre><code>// 函数声明语句  \nfunction fd() {  \n    return true;  \n}    \n// 函数表达式  \nvar fe = function() {\n    //do sth\n};</code></pre><p>for in 语句</p>\n<pre><code>var p;  \nvar obj = {x:1, y:2};  \nfor(p in obj) {\n    // 顺序不确定  \n}</code></pre><p>swith语句</p>\n<pre><code>var val = 2;\nswitch (val) {\n    case 1:\n        console.log(1);\n        break;\n    case 2:\n        console.log(2);\n        break;\n    case 3:\n        console.log(3);\n        break;\n    default:\n        console.log(0);\n        break;\n}</code></pre><p>循环语句</p>\n<pre><code>while (isTrue) {\n    // do sth\n}\n\ndo {\n    // do sth\n} while (isTrue)\n\nvar i;\nfor (i = 0; i &lt; n; i++) {\n    // do sth\n}</code></pre><p>with语句 // 不使用 try catch语句</p>\n<pre><code>try {\n    try {\n        throw new Error(&apos;oops&apos;);\n    } catch(ex) {\n        console.error(&apos;inner catch&apos;, ex.message);\n        throw ex;\n    } finally {\n        console.log(&apos;inner  finally&apos;);\n    }\n} catch(ex) {\n    console.error(&apos;outer catch&apos;, ex.message);\n} finally {\n    console.log(&apos;outer finally&apos;);\n}</code></pre><p>结果 内部catch&gt;内部finally&gt;外部catch&gt;外部finally</p>\n<pre><code>inner catch oops  \ninner  finally  \nouter catch oops  \nouter finally  </code></pre><h3 id=\"严格模式-待补充）\"><a href=\"#严格模式-待补充）\" class=\"headerlink\" title=\"严格模式(待补充）\"></a>严格模式(待补充）</h3><pre><code>function func() {\n    &apos;use strict&apos;;\n}</code></pre><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象创建<br>字面量创建</p>\n<pre><code>var obj = {x: 1};\nconsole.log(obj);\nconsole.log(obj.y);\nObject.prototype.y = 2;\nconsole.log(obj);\nconsole.log(obj.y);\nobj.y = undefined;\nconsole.log(obj);\nconsole.log(obj.y);\n\n\n{ x: 1 }\nundefined\n{ x: 1 }\n2\n{ x: 1, y: undefined }\nundefined</code></pre><p>new构造器创建</p>\n<pre><code>function foo() { this.color = &apos;red&apos;;}\nfoo.prototype.background = &apos;#000&apos;;\nvar redColor = new foo();\nconsole.log(redColor);\nconsole.log(typeof redColor.toString);\nconsole.log(redColor.color);\nconsole.log(redColor.background);\nconsole.log(foo);\nconsole.log(foo.prototype);\nconsole.log(foo.prototype.prototype);\nconsole.log(&apos;background&apos; in redColor);\nredColor.background = &apos;#FFF&apos;;\nconsole.log(redColor.background);\nconsole.log(foo.prototype.background);\n\n\nfoo { color: &apos;red&apos; }\nfunction\nred\n#000\n[Function: foo]\nfoo { background: &apos;#000&apos; }\nundefined\ntrue\n#FFF\n#000</code></pre><p>Object.create()创建</p>\n<pre><code>function obj() {\n    this.x = 1;\n}\nconsole.log(obj);\nvar obj1 = new obj();\nconsole.log(obj1);\nvar obj2 = Object.create(obj);\nconsole.log(obj2);\nconsole.log(obj2.x);\nvar obj3 = Object.create(obj1);\nconsole.log(obj3);\nconsole.log(obj3.x);;\n\n\n[Function: obj]\nobj { x: 1 }\nFunction {}\nundefined\nobj {}\n1</code></pre><h3 id=\"对象的内部原型-proto-和构造器的原型（prototype）的关系。\"><a href=\"#对象的内部原型-proto-和构造器的原型（prototype）的关系。\" class=\"headerlink\" title=\"对象的内部原型(proto)和构造器的原型（prototype）的关系。\"></a>对象的内部原型(<strong>proto</strong>)和构造器的原型（prototype）的关系。</h3><p>一、所有构造器/函数的<strong>proto</strong>都指向Function.prototype，它是一个空函数（Empty function）</p>\n<pre><code>Number.__proto__ === Function.prototype  // true  \nBoolean.__proto__ === Function.prototype // true  \nString.__proto__ === Function.prototype  // true  \nObject.__proto__ === Function.prototype  // true  \nFunction.__proto__ === Function.prototype // true  \nArray.__proto__ === Function.prototype   // true  \nRegExp.__proto__ === Function.prototype  // true  \nError.__proto__ === Function.prototype   // true  \nDate.__proto__ === Function.prototype    // true  \nMath.__proto__ === Object.prototype  // true  \nJSON.__proto__ === Object.prototype  // true \n// 函数声明\nfunction Person() {}\n// 函数表达式\nvar Man = function() {}\nconsole.log(Person.__proto__ === Function.prototype) // true  \nconsole.log(Man.__proto__ === Function.prototype)    // true  </code></pre><p>所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5）</p>\n<pre><code>console.log(typeof Function.prototype) // function\nconsole.log(typeof Object.prototype)   // object\nconsole.log(typeof Number.prototype)   // object\nconsole.log(typeof Boolean.prototype)  // object\nconsole.log(typeof String.prototype)   // object\nconsole.log(typeof Array.prototype)    // object\nconsole.log(typeof RegExp.prototype)   // object\nconsole.log(typeof Error.prototype)    // object\nconsole.log(typeof Date.prototype)     // object\nconsole.log(typeof Object.prototype)   // object  \nconsole.log(Function.prototype.__proto__ === Object.prototype) // true    \nObject.prototype.__proto__ === null  // true  </code></pre><p>二、所有对象的<strong>proto</strong>都指向其构造器的prototype<br>JavaScript引擎内置构造器</p>\n<pre><code>var obj = {name: &apos;jack&apos;}\nvar arr = [1,2,3]\nvar reg = /hello/g\nvar date = new Date\nvar err = new Error(&apos;exception&apos;)\n\nconsole.log(obj.__proto__ === Object.prototype) // true\nconsole.log(arr.__proto__ === Array.prototype)  // true\nconsole.log(reg.__proto__ === RegExp.prototype) // true\nconsole.log(date.__proto__ === Date.prototype)  // true\nconsole.log(err.__proto__ === Error.prototype)  // true</code></pre><p>自定义的构造器</p>\n<pre><code>function Person(name) {\n    this.name = name\n}\nvar p = new Person(&apos;jack&apos;)\nconsole.log(p.__proto__ === Person.prototype) // true</code></pre><p>每个对象都有一个constructor属性，可以获取它的构造器</p>\n<pre><code>function Person(name) {\n    this.name = name\n}\nvar p = new Person(&apos;jack&apos;)\nconsole.log(p.__proto__ === p.constructor.prototype) // true</code></pre><h3 id=\"对象属性操作\"><a href=\"#对象属性操作\" class=\"headerlink\" title=\"对象属性操作\"></a>对象属性操作</h3><p>属性读写</p>\n<pre><code>// 属性读写\nvar obj = {x1: 1, x2: 2};\nvar i = 1, n = 2;\nfor(; i&lt;= n; i++) {\n    console.log(obj[&apos;x&apos; + i]);\n}\n// 输出1，2\n\nvar p;\nfor(p in obj) {\n    console.log(obj[p]);\n}\n// 输出1，2\n\nvar obj = {x: 1};\n// 读写异常\nconsole.log(obj.y); // undefined\nvar yz = obj.y.z;  // TypeError: Cannot read property &apos;z&apos; of undefined\nobj.y.z = 2;      //TypeError: Cannot set property &apos;z&apos; of undefined\n// 正确方式\nvar yz;\nif(obj.y) {\n    yz = obj.y.z;\n}\n// 或者\nvar yz = obj &amp;&amp; obj.y &amp;&amp; obj.y.z  // 这个会返回undefined</code></pre><p>属性删除</p>\n<pre><code>var person = {age: 28, title: &apos;fe&apos;};\nconsole.log(delete person.age);  // true\nconsole.log(delete person[&apos;age&apos;]);  // true\nconsole.log(person.age);  // undefined\nconsole.log(delete person.age);   // 注意这个也返回true 判断操作结束后该属性是否存在\n\n// 有些属性是不能删除的\nconsole.log(delete Object.prototype);  // false\n\n// 原因\nvar descriptor = Object.getOwnPropertyDescriptor(Object, &apos;prototype&apos;);\nconsole.log(descriptor.configurable);  // false\n\n// 变量及函数不可删除\nvar globalVal = 1;\nconsole.log(delete globalVal);  // false\n\n(function() {\n    var localVal = 1;\n    console.log(delete localVal);\n}());  // false\n\nfunction fd() {}\nconsole.log(delete fd);  // false\n\n(function() {\n    function fd() {};\n    console.log(delete fd);\n}());  // false\n\n\n// 隐示定义的变量可以\nohNo = 1;\nconsole.log(delete ohNo);  // true</code></pre><p>对象属性检测</p>\n<pre><code>var cat = new Object();\ncat.legs = 4;\ncat.name = &apos;Kitty&apos;;\n\nconsole.log(&apos;legs&apos; in cat);  // true\nconsole.log(&apos;abc&apos; in cat);  // false\nconsole.log(&apos;toString&apos; in cat);  // true 继承属性\n\nconsole.log(cat.hasOwnProperty(&apos;legs&apos;));  // true\nconsole.log(cat.hasOwnProperty(&apos;toString&apos;));  // false\n\nconsole.log(cat.propertyIsEnumerable(&apos;legs&apos;));  // true\nconsole.log(cat.propertyIsEnumerable(&apos;toString&apos;));  // false\n\n\nObject.defineProperty(cat, &apos;price&apos;, {enumerable: false, value: 1000});\n// defineProperty是Object的方法，默认的标签enumerable值为false\n// Object.x创建属性，默认的标签值为true\nconsole.log(cat.propertyIsEnumerable(&apos;price&apos;));  // false\nconsole.log(cat.hasOwnProperty(&apos;price&apos;));  // true\n\n\n// 判断属性是否存在\nif(cat &amp;&amp; cat.legs) {\n    cat.legs *= 2;\n}\n\nif(cat.legs != undefined) {\n    // !== undefined 或者 !== null\n}\nif(cat.legs !== undefined) {\n    // !== undefined\n}</code></pre><p>对象属性枚举</p>\n<pre><code>var o = {x: 1, y: 2, z: 3};\nconsole.log(&apos;toString&apos; in o);  // true\no.propertyIsEnumerable(&apos;toString&apos;);  // false\n\nvar key;\nconsole.log(o.x);  // 1\nconsole.log(o.y);  // 2\nconsole.log(o.z);  // 3\nfor(key in o) {\n    console.log(key);  // x, y, z\n    console.log(o.key);  // undefined\n    console.log(o[key]);  // 1, 2, 3\n}\n\n\nvar obj = Object.create(o);\nobj.a = 4;\nvar key;\nfor(key in obj) {\n    console.log(key); // a, x, y, z\n}\nvar key1;\nfor (key1 in obj) {\n    if(obj.hasOwnProperty(key1)) {\n        console.log(key1); // a\n    }\n}</code></pre><p>对象属性的get/set方法</p>\n<pre><code>// 对象属性的get/set方法\nvar man = {\n    name: &apos;Bug&apos;,\n    weibo: &apos;Bug&apos;,\n    get age() {\n        return new Date().getFullYear() - 1988;\n    },\n    set age(val) {\n        console.log(&apos;cannot be set &apos; + val);\n    },\n};\n\nconsole.log(man.age);  // 调用age的get方法27\nman.age = 100;  // 调用age的set方法 cannot be set 100\nconsole.log(man.age);  // 27\n\n\nvar man = {\n    weibo: &apos;Bug&apos;,\n    $age: null,\n    get age() {\n        if(this.$age == undefined) {\n            return new Date().getFullYear() - 1988;\n        } else {\n            return this.$age;\n        }\n    },\n    set age(val) {\n        val = +val; // 转为数字\n        if(!isNaN(val) &amp;&amp; val &gt; 0 &amp;&amp; val &lt; 150) {\n            this.$age = + val;\n        } else {\n            throw new Error(&apos;Incorrect val = &apos; + val );\n        }\n    }\n}\n\nconsole.log(man.age);  // 27\nman.age = 100;\nconsole.log(man.age);  // 100\n//man.age = &apos;abc&apos;;  // Error: Incorrect val = NaN\n\n\n// get/set方法与原型链\n\n// 这是错误的定义对象属性get方法方式\nfunction foo1() {}\nfoo1.prototype.z = {\n    get: function() {\n        return 2;\n    }\n};\nvar obj = new foo1();\nconsole.log(obj.z);  // 这个会被认为是对象 { get: [Function] }\nobj.z = 200;\nconsole.log(obj.z);  // 200\n\n// 正确定义方法\nfunction foo() {}\nObject.defineProperty(foo.prototype, &apos;z&apos;, {\n    get: function() {\n        return 1;\n    },\n    // configurable: true,  // 开启此属于也不会被改变\n    // writable: true,  // 此项不能配置writable/value get/set 二选一\n });\nvar obj = new foo();\nconsole.log(obj.z);   // 1\nobj.z = 100;\nconsole.log(obj.z);  // 但是还是1 并没有被改变\n\nObject.defineProperty(obj, &apos;z&apos;, {\n    value: 100,\n    configurable: true\n});\nconsole.log(obj.z);  // 100\ndelete obj.z;\nconsole.log(obj.z);  // 返回到1\n\n// 另外一个例子\nvar o = {};\nObject.defineProperty(o, &apos;x&apos;, {\n    value: 1\n});  // 默认writable: false, configurable: false\nvar obj = Object.create(o);\nconsole.log(obj.x);  // 1\nobj.x = 100;\nconsole.log(obj.x);  // 还是1\n\n\nObject.defineProperty(obj, &apos;x&apos;, {\n    writable: true,\n    configurable: true,\n    value: 100\n});\nconsole.log(obj.x);  // 100\nobj.x = 200;\nconsole.log(obj.x); // 200</code></pre><h3 id=\"对象属性标签\"><a href=\"#对象属性标签\" class=\"headerlink\" title=\"对象属性标签\"></a>对象属性标签</h3><pre><code>person = {};\nObject.defineProperty(person, &apos;type&apos;, {\n    configurable: false,\n    writable: true,\n    enumerable: false,\n    value: &apos;Object&apos;,\n});\n\nconsole.log(Object.keys(person));   // [] 返回空数组，不能枚举\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // { value: &apos;Object&apos;, writable: true, enumerable: false, configurable: false }\n\n\n// writable为true，可以通过赋值方法修改value值 [通过赋值修改属性值只和writable标签有关，和configurable无关]\nperson.type = &apos;Object2&apos;;\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));  // { value: &apos;Object2&apos;, writable: true, enumerable: false, configurable: false }\n\n\n// configurable: false 无法使用delete删除属性， 无法使用get/set方法，  无法重新配置属性标签（除了将writable从true修改为false）\nconsole.log(delete person.type);   // 返回false\n\n\n// 只有writable和configurable标签都为false时，不能修改value标签值，其他情况都可以修改value标签值\nObject.defineProperty(person, &apos;type&apos;, {\n    configurable: false,\n    writable: true,\n    enumerable: false,\n    value: &apos;Object1&apos;,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // { value: &apos;Object1&apos;, writable: true, enumerable: false, configurable: false }\n\n\n// 可以重新配置writable标签值(只能重true改为false)\nObject.defineProperty(person, &apos;type&apos;, {\n    writable: false,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // { value: &apos;Object1&apos;, writable: false, enumerable: false, configurable: false }\n\n\n// 无法将writable从false改为true\nObject.defineProperty(person, &apos;type&apos;, {\n    writable: true,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // TypeError: Cannot redefine property: type\n\n\n// 无法重新配置enumerable，configurable属性\nObject.defineProperty(person, &apos;type&apos;, {\n    enumerable: true,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // TypeError: Cannot redefine property: type</code></pre><h3 id=\"对象标签\"><a href=\"#对象标签\" class=\"headerlink\" title=\"对象标签\"></a>对象标签</h3><p>原型标签<strong>proto</strong></p>\n<pre><code>// 原型标签__proto__\n\nfunction Person(name) {\n    this.name = name;\n}\nvar p = new Person(&apos;jack&apos;);\nconsole.log(p.__proto__ === Person.prototype);  // true</code></pre><p>类型标签</p>\n<pre><code>//  对象class标签，表示对象是哪个类型，没有直接的方法去修改或者获取\nvar toString = Object.prototype.toString;\n\nconsole.log(toString.call(null));  // [object Null]\nconsole.log(toString.call(undefined));  // [object Undefined]\nconsole.log(toString.call(1));  // [object Number]\nconsole.log(toString.call(new Number(1)));  // [object Number]\nconsole.log(toString.call(true));  // [object Boolean]\nconsole.log(toString.call(new Boolean(true)));  // [object Boolean]</code></pre><p>可扩展标签</p>\n<pre><code>// extensible 可扩展标签，表示是否可以继续添加对象属性\nvar obj = {x: 1, y: 2};\nconsole.log(Object.isExtensible(obj));  // true 对象可扩展\nObject.preventExtensions(obj);  // 配置对象不可扩展\nconsole.log(Object.isExtensible(obj));  // false 对象不可扩展\nobj.z =1;\nconsole.log(obj.z);  // undefined 添加属性失败\nconsole.log(Object.getOwnPropertyDescriptor(obj, &apos;x&apos;));  // // { value: 1, writable: true, enumerable: true, configurable: true }\n\n\n// Object.seal方法，对象的所有属性configurable值为false\nObject.seal(obj);\nconsole.log(Object.getOwnPropertyDescriptor(obj, &apos;x&apos;));  // { value: 1, writable: true, enumerable: true, configurable: false }\nconsole.log(Object.isSealed(obj)); // true\n\n\n// Object.freeze方法，对象的所有属性configurable，writable标签值为false\nObject.freeze(obj);\nconsole.log(Object.getOwnPropertyDescriptor(obj, &apos;x&apos;));   // // { value: 1, writable: false, enumerable: true, configurable: false }\nconsole.log(Object.isFrozen(obj));  // true</code></pre><h3 id=\"JS对象与json格式转换\"><a href=\"#JS对象与json格式转换\" class=\"headerlink\" title=\"JS对象与json格式转换\"></a>JS对象与json格式转换</h3><pre><code>// 将js对象转为json格式JSON.stringify()\nvar obj = {x: 1, y: true, z: [1, 2, 3], nullVal: null};\nconsole.log(JSON.stringify(obj));  // {&quot;x&quot;:1,&quot;y&quot;:true,&quot;z&quot;:[1,2,3],&quot;nullVal&quot;:null}\n\n// undefined,NaN,Infinity等特殊属性值\nvar obj = {val: undefined, a: NaN, b: Infinity, c: new Date()};\nconsole.log(JSON.stringify(obj));  // {&quot;a&quot;:null,&quot;b&quot;:null,&quot;c&quot;:&quot;2015-12-19T12:30:40.456Z&quot;}\n\n// 将json格式转为js对象JSON.parse\nvar obj = JSON.parse(&apos;{&quot;x&quot;: 1}&apos;);\nconsole.log(obj.x);  // 1\n\n//toJSON方法\nvar obj = {\n    x: 1,\n    y: 2,\n    o: {\n        o1: 1,\n        o2: 2,\n        toJSON: function() {\n            return this.o1 + this.o2;\n        }\n    },\n};\nconsole.log(JSON.stringify(obj));  // {&quot;x&quot;:1,&quot;y&quot;:2,&quot;o&quot;:3}</code></pre><p>###toString valueOf方法</p>\n<pre><code>// 对象在作为操作数时，解释器总是优先调用valueOf()--(Date类型的对象在二元“+”运算时例外),而其他情况，解释器总是认为我们想要的是字符串，所以会优先调用toString()。\nvar obj = {x: 1, y: 2};\nconsole.log(obj.toString());  // [object Object]\nconsole.log(+obj.toString());  // NaN\nconsole.log(3 + obj.toString());  // 3[object Object] 会被理解为字符串拼接\nconsole.log(+obj.valueOf());  // NaN\n\n// 重写\nobj.toString = function() {\n    return this.x + this.y;\n};\nconsole.log(+obj);  // 3\nobj.valueOf = function() {\n    return this.x + this.y + 100;\n};\nconsole.log(+obj);  // 103\n\n// 如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。在不能调用toString的情况下，只能让valueOf上阵了。\n\nvar cc = {\n    i: 10,\n    valueOf: function() {\n        console.log(&apos;valueOf&apos;);\n        return this.i;\n    }\n};\n\nconsole.log(cc);// 10 { [Number: 10] i: 10, valueOf: [Function] }\nconsole.log(+cc); // 10 valueOf\nconsole.log(&apos;&apos;+cc); // 10 valueOf\nconsole.log(String(cc)); // [object Object]\nconsole.log(Number(cc)); // 10 valueOf\nconsole.log(cc == &apos;10&apos;); // true valueOf</code></pre><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>创建数组</p>\n<pre><code>// 字面量创建数组 数组的长度不能超过2^23 - 1 = 4,294,967,295\nvar BAT = [&apos;B&apos;, &apos;A&apos;, &apos;T&apos;];\nvar students = [{name: &apos;B&apos;, age: 27}, {name: &apos;A&apos;, age: 30}];\nvar arr = [&apos;T&apos;, 123, true, null, undefined];\nvar arrInArr = [[1, 2], [1, 2, 3]];\n\n// 对象创建数组 new关键字可以省略\nvar arr = new Array();  // var = [];\nvar arrWithLength = new Array(100);  // undefined * 100\nvar arrLikesLiteral = new Array(true, false, null, 1, 2, &apos;hi&apos;);  // [true, false, null, 1, 2, &apos;hi&apos;]</code></pre><p>数组元素操作</p>\n<pre><code>// 数组元素读写\n\n// 索引访问\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr[1]);  // b\nconsole.log(arr.length);  // 5\narr[5] = &apos;f&apos;;\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.length);  // 6\n\n// delete方法并不会改变数组长度,delete 和定义为undefined的区别\ndelete arr[0];\nconsole.log(arr);  // [ , &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.length);  // 6\nconsole.log(0 in arr);  // 会返回false\narr[1] = undefined;\nconsole.log(arr);  // [ , undefined, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.length);  // 6\nconsole.log(1 in arr);  // true\n\n// 数组是动态的，无需指定大小\n\n// 指定索引位置，改变数组\nvar arr = [];\narr[1] = &apos;b&apos;;\nconsole.log(arr.length);  // 2\nconsole.log(arr);   // [ , &apos;b&apos; ]\n\n// push方法，在数组尾部添加元素,并返回新的数组长度\nconsole.log(arr.push(&apos;c&apos;));  // 3\nconsole.log(arr);  // [ , &apos;b&apos;, &apos;c&apos; ]\n\n// 在数组尾部添加的另一种方法\narr[arr.length] = &apos;d&apos;;\nconsole.log(arr);  // [ , &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]\n\n// unshift方法，在数组头部添加元素，并返回新的数组长度\nconsole.log(arr.unshift(&apos;a&apos;));  // 5\nconsole.log(arr);  // [ &apos;a&apos;, , &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]\n\n// pop方法，删除数组尾部的元素并返回这个元素\nconsole.log(arr.pop());  // &apos;d&apos;\nconsole.log(arr);  // [ &apos;a&apos;, , &apos;b&apos;, &apos;c&apos; ]\n\n// 删除数组尾部元素的另个方法\narr.length -= 1;\nconsole.log(arr);  // [ &apos;a&apos;, , &apos;b&apos; ]\n\n// shift方法，删除数组头部的元素并返回这个元素\nconsole.log(arr.shift());  // &apos;a&apos;\nconsole.log(arr);  // [ , &apos;b&apos; ]</code></pre><p>数组迭代</p>\n<pre><code>// 数组迭代\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;];\nfor(var i = 0; i &lt; arr.length; i++) {\n    console.log(arr[i]);\n}\n// a b c d e f g\n\nfor(i in arr) {\n    console.log(arr[i]);\n}\n// a b c d e f g\n\n// for in 表达式的坑：会迭代原型的元素\nArray.prototype.x = &apos;keng&apos;;\nfor(i in arr) {\n    console.log(arr[i]);\n}\n// a b c d e f g keng\n\nfor(i in arr) {\n    if(arr.hasOwnProperty(i)) {\n        console.log(arr[i]);\n    }\n}\n// a b c d e f g</code></pre><p>特殊数组：二维数组和稀疏数组</p>\n<pre><code>// 特殊数组：二维数组，稀疏数组\n// 二维数组\nvar arr = [[&apos;a&apos;, &apos;b&apos;], [&apos;c&apos;, &apos;d&apos;], [&apos;e&apos;, &apos;f&apos;]];\nvar i = 0, j = 0;\nvar row;\nfor(; i &lt; arr.length; i++) {\n    row = arr[i];\n    console.log(&apos;row&apos; + i);\n    for(j = 0; j &lt; row.length; j++) {\n        console.log(row[j]);\n    }\n}\n// row0 a b row1 c d row2 e f\n\n// 稀疏数组：并不含有从0开始的连续索引\nvar arr1 = [undefined];\nvar arr2 = new Array(1);\nconsole.log(0 in arr1);  // true\nconsole.log(0 in arr2);  // false</code></pre><h3 id=\"数组的方法\"><a href=\"#数组的方法\" class=\"headerlink\" title=\"数组的方法\"></a>数组的方法</h3><p>Array.prototype.join(separator)</p>\n<pre><code>// Array.prototype.join(separator)方法：将数组拼接成字符串，返回字符串，不改变原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nconsole.log(arr.join());  // a,b,c\nconsole.log(arr.join(&apos;_&apos;));  // a,b,c\nfunction repeatString(str, n) {\n    return new Array(n + 1).join(str);\n}\nconsole.log(repeatString(&apos;a&apos;, 3));  // aaa\nconsole.log(repeatString(&apos;Hi&apos;, 5));  // HiHiHiHiHi</code></pre><p>Array.prototype.reverse()</p>\n<pre><code>// Array.prototype.reverse() 将数组逆序，返回数组本身，会改变数组本身\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar arr1 = arr;\nvar arr2 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nconsole.log(arr.reverse());  // [ &apos;c&apos;, &apos;b&apos;, &apos;a&apos; ]\nconsole.log(arr);  // [ &apos;c&apos;, &apos;b&apos;, &apos;a&apos; ]\nconsole.log(arr1);  // [ &apos;c&apos;, &apos;b&apos;, &apos;a&apos; ]\nconsole.log(arr2);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</code></pre><p>Array.prototype.sort(sortby）</p>\n<pre><code>// Array.prototype.sort(sortby)方法：接受一个函数参数(不传参数默认按字符编码顺序)，返回数组本身，会修改原数组\nvar arr = [&apos;f&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos;, &apos;a&apos;];\nconsole.log(arr.sort());  // [ &apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\n\nvar arr = [13, 24, 51, 3];\nconsole.log(arr.sort());  // [ 13, 24, 3, 51 ]\n\n// 传入参数：比较函数(a, b)\n// 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n// 若 a 等于 b，则返回 0。\n// 若 a 大于 b，则返回一个大于 0 的值。\nfunction sortNumber(a, b) {\n    return a - b;\n}\nconsole.log(arr.sort(sortNumber));  // [ 3, 13, 24, 51 ]\n\nvar arr = [{age: 25}, {age: 29}, {age: 40}];\nconsole.log(arr.sort(function sortAge(a, b) {\n    return a.age - b.age;\n}));  // [ { age: 25 }, { age: 29 }, { age: 40 } ]</code></pre><p>Array.prototype.concat(arrayX, arrayY…..)</p>\n<pre><code>// Array.prototype.concat(arrayX, arrayY.....)方法 连接多个数组，返回一个新的数组，不会改变原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nconsole.log(arr.concat(&apos;d&apos;, &apos;e&apos;));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\nconsole.log(arr.concat([&apos;d&apos;, &apos;e&apos;], &apos;f&apos;));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.concat([&apos;d&apos;, &apos;e&apos;], [&apos;f&apos;, &apos;g&apos;]));  // &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos; ]\nconsole.log(arr.concat([[&apos;d&apos;, &apos;e&apos;], &apos;f&apos;]));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [ &apos;d&apos;, &apos;e&apos; ], &apos;f&apos; ]\nconsole.log(arr.concat([[[&apos;d&apos;, &apos;e&apos;], &apos;f&apos;], &apos;g&apos;]));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [ [ &apos;d&apos;, &apos;e&apos; ], &apos;f&apos; ], &apos;g&apos; ]</code></pre><p>Array.prototype.slice(start, end)</p>\n<pre><code>// Array.prototype.slice(start, end)方法：左闭右开截取数组，返回一个新的数组，不改变原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.slice(1, 3));  // [&apos;b&apos;, &apos;c&apos;]\nconsole.log(arr.slice(1));  // [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]\nconsole.log(arr.slice(1, -1));  // [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;]\nconsole.log(arr.slice(-4, -3));  // [&apos;b&apos;]</code></pre><p>Array.prototype.splice(index, howmany, item1,….itemX)</p>\n<pre><code>// Array.prototype.splice(index, howmany, item1,....itemX)方法：\n// 向/从数组中添加/删除项目，然后返回被删除的项目。会改变原数组\n// index参数：必须，整数，添加或删除的位置，左闭合\n// howmany参数：可选，设置为0，则不会删除\n// item1,.....itemX：可选，向数组中添加的元素\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2));   // [ &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 1));  // [ &apos;c&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 0));  // []\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 2, &apos;f&apos;, &apos;g&apos;, [&apos;h&apos;, &apos;i&apos;]));  // [ &apos;c&apos;, &apos;d&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;f&apos;, &apos;g&apos;, [ &apos;h&apos;, &apos;i&apos; ], &apos;e&apos; ]\n\n// 指定位置插入新的元素\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 0, &apos;f&apos;));  // []\nconsole.log(arr); // [ &apos;a&apos;, &apos;b&apos;, &apos;f&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice());  // []\nconsole.log(arr); // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]</code></pre><p>Array.prototype.forEach()</p>\n<pre><code>// Array.prototype.forEach()方法(ES5)：接收函数参数\n// 函数的3个参数x: 元素值，index：元素索引，a 数组本身\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\narr.forEach(function(x, index, a) {\n    console.log(x + &apos;_&apos; + index + &apos;_&apos; + a);\n});\n// a_0_a,b,c,d,e b_1_a,b,c,d,e c_2_a,b,c,d,e d_3_a,b,c,d,e e_4_a,b,c,d,e</code></pre><p>Array.prototype.map()</p>\n<pre><code>//Array.prototype.map()方法(ES5):接收函数参数,不会修改原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar arr1 = arr.map(function(x) {\n    return x + &apos;like&apos;;\n});\n\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\nconsole.log(arr1);  // [ &apos;alike&apos;, &apos;blike&apos;, &apos;clike&apos; ]</code></pre><p>Array.prototype.filter()</p>\n<pre><code>// Array.prototype.filter()过滤方法(ES5):接收函数参数，不修改原数组\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar arr1 = arr.filter(function(x, index) {\n    return index % 3 === 0 || x &gt;= 8;\n});\nconsole.log(arr1);  // [ 1, 4, 7, 8, 9, 10 ]\nconsole.log(arr);  // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</code></pre><p>Array.prototype.every() &amp; Array.prototype.some()</p>\n<pre><code>// Array.prototype.every() &amp; Array.prototype.some()判断方法(ES5):接收函数参数，不修改原数组\n// every 全部符合条件  some 只需一个符合条件\nvar arr = [1,2,3,4,5];\nconsole.log(arr.every(function(x) {\n    return x &lt; 10;\n}));  // true\nconsole.log(arr.every(function(x) {\n    return x &lt;= 3;\n}));  // false\nconsole.log(arr.some(function(x) {\n    return x === 3;\n}));  // true\nconsole.log(arr.some(function(x) {\n    return x === 100;\n}));  // false</code></pre><p>Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)</p>\n<pre><code>// Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)方法\n// 接收一个函数参数和一个数组索引参数，并返回一个值，不修改原数组\n// 函数参加接收2个参数分别代表2个索引\n// 索引参数表示从第index个元素开始\nvar arr = [1, 2, 3];\nvar sum = arr.reduce(function(x, y) {\n    return x + y;\n}, 0);\nconsole.log(sum);  // 6  1+2返回3 3+3 返回6\n\nvar arr = [3, 9, 6];\nvar max = arr.reduce(function(x, y) {\n    console.log(x + &apos;|&apos; + y);\n    return x &gt; y ? x : y;\n});\n// 3|9\n// 9|6\nconsole.log(max);  // 9\n\nvar max = arr.reduceRight(function(x, y) {\n    console.log(x + &apos;|&apos; + y);\n    return x &gt; y ? x : y;\n});\n// 6|9\n// 9|3\nconsole.log(max);  // 9</code></pre><p>Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)</p>\n<pre><code>// Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)数字检索方法\n// value参数表示要查找的元素值，index表示从第几个索引位置开始查找(闭合)\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;b&apos;, &apos;a&apos;];\nconsole.log(arr.indexOf(&apos;b&apos;));  // 1 在数组中查找是否有元素值为&apos;b&apos;，有则返回这个元素索引\nconsole.log(arr.indexOf(&apos;f&apos;));  // -1 如果没有则返回-1\nconsole.log(arr.indexOf(&apos;b&apos;, 1));  // 1 从第2个元素开始查找，返回索引1\nconsole.log(arr.indexOf(&apos;b&apos;, 2));  // 3\nconsole.log(arr.indexOf(&apos;b&apos;, -2));  // 3\nconsole.log(arr.indexOf(&apos;b&apos;, -4));  // 1\nconsole.log(arr.indexOf(&apos;b&apos;, -8));  // 1\nconsole.log(arr.lastIndexOf(&apos;b&apos;));  // 3</code></pre><p>Array.isArray()</p>\n<pre><code>// Array.isArray() 判断是否为数组\nconsole.log(Array.isArray([]));  // true</code></pre><h3 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h3><pre><code>// 函数声明\nfunction add(a, b) {\n    a = +a;\n    b = +b;\n    if (isNaN(a) || isNaN(b)) {\n        return;\n    }\n    return a + b;\n}\n\n// 函数表达式\nvar add = function(a, b) {\n    // do sth\n};\n\n// IEF(立即执行函数表达式)\n(function() {\n    // do sth\n})();\n\n// 函数表达式\nreturn function () {\n    // do sth\n};\n\n// NFE(命名式函数表达式)\nvar add = function foo(a, b) {\n    // do sth\n};</code></pre><p><strong>函数声明和函数表达式区别：函数声明会前置</strong></p>\n<pre><code>var num = add(1, 2);\nconsole.log(num);\n\nfunction add(a, b) {\n    a = +a;\n    b = +b;\n    if (isNaN(a) || isNaN(b)) {\n        return;\n    }\n    return a + b;\n}\n\n// 结果为3\n\n\nvar num = add(1, 2);\nconsole.log(num);\n\nvar add = function (a, b) {\n    a = +a;\n    b = +b;\n    if (isNaN(a) || isNaN(b)) {\n        return;\n    }\n    return a + b;\n};\n\n// TypeError: add is not a function</code></pre><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>全局下的this</p>\n<pre><code>// 全局下的this(浏览器下)\nconsole.log(this.window === document);  // true\nconsole.log(this === window);  // true\nthis.a = 37;\nconsole.log(window.a);  // 37</code></pre><p>一般函数的this</p>\n<pre><code>// 一般函数的this（浏览器下）\nfunction f1() {\n    return this;\n}\nf1() === window;  // true\n\nfunction f2() {\n    &quot;use strict&quot;;  // 严格模式下\n    return this\n}\nf2() === undefined;  // true</code></pre><p>作为对象方法的函数的this</p>\n<pre><code>var o = {\n    prop: 37,\n    f: function() {\n        return this.prop;\n    }\n};\nconsole.log(o.f());  // 37\n\nvar o = {prop: 37};\nfunction  independent() {\n    return this.prop;\n}\no.f = independent;\nconsole.log(o.f());  // 37</code></pre><p>原型链上的this</p>\n<pre><code>var o = {\n    f: function() {\n        return this.a + this.b;\n    }\n};\nvar p = Object.create(o); // p为空对象，其原型会指向o\np.a = 1;\np.b = 4;\nconsole.log(p.f())  // 5</code></pre><p>构造器中的this</p>\n<pre><code>// 当new的函数构造器没有return返回值或者返回值不是对象时，new返回一个this指向构造器的prototype这样一个空对象\n// 如果return返回的是对象 new返回的这是这个对象\nfunction Myclass() {\n    this.a = 37;\n}\nvar o = new Myclass();\nconsole.log(o.a);  // 37\n\nfunction C2() {\n    this.a = 37;\n    return {a: 38};\n}\no = new C2();\nconsole.log(o.a);  // 38</code></pre><p>call和apply的this</p>\n<pre><code>function add(c, d) {\n    return this.a + this.b + c + d;\n}\nvar o = {a: 1, b: 2};\nadd.call(o, 5, 6);  // 1+3+5+7=16\nadd.apply(o, [10, 20]);  //1+3+10+20=34\n\nfunction bar() {\n    console.log(Object.prototype.toString.call(this));\n}\nbar.call(7); // [object Number]</code></pre><p>band和this</p>\n<pre><code>//bind是es5后，ie9+使用\nfunction f() {\n    return this.a;\n}\nvar g = f.bind({a: &apos;test&apos;});\nconsole.log(g());  // test\nvar o = {\n    a: 37,\n    f: f,\n    g: g\n};\nconsole.log(o.f(), o.g());  // 37, test</code></pre><p>函数arguments属性</p>\n<pre><code>function foo(x, y, z) {\n    arguments.length;  // 2 实际传入的参数数量\n    arguments[0];  // 1 传入第一个参数值\n    arguments[0] = 10;\n    x;  // 10 将第一个参数值修改为10， 严格模式下任然是1\n    arguments[2] = 100;\n    z; // undefined  由于第三个参数没有传入，不会绑定\n    arguments.callee  === foo;  // true   严格模式下不能使用\n}\n\nfoo(1, 2);\nfoo.length;  // 3   3个参数\nfoo.name;  // &quot;foo&quot; 函数名</code></pre><h3 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h3><pre><code>// apply和call方法（浏览器）\n// 第一个参数是作为this的对象，如果不是对象，会转换为对象\n// call传入的是扁平传入参数\n// apply第二个参数树数组\nfunction foo(x, y) {\n    console.log(x, y, this);\n}\n\nfoo.call(100, 1, 2);  // 1, 2, Number(100)\nfoo.apply(true, [3, 4]);  //3, 4, Boolean(true)\nfoo.apply(null);  // undefined, undefined, window\nfoo.apply(undefined);  // undefined, undefined, window</code></pre><h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>bind方法：改变this</p>\n<pre><code>// bind方法\nthis.x = 9;\nvar module = {\n    x: 81,\n    getX: function() {\n        return this.x;\n    }\n};\n\nmodule.getX();  // 81 this指向module\n\nvar getX = module.getX;\ngetX();  // 9 this指向全局变量\n\nvar boundGetX = getX.bind(module);\nboundGetX();  // 81  bind改变this指向</code></pre><p>bind方法：科里化</p>\n<pre><code>// bind方法\nfunction add(a, b, c) {\n    return a+b+c;\n}\n\nvar func = add.bind(undefined, 100);\nfunc(1, 2);  // 103  undefined传给this， 100传给第一个参数a\n\nvar func2 = func.bind(undefined, 200);\nfunc2(10);  // 310 undefined传给this，200传给b</code></pre><p>bind与new</p>\n<pre><code>// bind方法与new\nfunction foo() {\n    this.b = 100;\n    return this.a;\n}\n\nvar func = foo.bind({a: 1});\n\nfunc(); // 1  foo.bind后this指向{a: 1} return this.a = 1\nnew func();  // {b: 100} new调用将返回一个this，this会被初始化一个空对象，并且其原型是foo.prototype,空对象的b属性为100</code></pre><h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包基本概念</p>\n<pre><code>// 闭包\nvar n = 999;\nfunction f1() {\n    console.log(n);\n}\nf1();  // 999  函数内部可以访问全局变量\n\nfunction f1() {\n    var n = 999;\n}\nconsole.log(n);  // error  函数外部无法访问函数内部局部变量\n\nfunction f1() {\n    n = 999;\n}\nconsole.log(n); // 999 因为没有使用var语句，相当于定义一个全局变量\n\n\n// 简单的闭包原型\nfunction f1() {\n    var n = 999;\n    function f2() {\n        console.log(n);\n    }\n    return f2\n}\nvar result = f1();\nresult();  // 999</code></pre><p>闭包案例</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        #div1 {\n            background-color: rosybrown;\n        }\n        #div2 {\n            background-color: aquamarine;\n        }\n        #div3 {\n            background-color: yellowgreen;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;script&gt;\n    document.body.innerHTML = &apos;&lt;div id=&quot;div1&quot;&gt;aaa&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;bbb&lt;/div&gt;&lt;div id=&quot;div3&quot;&gt;ccc&lt;/div&gt;&apos;;\n    for(var i = 1; i &lt; 4; i++) {\n        alert(i);  // 结果为1，2，3\n        document.getElementById(&apos;div&apos; + i).\n                addEventListener(&apos;click&apos;, function() {\n            alert(i);  // 点击div1，div2，div3结果都是4,因为addEventListener的回调函数执行时i都为4\n        });\n    }\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><p>正确写法</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        #div1 {\n            background-color: rosybrown;\n        }\n        #div2 {\n            background-color: aquamarine;\n        }\n        #div3 {\n            background-color: yellowgreen;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;script&gt;\n    document.body.innerHTML = &apos;&lt;div id=&quot;div1&quot;&gt;aaa&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;bbb&lt;/div&gt;&lt;div id=&quot;div3&quot;&gt;ccc&lt;/div&gt;&apos;;\n    for(var i = 1; i &lt; 4; i++) {\n        !function(i) {\n            alert(i);  // 1,2,3\n            document.getElementById(&apos;div&apos; + i).\n               addEventListener(&apos;click&apos;, function() {\n                   alert(i);  // 1, 2,3 \n            });\n        }(i);\n    }\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><p>闭包中的封装</p>\n<pre><code>(function() {\n    var _userID = 23245;\n    var _typeID = &apos;item&apos;;\n    var exportID = {};\n\n    function converter(userID) {\n        return +userID;\n    }\n\n    exportID.getUserID = function() {\n        return converter(_userID);\n    };\n\n    exportID.getTypeID = function() {\n        return _typeID;\n    };\n    global.exportID = exportID;\n}());\n\nconsole.log(exportID.getUserID());  //23245\nconsole.log(exportID._userID);  // undefined</code></pre><h3 id=\"三种作用域\"><a href=\"#三种作用域\" class=\"headerlink\" title=\"三种作用域\"></a>三种作用域</h3><pre><code>// 作用域： 全局作用域，函数作用域，eval作用域\nvar a = 10;\n(function() {\n    var b = 20;\n})();\nconsole.log(a);  // 10\nconsole.log(b);  // error\n\nfor(var item in {a: 1, b: 2}) {\n    console.log(item);  // a, b\n}\nconsole.log(item); // b</code></pre><h3 id=\"ES3中的执行上下文\"><a href=\"#ES3中的执行上下文\" class=\"headerlink\" title=\"ES3中的执行上下文\"></a>ES3中的执行上下文</h3><p>EC = Execution Context 执行上下文<br>变量对象（Variable Object 简写VO）是一个抽象概念，用于存储执行上下文中的变量，函数声明，函数参数</p>\n<pre><code>var a = 10;\nfunction test(x) {\n    var b = 20;\n}\ntest(30);</code></pre><p>对应的上下文</p>\n<pre><code>// 整个js环境中的VO\nVO(globalContext) = {\n    a: 10,\n    test: &lt;ref to function&gt;\n};\n// 执行test(30)的VO\nVO(test functionContext) = {\n    x: 30,\n    b: 20\n};</code></pre><p>全局执行上下文</p>\n<pre><code>VO(globalContext) === [[global]]\n[[global]] = {\n    Math : &lt;...&gt;,\n    String : &lt;...&gt;,\n    isNaN: function() {[Native Code]},\n    ...\n    ...\n    window: global\n};\n\nString(10);  //[[global]].String(10)\nwindow.a = 10;  // [[global]].window.a = 10\nthis.b = 20;  // [[global]].b = 20</code></pre><p>变量初始化阶段</p>\n<pre><code>// 1, 函数参数（若没有传入，则其值为undefined）\n// 2, 函数声明（若函数声明和函数参数冲突，则函数声明会覆盖掉函数参数）\n// 3，变量声明（初始化变量值为undefined，若何函数参数，函数声明冲突，会被忽略掉）\nfunction test(a, b) {\n    var c = 10;\n    function d() {}\n    var e = function _e() {};\n    (function x() {});\n    b = 20;\n}\ntest(10);\n\n\nAO(test) = {\n    a: 10,\n    b: undefined,\n    c: undefined,\n    d: &lt;ref to func &apos;d&apos;&gt;,\n    e: undefined,\n};</code></pre><p>变量初始化案例1</p>\n<pre><code>function foo(x, y, z) {\n    function x() {}\n    console.log(x);\n}\n\nfoo(100);  // [Function: x]\n//\nAO(foo) = {\n    //x: 100,\n    y: undefined,\n    z: undefined,\n    x: &lt;ref to func &apos;x&apos;&gt;,  // 函数声明x会覆盖掉参数声明 \n}</code></pre><p>变量初始化案例2</p>\n<pre><code>function foo(x, y, z) {\n    function func() {}\n    var func;\n    console.log(func);\n}\nfoo(100);  // [Function: func]\n\nfunction foo(x, y, z) {\n    function func() {}\n    var func = 1;\n    console.log(func);\n}\nfoo(100);  // 1  执行阶段会执行func = 1 这个语句</code></pre><p>代码执行阶段</p>\n<pre><code>function test(a, b) {\n    var c = 10;\n    function d() {}\n    var e = function _e() {};\n    (function x() {})();\n    b = 20;\n}\n\n// 初始化阶段\nAO(test) = {\n    a: 10,\n    b: undefined,\n    c: undefined,\n    d: &lt;ref to func &apos;d&apos;&gt;,\n    e: undefined\n};\n// 代码执行阶段\nAO(test) = {\n    a: 10,\n    b: 20,\n    c: 10,\n    d: &lt;reference to FunctionDeclaration &apos;d&apos;&gt;,\n    e: function _e()\n};</code></pre><p>全局执行上下文案例</p>\n<pre><code>console.log(x);  // [Function: x]\nvar x = 10;  // 初始化阶段x: 冲突，被忽略\nconsole.log(x);  // 10\nx = 20;\nfunction x() {}  // 初始化阶段x: &lt;ref to func &apos;x&apos;&gt;\nconsole.log(x);  // 20\nif (true) {\n    var a = 1;  // 初始化阶段a: undefined\n} else {\n    var b = true;  // 初始化阶段b: undefined\n}\n\nconsole.log(a);  // 1\nconsole.log(b);  // undefined</code></pre><h3 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h3><p>prototype是函数对象上的预设的对象属性<br>原型是对象上的原型，通常都是构造器的prototype属性<br>实例</p>\n<pre><code>function Abc() {\n    this.y = 2;\n    var z = 3;\n}\nconsole.log(Abc);  // [Function: Abc]\nconsole.log(Abc.prototype);  // Abc {}\nconsole.log(typeof Abc.prototype);  // object\n\nAbc.prototype.x = 1;\nconsole.log(Abc.prototype);  // Abc { x: 1 }\n\nvar obj1 = new Abc();\nconsole.log(obj1.__proto__);  // Abc { x: 1 }\nconsole.log(obj1.__proto__ === Abc.prototype);  // true  new构造器创建的对象的原型是构造器的prototype属性\nconsole.log(obj1);  // Abc { y: 2 }\nconsole.log(obj1.y);  // 2\nconsole.log(obj1.x);  // 1</code></pre><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>实现继承的方法</p>\n<pre><code>// 实现继承的方法\nfunction Person() {\n}\n\nfunction Student() {\n}\n\nStudent.prototype = Person.prototype;  // 错误，会影响被继承类的方法\nStudent.prototype = new Person();  // 错误，传参问题，因为Student是类，并不是实例\n\n// 正确的方法\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n// Object.create()是es5的方法，下面是fix方法\nif(!Object.create) {\n    Object.create = function(proto) {\n        function F() {}\n        F.prototype = proto;\n        return new F;\n    };\n}</code></pre><p>原型的继承方法</p>\n<pre><code>function Person(name, age) {\n    this.name = name;\n    this.age = age;\n    this.sayNo = function() {\n        console.log(this.name + &apos; say no&apos;);\n    }\n}\n\nPerson.prototype.hi = function() {\n    console.log(&apos;Hi, my name is &apos; + this.name + &apos;,I\\&apos;m &apos; + this.age + &apos; years old now&apos;);\n};\nPerson.prototype.LEGS_NUM = 2;\nPerson.prototype.ARMS_NUM = 2;\nPerson.prototype.walk = function() {\n    console.log(this.name + &apos; is walking...&apos;);\n};\n\nconsole.log(Person);  // [Function: Person]\nconsole.log(Person.prototype);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\nvar Jack = new Person();  // Person构造器没有return对象，所以返回的是this\nJack.sayNo();  // undefined say no\nJack.hi();  // Hi, my name is undefined,I&apos;m undefined years old now\nJack.walk();  // undefined is walking...\nconsole.log(Jack);  // Person { name: undefined, age: undefined, sayNo: [Function] }\nconsole.log(Jack.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n\n// 以下5行代码是js中对象继承的写法\nfunction Student(name, age, className) {\n    Person.call(this, name, age);  // 使用call方法调用父构造器函数\n    this.className = className;\n}\nStudent.prototype = Object.create(Person.prototype);   // 这个如果直接使用Student.prototype = Person.prototype，改变Student对象方法会改变Person对象的方法，因为他们指向的是同一个对象\nStudent.prototype.constructor = Student;\n\nStudent.prototype.hi = function() {\n    console.log(&apos;Hi, my name is &apos; + this.name + &apos;, I\\&apos;m&apos; + this.age + &apos; years old now, and from &apos; + this.className + &apos;.&apos;);\n};\nStudent.prototype.learn = function(subject) {\n    console.log(this.name + &apos; is learning &apos; + subject + &apos; at &apos; + this.className + &apos;.&apos;);\n};\n\nvar Lussi = new Student(&apos;Lussi&apos;, 27, &apos;Class Tree&apos;);\nLussi.sayNo();  // Lussi say no\nLussi.hi();  // Hi, my name is Lussi, I&apos;m27 years old now, and from Class Tree.\nLussi.walk();  // Lussi is walking...\nLussi.learn(&apos;math&apos;);  // Lussi is learning math at Class Tree.\nconsole.log(Lussi);  // Student {name: &apos;Lussi&apos;, age: 27, sayNo: [Function], className: &apos;Class Tree&apos; }\nconsole.log(Lussi.__proto__);  // Student {constructor: [Function: Student], hi: [Function], learn: [Function] }\nconsole.log(Lussi.__proto__.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\nconsole.log(Lussi.__proto__.__proto__.__proto__);  // {}\nconsole.log(Lussi.__proto__.__proto__.__proto__.__proto__);  // null  \n// 改变prototype\nStudent.prototype.x = 101;  // 会影响已经创建实例的属性\nconsole.log(Jack.x);  // undefined\nconsole.log(Lussi.x);  // 101\n\nStudent.prototype = {y: 2};  // 不会影响已经创建实例的属性，但会影响新创建的实例，并且重新修改prototype.y属性也不会改变\nconsole.log(Jack.y); // undefined\nconsole.log(Lussi.y);  // undefined\nvar Lilei = new Student(&apos;Lilei&apos;, 24, &apos;Class three&apos;);\nconsole.log(Lilei.x);  // undefined\nconsole.log(Lilei.y);  // 2\nStudent.prototype.y = 100;\nconsole.log(Lilei.y);  // 100\nconsole.log(Lussi.y);  // undefined\nStudent.prototype.z = 30;\nconsole.log(Lilei.z);  // 30\nconsole.log(Lussi.z);  // undefined\nPerson.prototype.z = 40;\nconsole.log(Lilei.z);  // 30\nconsole.log(Lussi.z);  // 40\nconsole.log(Jack.z);  // 40</code></pre><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><pre><code>// instanceof  左边是对象（如果不是，直接返回false），右边是构造器（如果不是，直接报错），判断构造器的prototype属性是否在对象的原型链上\nconsole.log([1, 2] instanceof Array);  // true\nconsole.log(1 instanceof Array);  // false\nconsole.log(Array.prototype);  // []\nconsole.log(new Object() instanceof Array);  //false\nconsole.log(Object.prototype);  // {}\nconsole.log(new Object() instanceof Object);  // true\nconsole.log(new Array() instanceof Object);  // true</code></pre><h3 id=\"模拟重载\"><a href=\"#模拟重载\" class=\"headerlink\" title=\"模拟重载\"></a>模拟重载</h3><pre><code>function Person() {\n    var args = arguments;\n    // 判断第一个传入的是不是对象，因为args[null]也返回object，所有需要判断是否为null\n    if(typeof args[0] === &apos;object&apos; &amp;&amp; args[0]) {\n        if(args[0].name) {\n            this.name = args[0].name;\n        }\n        if(args[0].age) {\n            this.age = args[0].age;\n        }\n    } else {\n        if(args[0]) {\n            this.name = args[0];\n        }\n        if(args[1]) {\n            this.age = args[1];\n        }\n    }\n}\nPerson.prototype.toString = function() {\n    console.log(&apos;name=&apos; + this.name + &apos;, age=&apos; + this.age);\n};\n\nvar LiLei = new Person(&apos;LiLei&apos;, 23);\nvar Hanmm = new Person({name: &apos;Hanmm&apos;, age: 21});\nLiLei.toString();  // name=LiLei, age=23\nHanmm.toString();  // name=Hanmm, age=21</code></pre><h3 id=\"调用子类方法\"><a href=\"#调用子类方法\" class=\"headerlink\" title=\"调用子类方法\"></a>调用子类方法</h3><pre><code>function Person(name) {\n    this.name = name;\n}\nfunction Student(name, className) {\n    this.className = className;\n    Person.call(this, name);\n}\n\nPerson.prototype.init = function() {\n    console.log(&apos;Person.init&apos;);\n};\nStudent.prototype.init = function() {\n    console.log(&apos;Student.init&apos;);\n    Person.prototype.init.apply(this, arguments);\n};\nvar LiLei = new Student(&apos;LiLei&apos;, &apos;Class four&apos;);\nconsole.log(LiLei);  // Student { className: &apos;Class four&apos;, name: &apos;LiLei&apos; }\nLiLei.init();  // Student.init  Person.init</code></pre><h3 id=\"实现链式调用\"><a href=\"#实现链式调用\" class=\"headerlink\" title=\"实现链式调用\"></a>实现链式调用</h3><pre><code>function ClassManager() {\n    console.log(&apos;ClassManager&apos;);\n    this.name = &apos;ClassName&apos;;\n}\nClassManager.prototype.addClass = function(str) {\n    console.log(&apos;class: &apos;  + str + &apos; added.&apos;);\n    console.log(this);\n    return this;  // this始终指向ClassManger类的实例\n};\n\nvar manager = new ClassManager();\nmanager.addClass(&apos;A&apos;).addClass(&apos;B&apos;).addClass(&apos;C&apos;);  //class: A added. ClassManager { name: &apos;ClassName&apos; } class: B added. ClassManager { name: &apos;ClassName&apos; } class: C added. ClassManager { name: &apos;ClassName&apos; }</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p>object(包含Function，Array，Date等)<br>number<br>string<br>boolean<br>null<br>undefined</p>\n</blockquote>\n<h3 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h3><p>typeof 基本类型，function， null可以用===判断</p>\n<pre><code>typeof 100           // &quot;number&quot;   \ntypeof true          // &quot;boolean&quot;    \ntypeof function      // &quot;function&quot;    \ntypeof undefined     // &quot;undefined&quot;  \ntypeof new Object()  // &quot;object&quot;  \ntypeof [1, 2]        // &quot;object&quot;  \ntypeof NaN           // &quot;number&quot;  \ntypeof null          // &quot;object&quot;  </code></pre><p>instanceof</p>\n<pre><code>// 不同window或iframe下返回false\n[1, 2] instanceof Array === true  \nnew Object instanceof Array === fasle</code></pre><p>Object.prototype.toString</p>\n<pre><code>Object.prototype.toString.apply([1, 2, 3]) === &quot;[object Array]&quot;;  \nObject.prototype.toString.apply(function(){}) === &quot;[object Function]&quot;  \nObject.prototype.toString.apply(null) === &quot;[object Null]&quot;  // ie678返回[object Object]  \nObject.prototype.toString.apply(undefined) === &quot;[object Undefined]&quot;  \nObject.prototype.toString.apply(12313) === &quot;[object Number]&quot;  \nObject.prototype.toString.apply(&apos;12313&apos;) === &quot;[object String]&quot;</code></pre><p>constructor<br>duck type</p>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>表达式是一种js短语，可使js解释器用来产生一个值</p>\n<pre><code>// 原始表达式\n3.14, &quot;test&quot;      // 常量，直接量\nnull, this, true  // 关键字\ni, j, k;           // 变量\n\n// 复合表达式\n10 * 20;           // 原始表达式+运算符+原始表达式\n\n// 初始化表达式\n[1, 2];\n[1,,2];\n{x: 1, y: 2};\n\n// 函数表达式\nvar fe = function(){};\n(function(){console.log(&apos;1111&apos;);}){};\n\n// 属性访问表达式\nvar o = {x:1};\no.x;\no[&apos;x&apos;];\n\n// 调用表达式\nfunc();\n\n// 对象创建表达式\nnew Func(1, 2);\nnew Object;</code></pre><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><blockquote>\n<p>一元（+num）<br>二元（a + b）<br>三元（c：a：b） 赋值(x += 1)<br>比较(a == b)<br>算术（a - b）<br>位 （a | b）<br>逻辑 (exp1 &amp;&amp; exp2)<br>字符串(“a” + “b”)<br>特殊</p>\n</blockquote>\n<h3 id=\"特殊运算符\"><a href=\"#特殊运算符\" class=\"headerlink\" title=\"特殊运算符\"></a>特殊运算符</h3><blockquote>\n<p>c? a:b<br>var val = (1, 2, 3) // 逗号运算符<br>delete obj.x // 删除对象属性<br>‘x’ in window; // in 运算符<br>instanceof, typeof // 判断类型<br>new Foo(); // new 运算符<br>this // this运算符<br>void 0 // undefined</p>\n</blockquote>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>块语句block<br>块语句是没有作用域的</p>\n<pre><code>{  \nvar str = &apos;hi&apos;;  \nconsole.log(str);  \n}  </code></pre><p>声明语句 var<br>var a=1, b=1; 函数语句function</p>\n<pre><code>// 函数声明语句  \nfunction fd() {  \n    return true;  \n}    \n// 函数表达式  \nvar fe = function() {\n    //do sth\n};</code></pre><p>for in 语句</p>\n<pre><code>var p;  \nvar obj = {x:1, y:2};  \nfor(p in obj) {\n    // 顺序不确定  \n}</code></pre><p>swith语句</p>\n<pre><code>var val = 2;\nswitch (val) {\n    case 1:\n        console.log(1);\n        break;\n    case 2:\n        console.log(2);\n        break;\n    case 3:\n        console.log(3);\n        break;\n    default:\n        console.log(0);\n        break;\n}</code></pre><p>循环语句</p>\n<pre><code>while (isTrue) {\n    // do sth\n}\n\ndo {\n    // do sth\n} while (isTrue)\n\nvar i;\nfor (i = 0; i &lt; n; i++) {\n    // do sth\n}</code></pre><p>with语句 // 不使用 try catch语句</p>\n<pre><code>try {\n    try {\n        throw new Error(&apos;oops&apos;);\n    } catch(ex) {\n        console.error(&apos;inner catch&apos;, ex.message);\n        throw ex;\n    } finally {\n        console.log(&apos;inner  finally&apos;);\n    }\n} catch(ex) {\n    console.error(&apos;outer catch&apos;, ex.message);\n} finally {\n    console.log(&apos;outer finally&apos;);\n}</code></pre><p>结果 内部catch&gt;内部finally&gt;外部catch&gt;外部finally</p>\n<pre><code>inner catch oops  \ninner  finally  \nouter catch oops  \nouter finally  </code></pre><h3 id=\"严格模式-待补充）\"><a href=\"#严格模式-待补充）\" class=\"headerlink\" title=\"严格模式(待补充）\"></a>严格模式(待补充）</h3><pre><code>function func() {\n    &apos;use strict&apos;;\n}</code></pre><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象创建<br>字面量创建</p>\n<pre><code>var obj = {x: 1};\nconsole.log(obj);\nconsole.log(obj.y);\nObject.prototype.y = 2;\nconsole.log(obj);\nconsole.log(obj.y);\nobj.y = undefined;\nconsole.log(obj);\nconsole.log(obj.y);\n\n\n{ x: 1 }\nundefined\n{ x: 1 }\n2\n{ x: 1, y: undefined }\nundefined</code></pre><p>new构造器创建</p>\n<pre><code>function foo() { this.color = &apos;red&apos;;}\nfoo.prototype.background = &apos;#000&apos;;\nvar redColor = new foo();\nconsole.log(redColor);\nconsole.log(typeof redColor.toString);\nconsole.log(redColor.color);\nconsole.log(redColor.background);\nconsole.log(foo);\nconsole.log(foo.prototype);\nconsole.log(foo.prototype.prototype);\nconsole.log(&apos;background&apos; in redColor);\nredColor.background = &apos;#FFF&apos;;\nconsole.log(redColor.background);\nconsole.log(foo.prototype.background);\n\n\nfoo { color: &apos;red&apos; }\nfunction\nred\n#000\n[Function: foo]\nfoo { background: &apos;#000&apos; }\nundefined\ntrue\n#FFF\n#000</code></pre><p>Object.create()创建</p>\n<pre><code>function obj() {\n    this.x = 1;\n}\nconsole.log(obj);\nvar obj1 = new obj();\nconsole.log(obj1);\nvar obj2 = Object.create(obj);\nconsole.log(obj2);\nconsole.log(obj2.x);\nvar obj3 = Object.create(obj1);\nconsole.log(obj3);\nconsole.log(obj3.x);;\n\n\n[Function: obj]\nobj { x: 1 }\nFunction {}\nundefined\nobj {}\n1</code></pre><h3 id=\"对象的内部原型-proto-和构造器的原型（prototype）的关系。\"><a href=\"#对象的内部原型-proto-和构造器的原型（prototype）的关系。\" class=\"headerlink\" title=\"对象的内部原型(proto)和构造器的原型（prototype）的关系。\"></a>对象的内部原型(<strong>proto</strong>)和构造器的原型（prototype）的关系。</h3><p>一、所有构造器/函数的<strong>proto</strong>都指向Function.prototype，它是一个空函数（Empty function）</p>\n<pre><code>Number.__proto__ === Function.prototype  // true  \nBoolean.__proto__ === Function.prototype // true  \nString.__proto__ === Function.prototype  // true  \nObject.__proto__ === Function.prototype  // true  \nFunction.__proto__ === Function.prototype // true  \nArray.__proto__ === Function.prototype   // true  \nRegExp.__proto__ === Function.prototype  // true  \nError.__proto__ === Function.prototype   // true  \nDate.__proto__ === Function.prototype    // true  \nMath.__proto__ === Object.prototype  // true  \nJSON.__proto__ === Object.prototype  // true \n// 函数声明\nfunction Person() {}\n// 函数表达式\nvar Man = function() {}\nconsole.log(Person.__proto__ === Function.prototype) // true  \nconsole.log(Man.__proto__ === Function.prototype)    // true  </code></pre><p>所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5）</p>\n<pre><code>console.log(typeof Function.prototype) // function\nconsole.log(typeof Object.prototype)   // object\nconsole.log(typeof Number.prototype)   // object\nconsole.log(typeof Boolean.prototype)  // object\nconsole.log(typeof String.prototype)   // object\nconsole.log(typeof Array.prototype)    // object\nconsole.log(typeof RegExp.prototype)   // object\nconsole.log(typeof Error.prototype)    // object\nconsole.log(typeof Date.prototype)     // object\nconsole.log(typeof Object.prototype)   // object  \nconsole.log(Function.prototype.__proto__ === Object.prototype) // true    \nObject.prototype.__proto__ === null  // true  </code></pre><p>二、所有对象的<strong>proto</strong>都指向其构造器的prototype<br>JavaScript引擎内置构造器</p>\n<pre><code>var obj = {name: &apos;jack&apos;}\nvar arr = [1,2,3]\nvar reg = /hello/g\nvar date = new Date\nvar err = new Error(&apos;exception&apos;)\n\nconsole.log(obj.__proto__ === Object.prototype) // true\nconsole.log(arr.__proto__ === Array.prototype)  // true\nconsole.log(reg.__proto__ === RegExp.prototype) // true\nconsole.log(date.__proto__ === Date.prototype)  // true\nconsole.log(err.__proto__ === Error.prototype)  // true</code></pre><p>自定义的构造器</p>\n<pre><code>function Person(name) {\n    this.name = name\n}\nvar p = new Person(&apos;jack&apos;)\nconsole.log(p.__proto__ === Person.prototype) // true</code></pre><p>每个对象都有一个constructor属性，可以获取它的构造器</p>\n<pre><code>function Person(name) {\n    this.name = name\n}\nvar p = new Person(&apos;jack&apos;)\nconsole.log(p.__proto__ === p.constructor.prototype) // true</code></pre><h3 id=\"对象属性操作\"><a href=\"#对象属性操作\" class=\"headerlink\" title=\"对象属性操作\"></a>对象属性操作</h3><p>属性读写</p>\n<pre><code>// 属性读写\nvar obj = {x1: 1, x2: 2};\nvar i = 1, n = 2;\nfor(; i&lt;= n; i++) {\n    console.log(obj[&apos;x&apos; + i]);\n}\n// 输出1，2\n\nvar p;\nfor(p in obj) {\n    console.log(obj[p]);\n}\n// 输出1，2\n\nvar obj = {x: 1};\n// 读写异常\nconsole.log(obj.y); // undefined\nvar yz = obj.y.z;  // TypeError: Cannot read property &apos;z&apos; of undefined\nobj.y.z = 2;      //TypeError: Cannot set property &apos;z&apos; of undefined\n// 正确方式\nvar yz;\nif(obj.y) {\n    yz = obj.y.z;\n}\n// 或者\nvar yz = obj &amp;&amp; obj.y &amp;&amp; obj.y.z  // 这个会返回undefined</code></pre><p>属性删除</p>\n<pre><code>var person = {age: 28, title: &apos;fe&apos;};\nconsole.log(delete person.age);  // true\nconsole.log(delete person[&apos;age&apos;]);  // true\nconsole.log(person.age);  // undefined\nconsole.log(delete person.age);   // 注意这个也返回true 判断操作结束后该属性是否存在\n\n// 有些属性是不能删除的\nconsole.log(delete Object.prototype);  // false\n\n// 原因\nvar descriptor = Object.getOwnPropertyDescriptor(Object, &apos;prototype&apos;);\nconsole.log(descriptor.configurable);  // false\n\n// 变量及函数不可删除\nvar globalVal = 1;\nconsole.log(delete globalVal);  // false\n\n(function() {\n    var localVal = 1;\n    console.log(delete localVal);\n}());  // false\n\nfunction fd() {}\nconsole.log(delete fd);  // false\n\n(function() {\n    function fd() {};\n    console.log(delete fd);\n}());  // false\n\n\n// 隐示定义的变量可以\nohNo = 1;\nconsole.log(delete ohNo);  // true</code></pre><p>对象属性检测</p>\n<pre><code>var cat = new Object();\ncat.legs = 4;\ncat.name = &apos;Kitty&apos;;\n\nconsole.log(&apos;legs&apos; in cat);  // true\nconsole.log(&apos;abc&apos; in cat);  // false\nconsole.log(&apos;toString&apos; in cat);  // true 继承属性\n\nconsole.log(cat.hasOwnProperty(&apos;legs&apos;));  // true\nconsole.log(cat.hasOwnProperty(&apos;toString&apos;));  // false\n\nconsole.log(cat.propertyIsEnumerable(&apos;legs&apos;));  // true\nconsole.log(cat.propertyIsEnumerable(&apos;toString&apos;));  // false\n\n\nObject.defineProperty(cat, &apos;price&apos;, {enumerable: false, value: 1000});\n// defineProperty是Object的方法，默认的标签enumerable值为false\n// Object.x创建属性，默认的标签值为true\nconsole.log(cat.propertyIsEnumerable(&apos;price&apos;));  // false\nconsole.log(cat.hasOwnProperty(&apos;price&apos;));  // true\n\n\n// 判断属性是否存在\nif(cat &amp;&amp; cat.legs) {\n    cat.legs *= 2;\n}\n\nif(cat.legs != undefined) {\n    // !== undefined 或者 !== null\n}\nif(cat.legs !== undefined) {\n    // !== undefined\n}</code></pre><p>对象属性枚举</p>\n<pre><code>var o = {x: 1, y: 2, z: 3};\nconsole.log(&apos;toString&apos; in o);  // true\no.propertyIsEnumerable(&apos;toString&apos;);  // false\n\nvar key;\nconsole.log(o.x);  // 1\nconsole.log(o.y);  // 2\nconsole.log(o.z);  // 3\nfor(key in o) {\n    console.log(key);  // x, y, z\n    console.log(o.key);  // undefined\n    console.log(o[key]);  // 1, 2, 3\n}\n\n\nvar obj = Object.create(o);\nobj.a = 4;\nvar key;\nfor(key in obj) {\n    console.log(key); // a, x, y, z\n}\nvar key1;\nfor (key1 in obj) {\n    if(obj.hasOwnProperty(key1)) {\n        console.log(key1); // a\n    }\n}</code></pre><p>对象属性的get/set方法</p>\n<pre><code>// 对象属性的get/set方法\nvar man = {\n    name: &apos;Bug&apos;,\n    weibo: &apos;Bug&apos;,\n    get age() {\n        return new Date().getFullYear() - 1988;\n    },\n    set age(val) {\n        console.log(&apos;cannot be set &apos; + val);\n    },\n};\n\nconsole.log(man.age);  // 调用age的get方法27\nman.age = 100;  // 调用age的set方法 cannot be set 100\nconsole.log(man.age);  // 27\n\n\nvar man = {\n    weibo: &apos;Bug&apos;,\n    $age: null,\n    get age() {\n        if(this.$age == undefined) {\n            return new Date().getFullYear() - 1988;\n        } else {\n            return this.$age;\n        }\n    },\n    set age(val) {\n        val = +val; // 转为数字\n        if(!isNaN(val) &amp;&amp; val &gt; 0 &amp;&amp; val &lt; 150) {\n            this.$age = + val;\n        } else {\n            throw new Error(&apos;Incorrect val = &apos; + val );\n        }\n    }\n}\n\nconsole.log(man.age);  // 27\nman.age = 100;\nconsole.log(man.age);  // 100\n//man.age = &apos;abc&apos;;  // Error: Incorrect val = NaN\n\n\n// get/set方法与原型链\n\n// 这是错误的定义对象属性get方法方式\nfunction foo1() {}\nfoo1.prototype.z = {\n    get: function() {\n        return 2;\n    }\n};\nvar obj = new foo1();\nconsole.log(obj.z);  // 这个会被认为是对象 { get: [Function] }\nobj.z = 200;\nconsole.log(obj.z);  // 200\n\n// 正确定义方法\nfunction foo() {}\nObject.defineProperty(foo.prototype, &apos;z&apos;, {\n    get: function() {\n        return 1;\n    },\n    // configurable: true,  // 开启此属于也不会被改变\n    // writable: true,  // 此项不能配置writable/value get/set 二选一\n });\nvar obj = new foo();\nconsole.log(obj.z);   // 1\nobj.z = 100;\nconsole.log(obj.z);  // 但是还是1 并没有被改变\n\nObject.defineProperty(obj, &apos;z&apos;, {\n    value: 100,\n    configurable: true\n});\nconsole.log(obj.z);  // 100\ndelete obj.z;\nconsole.log(obj.z);  // 返回到1\n\n// 另外一个例子\nvar o = {};\nObject.defineProperty(o, &apos;x&apos;, {\n    value: 1\n});  // 默认writable: false, configurable: false\nvar obj = Object.create(o);\nconsole.log(obj.x);  // 1\nobj.x = 100;\nconsole.log(obj.x);  // 还是1\n\n\nObject.defineProperty(obj, &apos;x&apos;, {\n    writable: true,\n    configurable: true,\n    value: 100\n});\nconsole.log(obj.x);  // 100\nobj.x = 200;\nconsole.log(obj.x); // 200</code></pre><h3 id=\"对象属性标签\"><a href=\"#对象属性标签\" class=\"headerlink\" title=\"对象属性标签\"></a>对象属性标签</h3><pre><code>person = {};\nObject.defineProperty(person, &apos;type&apos;, {\n    configurable: false,\n    writable: true,\n    enumerable: false,\n    value: &apos;Object&apos;,\n});\n\nconsole.log(Object.keys(person));   // [] 返回空数组，不能枚举\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // { value: &apos;Object&apos;, writable: true, enumerable: false, configurable: false }\n\n\n// writable为true，可以通过赋值方法修改value值 [通过赋值修改属性值只和writable标签有关，和configurable无关]\nperson.type = &apos;Object2&apos;;\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));  // { value: &apos;Object2&apos;, writable: true, enumerable: false, configurable: false }\n\n\n// configurable: false 无法使用delete删除属性， 无法使用get/set方法，  无法重新配置属性标签（除了将writable从true修改为false）\nconsole.log(delete person.type);   // 返回false\n\n\n// 只有writable和configurable标签都为false时，不能修改value标签值，其他情况都可以修改value标签值\nObject.defineProperty(person, &apos;type&apos;, {\n    configurable: false,\n    writable: true,\n    enumerable: false,\n    value: &apos;Object1&apos;,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // { value: &apos;Object1&apos;, writable: true, enumerable: false, configurable: false }\n\n\n// 可以重新配置writable标签值(只能重true改为false)\nObject.defineProperty(person, &apos;type&apos;, {\n    writable: false,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // { value: &apos;Object1&apos;, writable: false, enumerable: false, configurable: false }\n\n\n// 无法将writable从false改为true\nObject.defineProperty(person, &apos;type&apos;, {\n    writable: true,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // TypeError: Cannot redefine property: type\n\n\n// 无法重新配置enumerable，configurable属性\nObject.defineProperty(person, &apos;type&apos;, {\n    enumerable: true,\n});\nconsole.log(Object.getOwnPropertyDescriptor(person, &apos;type&apos;));   // TypeError: Cannot redefine property: type</code></pre><h3 id=\"对象标签\"><a href=\"#对象标签\" class=\"headerlink\" title=\"对象标签\"></a>对象标签</h3><p>原型标签<strong>proto</strong></p>\n<pre><code>// 原型标签__proto__\n\nfunction Person(name) {\n    this.name = name;\n}\nvar p = new Person(&apos;jack&apos;);\nconsole.log(p.__proto__ === Person.prototype);  // true</code></pre><p>类型标签</p>\n<pre><code>//  对象class标签，表示对象是哪个类型，没有直接的方法去修改或者获取\nvar toString = Object.prototype.toString;\n\nconsole.log(toString.call(null));  // [object Null]\nconsole.log(toString.call(undefined));  // [object Undefined]\nconsole.log(toString.call(1));  // [object Number]\nconsole.log(toString.call(new Number(1)));  // [object Number]\nconsole.log(toString.call(true));  // [object Boolean]\nconsole.log(toString.call(new Boolean(true)));  // [object Boolean]</code></pre><p>可扩展标签</p>\n<pre><code>// extensible 可扩展标签，表示是否可以继续添加对象属性\nvar obj = {x: 1, y: 2};\nconsole.log(Object.isExtensible(obj));  // true 对象可扩展\nObject.preventExtensions(obj);  // 配置对象不可扩展\nconsole.log(Object.isExtensible(obj));  // false 对象不可扩展\nobj.z =1;\nconsole.log(obj.z);  // undefined 添加属性失败\nconsole.log(Object.getOwnPropertyDescriptor(obj, &apos;x&apos;));  // // { value: 1, writable: true, enumerable: true, configurable: true }\n\n\n// Object.seal方法，对象的所有属性configurable值为false\nObject.seal(obj);\nconsole.log(Object.getOwnPropertyDescriptor(obj, &apos;x&apos;));  // { value: 1, writable: true, enumerable: true, configurable: false }\nconsole.log(Object.isSealed(obj)); // true\n\n\n// Object.freeze方法，对象的所有属性configurable，writable标签值为false\nObject.freeze(obj);\nconsole.log(Object.getOwnPropertyDescriptor(obj, &apos;x&apos;));   // // { value: 1, writable: false, enumerable: true, configurable: false }\nconsole.log(Object.isFrozen(obj));  // true</code></pre><h3 id=\"JS对象与json格式转换\"><a href=\"#JS对象与json格式转换\" class=\"headerlink\" title=\"JS对象与json格式转换\"></a>JS对象与json格式转换</h3><pre><code>// 将js对象转为json格式JSON.stringify()\nvar obj = {x: 1, y: true, z: [1, 2, 3], nullVal: null};\nconsole.log(JSON.stringify(obj));  // {&quot;x&quot;:1,&quot;y&quot;:true,&quot;z&quot;:[1,2,3],&quot;nullVal&quot;:null}\n\n// undefined,NaN,Infinity等特殊属性值\nvar obj = {val: undefined, a: NaN, b: Infinity, c: new Date()};\nconsole.log(JSON.stringify(obj));  // {&quot;a&quot;:null,&quot;b&quot;:null,&quot;c&quot;:&quot;2015-12-19T12:30:40.456Z&quot;}\n\n// 将json格式转为js对象JSON.parse\nvar obj = JSON.parse(&apos;{&quot;x&quot;: 1}&apos;);\nconsole.log(obj.x);  // 1\n\n//toJSON方法\nvar obj = {\n    x: 1,\n    y: 2,\n    o: {\n        o1: 1,\n        o2: 2,\n        toJSON: function() {\n            return this.o1 + this.o2;\n        }\n    },\n};\nconsole.log(JSON.stringify(obj));  // {&quot;x&quot;:1,&quot;y&quot;:2,&quot;o&quot;:3}</code></pre><p>###toString valueOf方法</p>\n<pre><code>// 对象在作为操作数时，解释器总是优先调用valueOf()--(Date类型的对象在二元“+”运算时例外),而其他情况，解释器总是认为我们想要的是字符串，所以会优先调用toString()。\nvar obj = {x: 1, y: 2};\nconsole.log(obj.toString());  // [object Object]\nconsole.log(+obj.toString());  // NaN\nconsole.log(3 + obj.toString());  // 3[object Object] 会被理解为字符串拼接\nconsole.log(+obj.valueOf());  // NaN\n\n// 重写\nobj.toString = function() {\n    return this.x + this.y;\n};\nconsole.log(+obj);  // 3\nobj.valueOf = function() {\n    return this.x + this.y + 100;\n};\nconsole.log(+obj);  // 103\n\n// 如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。在不能调用toString的情况下，只能让valueOf上阵了。\n\nvar cc = {\n    i: 10,\n    valueOf: function() {\n        console.log(&apos;valueOf&apos;);\n        return this.i;\n    }\n};\n\nconsole.log(cc);// 10 { [Number: 10] i: 10, valueOf: [Function] }\nconsole.log(+cc); // 10 valueOf\nconsole.log(&apos;&apos;+cc); // 10 valueOf\nconsole.log(String(cc)); // [object Object]\nconsole.log(Number(cc)); // 10 valueOf\nconsole.log(cc == &apos;10&apos;); // true valueOf</code></pre><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>创建数组</p>\n<pre><code>// 字面量创建数组 数组的长度不能超过2^23 - 1 = 4,294,967,295\nvar BAT = [&apos;B&apos;, &apos;A&apos;, &apos;T&apos;];\nvar students = [{name: &apos;B&apos;, age: 27}, {name: &apos;A&apos;, age: 30}];\nvar arr = [&apos;T&apos;, 123, true, null, undefined];\nvar arrInArr = [[1, 2], [1, 2, 3]];\n\n// 对象创建数组 new关键字可以省略\nvar arr = new Array();  // var = [];\nvar arrWithLength = new Array(100);  // undefined * 100\nvar arrLikesLiteral = new Array(true, false, null, 1, 2, &apos;hi&apos;);  // [true, false, null, 1, 2, &apos;hi&apos;]</code></pre><p>数组元素操作</p>\n<pre><code>// 数组元素读写\n\n// 索引访问\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr[1]);  // b\nconsole.log(arr.length);  // 5\narr[5] = &apos;f&apos;;\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.length);  // 6\n\n// delete方法并不会改变数组长度,delete 和定义为undefined的区别\ndelete arr[0];\nconsole.log(arr);  // [ , &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.length);  // 6\nconsole.log(0 in arr);  // 会返回false\narr[1] = undefined;\nconsole.log(arr);  // [ , undefined, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.length);  // 6\nconsole.log(1 in arr);  // true\n\n// 数组是动态的，无需指定大小\n\n// 指定索引位置，改变数组\nvar arr = [];\narr[1] = &apos;b&apos;;\nconsole.log(arr.length);  // 2\nconsole.log(arr);   // [ , &apos;b&apos; ]\n\n// push方法，在数组尾部添加元素,并返回新的数组长度\nconsole.log(arr.push(&apos;c&apos;));  // 3\nconsole.log(arr);  // [ , &apos;b&apos;, &apos;c&apos; ]\n\n// 在数组尾部添加的另一种方法\narr[arr.length] = &apos;d&apos;;\nconsole.log(arr);  // [ , &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]\n\n// unshift方法，在数组头部添加元素，并返回新的数组长度\nconsole.log(arr.unshift(&apos;a&apos;));  // 5\nconsole.log(arr);  // [ &apos;a&apos;, , &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]\n\n// pop方法，删除数组尾部的元素并返回这个元素\nconsole.log(arr.pop());  // &apos;d&apos;\nconsole.log(arr);  // [ &apos;a&apos;, , &apos;b&apos;, &apos;c&apos; ]\n\n// 删除数组尾部元素的另个方法\narr.length -= 1;\nconsole.log(arr);  // [ &apos;a&apos;, , &apos;b&apos; ]\n\n// shift方法，删除数组头部的元素并返回这个元素\nconsole.log(arr.shift());  // &apos;a&apos;\nconsole.log(arr);  // [ , &apos;b&apos; ]</code></pre><p>数组迭代</p>\n<pre><code>// 数组迭代\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;];\nfor(var i = 0; i &lt; arr.length; i++) {\n    console.log(arr[i]);\n}\n// a b c d e f g\n\nfor(i in arr) {\n    console.log(arr[i]);\n}\n// a b c d e f g\n\n// for in 表达式的坑：会迭代原型的元素\nArray.prototype.x = &apos;keng&apos;;\nfor(i in arr) {\n    console.log(arr[i]);\n}\n// a b c d e f g keng\n\nfor(i in arr) {\n    if(arr.hasOwnProperty(i)) {\n        console.log(arr[i]);\n    }\n}\n// a b c d e f g</code></pre><p>特殊数组：二维数组和稀疏数组</p>\n<pre><code>// 特殊数组：二维数组，稀疏数组\n// 二维数组\nvar arr = [[&apos;a&apos;, &apos;b&apos;], [&apos;c&apos;, &apos;d&apos;], [&apos;e&apos;, &apos;f&apos;]];\nvar i = 0, j = 0;\nvar row;\nfor(; i &lt; arr.length; i++) {\n    row = arr[i];\n    console.log(&apos;row&apos; + i);\n    for(j = 0; j &lt; row.length; j++) {\n        console.log(row[j]);\n    }\n}\n// row0 a b row1 c d row2 e f\n\n// 稀疏数组：并不含有从0开始的连续索引\nvar arr1 = [undefined];\nvar arr2 = new Array(1);\nconsole.log(0 in arr1);  // true\nconsole.log(0 in arr2);  // false</code></pre><h3 id=\"数组的方法\"><a href=\"#数组的方法\" class=\"headerlink\" title=\"数组的方法\"></a>数组的方法</h3><p>Array.prototype.join(separator)</p>\n<pre><code>// Array.prototype.join(separator)方法：将数组拼接成字符串，返回字符串，不改变原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nconsole.log(arr.join());  // a,b,c\nconsole.log(arr.join(&apos;_&apos;));  // a,b,c\nfunction repeatString(str, n) {\n    return new Array(n + 1).join(str);\n}\nconsole.log(repeatString(&apos;a&apos;, 3));  // aaa\nconsole.log(repeatString(&apos;Hi&apos;, 5));  // HiHiHiHiHi</code></pre><p>Array.prototype.reverse()</p>\n<pre><code>// Array.prototype.reverse() 将数组逆序，返回数组本身，会改变数组本身\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar arr1 = arr;\nvar arr2 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nconsole.log(arr.reverse());  // [ &apos;c&apos;, &apos;b&apos;, &apos;a&apos; ]\nconsole.log(arr);  // [ &apos;c&apos;, &apos;b&apos;, &apos;a&apos; ]\nconsole.log(arr1);  // [ &apos;c&apos;, &apos;b&apos;, &apos;a&apos; ]\nconsole.log(arr2);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</code></pre><p>Array.prototype.sort(sortby）</p>\n<pre><code>// Array.prototype.sort(sortby)方法：接受一个函数参数(不传参数默认按字符编码顺序)，返回数组本身，会修改原数组\nvar arr = [&apos;f&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos;, &apos;a&apos;];\nconsole.log(arr.sort());  // [ &apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\n\nvar arr = [13, 24, 51, 3];\nconsole.log(arr.sort());  // [ 13, 24, 3, 51 ]\n\n// 传入参数：比较函数(a, b)\n// 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n// 若 a 等于 b，则返回 0。\n// 若 a 大于 b，则返回一个大于 0 的值。\nfunction sortNumber(a, b) {\n    return a - b;\n}\nconsole.log(arr.sort(sortNumber));  // [ 3, 13, 24, 51 ]\n\nvar arr = [{age: 25}, {age: 29}, {age: 40}];\nconsole.log(arr.sort(function sortAge(a, b) {\n    return a.age - b.age;\n}));  // [ { age: 25 }, { age: 29 }, { age: 40 } ]</code></pre><p>Array.prototype.concat(arrayX, arrayY…..)</p>\n<pre><code>// Array.prototype.concat(arrayX, arrayY.....)方法 连接多个数组，返回一个新的数组，不会改变原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nconsole.log(arr.concat(&apos;d&apos;, &apos;e&apos;));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\nconsole.log(arr.concat([&apos;d&apos;, &apos;e&apos;], &apos;f&apos;));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos; ]\nconsole.log(arr.concat([&apos;d&apos;, &apos;e&apos;], [&apos;f&apos;, &apos;g&apos;]));  // &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos; ]\nconsole.log(arr.concat([[&apos;d&apos;, &apos;e&apos;], &apos;f&apos;]));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [ &apos;d&apos;, &apos;e&apos; ], &apos;f&apos; ]\nconsole.log(arr.concat([[[&apos;d&apos;, &apos;e&apos;], &apos;f&apos;], &apos;g&apos;]));  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [ [ &apos;d&apos;, &apos;e&apos; ], &apos;f&apos; ], &apos;g&apos; ]</code></pre><p>Array.prototype.slice(start, end)</p>\n<pre><code>// Array.prototype.slice(start, end)方法：左闭右开截取数组，返回一个新的数组，不改变原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.slice(1, 3));  // [&apos;b&apos;, &apos;c&apos;]\nconsole.log(arr.slice(1));  // [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]\nconsole.log(arr.slice(1, -1));  // [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;]\nconsole.log(arr.slice(-4, -3));  // [&apos;b&apos;]</code></pre><p>Array.prototype.splice(index, howmany, item1,….itemX)</p>\n<pre><code>// Array.prototype.splice(index, howmany, item1,....itemX)方法：\n// 向/从数组中添加/删除项目，然后返回被删除的项目。会改变原数组\n// index参数：必须，整数，添加或删除的位置，左闭合\n// howmany参数：可选，设置为0，则不会删除\n// item1,.....itemX：可选，向数组中添加的元素\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2));   // [ &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 1));  // [ &apos;c&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;e&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 0));  // []\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 2, &apos;f&apos;, &apos;g&apos;, [&apos;h&apos;, &apos;i&apos;]));  // [ &apos;c&apos;, &apos;d&apos; ]\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;f&apos;, &apos;g&apos;, [ &apos;h&apos;, &apos;i&apos; ], &apos;e&apos; ]\n\n// 指定位置插入新的元素\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice(2, 0, &apos;f&apos;));  // []\nconsole.log(arr); // [ &apos;a&apos;, &apos;b&apos;, &apos;f&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]\n\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\nconsole.log(arr.splice());  // []\nconsole.log(arr); // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]</code></pre><p>Array.prototype.forEach()</p>\n<pre><code>// Array.prototype.forEach()方法(ES5)：接收函数参数\n// 函数的3个参数x: 元素值，index：元素索引，a 数组本身\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];\narr.forEach(function(x, index, a) {\n    console.log(x + &apos;_&apos; + index + &apos;_&apos; + a);\n});\n// a_0_a,b,c,d,e b_1_a,b,c,d,e c_2_a,b,c,d,e d_3_a,b,c,d,e e_4_a,b,c,d,e</code></pre><p>Array.prototype.map()</p>\n<pre><code>//Array.prototype.map()方法(ES5):接收函数参数,不会修改原数组\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar arr1 = arr.map(function(x) {\n    return x + &apos;like&apos;;\n});\n\nconsole.log(arr);  // [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\nconsole.log(arr1);  // [ &apos;alike&apos;, &apos;blike&apos;, &apos;clike&apos; ]</code></pre><p>Array.prototype.filter()</p>\n<pre><code>// Array.prototype.filter()过滤方法(ES5):接收函数参数，不修改原数组\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar arr1 = arr.filter(function(x, index) {\n    return index % 3 === 0 || x &gt;= 8;\n});\nconsole.log(arr1);  // [ 1, 4, 7, 8, 9, 10 ]\nconsole.log(arr);  // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</code></pre><p>Array.prototype.every() &amp; Array.prototype.some()</p>\n<pre><code>// Array.prototype.every() &amp; Array.prototype.some()判断方法(ES5):接收函数参数，不修改原数组\n// every 全部符合条件  some 只需一个符合条件\nvar arr = [1,2,3,4,5];\nconsole.log(arr.every(function(x) {\n    return x &lt; 10;\n}));  // true\nconsole.log(arr.every(function(x) {\n    return x &lt;= 3;\n}));  // false\nconsole.log(arr.some(function(x) {\n    return x === 3;\n}));  // true\nconsole.log(arr.some(function(x) {\n    return x === 100;\n}));  // false</code></pre><p>Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)</p>\n<pre><code>// Array.prototype.reduce(function, index) Array.prototype.reduceRight(function, index)方法\n// 接收一个函数参数和一个数组索引参数，并返回一个值，不修改原数组\n// 函数参加接收2个参数分别代表2个索引\n// 索引参数表示从第index个元素开始\nvar arr = [1, 2, 3];\nvar sum = arr.reduce(function(x, y) {\n    return x + y;\n}, 0);\nconsole.log(sum);  // 6  1+2返回3 3+3 返回6\n\nvar arr = [3, 9, 6];\nvar max = arr.reduce(function(x, y) {\n    console.log(x + &apos;|&apos; + y);\n    return x &gt; y ? x : y;\n});\n// 3|9\n// 9|6\nconsole.log(max);  // 9\n\nvar max = arr.reduceRight(function(x, y) {\n    console.log(x + &apos;|&apos; + y);\n    return x &gt; y ? x : y;\n});\n// 6|9\n// 9|3\nconsole.log(max);  // 9</code></pre><p>Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)</p>\n<pre><code>// Array.prototype.indexOf(value, index) Array.prototype.lastIndexOf(value, index)数字检索方法\n// value参数表示要查找的元素值，index表示从第几个索引位置开始查找(闭合)\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;b&apos;, &apos;a&apos;];\nconsole.log(arr.indexOf(&apos;b&apos;));  // 1 在数组中查找是否有元素值为&apos;b&apos;，有则返回这个元素索引\nconsole.log(arr.indexOf(&apos;f&apos;));  // -1 如果没有则返回-1\nconsole.log(arr.indexOf(&apos;b&apos;, 1));  // 1 从第2个元素开始查找，返回索引1\nconsole.log(arr.indexOf(&apos;b&apos;, 2));  // 3\nconsole.log(arr.indexOf(&apos;b&apos;, -2));  // 3\nconsole.log(arr.indexOf(&apos;b&apos;, -4));  // 1\nconsole.log(arr.indexOf(&apos;b&apos;, -8));  // 1\nconsole.log(arr.lastIndexOf(&apos;b&apos;));  // 3</code></pre><p>Array.isArray()</p>\n<pre><code>// Array.isArray() 判断是否为数组\nconsole.log(Array.isArray([]));  // true</code></pre><h3 id=\"创建函数\"><a href=\"#创建函数\" class=\"headerlink\" title=\"创建函数\"></a>创建函数</h3><pre><code>// 函数声明\nfunction add(a, b) {\n    a = +a;\n    b = +b;\n    if (isNaN(a) || isNaN(b)) {\n        return;\n    }\n    return a + b;\n}\n\n// 函数表达式\nvar add = function(a, b) {\n    // do sth\n};\n\n// IEF(立即执行函数表达式)\n(function() {\n    // do sth\n})();\n\n// 函数表达式\nreturn function () {\n    // do sth\n};\n\n// NFE(命名式函数表达式)\nvar add = function foo(a, b) {\n    // do sth\n};</code></pre><p><strong>函数声明和函数表达式区别：函数声明会前置</strong></p>\n<pre><code>var num = add(1, 2);\nconsole.log(num);\n\nfunction add(a, b) {\n    a = +a;\n    b = +b;\n    if (isNaN(a) || isNaN(b)) {\n        return;\n    }\n    return a + b;\n}\n\n// 结果为3\n\n\nvar num = add(1, 2);\nconsole.log(num);\n\nvar add = function (a, b) {\n    a = +a;\n    b = +b;\n    if (isNaN(a) || isNaN(b)) {\n        return;\n    }\n    return a + b;\n};\n\n// TypeError: add is not a function</code></pre><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>全局下的this</p>\n<pre><code>// 全局下的this(浏览器下)\nconsole.log(this.window === document);  // true\nconsole.log(this === window);  // true\nthis.a = 37;\nconsole.log(window.a);  // 37</code></pre><p>一般函数的this</p>\n<pre><code>// 一般函数的this（浏览器下）\nfunction f1() {\n    return this;\n}\nf1() === window;  // true\n\nfunction f2() {\n    &quot;use strict&quot;;  // 严格模式下\n    return this\n}\nf2() === undefined;  // true</code></pre><p>作为对象方法的函数的this</p>\n<pre><code>var o = {\n    prop: 37,\n    f: function() {\n        return this.prop;\n    }\n};\nconsole.log(o.f());  // 37\n\nvar o = {prop: 37};\nfunction  independent() {\n    return this.prop;\n}\no.f = independent;\nconsole.log(o.f());  // 37</code></pre><p>原型链上的this</p>\n<pre><code>var o = {\n    f: function() {\n        return this.a + this.b;\n    }\n};\nvar p = Object.create(o); // p为空对象，其原型会指向o\np.a = 1;\np.b = 4;\nconsole.log(p.f())  // 5</code></pre><p>构造器中的this</p>\n<pre><code>// 当new的函数构造器没有return返回值或者返回值不是对象时，new返回一个this指向构造器的prototype这样一个空对象\n// 如果return返回的是对象 new返回的这是这个对象\nfunction Myclass() {\n    this.a = 37;\n}\nvar o = new Myclass();\nconsole.log(o.a);  // 37\n\nfunction C2() {\n    this.a = 37;\n    return {a: 38};\n}\no = new C2();\nconsole.log(o.a);  // 38</code></pre><p>call和apply的this</p>\n<pre><code>function add(c, d) {\n    return this.a + this.b + c + d;\n}\nvar o = {a: 1, b: 2};\nadd.call(o, 5, 6);  // 1+3+5+7=16\nadd.apply(o, [10, 20]);  //1+3+10+20=34\n\nfunction bar() {\n    console.log(Object.prototype.toString.call(this));\n}\nbar.call(7); // [object Number]</code></pre><p>band和this</p>\n<pre><code>//bind是es5后，ie9+使用\nfunction f() {\n    return this.a;\n}\nvar g = f.bind({a: &apos;test&apos;});\nconsole.log(g());  // test\nvar o = {\n    a: 37,\n    f: f,\n    g: g\n};\nconsole.log(o.f(), o.g());  // 37, test</code></pre><p>函数arguments属性</p>\n<pre><code>function foo(x, y, z) {\n    arguments.length;  // 2 实际传入的参数数量\n    arguments[0];  // 1 传入第一个参数值\n    arguments[0] = 10;\n    x;  // 10 将第一个参数值修改为10， 严格模式下任然是1\n    arguments[2] = 100;\n    z; // undefined  由于第三个参数没有传入，不会绑定\n    arguments.callee  === foo;  // true   严格模式下不能使用\n}\n\nfoo(1, 2);\nfoo.length;  // 3   3个参数\nfoo.name;  // &quot;foo&quot; 函数名</code></pre><h3 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h3><pre><code>// apply和call方法（浏览器）\n// 第一个参数是作为this的对象，如果不是对象，会转换为对象\n// call传入的是扁平传入参数\n// apply第二个参数树数组\nfunction foo(x, y) {\n    console.log(x, y, this);\n}\n\nfoo.call(100, 1, 2);  // 1, 2, Number(100)\nfoo.apply(true, [3, 4]);  //3, 4, Boolean(true)\nfoo.apply(null);  // undefined, undefined, window\nfoo.apply(undefined);  // undefined, undefined, window</code></pre><h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>bind方法：改变this</p>\n<pre><code>// bind方法\nthis.x = 9;\nvar module = {\n    x: 81,\n    getX: function() {\n        return this.x;\n    }\n};\n\nmodule.getX();  // 81 this指向module\n\nvar getX = module.getX;\ngetX();  // 9 this指向全局变量\n\nvar boundGetX = getX.bind(module);\nboundGetX();  // 81  bind改变this指向</code></pre><p>bind方法：科里化</p>\n<pre><code>// bind方法\nfunction add(a, b, c) {\n    return a+b+c;\n}\n\nvar func = add.bind(undefined, 100);\nfunc(1, 2);  // 103  undefined传给this， 100传给第一个参数a\n\nvar func2 = func.bind(undefined, 200);\nfunc2(10);  // 310 undefined传给this，200传给b</code></pre><p>bind与new</p>\n<pre><code>// bind方法与new\nfunction foo() {\n    this.b = 100;\n    return this.a;\n}\n\nvar func = foo.bind({a: 1});\n\nfunc(); // 1  foo.bind后this指向{a: 1} return this.a = 1\nnew func();  // {b: 100} new调用将返回一个this，this会被初始化一个空对象，并且其原型是foo.prototype,空对象的b属性为100</code></pre><h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包基本概念</p>\n<pre><code>// 闭包\nvar n = 999;\nfunction f1() {\n    console.log(n);\n}\nf1();  // 999  函数内部可以访问全局变量\n\nfunction f1() {\n    var n = 999;\n}\nconsole.log(n);  // error  函数外部无法访问函数内部局部变量\n\nfunction f1() {\n    n = 999;\n}\nconsole.log(n); // 999 因为没有使用var语句，相当于定义一个全局变量\n\n\n// 简单的闭包原型\nfunction f1() {\n    var n = 999;\n    function f2() {\n        console.log(n);\n    }\n    return f2\n}\nvar result = f1();\nresult();  // 999</code></pre><p>闭包案例</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        #div1 {\n            background-color: rosybrown;\n        }\n        #div2 {\n            background-color: aquamarine;\n        }\n        #div3 {\n            background-color: yellowgreen;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;script&gt;\n    document.body.innerHTML = &apos;&lt;div id=&quot;div1&quot;&gt;aaa&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;bbb&lt;/div&gt;&lt;div id=&quot;div3&quot;&gt;ccc&lt;/div&gt;&apos;;\n    for(var i = 1; i &lt; 4; i++) {\n        alert(i);  // 结果为1，2，3\n        document.getElementById(&apos;div&apos; + i).\n                addEventListener(&apos;click&apos;, function() {\n            alert(i);  // 点击div1，div2，div3结果都是4,因为addEventListener的回调函数执行时i都为4\n        });\n    }\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><p>正确写法</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        #div1 {\n            background-color: rosybrown;\n        }\n        #div2 {\n            background-color: aquamarine;\n        }\n        #div3 {\n            background-color: yellowgreen;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;script&gt;\n    document.body.innerHTML = &apos;&lt;div id=&quot;div1&quot;&gt;aaa&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;bbb&lt;/div&gt;&lt;div id=&quot;div3&quot;&gt;ccc&lt;/div&gt;&apos;;\n    for(var i = 1; i &lt; 4; i++) {\n        !function(i) {\n            alert(i);  // 1,2,3\n            document.getElementById(&apos;div&apos; + i).\n               addEventListener(&apos;click&apos;, function() {\n                   alert(i);  // 1, 2,3 \n            });\n        }(i);\n    }\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><p>闭包中的封装</p>\n<pre><code>(function() {\n    var _userID = 23245;\n    var _typeID = &apos;item&apos;;\n    var exportID = {};\n\n    function converter(userID) {\n        return +userID;\n    }\n\n    exportID.getUserID = function() {\n        return converter(_userID);\n    };\n\n    exportID.getTypeID = function() {\n        return _typeID;\n    };\n    global.exportID = exportID;\n}());\n\nconsole.log(exportID.getUserID());  //23245\nconsole.log(exportID._userID);  // undefined</code></pre><h3 id=\"三种作用域\"><a href=\"#三种作用域\" class=\"headerlink\" title=\"三种作用域\"></a>三种作用域</h3><pre><code>// 作用域： 全局作用域，函数作用域，eval作用域\nvar a = 10;\n(function() {\n    var b = 20;\n})();\nconsole.log(a);  // 10\nconsole.log(b);  // error\n\nfor(var item in {a: 1, b: 2}) {\n    console.log(item);  // a, b\n}\nconsole.log(item); // b</code></pre><h3 id=\"ES3中的执行上下文\"><a href=\"#ES3中的执行上下文\" class=\"headerlink\" title=\"ES3中的执行上下文\"></a>ES3中的执行上下文</h3><p>EC = Execution Context 执行上下文<br>变量对象（Variable Object 简写VO）是一个抽象概念，用于存储执行上下文中的变量，函数声明，函数参数</p>\n<pre><code>var a = 10;\nfunction test(x) {\n    var b = 20;\n}\ntest(30);</code></pre><p>对应的上下文</p>\n<pre><code>// 整个js环境中的VO\nVO(globalContext) = {\n    a: 10,\n    test: &lt;ref to function&gt;\n};\n// 执行test(30)的VO\nVO(test functionContext) = {\n    x: 30,\n    b: 20\n};</code></pre><p>全局执行上下文</p>\n<pre><code>VO(globalContext) === [[global]]\n[[global]] = {\n    Math : &lt;...&gt;,\n    String : &lt;...&gt;,\n    isNaN: function() {[Native Code]},\n    ...\n    ...\n    window: global\n};\n\nString(10);  //[[global]].String(10)\nwindow.a = 10;  // [[global]].window.a = 10\nthis.b = 20;  // [[global]].b = 20</code></pre><p>变量初始化阶段</p>\n<pre><code>// 1, 函数参数（若没有传入，则其值为undefined）\n// 2, 函数声明（若函数声明和函数参数冲突，则函数声明会覆盖掉函数参数）\n// 3，变量声明（初始化变量值为undefined，若何函数参数，函数声明冲突，会被忽略掉）\nfunction test(a, b) {\n    var c = 10;\n    function d() {}\n    var e = function _e() {};\n    (function x() {});\n    b = 20;\n}\ntest(10);\n\n\nAO(test) = {\n    a: 10,\n    b: undefined,\n    c: undefined,\n    d: &lt;ref to func &apos;d&apos;&gt;,\n    e: undefined,\n};</code></pre><p>变量初始化案例1</p>\n<pre><code>function foo(x, y, z) {\n    function x() {}\n    console.log(x);\n}\n\nfoo(100);  // [Function: x]\n//\nAO(foo) = {\n    //x: 100,\n    y: undefined,\n    z: undefined,\n    x: &lt;ref to func &apos;x&apos;&gt;,  // 函数声明x会覆盖掉参数声明 \n}</code></pre><p>变量初始化案例2</p>\n<pre><code>function foo(x, y, z) {\n    function func() {}\n    var func;\n    console.log(func);\n}\nfoo(100);  // [Function: func]\n\nfunction foo(x, y, z) {\n    function func() {}\n    var func = 1;\n    console.log(func);\n}\nfoo(100);  // 1  执行阶段会执行func = 1 这个语句</code></pre><p>代码执行阶段</p>\n<pre><code>function test(a, b) {\n    var c = 10;\n    function d() {}\n    var e = function _e() {};\n    (function x() {})();\n    b = 20;\n}\n\n// 初始化阶段\nAO(test) = {\n    a: 10,\n    b: undefined,\n    c: undefined,\n    d: &lt;ref to func &apos;d&apos;&gt;,\n    e: undefined\n};\n// 代码执行阶段\nAO(test) = {\n    a: 10,\n    b: 20,\n    c: 10,\n    d: &lt;reference to FunctionDeclaration &apos;d&apos;&gt;,\n    e: function _e()\n};</code></pre><p>全局执行上下文案例</p>\n<pre><code>console.log(x);  // [Function: x]\nvar x = 10;  // 初始化阶段x: 冲突，被忽略\nconsole.log(x);  // 10\nx = 20;\nfunction x() {}  // 初始化阶段x: &lt;ref to func &apos;x&apos;&gt;\nconsole.log(x);  // 20\nif (true) {\n    var a = 1;  // 初始化阶段a: undefined\n} else {\n    var b = true;  // 初始化阶段b: undefined\n}\n\nconsole.log(a);  // 1\nconsole.log(b);  // undefined</code></pre><h3 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h3><p>prototype是函数对象上的预设的对象属性<br>原型是对象上的原型，通常都是构造器的prototype属性<br>实例</p>\n<pre><code>function Abc() {\n    this.y = 2;\n    var z = 3;\n}\nconsole.log(Abc);  // [Function: Abc]\nconsole.log(Abc.prototype);  // Abc {}\nconsole.log(typeof Abc.prototype);  // object\n\nAbc.prototype.x = 1;\nconsole.log(Abc.prototype);  // Abc { x: 1 }\n\nvar obj1 = new Abc();\nconsole.log(obj1.__proto__);  // Abc { x: 1 }\nconsole.log(obj1.__proto__ === Abc.prototype);  // true  new构造器创建的对象的原型是构造器的prototype属性\nconsole.log(obj1);  // Abc { y: 2 }\nconsole.log(obj1.y);  // 2\nconsole.log(obj1.x);  // 1</code></pre><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>实现继承的方法</p>\n<pre><code>// 实现继承的方法\nfunction Person() {\n}\n\nfunction Student() {\n}\n\nStudent.prototype = Person.prototype;  // 错误，会影响被继承类的方法\nStudent.prototype = new Person();  // 错误，传参问题，因为Student是类，并不是实例\n\n// 正确的方法\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n// Object.create()是es5的方法，下面是fix方法\nif(!Object.create) {\n    Object.create = function(proto) {\n        function F() {}\n        F.prototype = proto;\n        return new F;\n    };\n}</code></pre><p>原型的继承方法</p>\n<pre><code>function Person(name, age) {\n    this.name = name;\n    this.age = age;\n    this.sayNo = function() {\n        console.log(this.name + &apos; say no&apos;);\n    }\n}\n\nPerson.prototype.hi = function() {\n    console.log(&apos;Hi, my name is &apos; + this.name + &apos;,I\\&apos;m &apos; + this.age + &apos; years old now&apos;);\n};\nPerson.prototype.LEGS_NUM = 2;\nPerson.prototype.ARMS_NUM = 2;\nPerson.prototype.walk = function() {\n    console.log(this.name + &apos; is walking...&apos;);\n};\n\nconsole.log(Person);  // [Function: Person]\nconsole.log(Person.prototype);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\nvar Jack = new Person();  // Person构造器没有return对象，所以返回的是this\nJack.sayNo();  // undefined say no\nJack.hi();  // Hi, my name is undefined,I&apos;m undefined years old now\nJack.walk();  // undefined is walking...\nconsole.log(Jack);  // Person { name: undefined, age: undefined, sayNo: [Function] }\nconsole.log(Jack.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\n\n// 以下5行代码是js中对象继承的写法\nfunction Student(name, age, className) {\n    Person.call(this, name, age);  // 使用call方法调用父构造器函数\n    this.className = className;\n}\nStudent.prototype = Object.create(Person.prototype);   // 这个如果直接使用Student.prototype = Person.prototype，改变Student对象方法会改变Person对象的方法，因为他们指向的是同一个对象\nStudent.prototype.constructor = Student;\n\nStudent.prototype.hi = function() {\n    console.log(&apos;Hi, my name is &apos; + this.name + &apos;, I\\&apos;m&apos; + this.age + &apos; years old now, and from &apos; + this.className + &apos;.&apos;);\n};\nStudent.prototype.learn = function(subject) {\n    console.log(this.name + &apos; is learning &apos; + subject + &apos; at &apos; + this.className + &apos;.&apos;);\n};\n\nvar Lussi = new Student(&apos;Lussi&apos;, 27, &apos;Class Tree&apos;);\nLussi.sayNo();  // Lussi say no\nLussi.hi();  // Hi, my name is Lussi, I&apos;m27 years old now, and from Class Tree.\nLussi.walk();  // Lussi is walking...\nLussi.learn(&apos;math&apos;);  // Lussi is learning math at Class Tree.\nconsole.log(Lussi);  // Student {name: &apos;Lussi&apos;, age: 27, sayNo: [Function], className: &apos;Class Tree&apos; }\nconsole.log(Lussi.__proto__);  // Student {constructor: [Function: Student], hi: [Function], learn: [Function] }\nconsole.log(Lussi.__proto__.__proto__);  // Person { hi: [Function], LEGS_NUM: 2, ARMS_NUM: 2, walk: [Function] }\nconsole.log(Lussi.__proto__.__proto__.__proto__);  // {}\nconsole.log(Lussi.__proto__.__proto__.__proto__.__proto__);  // null  \n// 改变prototype\nStudent.prototype.x = 101;  // 会影响已经创建实例的属性\nconsole.log(Jack.x);  // undefined\nconsole.log(Lussi.x);  // 101\n\nStudent.prototype = {y: 2};  // 不会影响已经创建实例的属性，但会影响新创建的实例，并且重新修改prototype.y属性也不会改变\nconsole.log(Jack.y); // undefined\nconsole.log(Lussi.y);  // undefined\nvar Lilei = new Student(&apos;Lilei&apos;, 24, &apos;Class three&apos;);\nconsole.log(Lilei.x);  // undefined\nconsole.log(Lilei.y);  // 2\nStudent.prototype.y = 100;\nconsole.log(Lilei.y);  // 100\nconsole.log(Lussi.y);  // undefined\nStudent.prototype.z = 30;\nconsole.log(Lilei.z);  // 30\nconsole.log(Lussi.z);  // undefined\nPerson.prototype.z = 40;\nconsole.log(Lilei.z);  // 30\nconsole.log(Lussi.z);  // 40\nconsole.log(Jack.z);  // 40</code></pre><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><pre><code>// instanceof  左边是对象（如果不是，直接返回false），右边是构造器（如果不是，直接报错），判断构造器的prototype属性是否在对象的原型链上\nconsole.log([1, 2] instanceof Array);  // true\nconsole.log(1 instanceof Array);  // false\nconsole.log(Array.prototype);  // []\nconsole.log(new Object() instanceof Array);  //false\nconsole.log(Object.prototype);  // {}\nconsole.log(new Object() instanceof Object);  // true\nconsole.log(new Array() instanceof Object);  // true</code></pre><h3 id=\"模拟重载\"><a href=\"#模拟重载\" class=\"headerlink\" title=\"模拟重载\"></a>模拟重载</h3><pre><code>function Person() {\n    var args = arguments;\n    // 判断第一个传入的是不是对象，因为args[null]也返回object，所有需要判断是否为null\n    if(typeof args[0] === &apos;object&apos; &amp;&amp; args[0]) {\n        if(args[0].name) {\n            this.name = args[0].name;\n        }\n        if(args[0].age) {\n            this.age = args[0].age;\n        }\n    } else {\n        if(args[0]) {\n            this.name = args[0];\n        }\n        if(args[1]) {\n            this.age = args[1];\n        }\n    }\n}\nPerson.prototype.toString = function() {\n    console.log(&apos;name=&apos; + this.name + &apos;, age=&apos; + this.age);\n};\n\nvar LiLei = new Person(&apos;LiLei&apos;, 23);\nvar Hanmm = new Person({name: &apos;Hanmm&apos;, age: 21});\nLiLei.toString();  // name=LiLei, age=23\nHanmm.toString();  // name=Hanmm, age=21</code></pre><h3 id=\"调用子类方法\"><a href=\"#调用子类方法\" class=\"headerlink\" title=\"调用子类方法\"></a>调用子类方法</h3><pre><code>function Person(name) {\n    this.name = name;\n}\nfunction Student(name, className) {\n    this.className = className;\n    Person.call(this, name);\n}\n\nPerson.prototype.init = function() {\n    console.log(&apos;Person.init&apos;);\n};\nStudent.prototype.init = function() {\n    console.log(&apos;Student.init&apos;);\n    Person.prototype.init.apply(this, arguments);\n};\nvar LiLei = new Student(&apos;LiLei&apos;, &apos;Class four&apos;);\nconsole.log(LiLei);  // Student { className: &apos;Class four&apos;, name: &apos;LiLei&apos; }\nLiLei.init();  // Student.init  Person.init</code></pre><h3 id=\"实现链式调用\"><a href=\"#实现链式调用\" class=\"headerlink\" title=\"实现链式调用\"></a>实现链式调用</h3><pre><code>function ClassManager() {\n    console.log(&apos;ClassManager&apos;);\n    this.name = &apos;ClassName&apos;;\n}\nClassManager.prototype.addClass = function(str) {\n    console.log(&apos;class: &apos;  + str + &apos; added.&apos;);\n    console.log(this);\n    return this;  // this始终指向ClassManger类的实例\n};\n\nvar manager = new ClassManager();\nmanager.addClass(&apos;A&apos;).addClass(&apos;B&apos;).addClass(&apos;C&apos;);  //class: A added. ClassManager { name: &apos;ClassName&apos; } class: B added. ClassManager { name: &apos;ClassName&apos; } class: C added. ClassManager { name: &apos;ClassName&apos; }</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyfgqwrd0000h3a4ozmse8bi","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqwrp000ch3a4v397az3u"},{"post_id":"cjyfgqwrh0002h3a4eltvpmaj","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwrv000jh3a4a4vfyad9"},{"post_id":"cjyfgqwrn000bh3a41wxm6hy2","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwrw000mh3a471nka5n2"},{"post_id":"cjyfgqwrk0005h3a4piwad3gl","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqwrx000ph3a4h8ewnigt"},{"post_id":"cjyfgqwru000hh3a4wvkck5e1","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwry000rh3a4wpcqgoti"},{"post_id":"cjyfgqwrw000kh3a492rxuorm","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwrz000vh3a410g0vmqf"},{"post_id":"cjyfgqwrk0006h3a4did7whlz","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqws0000zh3a4f8dy6hsi"},{"post_id":"cjyfgqwrx000nh3a4x6v3lvjw","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqws10012h3a4eh4gjerk"},{"post_id":"cjyfgqwrl0007h3a4bd45um26","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqws20016h3a40se6heg0"},{"post_id":"cjyfgqwry000th3a4kxx83kq9","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqws3001ah3a4hapndt2m"},{"post_id":"cjyfgqwrz000xh3a4qcuq3bbj","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqws4001eh3a4c4mlqvhx"},{"post_id":"cjyfgqwrn000ah3a415fp9vwi","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqws5001ih3a4lnty0p96"},{"post_id":"cjyfgqwrr000eh3a4or4onwun","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqws6001mh3a40zbrjujl"},{"post_id":"cjyfgqws20018h3a4phuklaju","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqws7001qh3a42tehvbdo"},{"post_id":"cjyfgqws3001dh3a4xilng9s2","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqws9001uh3a476mg4qlg"},{"post_id":"cjyfgqwrx000qh3a4a40m123c","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsa001yh3a4ri7bhhcn"},{"post_id":"cjyfgqws4001gh3a4ca2q1e6j","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsb0022h3a4ii6vra7q"},{"post_id":"cjyfgqws5001lh3a4g12jk7wh","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsc0024h3a4fm0x1u2u"},{"post_id":"cjyfgqws6001oh3a4h5jn7bpb","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsd0027h3a4bz4glmxy"},{"post_id":"cjyfgqws00011h3a43suu6n66","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwsd0029h3a4yyj951x8"},{"post_id":"cjyfgqws00011h3a43suu6n66","category_id":"cjyfgqws5001kh3a4zpr0qttv","_id":"cjyfgqwse002ch3a4732ww4bl"},{"post_id":"cjyfgqws9001wh3a4zfny4hon","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsf002fh3a4s9crurqy"},{"post_id":"cjyfgqws10015h3a4n9qmwfnu","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsg002jh3a4qq7xlvow"},{"post_id":"cjyfgqws10015h3a4n9qmwfnu","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwsh002mh3a4h1ajj2f2"},{"post_id":"cjyfgqwsa001zh3a4226zld1z","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsi002oh3a4uex9wvp6"},{"post_id":"cjyfgqwsb0023h3a4dif5yf1n","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsi002rh3a4hm3kxa84"},{"post_id":"cjyfgqws8001sh3a4mlpfrl89","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsj002th3a4dkyjhsr6"},{"post_id":"cjyfgqws8001sh3a4mlpfrl89","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwsk002vh3a42h2j70em"},{"post_id":"cjyfgqwsc0026h3a4xa08pgc0","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsl002xh3a4cys2m9ol"},{"post_id":"cjyfgqwsc0026h3a4xa08pgc0","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwsl002zh3a4vdjzhnvq"},{"post_id":"cjyfgqwsd0028h3a48986jgz3","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsm0031h3a4rtsidsp1"},{"post_id":"cjyfgqwse002bh3a475snpwuo","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqwsn0034h3a4px6n3911"},{"post_id":"cjyfgqwsf002eh3a4qdqeh01u","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwso0037h3a43koud8ob"},{"post_id":"cjyfgqwsf002hh3a4724ailfk","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwso003ah3a4r9rn6sni"},{"post_id":"cjyfgqwsg002lh3a4rcaxn6mw","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsp003ch3a4lpimr8yy"},{"post_id":"cjyfgqwsh002nh3a493s0ts5d","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsq003fh3a4t3t6sco9"},{"post_id":"cjyfgqwsh002nh3a493s0ts5d","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwsq003ih3a48mghcq22"},{"post_id":"cjyfgqwsi002qh3a4l77z7ciq","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqwsr003kh3a4mjqo9k29"},{"post_id":"cjyfgqwsj002sh3a45y2wu8xs","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwsr003mh3a40dbyk1my"},{"post_id":"cjyfgqwsj002uh3a46xuhkv83","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsr003ph3a4r8jk0pmj"},{"post_id":"cjyfgqwsk002wh3a4n184qyes","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsr003qh3a42oxdhnex"},{"post_id":"cjyfgqwsl002yh3a4wt6rk5ps","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqwsr003rh3a45wesf33n"},{"post_id":"cjyfgqwsl0030h3a4u03jexq9","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwsr003sh3a4cwhz3y4v"},{"post_id":"cjyfgqwsm0033h3a4j1c2g542","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwss003th3a4lsa6wrco"},{"post_id":"cjyfgqwsm0033h3a4j1c2g542","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwss003uh3a4q3aixl24"},{"post_id":"cjyfgqwsn0036h3a4r3asla7w","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwss003vh3a47r23con3"},{"post_id":"cjyfgqwsn0036h3a4r3asla7w","category_id":"cjyfgqws5001kh3a4zpr0qttv","_id":"cjyfgqwss003wh3a43cbjj780"},{"post_id":"cjyfgqwso0038h3a4pkwkaz52","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwss003xh3a4wyqarcr5"},{"post_id":"cjyfgqwsp003bh3a4yf41f4lr","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwss003yh3a4knfxptuz"},{"post_id":"cjyfgqwsp003bh3a4yf41f4lr","category_id":"cjyfgqwsq003gh3a4049sno4b","_id":"cjyfgqwss003zh3a47xr1fsxb"},{"post_id":"cjyfgqwsp003bh3a4yf41f4lr","category_id":"cjyfgqwsr003oh3a450hjh782","_id":"cjyfgqwss0040h3a4uob3xwbx"},{"post_id":"cjyfgqwt00041h3a4ank1fbe3","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwt40047h3a4n6na9g8v"},{"post_id":"cjyfgqwt00041h3a4ank1fbe3","category_id":"cjyfgqws5001kh3a4zpr0qttv","_id":"cjyfgqwt4004ah3a4kb6nacm7"},{"post_id":"cjyfgqwt10042h3a42cxz3h03","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwt5004dh3a41fsqef2j"},{"post_id":"cjyfgqwt20044h3a4hb0ogrsb","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwt6004gh3a4gvirhfa3"},{"post_id":"cjyfgqwt30046h3a4wrusypfk","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwt7004jh3a4fg76i95m"},{"post_id":"cjyfgqwt40049h3a4suwgquny","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwt7004lh3a46l2ximhd"},{"post_id":"cjyfgqwt5004ch3a4e6unh94h","category_id":"cjyfgqwrx000oh3a497jks9z7","_id":"cjyfgqwt7004nh3a4mhlep35h"},{"post_id":"cjyfgqwt5004ch3a4e6unh94h","category_id":"cjyfgqws5001kh3a4zpr0qttv","_id":"cjyfgqwt8004oh3a4z39h9l6u"},{"post_id":"cjyfgqwt5004fh3a4c2qj8hcg","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwt8004ph3a4et1e8rwl"},{"post_id":"cjyfgqwt5004fh3a4c2qj8hcg","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwt8004qh3a45x4ynmd8"},{"post_id":"cjyfgqwt6004ih3a4y8uu6g0i","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwt8004rh3a42cihvpor"},{"post_id":"cjyfgqwt6004ih3a4y8uu6g0i","category_id":"cjyfgqws9001th3a482a15rgj","_id":"cjyfgqwt8004sh3a4gkxo3vk4"},{"post_id":"cjyfgqwt9004th3a4ng5as3ao","category_id":"cjyfgqwrm0008h3a4y0atr5l7","_id":"cjyfgqwt9004vh3a4c3vbu4nk"},{"post_id":"cjyfgqwtm004wh3a4ikma5dj6","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwtn004yh3a4fapkrs9o"},{"post_id":"cjyfgqwtn004zh3a4rvr09t1u","category_id":"cjyfgqwrz000wh3a41scmpsjn","_id":"cjyfgqwtp0051h3a4a3uuit9c"},{"post_id":"cjyfgqwtp0052h3a4f26wgvmw","category_id":"cjyfgqwrj0004h3a4rh5m3tj9","_id":"cjyfgqwtr0054h3a4ecnrznrt"}],"PostTag":[{"post_id":"cjyfgqwrk0006h3a4did7whlz","tag_id":"cjyfgqwrm0009h3a4hi3blc35","_id":"cjyfgqwru000gh3a41pnheq3k"},{"post_id":"cjyfgqwrn000ah3a415fp9vwi","tag_id":"cjyfgqwru000fh3a40njwcbrq","_id":"cjyfgqwrz000uh3a45ksbquhk"},{"post_id":"cjyfgqwrn000ah3a415fp9vwi","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqws0000yh3a4ciyrr99e"},{"post_id":"cjyfgqwrr000eh3a4or4onwun","tag_id":"cjyfgqwry000sh3a427an6zz7","_id":"cjyfgqws10013h3a44h15ktui"},{"post_id":"cjyfgqwrz000xh3a4qcuq3bbj","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqws20017h3a4xgjgze7z"},{"post_id":"cjyfgqws00011h3a43suu6n66","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqws3001bh3a4njd42op4"},{"post_id":"cjyfgqwru000hh3a4wvkck5e1","tag_id":"cjyfgqws00010h3a4xmxptq50","_id":"cjyfgqws4001fh3a4qnoiswle"},{"post_id":"cjyfgqws20018h3a4phuklaju","tag_id":"cjyfgqwry000sh3a427an6zz7","_id":"cjyfgqws5001jh3a461w2b2ed"},{"post_id":"cjyfgqwrx000nh3a4x6v3lvjw","tag_id":"cjyfgqws00010h3a4xmxptq50","_id":"cjyfgqws6001nh3a4a0aacdp5"},{"post_id":"cjyfgqws5001lh3a4g12jk7wh","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqws7001rh3a4smwq5prl"},{"post_id":"cjyfgqwrx000qh3a4a40m123c","tag_id":"cjyfgqws4001hh3a4ee8fsebw","_id":"cjyfgqws9001vh3a4c2k99mtu"},{"post_id":"cjyfgqwry000th3a4kxx83kq9","tag_id":"cjyfgqws4001hh3a4ee8fsebw","_id":"cjyfgqwsb0020h3a4ulm7ibig"},{"post_id":"cjyfgqws10015h3a4n9qmwfnu","tag_id":"cjyfgqwsa001xh3a48iw4ptpr","_id":"cjyfgqwse002dh3a4285sbj1a"},{"post_id":"cjyfgqws10015h3a4n9qmwfnu","tag_id":"cjyfgqwsc0025h3a4yb0vqcqf","_id":"cjyfgqwsf002gh3a4d8z73tjs"},{"post_id":"cjyfgqws3001dh3a4xilng9s2","tag_id":"cjyfgqwse002ah3a42192qpl4","_id":"cjyfgqwsg002kh3a4x45ppq2g"},{"post_id":"cjyfgqws4001gh3a4ca2q1e6j","tag_id":"cjyfgqws4001hh3a4ee8fsebw","_id":"cjyfgqwsi002ph3a48c7jzoba"},{"post_id":"cjyfgqwsl0030h3a4u03jexq9","tag_id":"cjyfgqwse002ah3a42192qpl4","_id":"cjyfgqwsn0035h3a4a9k0gbfh"},{"post_id":"cjyfgqwso0038h3a4pkwkaz52","tag_id":"cjyfgqwse002ah3a42192qpl4","_id":"cjyfgqwsp003dh3a47oz9ryru"},{"post_id":"cjyfgqwsl002yh3a4wt6rk5ps","tag_id":"cjyfgqwsm0032h3a4rvbghxd6","_id":"cjyfgqwsq003hh3a4du86gtb6"},{"post_id":"cjyfgqwsl002yh3a4wt6rk5ps","tag_id":"cjyfgqwso0039h3a41kuh5b24","_id":"cjyfgqwsq003jh3a46x3fu21a"},{"post_id":"cjyfgqwsl002yh3a4wt6rk5ps","tag_id":"cjyfgqwrm0009h3a4hi3blc35","_id":"cjyfgqwsr003lh3a4y0nc3y5k"},{"post_id":"cjyfgqwsm0033h3a4j1c2g542","tag_id":"cjyfgqwsp003eh3a4smd8msb3","_id":"cjyfgqwsr003nh3a42eyhea6h"},{"post_id":"cjyfgqwt10042h3a42cxz3h03","tag_id":"cjyfgqwse002ah3a42192qpl4","_id":"cjyfgqwt30045h3a4epzha3pl"},{"post_id":"cjyfgqwt20044h3a4hb0ogrsb","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqwt40048h3a4ds8ywnr4"},{"post_id":"cjyfgqwt30046h3a4wrusypfk","tag_id":"cjyfgqwt20043h3a4u1snayy2","_id":"cjyfgqwt5004bh3a4tjr87zu4"},{"post_id":"cjyfgqwt00041h3a4ank1fbe3","tag_id":"cjyfgqwrm0009h3a4hi3blc35","_id":"cjyfgqwt5004eh3a4uvqh8vsq"},{"post_id":"cjyfgqwt00041h3a4ank1fbe3","tag_id":"cjyfgqwt20043h3a4u1snayy2","_id":"cjyfgqwt6004hh3a4kizmouna"},{"post_id":"cjyfgqwt40049h3a4suwgquny","tag_id":"cjyfgqwse002ah3a42192qpl4","_id":"cjyfgqwt7004kh3a4xjptyc00"},{"post_id":"cjyfgqwt5004ch3a4e6unh94h","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqwt7004mh3a4kd5urg3k"},{"post_id":"cjyfgqwt9004th3a4ng5as3ao","tag_id":"cjyfgqwrm0009h3a4hi3blc35","_id":"cjyfgqwt9004uh3a4rms7xnp3"},{"post_id":"cjyfgqwtm004wh3a4ikma5dj6","tag_id":"cjyfgqwrw000lh3a4jdt814ds","_id":"cjyfgqwtn004xh3a4ze2q2jja"},{"post_id":"cjyfgqwtn004zh3a4rvr09t1u","tag_id":"cjyfgqws4001hh3a4ee8fsebw","_id":"cjyfgqwto0050h3a43xgqsphy"},{"post_id":"cjyfgqwtp0052h3a4f26wgvmw","tag_id":"cjyfgqwtq0053h3a4jae6msl2","_id":"cjyfgqwtr0055h3a4qds5vgno"}],"Tag":[{"name":"linux","_id":"cjyfgqwrm0009h3a4hi3blc35"},{"name":"django","_id":"cjyfgqwru000fh3a40njwcbrq"},{"name":"python","_id":"cjyfgqwrw000lh3a4jdt814ds"},{"name":"IDE","_id":"cjyfgqwry000sh3a427an6zz7"},{"name":"mysql","_id":"cjyfgqws00010h3a4xmxptq50"},{"name":"php","_id":"cjyfgqws4001hh3a4ee8fsebw"},{"name":"redis","_id":"cjyfgqwsa001xh3a48iw4ptpr"},{"name":"数据库","_id":"cjyfgqwsc0025h3a4yb0vqcqf"},{"name":"windows","_id":"cjyfgqwse002ah3a42192qpl4"},{"name":"bash","_id":"cjyfgqwsm0032h3a4rvbghxd6"},{"name":"git","_id":"cjyfgqwso0039h3a41kuh5b24"},{"name":"微信","_id":"cjyfgqwsp003eh3a4smd8msb3"},{"name":"ubuntu","_id":"cjyfgqwt20043h3a4u1snayy2"},{"name":"javascript","_id":"cjyfgqwtq0053h3a4jae6msl2"}]}}